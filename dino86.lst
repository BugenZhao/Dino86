     1                                  ;
     2                                  ; Created by Bugen Zhao on 2020/4/1.
     3                                  ;
     4                                  
     5                                          cpu 8086
     6                                          org 0x7c00
     7 00000000 E93A01                          jmp init
     8                                  
     9 00000003 44696E6F3836206279-     TITLE:  db "Dino86 by Bugen"
     9 0000000C 20427567656E       
    10 00000012 47414D45204F564552      DEAD:   db "GAME OVER"
    11 0000001B 141211110F0F0E0F0F-     height: db 20, 18, 17, 17, 15, 15, 14, 15, 15, 17, 17, 18, 20
    11 00000024 11111214           
    12                                  
    13                                  VRAM:   equ 0xb800
    14                                  cd:     equ 0x0fa2
    15                                  score:  equ 0x0fa4
    16                                  jstate: equ 0x0fa6
    17                                  
    18                                  drawdino:                       ; Draw dino if ax=1, clear if ax=0
    19 00000028 50                              push ax                 ; Save arg
    20 00000029 BB[1B00]                        mov bx, height
    21 0000002C 8B3EA60F                        mov di, [jstate]
    22 00000030 2E8A01                          mov al, [cs:bx+di]      ; Get height by jstate
    23 00000033 B400                            mov ah, 0
    24 00000035 BBA000                          mov bx, 0xa0
    25 00000038 F7E3                            mul bx
    26 0000003A 83C00A                          add ax, 10
    27 0000003D 89C7                            mov di, ax              ; Get new dino pos
    28 0000003F 58                              pop ax                  ; Restore arg
    29 00000040 85C0                            test ax, ax
    30 00000042 741A                            jz .clear
    31                                   .draw:
    32 00000044 8B85A000                        mov ax, [di+0xa0]       ; What are under our dino's feet? Save it!
    33 00000048 C705DB0F                        mov word [di], 0x0fdb
    34 0000004C C745FE5C0F                      mov word [di-0x2], 0x0f00|'\'
    35 00000051 C78562FFDC0F                    mov word [di-0xa0+2], 0x0f00|0xdc
    36 00000057 C785A000BA0F                    mov word [di+0xa0], 0x0f00|0xba
    37 0000005D C3                              ret
    38                                   .clear:
    39 0000005E B82007                          mov ax, 0x0700|' '
    40 00000061 8905                            mov word [di], ax
    41 00000063 8945FE                          mov word [di-0x2], ax
    42 00000066 898562FF                        mov word [di-0xa0+2], ax
    43 0000006A 8985A000                        mov word [di+0xa0], ax
    44 0000006E C3                              ret
    45                                  
    46                                  
    47                                  dispscore:
    48 0000006F FF06A40F                        inc word [score]
    49 00000073 A1A40F                          mov ax, [score]         ; Store score in ax
    50 00000076 BF3C01                          mov di, 0xa0*2-4        ; Where to show: row 2, col -2
    51 00000079 FD                              std                     ; Set dflag
    52                                   .sloop:
    53 0000007A BA0000                          mov dx, 0
    54 0000007D B90A00                          mov cx, 10
    55 00000080 F7F1                            div cx                  ; q in ax, r in dx
    56 00000082 50                              push ax                 ; Save quotient
    57 00000083 89D0                            mov ax, dx
    58 00000085 053007                          add ax, 0x0700|'0'
    59 00000088 AB                              stosw                   ; Show and dec di by 2
    60 00000089 58                              pop ax
    61 0000008A 83F800                          cmp ax, 0
    62 0000008D 7402                            je .return
    63 0000008F EBE9                            jmp .sloop
    64                                   .return:
    65 00000091 FC                              cld                     ; Clear dflag
    66 00000092 C3                              ret
    67                                  
    68                                  
    69                                  tick:
    70 00000093 50                              push ax
    71 00000094 53                              push bx
    72 00000095 51                              push cx
    73 00000096 52                              push dx
    74 00000097 B400                            mov ah, 0x0             ; Read clock tick into dx:bx
    75 00000099 CD1A                            int 0x1a
    76                                   .again:
    77 0000009B 52                              push dx                 ; Save dx
    78 0000009C B400                            mov ah, 0x0             ; Read again
    79 0000009E CD1A                            int 0x1a
    80 000000A0 5B                              pop bx
    81 000000A1 39D3                            cmp bx, dx              ; Changed?
    82 000000A3 74F6                            je .again               ; Nope, tick again
    83 000000A5 5A                              pop dx
    84 000000A6 59                              pop cx
    85 000000A7 5B                              pop bx
    86 000000A8 58                              pop ax
    87 000000A9 C3                              ret
    88                                  
    89                                  
    90                                  scroll:
    91 000000AA BF4001                          mov di, 0xa0*2          ; Row 3, col 1
    92 000000AD BE4201                          mov si, 0xa0*2+2        ; Row 3, col 2
    93                                   .scrrow:
    94 000000B0 B94F00                          mov cx, 79
    95 000000B3 F3A5                            repz movsw              ; Loop: mov words from ds:si to es:di
    96 000000B5 81FFC00D                        cmp di, 0xa0*22
    97 000000B9 B8200F                          mov ax, 0x0f00|' '      ; Prepare to clear col 80
    98 000000BC 7C03                            jl .fillblank
    99                                   .fillblock:
   100 000000BE B8DB07                          mov ax, 0x0700|0xdb     ; Prepare to fill a block
   101                                   .fillblank:   
   102 000000C1 AB                              stosw                   ; Fill blank or block, add di by 2
   103 000000C2 83C602                          add si, 0x2             
   104 000000C5 81FEA20F                        cmp si, 0xa0*25+2       ; All 25 rows scrolled?
   105 000000C9 75E5                            jnz .scrrow
   106                                   .testcactus:
   107 000000CB A1A20F                          mov ax, [cd]
   108 000000CE FF0EA20F                        dec word [cd]           ; CD--
   109 000000D2 83F800                          cmp ax, 0
   110 000000D5 7D65                            jge .scrret             ; CD >= 0 -> Cactus is too close!
   111 000000D7 E440                            in al, 0x40
   112 000000D9 83E007                          and ax, 0x0007          ; Generate a random 'MODE' in [0,7]
   113 000000DC 3C04                            cmp al, 0x4
   114 000000DE 7C5C                            jl .scrret              ; 0,1,2,3 -> Do not draw
   115 000000E0 BFB80D                          mov di, 0xa0*22-8
   116 000000E3 3C06                            cmp al, 0x6
   117 000000E5 B8DB02                          mov ax, 0x0200|0xdb     ; Cache block char
   118 000000E8 7C1A                            jl .drawcactusB         ; 4,5 -> MODE B
   119                                                                  ; 6,7 -> MODE A
   120                                   .drawcactusA:                  ; MODE A
   121 000000EA 8905                            mov word [di], ax
   122 000000EC 81EFA000                        sub di, 0xa0
   123 000000F0 8905                            mov word [di], ax
   124 000000F2 C745FED402                      mov word [di-0x2], 0x0200|0xd4
   125 000000F7 C74502BE02                      mov word [di+0x2], 0x0200|0xbe
   126 000000FC 81EFA000                        sub di, 0xa0
   127 00000100 8905                            mov word [di], ax
   128 00000102 EB1A                            jmp .addcd
   129                                   .drawcactusB:                  ; MODE B
   130 00000104 8905                            mov word [di], ax
   131 00000106 894502                          mov word [di+0x2], ax
   132 00000109 C745FEC802                      mov word [di-0x2], 0x0200|0xc8
   133 0000010E 81EFA000                        sub di, 0xa0
   134 00000112 8905                            mov word [di], ax
   135 00000114 894502                          mov word [di+0x2], ax
   136 00000117 C74504BC02                      mov word [di+0x4], 0x0200|0xbc
   137 0000011C EB00                            jmp .addcd
   138                                   .addcd:
   139 0000011E E440                            in al, 0x40
   140 00000120 83E00F                          and ax, 0x000f
   141 00000123 8B1EA40F                        mov bx, [score]
   142 00000127 81FBE803                        cmp bx, 1000
   143 0000012B 7F0A                            jg .veryhard
   144 0000012D 81FBF401                        cmp bx, 500
   145 00000131 7F02                            jg .hard
   146 00000133 0408                            add al, 0x8
   147                                   .hard:
   148 00000135 0404                            add al, 0x4
   149                                   .veryhard:
   150 00000137 0404                            add al, 0x4
   151 00000139 A3A20F                          mov [cd], ax
   152                                   .scrret:
   153 0000013C C3                              ret
   154                                  
   155                                  
   156                                  init:
   157 0000013D B80200                          mov ax, 0x2             ; Set text mode and clear
   158 00000140 CD10                            int 0x10
   159 00000142 B401                            mov ah, 0x1
   160 00000144 B90726                          mov cx, 0x2607          ; Set invisible cursor
   161 00000147 CD10                            int 0x10
   162 00000149 FC                              cld                     ; Clear dflag
   163 0000014A B800B8                          mov ax, VRAM
   164 0000014D 8ED8                            mov ds, ax
   165 0000014F 8EC0                            mov es, ax              ; Set ds,es to vram
   166 00000151 C706A20F5000                    mov word [cd], 80
   167 00000157 C706A40F0000                    mov word [score], 0
   168 0000015D C706A60F0000                    mov word [jstate], 0
   169                                  
   170                                  initscenery:
   171 00000163 B95000                          mov cx, 80              ; Do not show cactus at the beginning
   172                                   .isloop:
   173 00000166 51                              push cx
   174 00000167 E840FF                          call scroll             ; Show scenery
   175 0000016A 59                              pop cx
   176 0000016B E2F9                            loop .isloop
   177                                   .dino:
   178 0000016D B80100                          mov ax, 1
   179 00000170 E8B5FE                          call drawdino           ; Draw dino
   180                                  
   181                                  title:
   182 00000173 BFE200                          mov di, 0x00e2          ; Center of row 1
   183 00000176 BE[0300]                        mov si, TITLE
   184 00000179 B90F00                          mov cx, 15              ; Loop count = TITLE.len
   185 0000017C B40F                            mov ah, 0x0f            ; Title color
   186                                   .tloop:
   187 0000017E 2E8A04                          mov al, byte [cs:si]    ; Get title char
   188 00000181 AB                              stosw                   ; Move ax to ds:si
   189 00000182 46                              inc si
   190 00000183 E80DFF                          call tick               ; Wait some ticks
   191 00000186 E2F6                            loop .tloop
   192                                          
   193                                  ready:
   194 00000188 B401                            mov ah, 0x1             ; Check if key pressed
   195 0000018A CD16                            int 0x16
   196 0000018C 9C                              pushf
   197 0000018D 31C0                            xor ax, ax              ; Wait for a key
   198 0000018F CD16                            int 0x16
   199 00000191 9D                              popf
   200 00000192 75F4                            jnz ready               ; No key pressed -> not ready
   201                                  
   202                                  game:
   203 00000194 B401                            mov ah, 0x1
   204 00000196 CD16                            int 0x16
   205 00000198 740D                            jz .nokey               ; No key pressed
   206 0000019A 31C0                            xor ax, ax
   207 0000019C CD16                            int 0x16
   208 0000019E 3C1B                            cmp al, 0x1b            ; Escape?
   209 000001A0 7453                            je quit                 ; Escape -> restart  
   210                                   .key:                          ; Some key pressed
   211 000001A2 A1A60F                          mov ax, [jstate]
   212 000001A5 EB08                            jmp .incjstate
   213                                   .nokey:                        ; No key pressed
   214 000001A7 A1A60F                          mov ax, [jstate]
   215 000001AA 83F800                          cmp ax, 0x0             ; Are we jumping?
   216 000001AD 7409                            je .gaming              ; No, pass
   217                                   .incjstate:
   218 000001AF 40                              inc ax
   219 000001B0 83F80D                          cmp ax, 13              ; Have we jumped down to ground?
   220 000001B3 7C03                            jl .gaming
   221                                   .ground:
   222 000001B5 B80000                          mov ax, 0x0             ; Restore jstate to zero
   223                                   
   224                                   .gaming:
   225 000001B8 50                              push ax                 ; Save current jstate
   226 000001B9 E8D7FE                          call tick
   227 000001BC B80000                          mov ax, 0
   228 000001BF E866FE                          call drawdino           ; Clear old dino
   229 000001C2 E8E5FE                          call scroll
   230 000001C5 58                              pop ax                  ; Restore new jstate
   231 000001C6 A3A60F                          mov [jstate], ax
   232 000001C9 B80100                          mov ax, 1
   233 000001CC E859FE                          call drawdino           ; Draw new dino
   234 000001CF 3C20                            cmp al, ' '
   235 000001D1 7505                            jne dead                ; OUCH! CACTUS!
   236 000001D3 E899FE                          call dispscore          ; Display score
   237 000001D6 EBBC                            jmp game
   238                                  
   239                                  dead:
   240 000001D8 BF6808                          mov di, 0xa0*12+0x00e8  ; Center of row 13
   241 000001DB BE[1200]                        mov si, DEAD
   242 000001DE B90900                          mov cx, 9               ; Loop count = DEAD.len
   243 000001E1 B40C                            mov ah, 0x0c            ; DEAD color
   244                                   .tloop:
   245 000001E3 2E8A04                          mov al, byte [cs:si]    ; Get DEAD char
   246 000001E6 AB                              stosw                   ; Move ax to ds:si
   247 000001E7 46                              inc si
   248 000001E8 E8A8FE                          call tick               ; Wait some ticks
   249 000001EB E2F6                            loop .tloop
   250                                   .wait:
   251 000001ED B98000                          mov cx, 128
   252                                   .wloop:
   253 000001F0 E8A0FE                          call tick
   254 000001F3 E2FB                            loop .wloop
   255                                  
   256                                  quit:
   257 000001F5 B80300                          mov ax, 0x3
   258 000001F8 E792                            out 0x92, ax            ; Reboot
   259                                  
   260                                  
   261                                  bootable:
   262 000001FA 00<rept>                        times 510-($-$$) db  0
   263 000001FE 55AA                            dw 0xaa55

{
"version":3,
"file":"build/v86_all.js",
"lineCount":597,
"mappings":"A,aA+BA,IAAA,CCJ4B,SAAA,GAAQ,CAAC,CAAD,CAAQ,CAC1C,IAAI,EAAQ,CACZ,OAAO,SAAQ,EAAG,CAChB,MAAI,EAAJ,CAAY,CAAA,OAAZ,CACS,CACL,KAAM,CAAA,CADD,CAEL,MAAO,CAAA,CAAM,CAAA,EAAN,CAFF,CADT,CAMS,CAAC,KAAM,CAAA,CAAP,CAPO,CAFwB,CCGrB,QAAA,GAAQ,CAAC,CAAD,CAAW,CAExC,IAAI,EAAoC,WAApC,EAAmB,MAAO,OAA1B,EAAmD,MAAA,SAAnD,EACmB,CAAD,CAAW,MAAA,SAAX,CACtB,OAAO,EAAA,CAAmB,CAAA,KAAA,CAAsB,CAAtB,CAAnB,CDc6B,CAAC,KAAMA,EAAA,CCbM,CDaN,CAAP,CClBI,CCM1C,IAAAC,GAC4D,UAAxD,EAAsB,MAAO,OAAA,iBAA7B,CACA,MAAA,eADA,CAEA,QAAQ,CAAC,CAAD,CAAS,CAAT,CAAmB,CAAnB,CAA+B,CAOjC,CAAJ,EAAc,KAAA,UAAd,EAAiC,CAAjC,EAA2C,MAAA,UAA3C,GACA,CAAA,CAAO,CAAP,CADA,CACmB,CAAA,MADnB,CAPqC,CAH3C,CCQAC,GAf2B,WAAlB,EAAC,MAAO,OAAR,EAAiC,MAAjC,GAe0B,IAf1B,CAe0B,IAf1B,CAEe,WAAlB,EAAC,MAAO,OAAR,EAA2C,IAA3C,EAAiC,MAAjC,CACwB,MADxB,CAa6B,ICGhB;QAAA,GAAQ,CAAC,CAAD,CAAS,CAAT,CAAqC,CAC9D,GAAK,CAAL,CAAA,CACA,IAAI,EAAMA,EACN,EAAA,CAAQ,CAAA,MAAA,CAAa,GAAb,CACZ,KAAK,IAAI,EAAI,CAAb,CAAgB,CAAhB,CAAoB,CAAA,OAApB,CAAmC,CAAnC,CAAsC,CAAA,EAAtC,CAA2C,CACzC,IAAI,EAAM,CAAA,CAAM,CAAN,CACJ,EAAN,GAAa,EAAb,GAAmB,CAAA,CAAI,CAAJ,CAAnB,CAA8B,EAA9B,CACA,EAAA,CAAM,CAAA,CAAI,CAAJ,CAHmC,CAKvC,CAAA,CAAW,CAAA,CAAM,CAAA,OAAN,CAAqB,CAArB,CACX,EAAA,CAAO,CAAA,CAAI,CAAJ,CACP,EAAA,CAAO,CAAA,CAAS,CAAT,CACP,EAAJ,EAAY,CAAZ,EAA4B,IAA5B,EAAoB,CAApB,EACAD,EAAA,CACI,CADJ,CACS,CADT,CACmB,CAAC,aAAc,CAAA,CAAf,CAAqB,SAAU,CAAA,CAA/B,CAAqC,MAAO,CAA5C,CADnB,CAZA,CAD8D;AC5BhEE,EAAA,CAAiB,2BAAjB,CAA8C,QAAQ,CAAC,CAAD,CAAO,CAC3D,MAAI,EAAJ,CAAiB,CAAjB,CAYe,QAAQ,CAAC,CAAD,CAAe,CAAf,CAA6B,CCJpD,GAAe,IAAf,EDMuC,ICNvC,CACE,KAAM,KAAI,SAAJ,CACF,8EADE,CAAN,CAIF,GDC6C,CCD7C,WAAmB,OAAnB,CACE,KAAM,KAAI,SAAJ,CACF,8EADE,CAAN,CDEqB,IAAK,EAA1B,GAAI,CAAJ,GAA6B,CAA7B,CAFqC,IAEO,OAA5C,CACI,EAAA,CAAI,IAAA,IAAA,CAAS,CAAT,CAAY,IAAA,IAAA,CAAS,CAAT,CAAwB,CAAxB,CAHiB,IAGU,OAA3B,CAAZ,CAER,KADA,IAAI,EAAI,CAAA,OACR,CAAW,CAAX,CAAO,CAAP,EAAoB,CAApB,CAAgB,CAAhB,CAAA,CACE,GANmC,IAM/B,CAAO,EAAE,CAAT,CAAJ,EAAmB,CAAA,CAAa,EAAE,CAAf,CAAnB,CAAsC,MAAO,CAAA,CAE/C,OAAY,EAAZ,EAAO,CAV2C,CAbO,CAA7D,CEDAA;EAAA,CAAiB,YAAjB,CAA+B,QAAQ,CAAC,CAAD,CAAO,CAC5C,MAAI,EAAJ,CAAiB,CAAjB,CAUe,QAAQ,CAAC,CAAD,CAAI,CACzB,CAAA,CAAI,MAAA,CAAO,CAAP,CACJ,IAAI,KAAA,CAAM,CAAN,CAAJ,EAAsB,QAAtB,GAAgB,CAAhB,EAAwC,CAAC,QAAzC,GAAkC,CAAlC,EAA2D,CAA3D,GAAqD,CAArD,CAA8D,MAAO,EACrE,KAAI,EAAI,IAAA,MAAA,CAAW,IAAA,IAAA,CAAS,CAAT,CAAX,CACR,OAAW,EAAJ,CAAA,CAAA,CAAQ,CAAC,CAAT,CAAa,CAJK,CAXiB,CAA9C,CCcqB,SAAA,GAAQ,EAAG,CAE9BC,EAAA,CAAqB,QAAQ,EAAG,EAE3BF,GAAA,OAAL,GACEA,EAAA,OADF,CAC6BG,EAD7B,CAJ8B,CAeV,QAAA,GAAQ,CAAC,CAAD,CAAK,CAAL,CAAsB,CAElD,IAAA,EAAA,CAA0B,CAM1BJ,GAAA,CACI,IADJ,CACU,aADV,CAEI,CAAC,aAAc,CAAA,CAAf,CAAqB,SAAU,CAAA,CAA/B,CAAqC,MAAO,CAA5C,CAFJ,CARkD,CAepDK,EAAA,UAAA,SAAA,CAAyC,QAAQ,EAAG,CAClD,MAAO,KAAA,EAD2C,CAUpD;IAAAD,GAAuD,QAAQ,EAAG,CAQhE,QAAS,EAAM,CAAC,CAAD,CAAkB,CAC/B,GAAsB,IAAtB,WAAuC,EAAvC,CACE,KAAM,KAAI,SAAJ,CAAc,6BAAd,CAAN,CAEF,MAAyB,KAAIC,EAAJ,CA1DLC,gBA0DK,EACI,CADJ,EACuB,EADvB,EAC6B,GAD7B,CACoC,CAAA,EADpC,CAErB,CAFqB,CAJM,CAPjC,IAAI,EAAU,CAgBd,OAAO,EAjByD,CAAZ,EAyBzB,SAAA,GAAQ,EAAG,CACtCH,EAAA,EACA,KAAI,EAAiBF,EAAA,OAAA,SAChB,EAAL,GACE,CADF,CACmBA,EAAA,OAAA,SADnB,CAEMA,EAAA,OAAA,CAAyB,iBAAzB,CAFN,CAK8C,WAA9C,EAAI,MAAO,MAAA,UAAA,CAAgB,CAAhB,CAAX,EACED,EAAA,CACI,KAAA,UADJ,CACqB,CADrB,CACqC,CAC/B,aAAc,CAAA,CADiB,CAE/B,SAAU,CAAA,CAFqB,CAO/B,MAAO,QAAQ,EAAG,CAChB,MAAOO,GAAA,CACHR,EAAA,CAA0B,IAA1B,CADG,CADS,CAPa,CADrC,CAgBFS,GAAA,CAA6B,QAAQ,EAAG,EAzBF;AAwDZ,QAAA,GAAQ,CAAC,CAAD,CAAO,CACzCA,EAAA,EAEI,EAAA,CAAW,CAAC,KAAM,CAAP,CAKf,EAAA,CAASP,EAAA,OAAA,SAAT,CAAA,CAA8C,QAAQ,EAAG,CACvD,MAAO,KADgD,CAGzD,OAAyC,EAXA,CC3Hf,QAAA,GAAQ,CAAC,CAAD,CAAQ,CAAR,CAAmB,CACrDO,EAAA,EAEI,EAAJ,WAAqB,OAArB,GAAqC,CAArC,EAA6C,EAA7C,CACA,KAAI,EAAI,CAAR,CACI,EAAO,CACT,KAAM,QAAQ,EAAG,CACf,GAAI,CAAJ,CAAQ,CAAA,OAAR,CAAsB,CACpB,IAAI,EAAQ,CAAA,EACZ,OAAO,CAAC,MAAO,CAAA,CAAU,CAAV,CAAiB,CAAA,CAAM,CAAN,CAAjB,CAAR,CAAwC,KAAM,CAAA,CAA9C,CAFa,CAItB,CAAA,KAAA,CAAY,QAAQ,EAAG,CAAE,MAAO,CAAC,KAAM,CAAA,CAAP,CAAa,MAAO,IAAK,EAAzB,CAAT,CACvB,OAAO,EAAA,KAAA,EANQ,CADR,CAUX,EAAA,CAAK,MAAA,SAAL,CAAA,CAAwB,QAAQ,EAAG,CAAE,MAAO,EAAT,CACnC,OAAO,EAhB8C,CCXvDN,EAAA,CAAiB,yBAAjB,CAA4C,QAAQ,CAAC,CAAD,CAAO,CACzD,MAAI,EAAJ,CAAiB,CAAjB,CAWe,QAAQ,EAAG,CACxB,MAAOO,GAAA,CACH,IADG,CACG,QAAQ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAE,MAAO,CAAC,CAAD,CAAI,CAAJ,CAAT,CADlB,CADiB,CAZ+B,CAA3D,CCKe;QAAA,GAAQ,CAAC,CAAD,CAAM,CAAN,CAAY,CACjC,MAAO,OAAA,UAAA,eAAA,KAAA,CAAqC,CAArC,CAA0C,CAA1C,CAD0B;ACFnCP,EAAA,CAAiB,SAAjB,CAMI,QAAQ,CAAC,CAAD,CAAgB,CA2FJ,QAAA,EAAQ,CAAC,CAAD,CAAe,CAE3C,IAAA,EAAA,CAAW,CAAC,CAAD,EAAW,IAAA,OAAA,EAAX,CAA2B,CAA3B,UAAA,EAEX,IAAI,CAAJ,CAAkB,CACZ,CAAA,CAAOQ,EAAA,CAAqB,CAArB,CAEX,KADA,IAAI,CACJ,CAAO,CAAC,CAAC,CAAD,CAAS,CAAA,KAAA,EAAT,MAAR,CAAA,CACM,CACJ,CADW,CAAA,MACX,CAAA,IAAA,IAAA,CAA6B,CAAA,CAAK,CAAL,CAA7B,CAA6D,CAAA,CAAK,CAAL,CAA7D,CALc,CAJyB,CA9D7C,QAAS,EAAiB,EAAG,EAM7B,QAAS,EAAM,CAAC,CAAD,CAAS,CACtB,GAAI,CAACC,EAAA,CAAa,CAAb,CAAqB,CAArB,CAAL,CAAiC,CAC/B,IAAI,EAAM,IAAI,CAMdX,GAAA,CAAuB,CAAvB,CAA+B,CAA/B,CAAqC,CAAC,MAAO,CAAR,CAArC,CAP+B,CADX,CAiBxB,QAAS,EAAK,CAAC,CAAD,CAAO,CACnB,IAAI,EAAO,MAAA,CAAO,CAAP,CACP,EAAJ,GACE,MAAA,CAAO,CAAP,CADF,CACiB,QAAQ,CAAC,CAAD,CAAS,CAC9B,GAAI,CAAJ,WAAsB,EAAtB,CACE,MAAO,EAEP,EAAA,CAAO,CAAP,CACA,OAAO,EAAA,CAAK,CAAL,CALqB,CADlC,CAFmB,CA7BnB,GAlBF,QAAqB,EAAG,CACtB,GAAI,CAAC,CAAL,EAAsB,CAAC,MAAA,KAAvB,CAAoC,MAAO,CAAA,CAC3C,IAAI,CACF,IAAI,EAAI,MAAA,KAAA,CAAY,EAAZ,CAAR,CACI,EAAI,MAAA,KAAA,CAAY,EAAZ,CADR,CAEI,EAAM,IACN,CADM,CACS,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CADT,CAEV,IAAkB,CAAlB,EAAI,CAAA,IAAA,CAAQ,CAAR,CAAJ,EAAqC,CAArC,EAAuB,CAAA,IAAA,CAAQ,CAAR,CAAvB,CAAwC,MAAO,CAAA,CAC/C,EAAA,OAAA,CAAW,CAAX,CACA,EAAA,IAAA,CAAQ,CAAR,CAAW,CAAX,CACA,OAAO,CAAC,CAAA,IAAA,CAAQ,CAAR,CAAR;AAAoC,CAApC,EAAsB,CAAA,IAAA,CAAQ,CAAR,CARpB,CASF,MAAO,CAAP,CAAY,CACZ,MAAO,CAAA,CADK,CAXQ,CAkBlB,EAAJ,CAAoB,MAAO,EAG7B,KAAI,EAAO,iBAAP,CAA2B,IAAA,OAAA,EAuC/B,EAAA,CAAM,QAAN,CACA,EAAA,CAAM,mBAAN,CACA,EAAA,CAAM,MAAN,CAKA,KAAI,EAAQ,CAkCZ,EAAA,UAAA,IAAA,CAAgC,QAAQ,CAAC,CAAD,CAAM,CAAN,CAAa,CACnD,CAAA,CAAO,CAAP,CACA,IAAI,CAACW,EAAA,CAAa,CAAb,CAAkB,CAAlB,CAAL,CAQE,KAAU,MAAJ,CAAU,oBAAV,CAAiC,CAAjC,CAAN,CAEF,CAAA,CAAI,CAAJ,CAAA,CAAU,IAAA,EAAV,CAAA,CAAsB,CACtB,OAAO,KAb4C,CAiBrD,EAAA,UAAA,IAAA,CAAgC,QAAQ,CAAC,CAAD,CAAM,CAC5C,MAAOA,GAAA,CAAa,CAAb,CAAkB,CAAlB,CAAA,CAA0B,CAAA,CAAI,CAAJ,CAAA,CAAU,IAAA,EAAV,CAA1B,CAAgD,IAAA,EADX,CAK9C,EAAA,UAAA,IAAA,CAAgC,QAAQ,CAAC,CAAD,CAAM,CAC5C,MAAOA,GAAA,CAAa,CAAb,CAAkB,CAAlB,CAAP,EAAkCA,EAAA,CAAa,CAAA,CAAI,CAAJ,CAAb,CAAwB,IAAA,EAAxB,CADU,CAK9C,EAAA,UAAA,OAAA,CAAmC,QAAQ,CAAC,CAAD,CAAM,CAC/C,MAAKA,GAAA,CAAa,CAAb,CAAkB,CAAlB,CAAL,EACKA,EAAA,CAAa,CAAA,CAAI,CAAJ,CAAb,CAAwB,IAAA,EAAxB,CADL,CAIO,OAAO,CAAA,CAAI,CAAJ,CAAA,CAAU,IAAA,EAAV,CAJd,CAES,CAAA,CAHsC,CAQjD,OAAO,EA7ImB,CAN5B,CCuBAT;EAAA,CAAiB,KAAjB,CAMI,QAAQ,CAAC,CAAD,CAAY,CAmQL,QAAA,EAAQ,EAAG,CAC1B,IAAI,EAAoD,EAExD,OADA,EAAA,GACA,CADgB,CAAA,KAChB,CAD4B,CAAA,KAC5B,CADwC,CAFd,CAxBT,QAAA,EAAQ,CAAC,CAAD,CAAM,CAAN,CAAY,CACrC,IAAI,EAAQ,CAAA,EACZ,OAAOK,GAAA,CAA0B,QAAQ,EAAG,CAC1C,GAAI,CAAJ,CAAW,CACT,IAAA,CAAO,CAAA,KAAP,EAAqB,CAAA,EAArB,CAAA,CACE,CAAA,CAAQ,CAAA,GAEV,KAAA,CAAO,CAAA,KAAP,EAAqB,CAAA,KAArB,CAAA,CAEE,MADA,EACO,CADC,CAAA,KACD,CAAA,CAAC,KAAM,CAAA,CAAP,CAAc,MAAO,CAAA,CAAK,CAAL,CAArB,CAET,EAAA,CAAQ,IARC,CAUX,MAAO,CAAC,KAAM,CAAA,CAAP,CAAa,MAAO,IAAK,EAAzB,CAXmC,CAArC,CAF8B,CAvBnB,QAAA,EAAQ,CAAC,CAAD,CAAM,CAAN,CAAW,CAkEjC,IAAA,EAjEW,CAiEX,EAAc,MAjEH,EAkEH,SAAZ,EAAI,CAAJ,EAAgC,UAAhC,EAAwB,CAAxB,CAEO,CAAA,IAAA,CApEQ,CAoER,CAAL,CAKA,CALA,CAKO,CAAA,IAAA,CAzEM,CAyEN,CALP,EACM,CACJ,CADS,EACT,CADe,GAAE,CACjB,CAAA,CAAA,IAAA,CAtEW,CAsEX,CAAe,CAAf,CAFF,CAFF,CAUA,CAVA,CAUO,IAVP,CAlEe,CACf,KAAI,EAAO,CAAA,EAAA,CAAU,CAAV,CACX,IAAI,CAAJ,EAAYI,EAAA,CAAa,CAAA,EAAb,CAAwB,CAAxB,CAAZ,CACE,IAAS,CAAT,CAAiB,CAAjB,CAAoB,CAApB,CAA4B,CAAA,OAA5B,CAAyC,CAAA,EAAzC,CAAkD,CAChD,IAAI,EAAQ,CAAA,CAAK,CAAL,CACZ,IAAK,CAAL,GAAa,CAAb,EAAoB,CAAA,IAApB,GAAkC,CAAA,IAAlC,EAAgD,CAAhD,GAAwD,CAAA,IAAxD,CACE,MAAO,CAAC,GAAI,CAAL,CAAS,KAAM,CAAf,CAAqB,MAAO,CAA5B,CAAmC,GAAO,CAA1C,CAHuC,CAOpD,MAAO,CAAC,GAAI,CAAL;AAAS,KAAM,CAAf,CAAqB,MAAQ,EAA7B,CAAgC,GAAO,IAAA,EAAvC,CAX8B,CAnJrB,QAAA,EAAQ,CAAC,CAAD,CAAe,CAEvC,IAAA,EAAA,CAAa,EAGb,KAAA,EAAA,CAAa,CAAA,EAMb,KAAA,KAAA,CAAY,CAEZ,IAAI,CAAJ,CAAkB,CACZ,CAAA,CAAOD,EAAA,CAAqB,CAArB,CAEX,KADA,IAAI,CACJ,CAAO,CAAC,CAAC,CAAD,CAAS,CAAA,KAAA,EAAT,MAAR,CAAA,CACM,CAEJ,CADwD,CAAD,MACvD,CAAA,IAAA,IAAA,CAA6B,CAAA,CAAK,CAAL,CAA7B,CAA6D,CAAA,CAAK,CAAL,CAA7D,CANc,CAbqB,CAtBvC,GApCF,QAAqB,EAAG,CACtB,GACI,CAAC,CADL,EAEwB,UAFxB,EAEI,MAAO,EAFX,EAGI,CAAC,CAAA,UAAA,QAHL,EAI0B,UAJ1B,EAII,MAAO,OAAA,KAJX,CAKE,MAAO,CAAA,CAGT,IAAI,CAEF,IAAI,EAAM,MAAA,KAAA,CAAY,CAAC,EAAG,CAAJ,CAAZ,CAAV,CACI,EAAM,IAAI,CAAJ,CAAcA,EAAA,CAAqB,CAAC,CAAC,CAAD,CAAM,GAAN,CAAD,CAArB,CAAd,CACV,IAAoB,GAApB,EAAI,CAAA,IAAA,CAAQ,CAAR,CAAJ,EAAuC,CAAvC,EAA2B,CAAA,KAA3B,EAA4C,CAAA,IAAA,CAAQ,CAAC,EAAG,CAAJ,CAAR,CAA5C,EACI,CAAA,IAAA,CAAQ,CAAC,EAAG,CAAJ,CAAR,CAAgB,GAAhB,CADJ,EAC4B,CAD5B,EAC+C,CAD/C,EACmC,CAAA,KADnC,CAEE,MAAO,CAAA,CAET,KAA6B,EAAO,CAAA,QAAA,EAApC,CACI,EAAO,CAAA,KAAA,EACX,IAAI,CAAA,KAAJ,EAAiB,CAAA,MAAA,CAAW,CAAX,CAAjB,EAAkC,CAAlC,EAA0D,GAA1D,EAAyC,CAAA,MAAA,CAAW,CAAX,CAAzC,CACE,MAAO,CAAA,CAET,EAAA,CAAO,CAAA,KAAA,EACP,OAAI,EAAA,KAAJ,EAAoC,CAApC,EAAiB,CAAA,MAAA,CAAW,CAAX,CAAA,EAAjB;AACqB,GADrB,EACI,CAAA,MAAA,CAAW,CAAX,CADJ,EAC4B,CAAC,CAAA,KAAA,EAAA,KAD7B,CAES,CAAA,CAFT,CAIO,CAAA,CAlBL,CAmBF,MAAO,CAAP,CAAY,CACZ,MAAO,CAAA,CADK,CA5BQ,CAoClB,EAAJ,CAAoB,MAAO,EAI7BF,GAAA,EAIA,KAAI,EAAQ,IAAI,OAwChB,EAAA,UAAA,IAAA,CAA4B,QAAQ,CAAC,CAAD,CAAM,CAAN,CAAa,CAE/C,CAAA,CAAc,CAAR,GAAA,CAAA,CAAY,CAAZ,CAAgB,CACtB,KAAI,EAAI,CAAA,CAAc,IAAd,CAAoB,CAApB,CACH,EAAA,KAAL,GACE,CAAA,KADF,CACY,IAAA,EAAA,CAAW,CAAA,GAAX,CADZ,CAC+B,EAD/B,CAGK,EAAA,GAAL,CAaE,CAAA,GAAA,MAbF,CAakB,CAblB,EACE,CAAA,GAUA,CAVU,CACR,KAAM,IAAA,EADE,CAER,GAAU,IAAA,EAAA,GAFF,CAGR,KAAM,IAAA,EAHE,CAIR,IAAK,CAJG,CAKR,MAAO,CALC,CAUV,CAHA,CAAA,KAAA,KAAA,CAAY,CAAA,GAAZ,CAGA,CAFA,IAAA,EAAA,GAAA,KAEA,CAF2B,CAAA,GAE3B,CADA,IAAA,EAAA,GACA,CADsB,CAAA,GACtB,CAAA,IAAA,KAAA,EAXF,CAeA,OAAO,KAtBwC,CA2BjD,EAAA,UAAA,OAAA,CAA+B,QAAQ,CAAC,CAAD,CAAM,CACvC,CAAA,CAAI,CAAA,CAAc,IAAd,CAAoB,CAApB,CACR,OAAI,EAAA,GAAJ,EAAe,CAAA,KAAf,EACE,CAAA,KAAA,OAAA,CAAc,CAAA,MAAd,CAAuB,CAAvB,CAMO,CALF,CAAA,KAAA,OAKE,EALa,OAAO,IAAA,EAAA,CAAW,CAAA,GAAX,CAKpB,CAJP,CAAA,GAAA,GAAA,KAIO,CAJiB,CAAA,GAAA,KAIjB,CAHP,CAAA,GAAA,KAAA,GAGO,CAHiB,CAAA,GAAA,GAGjB;AAFP,CAAA,GAAA,KAEO,CAFQ,IAER,CADP,IAAA,KAAA,EACO,CAAA,CAAA,CAPT,EASO,CAAA,CAXoC,CAgB7C,EAAA,UAAA,MAAA,CAA8B,QAAQ,EAAG,CACvC,IAAA,EAAA,CAAa,EACb,KAAA,EAAA,CAAa,IAAA,EAAA,GAAb,CAAmC,CAAA,EACnC,KAAA,KAAA,CAAY,CAH2B,CAQzC,EAAA,UAAA,IAAA,CAA4B,QAAQ,CAAC,CAAD,CAAM,CACxC,MAAO,CAAC,CAAE,CAAA,CAAc,IAAd,CAAoB,CAApB,CAAA,GAD8B,CAM1C,EAAA,UAAA,IAAA,CAA4B,QAAQ,CAAC,CAAD,CAAM,CAGxC,OAFI,CAEJ,CAFY,CAAA,CAAc,IAAd,CAAoB,CAApB,CAAA,GAEZ,GACwB,CAAA,MAJgB,CAS1C,EAAA,UAAA,QAAA,CAAgC,QAAQ,EAAG,CACzC,MAAO,EAAA,CAAa,IAAb,CAAwD,QAAQ,CAC9B,CAD8B,CACvB,CAC9C,MAAQ,CAAC,CAAA,IAAD,CAAY,CAAA,MAAZ,CADsC,CADzC,CADkC,CAS3C,EAAA,UAAA,KAAA,CAA6B,QAAQ,EAAG,CACtC,MAAO,EAAA,CAAa,IAAb,CAAwC,QAAQ,CACd,CADc,CACP,CAC9C,MAAO,EAAA,IADuC,CADzC,CAD+B,CASxC,EAAA,UAAA,OAAA,CAA+B,QAAQ,EAAG,CACxC,MAAO,EAAA,CAAa,IAAb,CAA0C,QAAQ,CAChB,CADgB,CACT,CAC9C,MAAO,EAAA,MADuC,CADzC,CADiC,CAS1C,EAAA,UAAA,QAAA,CAAgC,QAAQ,CAAC,CAAD,CAAW,CAAX,CAAwB,CAG9D,IAFA,IAAI,EAAO,IAAA,QAAA,EAAX;AACI,CACJ,CAAO,CAAC,CAAC,CAAD,CAAQ,CAAA,KAAA,EAAR,MAAR,CAAA,CACM,CACJ,CADY,CAAA,MACZ,CAAA,CAAA,KAAA,CACsB,CADtB,CAE0B,CAAA,CAAM,CAAN,CAF1B,CAGwB,CAAA,CAAM,CAAN,CAHxB,CAII,IAJJ,CAL4D,CAc9C,EAAA,UAAD,CAAwB,MAAA,SAAxB,CAAA,CACb,CAAA,UAAA,QAuEJ,KAAI,EAAW,CAuBf,OAAO,EArSe,CANxB,CCfA;IAAAI,GACmD,UAA/C,EAAuB,MAAO,OAAA,OAA9B,CACA,MAAA,OADA,CAEA,QAAQ,CAAC,CAAD,CAAY,CAEP,QAAA,EAAQ,EAAG,EACtB,CAAA,UAAA,CAAiB,CACjB,OAAO,KAAI,CAJO,CAHxB,CCMAC,GAA0D,QAAQ,EAAG,CAInE,QAAS,EAAqB,EAAG,CACX,QAAS,EAAI,EAAG,EAEpC,IAAI,CACJ,QAAA,UAAA,CAAkB,CAAlB,CAAwB,EAAxB,CAFoB,QAAgB,EAAG,EAEvC,CACA,OAAO,KAAI,CAAX,WAA6B,EALE,CAQjC,GAAsB,WAAtB,EAAI,MAAO,QAAX,EAAqC,OAAA,UAArC,CAAwD,CACtD,GAAI,CAAA,EAAJ,CAA6B,MAAO,QAAA,UACpC,KAAI,EAAkB,OAAA,UActB,OALuB,SAAQ,CAAC,CAAD,CAAS,CAAT,CAAkB,CAAlB,CAAiC,CAC1D,CAAA,CAAM,CAAA,CAAgB,CAAhB,CAAwB,CAAxB,CACN,EAAJ,EAAmB,OAAA,eAAA,CAAuB,CAAvB,CAA4B,CAAA,UAA5B,CACnB,OAAO,EAHuD,CAXV,CAmCxD,MARA,SAAkB,CAAC,CAAD,CAAS,CAAT,CAAkB,CAAlB,CAAiC,CAC3B,IAAA,EAAtB,GAAI,CAAJ,GAAiC,CAAjC,CAAiD,CAAjD,CAEI,EAAA,CAAMD,EAAA,CADE,CAAA,UACF,EAD6B,MAAA,UAC7B,CAGV,OAFY,SAAA,UAAA,MACF,KAAA,CAAW,CAAX;AAAmB,CAAnB,CAAwB,CAAxB,CACV,EAAc,CANmC,CAvCgB,CAAZ,ECZzDV,GAAA,CAAiB,mBAAjB,CAAsC,QAAQ,EAAO,CAEnD,MAAOW,GAF4C,CAArD,CCsByB,KAAA,EAAA,IAAiC,UAAjC,EAAC,MAAO,OAAA,eAAR,CACrB,EAAA,CAAA,MAAA,eADqB,KAAA,CAErB,IAAA,EAvByC,EAAA,CAAA,CAC3C,IAAI,GAAI,CAAC,GAAG,CAAA,CAAJ,CAAR,CACI,GAAI,EACR,IAAI,CACF,EAAA,UAAA,CAAc,EACd,GAAA,CAAO,EAAA,GAAP,OAAA,CAFE,CAGF,MAAO,CAAP,CAAU,EAGZ,EAAA,CAAO,CAAA,CAToC,CAuBzC,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,CAAA,CAAA,KAAA,KAAA,SAAA,CAAA,CAAA,CAAA,oBAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,IAFqB,CAAzB,IAAAC,GAAyB,ECtBzBZ,GAAA,CACI,wBADJ,CASI,QAAQ,CAAC,CAAD,CAAO,CACb,MAAI,EAAJ,CACS,CADT,CAEWY,EAAJ,CAQU,QAAQ,CAAC,CAAD,CAAS,CAAT,CAAgB,CACrC,GAAI,CAEF,MATiBA,GAQjB,CAAe,CAAf,CAAuB,CAAvB,CACO,CAAA,CAAA,CAFL,CAGF,MAAO,CAAP,CAAU,CACV,MAAO,CAAA,CADG,CAJyB,CARlC,CAmBE,IAtBI,CATnB,C,CC8BAC,QAASA,GAAQ,CAACC,CAAD,CAAaC,CAAb,CAAkB,CAE/B,IAAAC,EAAA,CAAUF,CAGV,KAAAC,EAAA,CAAWA,CAEX,KAAAE,GAAA,CAAiBC,QAAQ,EAAO,EAChC,KAAAC,EAAA,CAAgB,CAChB,KAAAC,EAAA,CAAmB,CAInB,KAAAC,EAAA,CAAmB,IAAIC,UAAJ,CAAe,CAAC,CAAD,CAAM,CAAN,CAAW,GAAX,CAAiB,GAAjB,CAAuB,GAAvB,CAA6B,GAA7B,CAAmC,EAAnC,CAAyC,GAAzC,CAAf,CACnB,KAAAC,EAAA,CAAe,UAEf,KAAAC,EAAA,CADA,IAAAC,EACA,CADiB,IAEjB,KAAAC,GAAA,CAAmB,IAAIJ,UAAJ,CAA0B,CAA1B,CAAe,IAAAE,EAAf,CACnB,KAAAG,GAAA,CAAuB,CAEvB,KAAAC,EAAA,CAAY,EApBmB,CAuBnCf,EAAAgB,UAAAC,GAAA,CAA+BC,QAAQ,EACvC,CACI,IAAIC,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAb,EACXa,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAZ,EACXY,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAX,EACXW,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAT,EACXS,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAP,EACXO,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAR,EACXQ,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAN,GACXM,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAL,GACXK,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAJ,EAAAK,IAAA,CAAc,QAAQ,CAACC,CAAD,CAAI,CAAE,MAAO,CAACA,CAAAC,GAAD,CAAYD,CAAAE,KAAZ,CAAoBF,CAAAG,IAApB,CAAT,CAA1B,CAEX,OAAOL,EAbX,CAgBAnB;EAAAgB,UAAAS,GAAA,CAA+BC,QAAQ,CAACP,CAAD,CACvC,CACI,IAAAb,EAAA,CAAgBa,CAAA,CAAM,CAAN,CAChB,KAAAZ,EAAA,CAAmBY,CAAA,CAAM,CAAN,CACnB,KAAAX,EAAA,CAAmBW,CAAA,CAAM,CAAN,CACnB,KAAAT,EAAA,CAAeS,CAAA,CAAM,CAAN,CACf,KAAAP,EAAA,CAAiBO,CAAA,CAAM,CAAN,CACjB,KAAAR,EAAA,CAAaQ,CAAA,CAAM,CAAN,CACb,KAAAN,GAAA,CAAmBM,CAAA,CAAM,CAAN,CACnB,KAAAL,GAAA,CAAuBK,CAAA,CAAM,CAAN,CACvB,KAAAJ,EAAA,CAAYI,CAAA,CAAM,CAAN,CAAAC,IAAA,CAAa,QAAQ,CAACC,CAAD,CAAI,CAAE,MAAO,CAAEC,GAASD,CAAA,CAAE,CAAF,CAAX,CAAiBE,KAAMF,CAAA,CAAE,CAAF,CAAvB,CAA6BG,IAAKH,CAAA,CAAE,CAAF,CAAlC,CAAT,CAAzB,CAThB,CAqBgCM,SAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAKC,CAAL,CAAUC,CAAV,CAAuB,CAC3DC,EAAA,CAAkB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAlB,CAAmC,CAACD,CAAD,CAAa,CAAb,CAAgBF,CAAhB,CAAmB,CAAnB,CAAsBC,CAAtB,CAAnC,CAA+D,CAAAhB,GAA/D,CAAiF,CAAjF,CAMA,EAAAC,GAAA,CAAuBgB,CAAvB,CAAmC,CAPwB,CAWhCE,QAAA,GAAS,CAATA,CAAS,CAACH,CAAD,CAAgBI,CAAhB,CAA2B,CAE3DC,CAAAA,CAAOH,EAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACE,CAAD,CAAzB,CAAsC,CAAApB,GAAtC,CAAwD,CAAxD,CACXsB,GAAA,CAAAA,CAAA,CAAgB,CAAhB,CAAmBN,CAAnB,CAAwBK,CAAxB,CAH+D;AAM/BE,QAAA,GAAS,CAATA,CAAS,CAACC,CAAD,CAAQC,CAAR,CAAiB,CAC1D,IAAIC,EAASC,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB,CAAsCF,CAAtC,CAAb,CACIJ,EAAOK,CAAA,CAAO,CAAP,CADX,CAEIX,EAAKW,CAAA,CAAO,CAAP,CAFT,CAGIV,EAAMU,CAAA,CAAO,CAAP,CAGV,QAAOX,CAAP,EAEI,KAAK,CAAL,CACIM,CAAA,CAAO,CAAA/B,ECoXRsC,EDlXC,KAAIC,EAAM,CACD,QADC,CAEVA,EAAA,CAAI,CAAJ,CAAA,CAAS,CAAA9B,EACT8B,EAAA,CAAI,CAAJ,CAAA,CAASC,IAAAC,MAAA,CCtFCC,YDsFD,CAAiBH,CAAA,CAAI,CAAJ,CAAjB,CACTA,EAAA,CAAI,CAAJ,CAAA,CAASA,CAAA,CAAI,CAAJ,CAAT,CAAkBC,IAAAC,MAAA,CAAWV,CAAX,CAAgBQ,CAAA,CAAI,CAAJ,CAAhB,CAClBA,EAAA,CAAI,CAAJ,CAAA,CAASA,CAAA,CAAI,CAAJ,CAAT,CAAkBC,IAAAC,MAAA,CAAWV,CAAX,CAAgBQ,CAAA,CAAI,CAAJ,CAAhB,CAClBA,EAAA,CAAI,CAAJ,CAAA,CAAS,CAAAvC,EAAA2C,EAAAC,OACTL,EAAA,CAAI,CAAJ,CAAA,CAAS,OACTA,EAAA,CAAI,CAAJ,CAAA,CAAS,CACTA,EAAA,CAAI,CAAJ,CAAA,CAAS,GAETR,EAAA,CAAOH,EAAA,CAAkB,WAAA,MAAA,CAAA,EAAA,CAAlB,CAAiEW,CAAjE,CAAsE,CAAA7B,GAAtE,CAAwF,CAAxF,CACPsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyBK,CAAzB,CACA,EAAA9B,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,GAAL,CACA,KAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAArB,CAAiCF,CAAjC,CACV,KAAIU,EAAMN,CAAA,CAAI,CAAJ,CACNO,EAAAA,CAAOP,CAAA,CAAI,CAAJ,CAEPQ,EAAAA,CAAM,CAAAnC,EAAA,CAAUiC,CAAV,CAAA1B,GACV,KAAI6B,EAAQC,EAAA,CAAA,CAAAjD,EAAA,CAAiB+C,CAAjB,CAGRG,EAAAA,CAAMC,EAAA,CAAA,CAAAnD,EAAA,CAAkB+C,CAAlB,CAEVK,GAAA,CAAA,CAAApD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CACI,QAAQ,EAAG,CAEPoB,CAAA,CAAI,CAAJ,CAAA,CAASS,CAAAK,GACTd,EAAA,CAAI,CAAJ,CAAA,CAAS,IAAA/B,EAAT,CAAsB,EACtBoB,GAAA,CAAkB,CAAC,GAAD,CAAM,GAAN,CAAlB,CAA8BW,CAA9B,CAAmC,IAAA7B,GAAnC,CAAqD,CAArD,CACAsB,GAAA,CAAAA,IAAA;AAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,EAAzB,CACA,KAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CANO,CAAXoB,KAAA,CAOO,CAPP,CADJ,CAUA,MAEJ,MAAK,EAAL,CACQf,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB,CAAsCF,CAAtC,CACNoB,EAAAA,CAAOhB,CAAA,CAAI,CAAJ,CACPM,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNiB,EAAAA,CAAOjB,CAAA,CAAI,CAAJ,CAEPS,EAAJ,CAAYS,EAAA,CAAA,CAAAzD,EAAA,CACR0D,EAAAA,CAAcT,EAAA,CAAA,CAAAjD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CAClB,KAAIwC,EAAa,CAAA3D,EAAA4D,EAAA,CAAkB,CAAAhD,EAAA,CAAUiC,CAAV,CAAA1B,GAAlB,CAEjB6B,EAAAF,KAAA,CAAaY,CAAAZ,KACbE,EAAAjB,KAAA,CAAa2B,CAAA3B,KACbiB,EAAAa,GAAA,CAAgBH,CAAAG,GAChB,KAAIC,EAAO,CAAA9D,EAAA4D,EAAA,CAAkB,CAAA5D,EAAA2C,EAAAC,OAAlB,CAAPkB,CAAkD,IAAIxD,UAAJ,CAAe0C,CAAAjB,KAAf,CACtD,KAAQgC,CAAR,CAAU,CAAV,CAAaA,CAAb,CAAef,CAAAjB,KAAf,CAA2BgC,CAAA,EAA3B,CACID,CAAA,CAAKC,CAAL,CAAA,CAAUJ,CAAA,CAAWI,CAAX,CAEdf,EAAAQ,KAAA,CAAaA,CACbR,EAAAgB,GAAA,CAAiB,CAAApD,EAAA,CAAU2C,CAAV,CAAApC,GACjB8C,GAAA,CAAA,CAAAjE,EAAA,CAAkBgD,CAAlB,CAKAhB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAArB,CAA2CF,CAA3C,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNiB,EAAJ,CAAWjB,CAAA,CAAI,CAAJ,CAEP2B,EAAAA,CAAM3B,CAAA,CAAI,CAAJ,CAENQ,EAAJ,CAAUoB,EAAA,CAAA,CAAAnE,EAAA,CAAsBwD,CAAtB,CAA4B,CAAA5C,EAAA,CAAUiC,CAAV,CAAA1B,GAA5B,CAHEoB,CAAA6B,CAAI,CAAJA,CAGF,CACNpB,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB+C,CAAjB,CACZC,EAAA3B,IAAA,CAAY,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IACZ2B,EAAAkB,GAAA,CAAYA,CACZtC,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACoB,CAAAK,GAAD,CAAzB,CAAsC,CAAA3C,GAAtC,CAAwD,CAAxD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,EAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACQK,CAAJ;AAAUF,EAAA,CAAqB,QAAA,MAAA,CAAA,EAAA,CAArB,CAAqDF,CAArD,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNiB,EAAJ,CAAWjB,CAAA,CAAI,CAAJ,CACPO,EAAJ,CAAWP,CAAA,CAAI,CAAJ,CACP8B,EAAAA,CAAQ9B,CAAA,CAAI,CAAJ,CACR+B,EAAAA,CAAQ/B,CAAA,CAAI,CAAJ,CACR2B,EAAJ,CAAU3B,CAAA,CAAI,CAAJ,CAENQ,EAAJ,CAAUwB,EAAA,CAAA,CAAAvE,EAAA,CAAmBwD,CAAnB,CAAyB,CAAA5C,EAAA,CAAUiC,CAAV,CAAA1B,GAAzB,CAAiDkD,CAAjD,CAAwDC,CAAxD,CACNtB,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB+C,CAAjB,CACZC,EAAAF,KAAA,CAAaA,CACbE,EAAA3B,IAAA,CAAY,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IACZ2B,EAAAkB,GAAA,CAAYA,CACZtC,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACoB,CAAAK,GAAD,CAAzB,CAAsC,CAAA3C,GAAtC,CAAwD,CAAxD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,EAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAGJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA4BF,CAA5B,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CAENS,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CACZY,EAAA,CAAOH,EAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACoB,CAAAa,GAAD,CAAzB,CAA0C,CAAAnD,GAA1C,CAA4D,CAA5D,CACPsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyBK,CAAzB,CACA,EAAA9B,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAGJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAArB,CAA2CF,CAA3C,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNiB,EAAJ,CAAWjB,CAAA,CAAI,CAAJ,CACPO,EAAJ,CAAWP,CAAA,CAAI,CAAJ,CACP2B,EAAJ,CAAU3B,CAAA,CAAI,CAAJ,CAENQ,EAAJ,CAAUyB,EAAA,CAAA,CAAAxE,EAAA,CAAwBwD,CAAxB,CAA8B,CAAA5C,EAAA,CAAUiC,CAAV,CAAA1B,GAA9B,CACN6B,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB+C,CAAjB,CACZC,EAAAF,KAAA,CAAaA,CAAb,CAAoB2B,EACpBzB,EAAA3B,IAAA,CAAY,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IACZ2B,EAAAkB,GAAA,CAAYA,CACZtC,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACoB,CAAAK,GAAD,CAAzB,CAAsC,CAAA3C,GAAtC,CAAwD,CAAxD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,EAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN;AAAW,GAAX,CAAgB,GAAhB,CAAqB,GAArB,CAArB,CAAgDF,CAAhD,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNiB,EAAJ,CAAWjB,CAAA,CAAI,CAAJ,CAEPO,EAAJ,CAAWP,CAAA,CAAI,CAAJ,CACP2B,EAAJ,CAAU3B,CAAA,CAAI,CAAJ,CAENQ,EAAJ,CAAU2B,EAAA,CAAA,CAAA1E,EAAA,CAAmBwD,CAAnB,CAAyB,CAAA5C,EAAA,CAAUiC,CAAV,CAAA1B,GAAzB,CACV,EAAAP,EAAA,CAAUiC,CAAV,CAAA1B,GAAA,CAAyB4B,CACzB,EAAAnC,EAAA,CAAUiC,CAAV,CAAAzB,KAAA,CAjPIuD,CAkPA3B,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB+C,CAAjB,CACZC,EAAA3B,IAAA,CAAY,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IACZ2B,EAAAkB,GAAA,CAAYA,CACZlB,EAAAF,KAAA,CAAaA,CACblB,GAAA,CAAkB,CAAC,GAAD,CAAM,GAAN,CAAlB,CAA8B,CAACoB,CAAAK,GAAD,CAAY,CAAA7C,EAAZ,CAAyB,EAAzB,CAA9B,CAA4D,CAAAE,GAA5D,CAA8E,CAA9E,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,EAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CAEIN,EAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAAC,CAAD,CAAzB,CAA8B,CAAAlB,GAA9B,CAAgD,CAAhD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAOJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAArB,CAAiCF,CAAjC,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNS,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CAEZ,IAAG,CAAC6B,CAAJ,EAAaA,CAAA4B,OAAb,GAA8BC,EAA9B,CACA,CAEIC,EAAA,CAAAA,CAAA,CAAepD,CAAf,CA/SHqD,CA+SG,CACA,EAAA9E,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAJJ,CAMAK,CAAA,CAAI,CAAJ,CAAA,EAAU,IAEVA,EAAA,CAAI,CAAJ,CAAA,CAASA,CAAA,CAAI,CAAJ,CACTA,EAAA,CAAI,CAAJ,CAAA,CAASS,CAAAK,GAETd,EAAA,CAAI,CAAJ,CAAA,CAASS,CAAAF,KACTP,EAAA,CAAI,CAAJ,CAAA,CAASS,CAAA3B,IACTkB,EAAA,CAAI,CAAJ,CAAA,CAASS,CAAAkB,GAET3B,EAAA,CAAI,CAAJ,CAAA,CAASS,CAAAgC,GACTzC,EAAA,CAAI,CAAJ,CAAA,CAAUS,CAAAqB,GAAV,EAAuB,CAAvB,CAA6BrB,CAAAsB,GAC7B/B,EAAA,CAAI,CAAJ,CAAA,CAASS,CAAAjB,KACTQ,EAAA,CAAI,CAAJ,CAAA,CAAS,CAAA9B,EACT8B,EAAA,CAAI,CAAJ,CAAA,CAASC,IAAAC,MAAA,CAAWO,CAAAjB,KAAX,CAAsB,GAAtB,CAA0B,CAA1B,CACTQ;CAAA,CAAI,EAAJ,CAAA,CAAUS,CAAAiC,GACV1C,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVA,EAAA,CAAI,EAAJ,CAAA,CAAUS,CAAAkC,GACV3C,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVA,EAAA,CAAI,EAAJ,CAAA,CAAUS,CAAAmC,GACV5C,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVA,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVA,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVA,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVA,EAAA,CAAI,EAAJ,CAAA,CAAU,CACVX,GAAA,CAAkB,sBAAA,MAAA,CAAA,EAAA,CAAlB,CAWGW,CAXH,CAWQ,CAAA7B,GAXR,CAW0B,CAX1B,CAYAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,GAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,YAAA,MAAA,CAAA,EAAA,CAArB,CAMRF,CANQ,CAONU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNS,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CAERoB,EAAA,CAAI,CAAJ,CAAJ,CAhWU6C,CAgWV,GACIpC,CAAAF,KADJ,CACiBP,CAAA,CAAI,CAAJ,CADjB,CAGIA,EAAA,CAAI,CAAJ,CAAJ,CAlWS8C,CAkWT,GACIrC,CAAA3B,IADJ,CACgBkB,CAAA,CAAI,CAAJ,CADhB,CAGIA,EAAA,CAAI,CAAJ,CAAJ,CApWS+C,CAoWT,GACItC,CAAAkB,GADJ,CACgB3B,CAAA,CAAI,CAAJ,CADhB,CAGIA,EAAA,CAAI,CAAJ,CAAJ,CArWWgD,EAqWX,GACIvC,CAAAiC,GADJ,CACkBzC,IAAAC,MAAA,CAAW+C,CAAC,IAAIC,IAALD,SAAA,EAAX,CAAkC,GAAlC,CADlB,CAGIjD,EAAA,CAAI,CAAJ,CAAJ,CAvWWmD,EAuWX,GACI1C,CAAAkC,GADJ,CACkB1C,IAAAC,MAAA,CAAW+C,CAAC,IAAIC,IAALD,SAAA,EAAX,CAAkC,GAAlC,CADlB,CAGIjD,EAAA,CAAI,CAAJ,CAAJ,CAzWWoD,EAyWX,GACI3C,CAAAmC,GADJ,CACkB3C,IAAAC,MAAA,CAAW+C,CAAC,IAAIC,IAALD,SAAA,EAAX,CAAkC,GAAlC,CADlB,CAGIjD,EAAA,CAAI,CAAJ,CAAJ,CA3WeqD,GA2Wf,GACI5C,CAAAiC,GADJ,CACkB1C,CAAA,CAAI,CAAJ,CADlB,CAGIA,EAAA,CAAI,CAAJ,CAAJ,CA7WesD,GA6Wf,GACI7C,CAAAkC,GADJ,CACkB3C,CAAA,CAAI,CAAJ,CADlB,CAGIA,EAAA,CAAI,CAAJ,CAAJ;AArXUuD,CAqXV,EACIC,EAAA,CAAA,CAAA/F,EAAA,CAAmB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAnB,CAA2CoB,CAAA,CAAI,CAAJ,CAA3C,CAEJP,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAArB,CAAiCF,CAAjC,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACVP,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACA,KAAK,GAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB,CAAsCF,CAAtC,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACV,KAAIyD,EAASzD,CAAA,CAAI,CAAJ,CAAb,CACI0D,EAAQ1D,CAAA,CAAI,CAAJ,CACRS,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CAGZ,IAAG,CAAC6B,CAAJ,EAAaA,CAAA4B,OAAb,GAA8BC,EAA9B,CACA,CAEIC,EAAA,CAAAA,CAAA,CAAepD,CAAf,CAxZHqD,CAwZG,CACA,EAAA9E,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAJJ,CAMA,GA3XIgE,CA2XJ,EAAI,CAAAtF,EAAA,CAAUiC,CAAV,CAAAzB,KAAJ,CAAsC,CAC9B4B,CAAAmD,GAAAvD,OAAJ,CAAwBoD,CAAxB,CAA+BC,CAA/B,GAAsCA,CAAtC,CAA8CjD,CAAAmD,GAAAvD,OAA9C,CAAkEoD,CAAlE,CACA,KAAQjC,CAAR,CAAU,CAAV,CAAaA,CAAb,CAAekC,CAAf,CAAsBlC,CAAA,EAAtB,CACI,CAAArD,GAAA,CAAiB,EAAjB,CAAqBqD,CAArB,CAAA,CAA0Bf,CAAAmD,GAAA,CAAWH,CAAX,CAAkBjC,CAAlB,CAC9BnC,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACqE,CAAD,CAAzB,CAAkC,CAAAvF,GAAlC,CAAoD,CAApD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CAA6BuE,CAA7B,CACA,EAAAhG,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CANkC,CAAtC,IAOO,CACH,IAAIkE,EAAO,CAAApG,EAAA2C,EAAA,CAAe,CAAA/B,EAAA,CAAUiC,CAAV,CAAA1B,GAAf,CACX,EAAApB,EAAAsG,KAAA,CAAc,eAAd,CAEAlD,GAAA,CAAA,CAAAnD,EAAA,CAAkB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAlB,CACAiC,GAAA,CAAA,CAAApD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CACI,QAAQ,EAAG,CACP,IAAApB,EAAAsG,KAAA,CAAc,aAAd;AAA6B,CAACD,CAAA5C,KAAD,CAAYyC,CAAZ,CAA7B,CAEIjD,EAAAjB,KAAJ,CAAiBiE,CAAjB,CAAwBC,CAAxB,GAA+BA,CAA/B,CAAuCjD,CAAAjB,KAAvC,CAAoDiE,CAApD,CACA,KAAIlC,EAAO,IAAA9D,EAAA4D,EAAA,CAAkB,IAAAhD,EAAA,CAAUiC,CAAV,CAAA1B,GAAlB,CACX,IAAG2C,CAAH,CACI,IAAI,IAAIC,EAAE,CAAV,CAAaA,CAAb,CAAekC,CAAf,CAAsBlC,CAAA,EAAtB,CACI,IAAArD,GAAA,CAAiB,EAAjB,CAAqBqD,CAArB,CAAA,CAA0BD,CAAA,CAAKkC,CAAL,CAAYjC,CAAZ,CAElCnC,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACqE,CAAD,CAAzB,CAAkC,IAAAvF,GAAlC,CAAoD,CAApD,CACAsB,GAAA,CAAAA,IAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CAA6BuE,CAA7B,CACA,KAAAhG,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CAXO,CAAXoB,KAAA,CAYO,CAZP,CADJ,CALG,CAqBP,KAEJ,MAAK,GAAL,CACQf,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB,CAAsCF,CAAtC,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNyD,EAAJ,CAAazD,CAAA,CAAI,CAAJ,CACT0D,EAAJ,CAAY1D,CAAA,CAAI,CAAJ,CAEZ+D,GAAA,CAAA,CAAAtG,EAAA,CAAc,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAd,CAAsC6E,CAAtC,CAA8CC,CAA9C,CAAqD9D,CAArD,CAEIiE,EAAJ,CAAW,CAAApG,EAAA2C,EAAA,CAAe,CAAA/B,EAAA,CAAUiC,CAAV,CAAA1B,GAAf,CACX,EAAApB,EAAAsG,KAAA,CAAc,cAAd,CAA8B,CAACD,CAAA5C,KAAD,CAAYyC,CAAZ,CAA9B,CAEArE,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACqE,CAAD,CAAzB,CAAkC,CAAAvF,GAAlC,CAAoD,CAApD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAArB,CAA2CF,CAA3C,CAMNe,EAAJ,CAAUqD,EAAA,CAAA,CAAAvG,EAAA,CAAe,CAAAY,EAAA,CALT2B,CAAAiE,CAAI,CAAJA,CAKS,CAAArF,GAAf,CAJIoB,CAAAkE,CAAI,CAAJA,CAIJ,CAAsD,CAAA7F,EAAA,CAHhD2B,CAAAmE,CAAI,CAAJA,CAGgD,CAAAvF,GAAtD,CAFIoB,CAAAoE,CAAI,CAAJA,CAEJ,CACV,IAAW,CAAX,EAAIzD,CAAJ,CAAkB,CACd4B,EAAA,CAAAA,CAAA,CAAepD,CAAf,CAndHqD,CAmdG,CACA,EAAA9E,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAHc,CAKlBF,EAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ;KAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB,CAAsCF,CAAtC,CACNyE,EAAAA,CAAQrE,CAAA,CAAI,CAAJ,CACRiB,EAAJ,CAAWjB,CAAA,CAAI,CAAJ,CAGPM,EAAJ,CAAUgE,EAAA,CAAA,CAAA7G,EAAA,CAAe,CAAAY,EAAA,CAAUgG,CAAV,CAAAzF,GAAf,CAAyCqC,CAAzC,CACV,IAAY,EAAZ,EAAIX,CAAJ,CAAe,CACRiC,EAAA,CAAAA,CAAA,CAAepD,CAAf,CAneNqD,CAmeM,CACA,EAAA9E,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAHQ,CAKXgB,CAAJ,CAAU4D,EAAA,CAAA,CAAA9G,EAAA,CAAe6C,CAAf,CACV,IAAI,CAACK,CAAL,CAAU,CACN4B,EAAA,CAAAA,CAAA,CAAepD,CAAf,CAteAqF,EAseA,CACA,EAAA9G,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAHM,CAKVF,EAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,GAAL,CACQ8E,CAAAA,CAAU3E,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAArB,CAAiCF,CAAjC,CAEd,EAAA3B,EAAA,CAAawG,CAAA,CAAQ,CAAR,CACbjF,EAAA,CAAOH,EAAA,CAAkB,CAAC,GAAD,CAAM,GAAN,CAAlB,CAA8B,CAAC,CAAApB,EAAD,CAAa,CAAAD,EAAb,CAA9B,CAA0D,CAAAG,GAA1D,CAA4E,CAA5E,CACPsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyBK,CAAzB,CACA,EAAA9B,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,GAAL,CAEQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAAqB,GAArB,CAArB,CAAgDF,CAAhD,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CAGV,EAAA3B,EAAA,CAAUiC,CAAV,CAAA,CAlaD,CAAC1B,GAkagC6B,CAlajC,CAAiB5B,KA9DZuD,CA8DL,CAA6BtD,IAgalBkB,CAAAlB,CAAI,CAAJA,CAhaX,CAmaK2B,EAAJ,CAAYC,EAAA,CAAA,CAAAjD,EAAA,CAAiB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAAjB,CACZS,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACoB,CAAAK,GAAD,CAAzB,CAAsC,CAAA3C,GAAtC,CAAwD,CAAxD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,EAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,GAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA4BF,CAA5B,CAIVH,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAGJ,MAAK,GAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB;AAAsCF,CAAtC,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACN0E,EAAAA,CAAQ1E,CAAA,CAAI,CAAJ,CACR2E,EAAAA,CAAS3E,CAAA,CAAI,CAAJ,CAEb,IAAc,CAAd,EAAI2E,CAAJ,CAAiB,CACb,CAAAtG,EAAA,CAAUqG,CAAV,CAAA,CA1bL,CAAC9F,GA0bsC,CAAAP,EAAA,CAAUiC,CAAV,CAAA1B,GA1bvC,CAAiBC,KA9DZuD,CA8DL,CAA6BtD,IA0b6C,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IA1b1E,CA4bKO,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAAC,CAAD,CAAzB,CAA8B,CAAAlB,GAA9B,CAAgD,CAAhD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MANa,CAQbiF,CAAAA,CAAS,EACb,KAAQpD,CAAR,CAAU,CAAV,CAAaA,CAAb,CAAemD,CAAf,CAAuBnD,CAAA,EAAvB,CACIoD,CAAAC,KAAA,CAAY,GAAZ,CAEAC,EAAAA,CAAOhF,EAAA,CAAqB8E,CAArB,CAA6BhF,CAA7B,CACPY,EAAJ,CAAU,CAAAnC,EAAA,CAAUiC,CAAV,CAAA1B,GACN6E,EAAJ,CAAa,CACb,KAAIsB,EAAQ,CAGZ,KAAQvD,CAAR,CAAU,CAAV,CAAaA,CAAb,CAAemD,CAAf,CAAuBnD,CAAA,EAAvB,CAA4B,CACxBhB,CAAA,CAAM8D,EAAA,CAAA,CAAA7G,EAAA,CAAe+C,CAAf,CAAoBsE,CAAA,CAAKtD,CAAL,CAApB,CAEN,IAAY,EAAZ,EAAIhB,CAAJ,CAEG,KAEHiD,EAAA,EAAUpE,EAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAAC,CAAA5B,EAAA2C,EAAA,CAAeI,CAAf,CAAAM,GAAD,CAAzB,CAAoD,CAAA3C,GAApD,CAAsEsF,CAAtE,CACVsB,EAAA,EAIA,EAAA1G,EAAA,CAAUqG,CAAV,CAAA,CAvdL,CAAC9F,GAudsC4B,CAvdvC,CAAiB3B,KA9DZuD,CA8DL,CAA6BtD,IAud0B,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IAvdvD,CA2c6B,CAc5BO,EAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAAC0F,CAAD,CAAzB,CAAkC,CAAA5G,GAAlC,CAAoD,CAApD,CACAsB,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyBsE,CAAzB,CAAgC,CAAhC,CACA,EAAA/F,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ,MAAK,GAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA4BF,CAA5B,CAEN,EAAAvB,EAAA,CAAU2B,CAAA,CAAI,CAAJ,CAAV,CAAJ,EAAuD,CAAvD,EAAyB,CAAA3B,EAAA,CAAU2B,CAAA,CAAI,CAAJ,CAAV,CAAApB,GAAzB,GACIoG,EAAA,CAAA,CAAAvH,EAAA,CAAmB,CAAAY,EAAA,CAAU2B,CAAA,CAAI,CAAJ,CAAV,CAAApB,GAAnB,CAEA,CADA,CAAAP,EAAA,CAAU2B,CAAA,CAAI,CAAJ,CAAV,CAAApB,GACA,CAD6B,EAC7B,CAAA,CAAAP,EAAA,CAAU2B,CAAA,CAAI,CAAJ,CAAV,CAAAnB,KAAA,CAniBAoG,EAgiBJ,CAKAxF,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CACA,MAEJ;KAAK,EAAL,CACQK,CAAJ,CAAUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAArB,CAA2CF,CAA3C,CACNU,EAAJ,CAAUN,CAAA,CAAI,CAAJ,CACNiB,EAAJ,CAAWjB,CAAA,CAAI,CAAJ,CAIXP,GAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,EAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CAGA,MAEJ,MAAK,EAAL,CACQK,CAeJ,CAfUF,EAAA,CAAqB,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAArB,CAAsCF,CAAtC,CAeV,CAdIU,CAcJ,CAdUN,CAAA,CAAI,CAAJ,CAcV,CAbIkF,CAaJ,CAbalF,CAAA,CAAI,CAAJ,CAab,CAZIiB,CAYJ,CAZWjB,CAAA,CAAI,CAAJ,CAYX,CAVA,CAAA3B,EAAA,CAAU6G,CAAV,CAUA,CAvgBD,CAACtG,GA6fmC,CAAAP,EAAA,CAAUiC,CAAV,CAAA1B,GA7fpC,CAAiBC,KA/DZoG,EA+DL,CAA6BnG,IA6fyC,CAAAT,EAAA,CAAUiC,CAAV,CAAAxB,IA7ftE,CAugBC,CAPIuB,CAOJ,CAPa,CAOb,CANY,qBAMZ,EANIY,CAMJ,GALIZ,CACA,CADS8E,EAAA,CAAA,CAAA1H,EAAA,CAAoB,CAAAY,EAAA,CAAUiC,CAAV,CAAA1B,GAApB,CACT,CAAA,CAAAP,EAAA,CAAU6G,CAAV,CAAArG,KAAA,CAhkBA8E,CAokBJ,EAFAtE,EAAA,CAAkB,CAAC,GAAD,CAAlB,CAAyB,CAACgB,CAAD,CAAzB,CAAmC,CAAAlC,GAAnC,CAAqD,CAArD,CAEA,CADAsB,EAAA,CAAAA,CAAA,CAAgBP,CAAhB,CAAoBC,CAApB,CAAyB,CAAzB,CACA,CAAA,CAAAzB,GAAA,CAAe,CAAf,CAAkBiC,CAAlB,CAveR,CAP0D,C,CEnIzC,WAArB,GAAG,MAAOyF,OAAV,EAAqCA,MAAAC,sBAArC,GAEID,MAAAC,sBAFJ,CAGQD,MAAAE,yBAHR,EAIQF,MAAAG,4BAJR,CAcAC;QAASA,GAAa,CAACC,CAAD,CAAmBjI,CAAnB,CACtB,CAsDIkI,QAASA,EAAe,CAACC,CAAD,CACxB,CACIA,CAAA,CAAIA,CAAAC,SAAA,CAAW,EAAX,CAEJ,OAAO,GAAP,CAAaC,KAAA,CAAM,CAAN,CAAUF,CAAAtF,OAAV,CAAAyF,KAAA,CAAyB,GAAzB,CAAb,CAA6CH,CAHjD,CA6RAI,QAASA,EAAc,CAACC,CAAD,CAAOC,CAAP,CAAgBC,EAAhB,CAAyBC,EAAzB,CACvB,CACIH,CAAAI,MAAAC,MAAA,CAAmB,EACnBL,EAAAI,MAAAE,OAAA,CAAoB,EAEjBH,GAAH,GAEIH,CAAAI,MAAAG,UAFJ,CAE2BP,CAAAI,MAAAI,gBAF3B,CAEwDR,CAAAI,MAAAK,aAFxD,CAEkF,EAFlF,CAKA,KAAIC,GAAYV,CAAAW,sBAAA,EAEbR,GAAH,CAOIH,CAAAI,MAAAG,UAPJ,CAO2BP,CAAAI,MAAAI,gBAP3B,CAOwDR,CAAAI,MAAAK,aAPxD,EAI6B,CAAZG,GAAAX,CAAAW,CAAgB,EAAhBA,CAAqB,UAArBA,CAAkCX,CAAlCW,CAA4C,GAJ7D,GAK6B,CAAZ,GAAAV,EAAA,CAAgB,EAAhB,CAAqB,UAArB,CAAkCA,EAAlC,CAA4C,GAL7D,GAYuB,CAAnB,GAAGD,CAAH,CAAa,CAAb,EAAwC,CAAxC,GAAwBC,EAAxB,CAAkC,CAAlC,EAMIW,CAAAT,MAAAU,GACA,CADsC,WACtC,CAAAD,CAAAT,MAAA,CAAqB,wBAArB,CAAA,CAAiD,kBAPrD,GAWIS,CAAAT,MAAAU,GACA,CADsC,EACtC,CAAAD,CAAAT,MAAA,CAAqB,wBAArB,CAAA;AAAiD,EAZrD,CAiBA,CADIW,EACJ,CADyB3B,MAAA4B,iBACzB,EADoD,CACpD,CAA8B,CAA9B,GAAGD,EAAH,CAAwB,CAAxB,GAEId,CACA,EADWc,EACX,CAAAb,EAAA,EAAWa,EAHf,CA7BJ,CAoCe,EAAf,GAAGd,CAAH,GAEID,CAAAI,MAAAC,MAFJ,CAEuBK,EAAAL,MAFvB,CAEyCJ,CAFzC,CAEmD,IAFnD,CAIe,EAAf,GAAGC,EAAH,GAEIF,CAAAI,MAAAE,OAFJ,CAEwBI,EAAAJ,OAFxB,CAE2CJ,EAF3C,CAEqD,IAFrD,CAnDJ,CApVAe,OAAAC,OAAA,CAAezB,CAAf,CAAiC,sCAAjC,CADJ,KAIQoB,EAAiBpB,CAAA0B,qBAAA,CAAsC,QAAtC,CAAA,CAAgD,CAAhD,CAJzB,CAKQC,EAAkBP,CAAAQ,WAAA,CAA0B,IAA1B,CAL1B,CAOQC,EAAc7B,CAAA0B,qBAAA,CAAsC,KAAtC,CAAA,CAA6C,CAA7C,CAPtB,CAQQI,EAAiBC,QAAAC,cAAA,CAAuB,KAAvB,CARzB,CAWQC,CAXR,CAaQC,CAbR,CAgBQC,CAhBR,CAmBQC,CAnBR,CAsBQ5B,EAAU,CAtBlB,CAyBQC,EAAU,CAzBlB,CAiCQ4B,CAjCR,CAoCQC,EAAe,CAAA,CApCvB,CAyCQC,CAzCR,CA4CQC,CA5CR,CA+CQC,EA/CR,CAiDQC,GAAU,CAAA,CAjDlB,CAmDQC,GAAS,IAeTC,EAAAA,CAAe,IAAIC,WAAJ,CAAgB,CAC/B,GAD+B,CACzB,GADyB,CACnB,GADmB,CACb,GADa,CACP,GADO,CACD,GADC,CACK,GADL,CACW,GADX,CAE/B,GAF+B,CAEzB,GAFyB,CAEnB,GAFmB,CAEb,GAFa,CAEP,GAFO,CAED,GAFC,CAEK,GAFL,CAEW,GAFX,CAG/B,GAH+B,CAGzB,GAHyB,CAGnB,GAHmB,CAGb,GAHa,CAGP,GAHO,CAGD,GAHC,CAGK,GAHL,CAGW,GAHX,CAI/B,GAJ+B,CAIzB,GAJyB,CAInB,GAJmB,CAIb,GAJa;AAIP,GAJO,CAID,GAJC,CAIK,IAJL,CAIa,GAJb,CAK/B,GAL+B,CAKzB,GALyB,CAKnB,GALmB,CAKb,GALa,CAKP,GALO,CAKD,GALC,CAKK,GALL,CAKW,GALX,CAM/B,GAN+B,CAMzB,IANyB,CAMjB,GANiB,CAMX,GANW,CAML,GANK,CAMC,GAND,CAMO,GANP,CAMa,GANb,CAO/B,IAP+B,CAOvB,IAPuB,CAOf,IAPe,CAOP,IAPO,CAOC,IAPD,CAOS,IAPT,CAOiB,IAPjB,CAOyB,IAPzB,CAQ/B,IAR+B,CAQvB,IARuB,CAQf,IARe,CAQP,IARO,CAQC,IARD,CAQS,IART,CAQiB,IARjB,CAQyB,IARzB,CAS/B,IAT+B,CASvB,IATuB,CASf,IATe,CASP,IATO,CASC,IATD,CASS,IATT,CASiB,IATjB,CASyB,IATzB,CAU/B,IAV+B,CAUvB,IAVuB,CAUf,IAVe,CAUP,IAVO,CAUC,IAVD,CAUS,IAVT,CAUiB,IAVjB,CAUyB,IAVzB,CAW/B,IAX+B,CAWvB,IAXuB,CAWf,IAXe,CAWP,IAXO,CAWC,IAXD,CAWS,IAXT,CAWiB,IAXjB,CAWyB,IAXzB,CAY/B,IAZ+B,CAYvB,IAZuB,CAYf,IAZe,CAYP,IAZO,CAYC,IAZD,CAYS,IAZT,CAYiB,IAZjB,CAYyB,IAZzB,CAa/B,GAb+B,CAaxB,GAbwB,CAalB,GAbkB,CAaX,GAbW,CAaJ,GAbI,CAaG,GAbH,CAaU,GAbV,CAagB,GAbhB,CAc/B,GAd+B,CAcxB,GAdwB,CAcjB,GAdiB,CAcV,GAdU,CAcH,IAdG,CAcK,GAdL,CAcY,GAdZ,CAcmB,IAdnB,CAe/B,IAf+B,CAevB,GAfuB,CAejB,IAfiB,CAeT,IAfS,CAeD,IAfC,CAeO,IAfP,CAee,GAff,CAgB/B,IAhB+B,CAgBvB,GAhBuB,CAgBjB,IAhBiB,CAgBT,GAhBS,CAgBH,IAhBG,CAgBK,IAhBL,CAgBa,GAhBb,CAgBmB,IAhBnB,CAgB2B,GAhB3B,CAAhB,CA8BnB,KAVA,IAAIC,GAAc,IAAID,WAAJ,CAAgB,CAC9B,EAD8B,CACtB,IADsB,CACd,IADc;AACN,IADM,CACE,IADF,CACU,IADV,CACkB,IADlB,CAC0B,IAD1B,CAE9B,IAF8B,CAEtB,IAFsB,CAEd,IAFc,CAEN,IAFM,CAEE,IAFF,CAEU,IAFV,CAEkB,IAFlB,CAE0B,IAF1B,CAG9B,IAH8B,CAGtB,IAHsB,CAGd,IAHc,CAGN,IAHM,CAGE,GAHF,CAGU,GAHV,CAGkB,IAHlB,CAG0B,IAH1B,CAI9B,IAJ8B,CAItB,IAJsB,CAId,IAJc,CAIN,IAJM,CAIE,IAJF,CAIU,IAJV,CAIkB,IAJlB,CAI0B,IAJ1B,CAAhB,CAAlB,CAOIE,GAAU,EAPd,CAQIC,CARJ,CAUQjH,GAAI,CAAZ,CAAmB,GAAnB,CAAeA,EAAf,CAAwBA,EAAA,EAAxB,CAIQiH,CAWJ,CAbO,GAAP,CAAGjH,EAAH,CAEU6G,CAAA,CAAa7G,EAAb,CAAiB,GAAjB,CAFV,CAIY,EAAP,CAAGA,EAAH,CAEK+G,EAAA,CAAY/G,EAAZ,CAFL,CAMKA,EAGV,CAAAgH,EAAA,CAAQhH,EAAR,CAAA,CAAakH,MAAAC,aAAA,CAAoBF,CAApB,CAGjBrB,EAAA,sBAAA,CAA2C,CAAA,CAE3CG,EAAAnB,MAAAwC,SAAA,CAAgC,UAChCrB,EAAAnB,MAAAyC,gBAAA,CAAuC,MACvCtB,EAAAnB,MAAAC,MAAA,CAA6B,KAC7BkB,EAAAnB,MAAA0C,QAAA,CAA+B,cAE/BxB,EAAAlB,MAAA0C,QAAA,CAA4B,OAC5BjC,EAAAT,MAAA0C,QAAA,CAA+B,MAE/B,KAAAtL,EAAA,CAAWA,CAEXA,EAAAuL,SAAA,CAAa,iBAAb,CAAgC,QAAQ,CAACxH,CAAD,CACxC,CACI,IAAAyH,GAAA,CAAczH,CAAd,CADJ,CADA,CAGG,IAHH,CAKA/D,EAAAuL,SAAA,CAAa,wBAAb;AAAuC,QAAQ,CAACxH,CAAD,CAC/C,CACI,IAAA0H,GAAA,CAAmB1H,CAAnB,CADJ,CADA,CAGG,IAHH,CAKA/D,EAAAuL,SAAA,CAAa,iBAAb,CAAgC,QAAQ,CAACxH,CAAD,CACxC,CAEI,IAAA2H,GAAA,CAAc3H,CAAA,CAAK,CAAL,CAAd,CAAuBA,CAAA,CAAK,CAAL,CAAvB,CAAgCA,CAAA,CAAK,CAAL,CAAhC,CAAyCA,CAAA,CAAK,CAAL,CAAzC,CAAkDA,CAAA,CAAK,CAAL,CAAlD,CAFJ,CADA,CAIG,IAJH,CAMA/D,EAAAuL,SAAA,CAAa,sBAAb,CAAqC,QAAQ,CAACxH,CAAD,CAC7C,CACI,IAAA4H,GAAA,CAAmB5H,CAAA,CAAK,CAAL,CAAnB,CAA4BA,CAAA,CAAK,CAAL,CAA5B,CADJ,CADA,CAGG,IAHH,CAIA/D,EAAAuL,SAAA,CAAa,+BAAb,CAA8C,QAAQ,CAACxH,CAAD,CACtD,CACI,IAAA6H,GAAA,CAA4B7H,CAAA,CAAK,CAAL,CAA5B,CAAqCA,CAAA,CAAK,CAAL,CAArC,CADJ,CADA,CAGG,IAHH,CAKA/D,EAAAuL,SAAA,CAAa,cAAb,CAA6B,QAAQ,EACrC,CACI,IAAAM,GAAA,EADJ,CADA,CAGG,IAHH,CAKA7L,EAAAuL,SAAA,CAAa,sBAAb,CAAqC,QAAQ,CAACxH,CAAD,CAC7C,CACI,IAAA+H,GAAA,CAAmB/H,CAAA,CAAK,CAAL,CAAnB,CAA4BA,CAAA,CAAK,CAAL,CAA5B,CADJ,CADA,CAGG,IAHH,CAIA/D,EAAAuL,SAAA,CAAa,2BAAb,CAA0C,QAAQ,CAACxH,CAAD,CAClD,CACI,IAAAgI,GAAA,CAAwBhI,CAAA,CAAK,CAAL,CAAxB,CAAiCA,CAAA,CAAK,CAAL,CAAjC,CAA0CA,CAAA,CAAK,CAAL,CAA1C,CAAmDA,CAAA,CAAK,CAAL,CAAnD,CADJ,CADA,CAGG,IAHH,CAMA,KAAAiI,GAAA,CAAYC,QAAQ,EACpB,CAGI,IAAAH,GAAA,CAAmB,EAAnB;AAAuB,EAAvB,CAEA,KAAAI,GAAA,EALJ,CAQA,KAAAC,EAAA,CAAuBC,QAAQ,EAC/B,CACI,GAAI,CACAxE,MAAAyE,KAAA,CAAYhD,CAAAiD,UAAA,EAAZ,CADA,CAGJ,MAAMC,CAAN,CAAS,EAJb,CAOA,KAAAb,GAAA,CAAgBc,QAAQ,CAACC,CAAD,CAAMC,CAAN,CAAWzB,EAAX,CAAgB0B,EAAhB,CAA0BC,EAA1B,CACxB,CACOH,CAAH,CAAS/B,EAAT,EAA6BgC,CAA7B,CAAmCjC,CAAnC,GAEQoC,CAMJ,CANQ,CAMR,EANaJ,CAMb,CANmBhC,CAMnB,CANqCiC,CAMrC,EAJAlC,CAAA,CAAeqC,CAAf,CAIA,CAJoB5B,EAIpB,CAHAT,CAAA,CAAeqC,CAAf,CAAmB,CAAnB,CAGA,CAHwBF,EAGxB,CAFAnC,CAAA,CAAeqC,CAAf,CAAmB,CAAnB,CAEA,CAFwBD,EAExB,CAAAtC,CAAA,CAAamC,CAAb,CAAA,CAAoB,CARxB,CADJ,CAaA,KAAAP,GAAA,CAAaY,QAAQ,EACrB,CACQnC,EAAJ,EAEI9C,qBAAA,CAAsB0C,CAAA,CAAewC,EAAf,CAAkCC,EAAxD,CAHR,CAOA,KAAIA,GAAc,QAAQ,EAC1B,CACI,IAAI,IAAIhJ,EAAI,CAAZ,CAAeA,CAAf,CAAmB0G,EAAnB,CAAqC1G,CAAA,EAArC,CAEOsG,CAAA,CAAatG,CAAb,CAAH,GAEI4G,EAAAqC,EAAA,CAAuBjJ,CAAvB,CACA,CAAAsG,CAAA,CAAatG,CAAb,CAAA,CAAkB,CAHtB,CAOJ,KAAAkI,GAAA,EAVJ,CADkB3I,KAAA,CAYX,IAZW,CAAlB,CAcIwJ,GAAmB,QAAQ,EAC/B,CACI,IAAA/M,EAAAsG,KAAA,CAAc,oBAAd,CACA,KAAA4F,GAAA,EAFJ,CADuB3I,KAAA,CAIhB,IAJgB,CAMvB,KAAA2J,GAAA,CAAeC,QAAQ,EACvB,CACIxC,EAAA,CAAU,CAAA,CADd,CAIA,KAAAa,GAAA,CAAgB4B,QAAQ,CAACC,CAAD,CACxB,CAGI,CAFA9C,CAEA,CAFe8C,CAEf,GAEIvD,CAAAlB,MAAA0C,QACA,CAD4B,MAC5B,CAAAjC,CAAAT,MAAA0C,QAAA,CAA+B,OAHnC,GAOIxB,CAAAlB,MAAA0C,QACA,CAD4B,OAC5B;AAAAjC,CAAAT,MAAA0C,QAAA,CAA+B,MARnC,CAHJ,CAeA,KAAAO,GAAA,CAAoByB,QAAQ,EAC5B,CACI1D,CAAA2D,UAAA,CAA4B,MAC5B3D,EAAA4D,SAAA,CAAyB,CAAzB,CAA4B,CAA5B,CAA+BnE,CAAAR,MAA/B,CAAqDQ,CAAAP,OAArD,CAFJ,CASA,KAAAgD,GAAA,CAAqB2B,QAAQ,CAACC,CAAD,CAAOC,CAAP,CAC7B,CACI,GAAGD,CAAH,GAAYjD,CAAZ,EAA+BkD,CAA/B,GAAwCjD,EAAxC,CAAA,CAKAJ,CAAA,CAAe,IAAIsD,SAAJ,CAAcD,CAAd,CACfnD,EAAA,CAAiB,IAAIqD,UAAJ,CAAeH,CAAf,CAAsBC,CAAtB,CAA6B,CAA7B,CAEjBlD,EAAA,CAAkBiD,CAGlB,KAFAhD,EAEA,CAFmBiD,CAEnB,CAAM7D,CAAAgE,WAAAjL,OAAN,CAAsC8K,CAAtC,CAAA,CAEI7D,CAAAiE,YAAA,CAAwBjE,CAAAkE,WAAxB,CAGJ,KAAA,CAAMlE,CAAAgE,WAAAjL,OAAN,CAAsC8K,CAAtC,CAAA,CAEI7D,CAAAmE,YAAA,CAAwBjE,QAAAC,cAAA,CAAuB,KAAvB,CAAxB,CAGJ,KAAQjG,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB2J,CAAnB,CAAyB3J,CAAA,EAAzB,CAEI,IAAAiJ,EAAA,CAAqBjJ,CAArB,CAmDJuE,EAAA,CAAeuB,CAAf,CAA4BrB,CAA5B,CAAqCC,CAArC,CAA8C,CAAA,CAA9C,CA1EA,CADJ,CA8BA,KAAAqD,GAAA,CAA0BmC,QAAQ,CAACrF,CAAD,CAAQC,CAAR,CAAgBqF,EAAhB,CAA8BC,EAA9B,CAClC,CAUI/E,CAAAT,MAAA0C,QAAA,CAA+B,OAE/BjC,EAAAR,MAAA,CAAuBA,CACvBQ,EAAAP,OAAA,CAAwBA,CAQxBoB,EAAA,CAAqBN,CAAAyE,gBAAA,CAAgCF,EAAhC,CAA8CC,EAA9C,CACJ,KAAI7N,UAAJ,CAAe2J,CAAAnG,KAAAuK,OAAf,CACjBnE,EAAA,CAAmB,IAAI0D,UAAJ,CAAe3D,CAAAnG,KAAAuK,OAAf,CAKnB;IAAAtO,EAAAsG,KAAA,CAAc,oBAAd,CAAoC,CAAC6D,CAAD,CAApC,CAAwD,CAACA,CAAAmE,OAAD,CAAxD,CAqBA/F,EAAA,CAAec,CAAf,CAA+BZ,CAA/B,CAAwCC,CAAxC,CAAiD,CAAA,CAAjD,CAjDJ,CAgCA,KAAA6F,EAAA,CAAiBC,QAAQ,CAACC,CAAD,CAAMC,CAAN,CACzB,CACIjG,CAAA,CAAUgG,CACV/F,EAAA,CAAUgG,CASVnG,EAAA,CAAeuB,CAAf,CAA4BrB,CAA5B,CAAqCC,CAArC,CAA8C,CAAA,CAA9C,CAKAH,EAAA,CAAec,CAAf,CAA+BZ,CAA/B,CAAwCC,CAAxC,CAAiD,CAAA,CAAjD,CAhBJ,CAOA,KAAA6F,EAAA,CAAe9F,CAAf,CAAwBC,CAAxB,CAsEA,KAAAkD,GAAA,CAA8B+C,QAAQ,CAACC,CAAD,CAAQC,CAAR,CACtC,CACOD,CAAH,CAAW,EAAX,CAEI7E,CAAAnB,MAAA0C,QAFJ,CAEmC,MAFnC,EAMIvB,CAAAnB,MAAA0C,QAGA,CAH+B,QAG/B,CADAvB,CAAAnB,MAAAE,OACA,CAD8BrG,IAAAqM,IAAA,CAAS,EAAT,CAAaD,CAAb,CAAmBD,CAAnB,CAC9B,CAD0D,IAC1D,CAAA7E,CAAAnB,MAAAmG,UAAA,CAAiCtM,IAAAqM,IAAA,CAAS,EAAT,CAAaF,CAAb,CAAjC,CAAuD,IAT3D,CADJ,CAcA,KAAAjD,GAAA,CAAqBqD,QAAQ,CAACvC,CAAD,CAAMC,CAAN,CAC7B,CACI,GAAGD,CAAH,GAAWrC,CAAX,EAAyBsC,CAAzB,GAAiCrC,CAAjC,CAEIC,CAAA,CAAamC,CAAb,CAIA,CAJoB,CAIpB,CAHAnC,CAAA,CAAaF,CAAb,CAGA,CAH2B,CAG3B,CADAA,CACA,CADaqC,CACb,CAAApC,CAAA,CAAaqC,CAPrB,CAWA,KAAAO,EAAA,CAAuBgC,QAAQ,CAACxC,CAAD,CAC/B,CAAA,IACQxG,EAAS,CAATA,CAAawG,CAAbxG,CAAmBwE,CAD3B,CAQQyE,EAEJ,KAAAC,GAAcrF,CAAAgE,WAAA,CAAuBrB,CAAvB,CACd,KAAA2C,GAAWpF,QAAAC,cAAA,CAAuB,KAAvB,CAEX,KAAI,IAAIjG,GAAI,CAAZ,CAAeA,EAAf,CAAmByG,CAAnB,CAAA,CACA,CACI,IAAA4E,GAAgBrF,QAAAC,cAAA,CAAuB,MAAvB,CAEhB,KAAA0C,EAAWnC,CAAA,CAAevE,CAAf;AAAwB,CAAxB,CACX,KAAA2G,GAAWpC,CAAA,CAAevE,CAAf,CAAwB,CAAxB,CAEXoJ,GAAAzG,MAAAyC,gBAAA,CAAsCnD,CAAA,CAAgByE,CAAhB,CACtC0C,GAAAzG,MAAA0G,MAAA,CAA4BpH,CAAA,CAAgB0E,EAAhB,CAK5B,KAHAsC,EAGA,CAHO,EAGP,CAAMlL,EAAN,CAAUyG,CAAV,EACID,CAAA,CAAevE,CAAf,CAAwB,CAAxB,CADJ,GACmC0G,CADnC,EAEInC,CAAA,CAAevE,CAAf,CAAwB,CAAxB,CAFJ,GAEmC2G,EAFnC,CAAA,CAWI,GALAsC,EAKG,EALKlE,EAAA,CAFIR,CAAA+E,CAAetJ,CAAfsJ,CAEJ,CAKL,CAHHvL,EAAA,EAGG,CAFHiC,CAEG,EAFO,CAEP,CAAAwG,CAAA,GAAQrC,CAAX,CAEI,GAAGpG,EAAH,GAASqG,CAAT,CAII,KAJJ,KAMK,IAAGrG,EAAH,GAASqG,CAAT,CAAsB,CAAtB,CACL,CAEI+E,EAAAnB,YAAA,CAAqBlE,CAArB,CACA,MAHJ,CAQRsF,EAAAG,YAAA,CAA4BN,EAC5BE,GAAAnB,YAAA,CAAqBoB,EAArB,CAzCJ,CA4CAF,EAAAM,WAAAC,aAAA,CAAoCN,EAApC,CAA8CD,EAA9C,CA1DJ,CA6DA,KAAA1D,GAAA,CAAqBkE,QAAQ,CAACC,CAAD,CAC7B,CA4BIA,CAAAC,QAAA,CAAe,QAAA,CAACC,CAAD,CACf,CACIlG,CAAAmG,aAAA,CACI7F,CADJ,CAEI4F,CAAAE,GAFJ,CAEqBF,CAAAG,GAFrB,CAGIH,CAAAI,GAHJ,CAGqBJ,CAAAK,GAHrB,CAIIL,CAAAG,GAJJ,CAKIH,CAAAK,GALJ,CAMIL,CAAA3B,GANJ,CAOI2B,CAAA1B,GAPJ,CADJ,CADA,CA5BJ,CA0CA,KAAApC,GAAA,EAlhBJ,C,CCfC,SAAQ,EACT,CAgBIoE,QAASA,EAAmB,EAC5B,CAII,IAHA,IAAIC,EAAQC,QAAAC,OAAAC,OAAA,CAAuB,CAAvB,CAAAC,MAAA,CAAgC,GAAhC,CAAZ,CACIC,EAAa,EADjB,CAGQ1M,EAAI,CAAZ,CAAeA,CAAf,CAAmBqM,CAAAxN,OAAnB,CAAiCmB,CAAA,EAAjC,CACA,CACI,IAAI2M,EAAQN,CAAA,CAAMrM,CAAN,CAAAyM,MAAA,CAAe,GAAf,CACZC,EAAA,CAAWC,CAAA,CAAM,CAAN,CAAX,CAAA,CAAuBC,kBAAA,CAAmBD,CAAA,CAAM,CAAN,CAAnB,CAF3B,CAKA,MAAOD,EAVX,CAoCAG,QAASA,EAAU,CAAC5F,CAAD,CAAM/E,CAAN,CACnB,CAGI,IAFA,IAAI4K,EAAS,EAEb,CAAgB,CAAhB,CAAM5K,CAAA,EAAN,CAAA,CAEI4K,CAAA,EAAU7F,CAGd,OAAO6F,EARX,CAmDAC,QAASA,EAAC,CAACrP,CAAD,CACV,CAQI,MAPSsI,SAAAgH,eAAAC,CAAwBvP,CAAxBuP,CADb,CAWAC,QAASA,EAAM,EACf,CAmWIC,QAASA,EAAa,CAACC,CAAD,CACtB,CACIL,CAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAAA,CAAkC,MA3btCtB,SAAAqH,MAAA,CA4bcD,CAAA3N,KA5bd,CAAwB,gBA8bpB6N,EAAAvR,WAAA,CAAsBqR,CAAArR,WAEnBqR,EAAAnQ,MAAH,GAEI8P,CAAA,CAAE,OAAF,CAAAnI,MAAA0C,QACA,CAD2B,MAC3B,CAAAgG,CAAAC,GAAA,CAAyBH,CAAAnQ,MAH7B,CAMAqQ,EAAAE,GAAA,CAAeJ,CAAAI,GACfF,EAAAG,GAAA,CAAiBL,CAAAK,GACjBH,EAAAI,GAAA,CAAeN,CAAAM,GACfJ,EAAAK,GAAA,CAAqBP,CAAAO,GAErBL,EAAAM,GAAA,CAAuBR,CAAAQ,GACvBN,EAAAO,GAAA;AAA2BT,CAAAS,GAE3BP,EAAA5P,GAAA,CAAc0P,CAAA1P,GAEUoQ,KAAAA,EAAxB,GAAGV,CAAAW,GAAH,GAEIT,CAAAS,GAFJ,CAE0BX,CAAAW,GAF1B,CAKaX,EAAAY,YAAb,GAEIjB,CAAA,CAAE,aAAF,CAAAnI,MAAA0C,QACA,CADiC,OACjC,CAAAyF,CAAA,CAAE,aAAF,CAAAkB,UAAA,CAA6B,MAA7B,CAAsCb,CAAAY,YAH1C,CAMAE,EAAA,CAAgBZ,CAAhB,CAA0Ba,CAA1B,CAjCJ,CAoCAA,QAASA,EAAI,CAACC,CAAD,CACb,CACOC,EAAA,EAAH,EAEIC,UAAA,CAAW,QAAQ,EACnB,CAEIF,CAAAG,GAAA,CAA4BF,EAAA,EAA5B,CAA8C,IAA9C,CAFJ,CADA,CAIG,EAJH,CAHR,CAxYA,GAAK,cAAL,EAAuB,KAAIG,cAA3B,CAAA,CAOA,IAAIlB,EAAW,EAEfP,EAAA,CAAE,iBAAF,CAAA0B,QAAA,CAA+B,QAAQ,EACvC,CACI1B,CAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAAA,CAAkC,MAClCoH,EAAA,CAAY,QAAZ,CAGA,KAEIC,EAAc5B,CAAA,CAAE,cAAF,CAAA6B,MAAA,CAAwB,CAAxB,CAClB,IAAGD,CAAH,CACA,CACI,IAAAE,GAAYF,CACZrB,EAAAE,GAAA,CAAe,CAAElD,OAAQqE,CAAV,CAFnB,CAMA,GADIG,CACJ,CADc/B,CAAA,CAAE,UAAF,CAAA6B,MAAA,CAAoB,CAApB,CACd,CAEIC,EACA,CADYC,CACZ,CAAAxB,CAAAG,GAAA,CAAiB,CAAEnD,OAAQwE,CAAV,CAIrB,IADIC,CACJ,CADchC,CAAA,CAAE,UAAF,CAAA6B,MAAA,CAAoB,CAApB,CACd,CAEIC,EACA,CADYE,CACZ;AAAAzB,CAAAI,GAAA,CAAe,CAAEpD,OAAQyE,CAAV,CAGhBhC,EAAA,CAAE,iBAAF,CAAH,GAEQiC,CAFR,CAEyBjC,CAAA,CAAE,iBAAF,CAAA6B,MAAA,CAA2B,CAA3B,CAFzB,IAKQC,EACA,CADYG,CACZ,CAAA1B,CAAAK,GAAA,CAAqB,CAAErD,OAAQ0E,CAAV,CAN7B,CAUGH,GAAH,GAvIJ7I,QAAAqH,MAuII,CAEcwB,EAAApP,KAFd,CAvIoB,gBAuIpB,CAKAyO,EAAA,CAAgBZ,CAAhB,CA3CJ,CAmDA,KAAI2B,EAAO,CACP,CACIvR,GAAI,WADR,CAEIT,MAAO,CACH,IAAOiS,CAAP,CAAc,qBADX,CAEH,KAAQ,SAFL,CAFX,CAMIzP,KAAM,YANV,CAOImO,GAAa,SAPjB,CAQIC,GAAiB,OARrB,CAWIH,GAAK,CACD,IAAOwB,CAAP,CAAc,kBADb,CAED,KAAQ,WAFP,CAGD,MAAS,CAAA,CAHR,CAXT,CAiBInT,WAAY,CACR,OAAU,CACN,IAAOmT,CAAP,CAAc,gBADR,CAEN,KAAQ,QAFF,CADF,CAKR,QAAWA,CAAX,CAAkB,OALV,CAjBhB,CADO,CA0BP,CACIxR,GAAI,OADR,CAEIgQ,GAAK,CACD,IAAOwB,CAAP,CAAc,kBADb,CAED,KAAQ,OAFP,CAFT,CAMInB,GAAY,GANhB,CAOItO,KAAM,QAPV,CA1BO,CAmCP,CACI/B,GAAI,SADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,uBADb;AAED,KAAQ,MAFP,CAFT,CAMIzP,KAAM,SANV,CAnCO,CA2CP,CACI/B,GAAI,QADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,wBADb,CAED,KAAQ,OAFP,CAFT,CAMIxB,GAAK,CACD,IAAOwB,CAAP,CAAc,mBADb,CAED,KAAQ,QAFP,CANT,CAUIzP,KAAM,QAVV,CA3CO,CAuDP,CACI/B,GAAI,UADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,uBADb,CAED,KAAQ,OAFP,CAFT,CAMIzP,KAAM,SANV,CAvDO,CA+DP,CACI/B,GAAI,SADR,CAEI+P,GAAO,CACH,IAAOyB,CAAP,CAAc,kBADX,CAEH,KAAQ,OAFL,CAFX,CAMIzP,KAAM,OANV,CA/DO,CAuEP,CACI/B,GAAI,QADR,CAEI+P,GAAO,CACH,IAAOyB,CAAP,CAAc,mBADX,CAEH,KAAQ,OAFL,CAFX,CAMIzP,KAAM,OANV,CAOI1D,WAAY,EAPhB,CAvEO,CAgFP,CACI2B,GAAI,WADR,CAEI8P,GAAK,CACD,IAAQ2B,CAAD,EAAiBC,CAAjB,CACC,oBADD,CAEC,kDAHP,CAID,KAAQ,OAJP,CAFT;AAQI3P,KAAM,WARV,CAhFO,CA0FP,CACI/B,GAAI,oBADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,oBADb,CAED,KAAQ,OAFP,CAFT,CAMIzP,KAAM,WANV,CA1FO,CAkGP,CACI/B,GAAI,SADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,oBADb,CAED,KAAQ,OAFP,CAFT,CAMIzP,KAAM,SANV,CAlGO,CA0GP,CACI/B,GAAI,OADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,gBADb,CAED,KAAQ,OAFP,CAFT,CAMIzP,KAAM,QANV,CA1GO,CAkHP,CACI/B,GAAI,OADR,CAEI+P,GAAO,CACH,IAAOyB,CAAP,CAAc,oBADX,CAEH,KAAQ,OAFL,CAFX,CAMIzP,KAAM,OANV,CAlHO,CA0HP,CACI/B,GAAI,WADR,CAEI8P,GAAK,CACD,IAAO0B,CAAP,CAAc,sBADb,CAFT,CAKIzP,KAAM,WALV,CA1HO,CAiIP,CACI/B,GAAI,WADR,CAEIkQ,GAAa,QAFjB,CAGIF,GAAK,CACD,IAAOwB,CAAP,CAAc,sBADb,CAED,MAAS,CAAA,CAFR,CAGD,KAAQ,SAHP,CAHT,CAQIzP,KAAM,YARV,CASIxC,MAAO,CACH,IAAOiS,CAAP;AAAc,4BADX,CAEH,KAAQ,QAFL,CATX,CAjIO,CA+IP,CACIxR,GAAI,WADR,CAEIkQ,GAAa,QAFjB,CAGIF,GAAK,CACD,IAAOwB,CAAP,CAAc,gBADb,CAED,KAAQ,SAFP,CAGD,MAAS,CAAA,CAHR,CAHT,CAQIzP,KAAM,YARV,CASIxC,MAAO,CACH,IAAOiS,CAAP,CAAc,4BADX,CAEH,KAAQ,QAFL,CATX,CA/IO,CA6JP,CACIxR,GAAI,SADR,CAEIkQ,GAAa,SAFjB,CAGI3Q,MAAO,CACH,IAAOiS,CAAP,CAAc,0BADX,CAEH,KAAQ,SAFL,CAHX,CAOIxB,GAAK,CACD,IAAOyB,CAAA,CAAe,+BAAf,CACeE,CADf,CAC4B,qBAFlC,CAGD,KAAQ,WAHP,CAID,MAAS,CAAA,CAJR,CAPT,CAaI5P,KAAM,SAbV,CA7JO,CA4KP,CACI/B,GAAI,SADR,CAEIkQ,GAAa,SAFjB,CAGIH,GAAO,CACH,IAAOyB,CAAP,CAAc,kCADX,CAEH,MAAS,CAAA,CAFN,CAHX,CAOIjS,MAAO,CACH,IAAOiS,CAAP,CAAc,0BADX;AAEH,KAAQ,SAFL,CAPX,CAWIzP,KAAM,SAXV,CAYIuO,YAAa,oDAZjB,CA5KO,CAAX,CAgOIK,GAAajC,CAAA,EAhOjB,CAiOIkD,GAAUjB,EAAA,QAEXA,GAAA,eAAH,GAEIf,CAAAiC,GAFJ,CAE8B,CAAA,CAF9B,CAKA,KAAI,IAAIvP,GAAI,CAAZ,CAAeA,EAAf,CAAmBiP,CAAApQ,OAAnB,CAAgCmB,EAAA,EAAhC,CACA,CACI,IAAIoN,GAAQ6B,CAAA,CAAKjP,EAAL,CAEZ,IAAGsP,EAAH,GAAelC,EAAA1P,GAAf,CACA,CACIyP,CAAA,CAAcC,EAAd,CACA,OAFJ,CAKA,IAAIoC,GAAUzC,CAAA,CAAE,QAAF,CAAaK,EAAA1P,GAAb,CAEX8R,GAAH,GAEIA,EAAAf,QAFJ,CAEsB,QAAQ,CAACrB,CAAD,CAAQoC,EAAR,CAC1B,CACId,CAAA,CAAYtB,CAAA1P,GAAZ,CACA8R,GAAAC,KAAA,EAEAtC,EAAA,CAAcC,CAAd,CAJJ,CADkB7N,KAAA,CAMX,IANW,CAML6N,EANK,CAMEoC,EANF,CAFtB,CAXJ,CAuBe,QAAf,GAAGF,EAAH,GAEOjB,EAAA,CAAW,SAAX,CA2BA,GAzBCf,CAAAI,GAyBD,CAzBgB,CACX,KAAQgC,QAAA,CAASrB,EAAA,CAAW,UAAX,CAAT,CAAiC,EAAjC,CAAR,EAAgDP,IAAAA,EADrC,CAEX,IAAOO,EAAA,CAAW,SAAX,CAFI,CAGX,MAAS,CAAA,CAHE,CAyBhB,EAlBAA,EAAA,CAAW,WAAX,CAkBA,GAhBCf,CAAAG,GAgBD,CAhBkB,CACb,KAAQiC,QAAA,CAASrB,EAAA,CAAW,YAAX,CAAT,CAAmC,EAAnC,CAAR,EAAkDP,IAAAA,EADrC,CAEb,IAAOO,EAAA,CAAW,WAAX,CAFM;AAGb,MAAS,CAAA,CAHI,CAgBlB,EATAA,EAAA,CAAW,SAAX,CASA,GAPCf,CAAAE,GAOD,CAPgB,CACX,KAAQkC,QAAA,CAASrB,EAAA,CAAW,UAAX,CAAT,CAAiC,EAAjC,CAAR,EAAgDP,IAAAA,EADrC,CAEX,IAAOO,EAAA,CAAW,SAAX,CAFI,CAGX,MAAS,CAAA,CAHE,CAOhB,EAAAf,CAAAE,GAAA,EAAgBF,CAAAG,GAAhB,EAAkCH,CAAAI,GA7BzC,IA+BQX,CAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAEA,CAFkC,MAElC,CAAA4G,CAAA,CAAgBZ,CAAhB,CAA0Ba,CAA1B,CAjCR,CA7TA,CAAA,IAEIwB,MAAA,CAAM,mFAAN,CAHR,CA+eAzB,QAASA,EAAe,CAACZ,CAAD,CAAWa,CAAX,CACxB,CAII,IAAIP,EAAcN,CAAAM,GAEdA,EAAJ,GAEIA,CAEA,CARKgC,OAQL,CAFcF,QAAA,CAAS3C,CAAA,CAAE,aAAF,CAAA8C,MAAT,CAAiC,EAAjC,CAEd,CAAIjC,CAAJ,GAEI+B,KAAA,CAAM,sCAAN,CACA,CAAA/B,CAAA,CAAc,SAHlB,CAJJ,CAWA,KAAIC,EAAkBP,CAAAO,GAElBA,EAAJ,GAEIA,CAEA,CArBK+B,OAqBL,CAFkBF,QAAA,CAAS3C,CAAA,CAAE,mBAAF,CAAA8C,MAAT,CAAuC,EAAvC,CAElB,CAAIhC,CAAJ,GAEI8B,KAAA,CAAM,0CAAN,CACA;AAAA9B,CAAA,CAAkB,OAHtB,CAJJ,CAWA,IAAG,CAACP,CAAAE,GAAJ,CACA,CACI,IAAImB,GAAc5B,CAAA,CAAE,cAAF,CAAA6B,MAAA,CAAwB,CAAxB,CACfD,GAAH,GAEIrB,CAAAE,GAFJ,CAEmB,CAAElD,OAAQqE,EAAV,CAFnB,CAFJ,CAWA,GAAGrB,CAAAiC,GAAH,CACA,CACQO,EAAAA,CAAW,gBACf,KAAIC,GAAc,mBAFtB,CADA,IAOQD,GACJ,CAD6C,aAC7C,CAAIC,EAAJ,CAAgD,aAYpD,IAAG,CAACzC,CAAAC,GAAJ,CACA,CACI,IAAAyC,GAAO,CACH,IAzBOC,OAyBP,CAAkBH,EADf,CAGP,KAAAI,GAAW,CACP,IA5BOD,OA4BP,CAAkBF,EADX,CAJf,CASA,IAAI3B,GAAW,IAAI+B,CAAJ,CAAe,CAC1B,YAAevC,CADW,CAE1B,gBAAmBC,CAFO,CAI1B,iBAAoBd,CAAA,CAAE,kBAAF,CAJM,CAK1B,iBAAoBA,CAAA,CAAE,QAAF,CALM,CAO1B,WAAcO,CAAAS,GAAd,EAAqC2B,QAAA,CAAS3C,CAAA,CAAE,YAAF,CAAA8C,MAAT,CAAgC,EAAhC,CAArC,EAA4E,CAPlD,CAS1B,kBAAqB,2BATK,CAY1B,KAAQG,EAZkB,CAa1B,SAAYE,EAbc,CAe1B,IAAO5C,CAAAE,GAfmB,CAgB1B,IAAOF,CAAAI,GAhBmB,CAiB1B,MAASJ,CAAAG,GAjBiB,CAmB1B,UAAaH,CAAAK,GAnBa;AAqB1B,cAAiBL,CAAAC,GArBS,CAsB1B,WAAcD,CAAAvR,WAAd,EAAqC,EAtBX,CAwB1B,UAAa,CAAA,CAxBa,CAAf,CA6BfqS,GAAAgC,GAAA,CAAsB,gBAAtB,CAAwC,QAAQ,EAChD,CAMIC,CAAA,CAAQ/C,CAAR,CAAkBc,EAAlB,CAEAD,EAAA,EAAQA,CAAA,CAAKC,EAAL,CARZ,CADA,CAYAA,GAAAgC,GAAA,CAAsB,mBAAtB,CAA2C,QAAQ,CAAC7H,CAAD,CACnD,CAnpBA,IAAI0E,GAAKF,CAAA,CAAE,SAAF,CACTE,GAAArI,MAAA0C,QAAA,CAAmB,OAEnB,IAipBkBiB,CAjpBf+H,GAAH,GAipBkB/H,CAjpBEgI,GAApB,CAAmC,CAAnC,EAipBkBhI,CAjpBsBiI,OAAxC,EAipBkBjI,CAjpBkCkI,MAApD,CAA8D,IAA9D,CAGIxD,EAAAzB,YAAA,CAAiB,oCAHrB,KAAA,CAOA,IAAIkF,GAAO,qBAEgB,SAA3B,GAAG,MAwoBenI,EAxoBR+H,GAAV,EAwoBkB/H,CAxoBqBgI,GAAvC,GAEIG,EAFJ,EAEY,GAFZ,EAwoBkBnI,CAtoBC+H,GAFnB,CAEkC,CAFlC,EAEuC,GAFvC,CAwoBkB/H,CAtoB2BgI,GAF7C,CAE4D,IAF5D,CAKA,IAmoBkBhI,CAnoBfkI,MAAH,EAAkC,QAAlC,GAAc,MAmoBIlI,EAnoBGiI,OAArB,CACA,CACQG,CAAAA,CAASlS,IAAAC,MAAA,CAioBC6J,CAjoBUiI,OAAX,CAioBCjI,CAjoBqBkI,MAAtB,CAAgC,GAAhC,CACbE,EAAA,CAASlS,IAAAqM,IAAA,CAAS,GAAT,CAAcrM,IAAAmS,IAAA,CAAS,CAAT,CAAYD,CAAZ,CAAd,CAET,KAAIE,GAAQpS,IAAAC,MAAA,CAAWiS,CAAX;AAAoB,CAApB,CAGZD,GAAA,CADAA,EACA,EADQC,CACR,CADiB,KACjB,EAAQ9D,CAAA,CAAW,GAAX,CAAgBgE,EAAhB,CACRH,GAAA,EAAQ7D,CAAA,CAAW,GAAX,CAAgB,EAAhB,CAAqBgE,EAArB,CAAR,CAAsC,GAR1C,CADA,IAaIH,GAAA,EAAQ7D,CAAA,CAAW,GAAX,CAAgBiE,CAAA,EAAhB,CAAmC,EAAnC,CAGZ7D,GAAAzB,YAAA,CAAiBkF,EA9BjB,CAgpBA,CADA,CAKAtC,GAAAgC,GAAA,CAAsB,gBAAtB,CAAwC,QAAQ,CAAC7H,CAAD,CAChD,CACI,IAAI0E,GAAKF,CAAA,CAAE,SAAF,CACTE,GAAArI,MAAA0C,QAAA,CAAmB,OACnB2F,GAAAzB,YAAA,CAAiB,UAAjB,CAA8BjD,CAAAwI,GAA9B,CAA4C,kEAHhD,CADA,CAtHJ,CAmIAV,QAASA,EAAO,CAAC/C,CAAD,CAAWc,CAAX,CAChB,CA+DI4C,QAASA,EAAW,EACpB,CACI,IAAIC,EAAMvP,IAAAuP,IAAA,EAAV,CAEIC,GAAsB9C,CAAA+C,GAAA,EAF1B,CAGIC,GAAWF,EAAXE,CAAiCC,EAErCA,GAAA,CAAqBH,EAErB,KAAII,GAAaL,CAAbK,CAAmBC,EACvBC,GAAA,EAAgBF,EAChBC,GAAA,CAAYN,CAEZlE,EAAA,CAAE,OAAF,CAAAvB,YAAA,CAAyB4F,EAAzB,CAAoCE,EAApC,CAAiD,CACjDvE,EAAA,CAAE,WAAF,CAAAvB,YAAA,CAA6B0F,EAA7B,CAAmDM,EAAnD,CAAkE,CAClE,EAAA,CAAAzE,CAAA,CAAE,cAAF,CAAiD,GAAA,CAAAyE,EAAA,CAAe,GAAf,CAAsB,CAAvE,EAAAhG,YAAA,CAnxBM,EAAV,CAAGiG,EAAH,CAEWA,EAFX,CAEkB,GAFlB,CAIe,IAAV,CAAGA,EAAH;CAEOA,EAFP,CAEc,EAFd,CAEmB,CAFnB,EAEwB,IAFxB,CAE+BC,EAAA,CAAaD,EAAb,CAAoB,EAApB,CAAwB,CAAxB,CAF/B,CAE4D,GAF5D,EAMOA,EANP,CAMc,IANd,CAMqB,CANrB,EAM0B,IAN1B,CAOGC,EAAA,EAAcD,EAAd,CAAqB,EAArB,CAA0B,CAA1B,EAA+B,EAA/B,CAAmC,CAAnC,CAPH,CAO2C,IAP3C,CAQGC,EAAA,CAAaD,EAAb,CAAoB,EAApB,CAAwB,CAAxB,CARH,CAQgC,GAyvBrC,CAgJAE,QAASA,EAAyB,CAACC,CAAD,CAAMvU,EAAN,CAClC,CACI,IAAImH,GAAOuI,CAAA,CAAE,MAAF,CAAW1P,EAAX,CAAkB,QAAlB,CAER,EAACuU,CAAJ,EAAsB,SAAtB,CAAWA,CAAA5T,KAAX,CAEIwG,EAAAI,MAAA0C,QAFJ,CAEyB,MAFzB,CAMA9C,EAAAiK,QANA,CAMeoD,QAAQ,EACvB,CACI,IAAIvH,GAAS8D,CAAA0D,GAAA,CAAqBzU,EAArB,CAAb,CACI0U,GAAWzE,CAAA5P,GAAXqU,EAAmC,OAAT,GAAA1U,EAAA,CAAmB,MAAnB,CAA4B,MAAtD0U,CAEDzH,GAAA0H,GAAH,EAEQ3P,EACJ,CADWiI,EAAA0H,GAAA,CAAmBD,EAAnB,CACX,CAAAE,EAAA,CAAS5P,EAAT,CAAe0P,EAAf,CAHJ,EAOIzH,EAAA4H,GAAA,CAAkB,QAAQ,CAACC,EAAD,CAC1B,CACOA,EAAH,CAEIC,EAAA,CAAUD,EAAV,CAAaJ,EAAb,CAFJ,CAMIpC,KAAA,CAAM,mDAAN,CAPR,CADA,CAaJnL,GAAAiL,KAAA,EAxBJ,CAVJ,CAuOA4C,QAASA,GAAa,CAAC9J,CAAD,CACtB,CACOA,CAAA+J,QAAH,CAEI1O,MAAA2O,eAFJ,CAE4BC,QAAQ,EAChC,CACI5O,MAAA2O,eAAA,CAAwB,IACxB,OAAO,wCAFX,CAHJ;AAUI3O,MAAA2O,eAVJ,CAU4B,IAXhC,CAxbAxF,CAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAAA,CAAkC,MAClCyF,EAAA,CAAE,SAAF,CAAAnI,MAAA0C,QAAA,CAA6B,MAC7ByF,EAAA,CAAE,iBAAF,CAAAnI,MAAA0C,QAAA,CAAqC,OACrCyF,EAAA,CAAE,eAAF,CAAAnI,MAAA0C,QAAA,CAAmC,OACnCyF,EAAA,CAAE,kBAAF,CAAAnI,MAAA0C,QAAA,CAAsC,OAEnCgG,EAAAvR,WAAH,EAEI0W,CAAA,CAAsBrE,CAAtB,CAGJrB,EAAA,CAAE,KAAF,CAAA0B,QAAA,CAAmB,QAAQ,EAC3B,CACOL,CCvGJsE,GDuGC,EAEI3F,CAAA,CAAE,KAAF,CAAA8C,MACA,CADiB,KACjB,CAAAzB,CAAAuE,KAAA,EAHJ,GAOI5F,CAAA,CAAE,KAAF,CAAA8C,MACA,CADiB,OACjB,CAAAzB,CAAAwE,GAAA,EARJ,CAWA7F,EAAA,CAAE,KAAF,CAAA0C,KAAA,EAZJ,CAeA1C,EAAA,CAAE,MAAF,CAAA0B,QAAA,CAAoB,QAAQ,EAC5B,CACIL,CAAAuE,KAAA,EACArG,SAAAuG,KAAA,CAAgBvG,QAAAwG,SAFpB,CAKA/F,EAAA,CAAE,YAAF,CAAA0B,QAAA,CAA0B,QAAQ,EAClC,CACI,GAAG,CAACsE,EAAJ,CAEIhG,CAAA,CAAE,cAAF,CAAA0B,QAAA,EAGJL;CAAA4E,GAAA,EACAjG,EAAA,CAAE,YAAF,CAAA0C,KAAA,EAPJ,CAUA,KAAIsD,GAAmB,CAAA,CAEvBhG,EAAA,CAAE,cAAF,CAAA0B,QAAA,CAA4B,QAAQ,EACpC,CACIsE,EAAA,CAAmB,CAACA,EAEpB3E,ECIL6E,EAAH,GDJQ7E,CCMJ6E,EAAAC,EAFJ,CDJkCH,ECIlC,CDHQhG,EAAA,CAAE,cAAF,CAAA8C,MAAA,EAA2BkD,EAAA,CAAmB,KAAnB,CAA2B,IAAtD,EAA8D,YAC9DhG,EAAA,CAAE,cAAF,CAAA0C,KAAA,EALJ,CASA,KAAI8B,GAAY,CAAhB,CACIC,GAAe,CADnB,CAEIH,GAAqB,CAFzB,CAGI8B,CAHJ,CAIIC,GAAgB,CAAA,CAoBpBhF,EAAAgC,GAAA,CAAsB,kBAAtB,CAA0C,QAAQ,EAClD,CACImB,EAAA,CAAY7P,IAAAuP,IAAA,EACZkC,EAAA,CAAWE,WAAA,CAAYrC,CAAZ,CAAyB,GAAzB,CAFf,CADA,CAMA5C,EAAAgC,GAAA,CAAsB,kBAAtB,CAA0C,QAAQ,EAClD,CACIY,CAAA,EACAsC,cAAA,CAAcH,CAAd,CAFJ,CADA,CAOU,KAAA,GAAA,CAAA,CACC,GAAA,CAGX/E,EAAAgC,GAAA,CAAsB,eAAtB,CAAuC,QAAQ,EAC/C,CACIrD,CAAA,CAAE,iBAAF,CAAAnI,MAAA0C,QAAA,CAAqC,OACrCyF,EAAA,CAAE,wBAAF,CAAAvB,YAAA,CAA0C,aAF9C,CADA,CAKA4C,EAAAgC,GAAA,CAAsB,aAAtB;AAAqC,QAAQ,CAACmD,CAAD,CAC7C,CACIC,EAAA,EAAiBD,CAAA,CAAK,CAAL,CAEjBxG,EAAA,CAAE,wBAAF,CAAAvB,YAAA,CAA0C,MAC1CuB,EAAA,CAAE,2BAAF,CAAAvB,YAAA,CAA6C+H,CAAA,CAAK,CAAL,CAC7CxG,EAAA,CAAE,4BAAF,CAAAvB,YAAA,CAA8CgI,EALlD,CADA,CAQApF,EAAAgC,GAAA,CAAsB,cAAtB,CAAsC,QAAQ,CAACmD,CAAD,CAC9C,CACIE,EAAA,EAAkBF,CAAA,CAAK,CAAL,CAElBxG,EAAA,CAAE,2BAAF,CAAAvB,YAAA,CAA6C+H,CAAA,CAAK,CAAL,CAC7CxG,EAAA,CAAE,+BAAF,CAAAvB,YAAA,CAAiDiI,EAJrD,CADA,CASU,KAAA,EAAA,CAAA,CACQ,EAAA,CADR,CAEC,GAAA,CAFD,CAGS,GAAA,CAGnBrF,EAAAgC,GAAA,CAAsB,gBAAtB,CAAwC,QAAQ,EAChD,CACIrD,CAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAAA,CAAkC,OAClCyF,EAAA,CAAE,qBAAF,CAAAvB,YAAA,CAAuC,aAF3C,CADA,CAKA4C,EAAAgC,GAAA,CAAsB,cAAtB,CAAsC,QAAQ,CAACmD,CAAD,CAC9C,CACIC,CAAA,EAAsBD,CAAA,CAAK,CAAL,CACtBG,EAAA,EAA8BH,CAAA,CAAK,CAAL,CAE9BxG;CAAA,CAAE,qBAAF,CAAAvB,YAAA,CAAuC,MACvCuB,EAAA,CAAE,yBAAF,CAAAvB,YAAA,CAA2CgI,CAC3CzG,EAAA,CAAE,2BAAF,CAAAvB,YAAA,CAA6CkI,CANjD,CADA,CASAtF,EAAAgC,GAAA,CAAsB,eAAtB,CAAuC,QAAQ,CAACmD,CAAD,CAC/C,CACIE,EAAA,EAAuBF,CAAA,CAAK,CAAL,CACvBI,GAAA,EAA+BJ,CAAA,CAAK,CAAL,CAE/BxG,EAAA,CAAE,4BAAF,CAAAvB,YAAA,CAA8CiI,EAC9C1G,EAAA,CAAE,8BAAF,CAAAvB,YAAA,CAAgDmI,EALpD,CADA,CAUuB,KAAA,GAAA,CAAA,CACH,GAAA,CAGpBvF,EAAAgC,GAAA,CAAsB,iBAAtB,CAAyC,QAAQ,CAACmD,CAAD,CACjD,CACIK,EAAA,EAA4BL,CAAA,CAAK,CAAL,CAE5BxG,EAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAAA,CAAkC,OAClCyF,EAAA,CAAE,6BAAF,CAAAvB,YAAA,CAA+CoI,EAJnD,CADA,CAOAxF,EAAAgC,GAAA,CAAsB,kBAAtB,CAA0C,QAAQ,CAACmD,CAAD,CAClD,CACIM,EAAA,EAA+BN,CAAA,CAAK,CAAL,CAE/BxG,EAAA,CAAE,cAAF,CAAAnI,MAAA0C,QAAA;AAAkC,OAClCyF,EAAA,CAAE,gCAAF,CAAAvB,YAAA,CAAkDqI,EAJtD,CADA,CASAzF,EAAAgC,GAAA,CAAsB,cAAtB,CAAsC,QAAQ,CAAC0D,CAAD,CAC9C,CACIV,EAAA,CAAgBU,CAChB/G,EAAA,CAAE,oBAAF,CAAAvB,YAAA,CAAsCsI,CAAA,CAAa,KAAb,CAAqB,IAF/D,CADA,CAMA1F,EAAAgC,GAAA,CAAsB,iBAAtB,CAAyC,QAAQ,CAAC7J,CAAD,CACjD,CACOA,CAAH,CAEIwG,CAAA,CAAE,eAAF,CAAAvB,YAFJ,CAEqC,WAFrC,EAMIuB,CAAA,CAAE,eAAF,CAAAvB,YAEA,CAFiC,MAEjC,CADAuB,CAAA,CAAE,UAAF,CAAAvB,YACA,CAD4B,GAC5B,CAAAuB,CAAA,CAAE,UAAF,CAAAvB,YAAA,CAA4B,GARhC,CADJ,CADA,CAaA4C,EAAAgC,GAAA,CAAsB,2BAAtB,CAAmD,QAAQ,CAACmD,CAAD,CAC3D,CACIxG,CAAA,CAAE,UAAF,CAAAvB,YAAA,CAA4B+H,CAAA,CAAK,CAAL,CAA5B,CAAsC,GAAtC,CAA4CA,CAAA,CAAK,CAAL,CAC5CxG,EAAA,CAAE,UAAF,CAAAvB,YAAA,CAA4B+H,CAAA,CAAK,CAAL,CAFhC,CADA,CAOAxG,EAAA,CAAE,OAAF,CAAA0B,QAAA,CAAqB,QAAQ,EAC7B,CACIL,CAAA2F,GAAA,EACAhH,EAAA,CAAE,OAAF,CAAA0C,KAAA,EAFJ,CAKAkC;CAAA,CAA0BrE,CAAAI,GAA1B,CAAwC,KAAxC,CACAiE,EAAA,CAA0BrE,CAAA0G,GAA1B,CAAwC,KAAxC,CACArC,EAAA,CAA0BrE,CAAAE,GAA1B,CAAwC,KAAxC,CACAmE,EAAA,CAA0BrE,CAAA2G,GAA1B,CAAwC,KAAxC,CACAtC,EAAA,CAA0BrE,CAAAG,GAA1B,CAA0C,OAA1C,CAyCAV,EAAA,CAAE,aAAF,CAAA0B,QAAA,CAA2B,QAAQ,EACnC,CACI2D,EAAA,CAAUhE,CAAA8F,EAAAC,EAAAC,GAAV,CAAiC,eAAjC,CACArH,EAAA,CAAE,aAAF,CAAA0C,KAAA,EAFJ,CA+BA1C,EAAA,CAAE,YAAF,CAAA0B,QAAA,CAA0B,QAAQ,EAClC,CACIL,CAAAiG,GAAA,CAAoB,QAAQ,CAACC,CAAD,CAAQxH,EAAR,CAC5B,CACOwH,CAAH,EAEI7O,OAAA8O,IAAA,CAAYD,CAAAE,MAAZ,CACA,CAAA/O,OAAA8O,IAAA,CAAY,uBAAZ,CAAqCD,CAArC,CAHJ,EAOIlC,EAAA,CAAUtF,EAAV,CAAkB,cAAlB,CARR,CADA,CAaAC,EAAA,CAAE,YAAF,CAAA0C,KAAA,EAdJ,CAiBA1C,EAAA,CAAE,YAAF,CAAA0B,QAAA,CAA0B,QAAQ,EAClC,CACI1B,CAAA,CAAE,kBAAF,CAAA0H,MAAA,EACA1H,EAAA,CAAE,YAAF,CAAA0C,KAAA,EAFJ,CAKA1C,EAAA,CAAE,kBAAF,CAAA2H,SAAA,CAAiC,QAAQ,EACzC,CACI,IAAIrS,EAAO,IAAAuM,MAAA,CAAW,CAAX,CAEX,IAAIvM,CAAJ,CAAA,CAKA,IAAIsS,GAAcvG,CCjZnBsE,GDmZIiC,GAAH;AAEIvG,CAAAuE,KAAA,EAGJ,KAAIiC,GAAa,IAAIC,UACrBD,GAAA1H,OAAA,CAAoB4H,QAAQ,CAACvM,EAAD,CAC5B,CACI,GACA,CACI6F,CAAA2G,GAAA,CAAuBxM,EAAAyM,OAAAlI,OAAvB,CADJ,CAGA,MAAMmI,EAAN,CACA,CAGI,KAFAtF,MAAA,CAAM,qDAAN,CAA8DsF,EAA9D,CAAoE,0EAApE,CAEMA,CAAAA,EAAN,CAHJ,CAMGN,EAAH,EAEIvG,CAAAwE,GAAA,EAdR,CAiBAgC,GAAAM,kBAAA,CAA6B7S,CAA7B,CAEA,KAAAwN,MAAA,CAAa,EAjCb,CAHJ,CAuCA9C,EAAA,CAAE,YAAF,CAAA0B,QAAA,CAA0B,QAAQ,EAClC,CACIL,CAAA+G,GAAA,CAAiC,CAC7B,EAD6B,CAE7B,EAF6B,CAG7B,EAH6B,CAM7B,GAN6B,CAO7B,GAP6B,CAQ7B,GAR6B,CAAjC,CAWApI,EAAA,CAAE,YAAF,CAAA0C,KAAA,EAZJ,CAeA1C,EAAA,CAAE,QAAF,CAAA0B,QAAA,CAAsB,QAAQ,EAC9B,CACIL,CAAA+G,GAAA,CAAiC,CAC7B,EAD6B,CAE7B,EAF6B,CAAjC,CAKA7G,WAAA,CAAW,QAAQ,EACnB,CACIF,CAAA+G,GAAA,CAAiC,CAC7B,GAD6B,CAE7B,GAF6B,CAAjC,CADJ,CADA,CAMG,GANH,CAQApI,EAAA,CAAE,QAAF,CAAA0C,KAAA,EAdJ,CAiBA1C,EAAA,CAAE,OAAF,CAAA2H,SAAA;AAAsB,QAAQ,EAC9B,CACI,IAAIvQ,EAAIiR,UAAA,CAAW,IAAAvF,MAAX,CAER,EAAG1L,CAAH,EAAY,CAAZ,CAAQA,CAAR,GAEIiK,CAAAiH,GAAA,CAA0BlR,CAA1B,CAA6BA,CAA7B,CALR,CASA4I,EAAA,CAAE,YAAF,CAAA0B,QAAA,CAA0B,QAAQ,EAClC,CACIL,CAAAkH,GAAA,EADJ,CAIAvI,EAAA,CAAE,kBAAF,CAAA0B,QAAA,CAAgC,QAAQ,EACxC,CACI,GAAGsE,EAAH,EAAuBK,EAAvB,CAEIhF,CAAA4E,GAAA,EACA,CAAAjG,CAAA,CAAE,YAAF,CAAA0C,KAAA,EAHJ,KAQI,IAAG7L,MAAA2R,aAAA,EAAAC,YAAH,CACA,CACI,IAAIC,EAAiBzP,QAAA0P,uBAAA,CAAgC,gBAAhC,CAAA,CAAkD,CAAlD,CAGrBD,EAAA7Q,MAAA+Q,IAAA,CAA2B3P,QAAA4P,KAAAC,UAA3B,CAAqD,GAArD,CAA2D,IAC3DJ,EAAA7Q,MAAAkR,KAAA,CAA4B9P,QAAA4P,KAAAG,WAA5B,CAAuD,GAAvD,CAA6D,IAE7DN,EAAAO,MAAA,EAPJ,CAVR,CAsBA,KAAMP,GAAiBzP,QAAA0P,uBAAA,CAAgC,gBAAhC,CAAA,CAAkD,CAAlD,CAEvBD,GAAAQ,aAAA,CAA4B,aAA5B,CAA2C,KAA3C,CACAR,GAAAQ,aAAA,CAA4B,gBAA5B;AAA8C,KAA9C,CACAR,GAAAQ,aAAA,CAA4B,YAA5B,CAA0C,OAA1C,CACAR,GAAAS,SAAA,CAA0B,CAE1BnJ,EAAA,CAAE,kBAAF,CAAAoJ,iBAAA,CAAuC,WAAvC,CAAoD,QAAA,EACpD,CACIV,EAAAO,MAAA,EADJ,CADA,CAGG,CAAA,CAHH,CAKAjJ,EAAA,CAAE,iBAAF,CAAA0B,QAAA,CAA+B,QAAQ,EACvC,CACIL,CAAAgI,GAAA,EAEArJ,EAAA,CAAE,iBAAF,CAAA0C,KAAA,EAHJ,CAMA1C,EAAA,CAAE,QAAF,CAAAnI,MAAA0C,QAAA,CAA4B,OAE5B1D,OAAAuS,iBAAA,CAAwB,SAAxB,CAAmC9D,EAAnC,CAAkD,CAAA,CAAlD,CACAzO,OAAAuS,iBAAA,CAAwB,OAAxB,CAAiC9D,EAAjC,CAAgD,CAAA,CAAhD,CACAzO,OAAAuS,iBAAA,CAAwB,MAAxB,CAAgC9D,EAAhC,CAA+C,CAAA,CAA/C,CAtbJ,CAycAI,QAASA,EAAqB,CAACrE,CAAD,CAC9B,CACIrB,CAAA,CAAE,kBAAF,CAAAnI,MAAA0C,QAAA,CAAsC,OAEtCyF,EAAA,CAAE,sBAAF,CAAA2H,SAAA,CAAqC,QAAQ,EAC7C,CACIrQ,KAAAvH,UAAA+O,QAAAwK,KAAA,CAA6B,IAAAzH,MAA7B;AAAyC,QAAQ,CAACvM,CAAD,CACjD,CACI,IAAIiU,EAAS,IAAIC,EAAJ,CAA2BlU,CAA3B,CACbiU,EAAApJ,OAAA,CAAgBsJ,QAAQ,EACxB,CACIF,CAAApE,GAAA,CAAkB,QAAQ,CAAC5H,CAAD,CAC1B,CACI8D,CAAAqI,GAAA,CAAqB,GAArB,CAA2BpU,CAAA5C,KAA3B,CAAsC,IAAIlD,UAAJ,CAAe+N,CAAf,CAAtC,CADJ,CADA,CADJ,CAMAgM,EAAAI,KAAA,EATJ,CADA,CAWG,IAXH,CAaA,KAAA7G,MAAA,CAAa,EACb,KAAAJ,KAAA,EAfJ,CAkBA1C,EAAA,CAAE,qBAAF,CAAA4J,WAAA,CAAsC,QAAQ,CAACpO,CAAD,CAC9C,CACmB,EAAf,GAAGA,CAAAqO,MAAH,GAKA,IAAAC,SAEA,CAFgB,CAAA,CAEhB,CAAAzI,CAAA0I,GAAA,CAAmB,IAAAjH,MAAnB,CAA+B,QAAQ,CAACoF,CAAD,CAAM8B,CAAN,CACvC,CACI,IAAAF,SAAA,CAAgB,CAAA,CAEbE,EAAH,EAEQhF,CAIJ,CAJe,IAAAlC,MAAAmH,QAAA,CAAmB,KAAnB,CAA0B,EAA1B,CAAAvK,MAAA,CAAoC,GAApC,CAIf,CAHAsF,CAGA,CAHWA,CAAA,CAASA,CAAAlT,OAAT,CAA2B,CAA3B,CAGX,EAH4C,MAG5C,CADAuT,EAAA,CAAU2E,CAAV,CAAsBhF,CAAtB,CACA,CAAA,IAAAlC,MAAA,CAAa,EANjB,EAUIF,KAAA,CAAM,iBAAN,CAbR,CAD+BpQ,KAAA,CAgBxB,IAhBwB,CAA/B,CAPA,CADJ,CAvBJ,CAuGA0X,QAASA,EAAU,EACnB,CACI3K,QAAA4K,OAAA,EADJ,CAIAxI,QAASA,EAAW,CAACyI,CAAD,CACpB,CACOvT,MAAAwT,QAAAC,UAAH,EAEIzT,MAAAwT,QAAAC,UAAA,CAAyB,CAAE/H,QAAS6H,CAAX,CAAzB;AAA4C,EAA5C,CAAgD,WAAhD,CAA8DA,CAA9D,CAHR,CA/xCA,IAAIhI,EAAe,CAAC7C,QAAAgL,SAAAC,SAAA,CAA2B,SAA3B,CAApB,CAGIrI,EAAOC,CAAA,CAAe,EAAf,CAAoB,cAH/B,CAMIC,EAAiC,QAAjCA,GAAW9C,QAAAkL,SANf,CASInI,EAAaF,CAAA,CAAe,EAAf,CAAoBC,CAAA,CAAW,mBAAX,CAAiC,mBATtE,CA+DI0B,EAAiB,CAihBrBlN,OAAAuS,iBAAA,CAAwB,MAAxB,CAAgCjJ,CAAhC,CAAwC,CAAA,CAAxC,CAIAtJ,OAAAuS,iBAAA,CAAwB,MAAxB,CAAgC,QAAQ,EACxC,CACI7H,UAAA,CAAW,QAAQ,EACnB,CACI1K,MAAAuS,iBAAA,CAAwB,UAAxB,CAAoCc,CAApC,CADJ,CADA,CAGG,CAHH,CADJ,CADA,CAS2B,WAA3B,GAAGjR,QAAAyR,WAAH,EAEIvK,CAAA,EAjmBR,CADC,CAAD,E,CEOAwK,QAASA,GAAE,CAACvD,CAAD,CACX,CAEI,IAAAwD,MAAA,CAAa,EAGb,KAAAxD,EAAA,CAAWA,CAEX,KAAI,IAAInU,EAAI,CAAZ,CAAmB,KAAnB,CAAeA,CAAf,CAA4BA,CAAA,EAA5B,CAEI,IAAA2X,MAAA,CAAW3X,CAAX,CAAA,CAAgB4X,EAAA,CAAAA,IAAA,CAGpB,KAAIhK,EAAcuG,CAAAvG,GAElB,KAAQ5N,CAAR,CAAY,CAAZ,CAAgBA,CAAhB,ECsJkB6X,EDtJlB,CAAwCjK,CAAxC,CAAqD5N,CAAA,EAArD,CAGImU,CAAA2D,GAAA,CAAqB9X,CAArB,CACA,CAD0BmU,CAAA4D,GAAA,CAAsB/X,CAAtB,CAC1B,CADqD8N,IAAAA,EACrD,CAAAqG,CAAA6D,GAAA,CAAsBhY,CAAtB,CAAA,CAA2BmU,CAAA8D,GAAA,CAAuBjY,CAAvB,CAA3B,CAAuD8N,IAAAA,EAG3DoK,GAAA,CAAAA,IAAA,CAAmBtK,CAAnB,CAAgC,UAAhC,CAA8CA,CAA9C,CACI,QAAQ,EAAO,CAGX,MAAO,IAHI,CADnB,CAMI,QAAQ,EAAc,EAN1B,CAUI,QAAQ,EAAO,CAEX,MAAQ,EAFG,CAVnB,CAcI,QAAQ,EAAc,EAd1B,CArBJ,CAyCkCuK,QAAA,GAAQ,CAARA,CAAQ,CAC1C,CACI,MAAO,CACHC,GAAO,CAAAC,GADJ,CAEHC,GAAQ,CAAAC,GAFL,CAGHC,GAAQ,CAAAC,GAHL,CAKHC,GAAQ,CAAAC,GALL,CAMHC,GAAS,CAAAD,GANN,CAOHE,GAAS,CAAAF,GAPN,CASHG,GAAQhL,IAAAA,EATL,CADX,CAcA,CAAA,CAAA,EAAA,UAAAiL,EAAAV,GAAA,CAAgCW,QAAQ,EACxC,CACI,MAAO,IADX,CAIAD,EAAAR,GAAA,CAAiCU,QAAQ,EACzC,CACI,MAAO,MADX,CAIAF,EAAAN,GAAA,CAAiCS,QAAQ,EACzC,CACI,MAAQ,EADZ,CAIAH,EAAAJ,GAAA,CAAgCQ,QAAQ,EACxC,EAW6BC;QAAA,EAAQ,CAARA,CAAQ,CAACC,CAAD,CAAYP,CAAZ,CAAoBQ,CAApB,CAAwBC,CAAxB,CAA6BC,CAA7B,CACrC,CAmBOF,CAAH,GAAO,CAAA3B,MAAA,CAAW0B,CAAX,CAAAjB,GAAP,CAAqCkB,CAArC,CACGC,EAAH,GAAQ,CAAA5B,MAAA,CAAW0B,CAAX,CAAAf,GAAR,CAAuCiB,CAAvC,CACGC,EAAH,GAAQ,CAAA7B,MAAA,CAAW0B,CAAX,CAAAb,GAAR,CAAuCgB,CAAvC,CACA,EAAA7B,MAAA,CAAW0B,CAAX,CAAAP,GAAA,CAA+BA,CAtBnC,CAgC8BW,QAAA,EAAQ,CAARA,CAAQ,CAACJ,CAAD,CAAYP,CAAZ,CAAoBY,CAApB,CAAwBC,CAAxB,CAA6BC,CAA7B,CACtC,CAkBOF,CAAH,GAAO,CAAA/B,MAAA,CAAW0B,CAAX,CAAAX,GAAP,CAAsCgB,CAAtC,CACGC,EAAH,GAAQ,CAAAhC,MAAA,CAAW0B,CAAX,CAAAT,GAAR,CAAwCe,CAAxC,CACGC,EAAH,GAAQ,CAAAjC,MAAA,CAAW0B,CAAX,CAAAR,GAAR,CAAwCe,CAAxC,CACA,EAAAjC,MAAA,CAAW0B,CAAX,CAAAP,GAAA,CAA+BA,CArBnC;AAyCAC,CAAAc,GAAA,CAAyCC,QAAQ,CAACT,CAAD,CAAYP,CAAZ,CAAoBiB,CAApB,CAA0BC,CAA1B,CAAgCC,CAAhC,CAAsCC,CAAtC,CACjD,CAGIC,QAASA,EAAK,EACd,CACI,MAAOJ,EAAA1D,KAAA,CAAU,IAAV,CAAP,CACQ2D,CAAA3D,KAAA,CAAU,IAAV,CADR,EAC2B,CAF/B,CAIA+D,QAASA,EAAK,EACd,CACI,MAAOH,EAAA5D,KAAA,CAAU,IAAV,CAAP,CACQ6D,CAAA7D,KAAA,CAAU,IAAV,CADR,EAC2B,CAF/B,CAIAmD,QAASA,EAAG,EACZ,CACI,MAAOO,EAAA1D,KAAA,CAAU,IAAV,CAAP,CACQ2D,CAAA3D,KAAA,CAAU,IAAV,CADR,EAC2B,CAD3B,CAEQ4D,CAAA5D,KAAA,CAAU,IAAV,CAFR,EAE2B,EAF3B,CAGQ6D,CAAA7D,KAAA,CAAU,IAAV,CAHR,EAG2B,EAJ/B,CAOG4D,CAAH,EAAWC,CAAX,EAEIG,CAAA,CAAAA,IAAA,CAAmBhB,CAAnB,CAA8BP,CAA9B,CAAsCiB,CAAtC,CAA4CI,CAA5C,CAAmDX,CAAnD,CAGA,CAFAa,CAAA,CAAAA,IAAA,CAAmBhB,CAAnB,CAA+B,CAA/B,CAAkCP,CAAlC,CAA0CkB,CAA1C,CAEA,CADAK,CAAA,CAAAA,IAAA,CAAmBhB,CAAnB,CAA+B,CAA/B,CAAkCP,CAAlC,CAA0CmB,CAA1C,CAAgDG,CAAhD,CACA,CAAAC,CAAA,CAAAA,IAAA,CAAmBhB,CAAnB,CAA+B,CAA/B,CAAkCP,CAAlC,CAA0CoB,CAA1C,CALJ,GASIG,CAAA,CAAAA,IAAA,CAAmBhB,CAAnB,CAA8BP,CAA9B,CAAsCiB,CAAtC,CAA4CI,CAA5C,CACA,CAAAE,CAAA,CAAAA,IAAA,CAAmBhB,CAAnB,CAA+B,CAA/B,CAAkCP,CAAlC,CAA0CkB,CAA1C,CAVJ,CArBJ,CA2CAjB;CAAAuB,GAAA,CAA0CC,QAAQ,CAAClB,CAAD,CAAYP,CAAZ,CAAoB0B,CAApB,CAA0BC,CAA1B,CAAgCC,CAAhC,CAAsCC,CAAtC,CAClD,CAGIC,QAASA,EAAK,CAAC7a,CAAD,CACd,CACIya,CAAAnE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,CAAuB,GAAvB,CACA0a,EAAApE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,EAAwB,CAAxB,CAA4B,GAA5B,CAFJ,CAIA8a,QAASA,EAAK,CAAC9a,CAAD,CACd,CACI2a,CAAArE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,CAAuB,GAAvB,CACA4a,EAAAtE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,EAAwB,CAAxB,CAA4B,GAA5B,CAFJ,CAIA6Z,QAASA,EAAG,CAAC7Z,CAAD,CACZ,CACIya,CAAAnE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,CAAuB,GAAvB,CACA0a,EAAApE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,EAAwB,CAAxB,CAA4B,GAA5B,CACA2a,EAAArE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,EAAwB,EAAxB,CAA6B,GAA7B,CACA4a,EAAAtE,KAAA,CAAU,IAAV,CAAgBtW,CAAhB,GAAyB,EAAzB,CAJJ,CAOG2a,CAAH,EAAWC,CAAX,EAEIG,CAAA,CAAAA,IAAA,CAAoBzB,CAApB,CAAmCP,CAAnC,CAA2C0B,CAA3C,CAAiDI,CAAjD,CAAwDhB,CAAxD,CAGA,CAFAkB,CAAA,CAAAA,IAAA,CAAoBzB,CAApB,CAAgC,CAAhC,CAAmCP,CAAnC,CAA2C2B,CAA3C,CAEA,CADAK,CAAA,CAAAA,IAAA,CAAoBzB,CAApB,CAAgC,CAAhC,CAAmCP,CAAnC,CAA2C4B,CAA3C,CAAiDG,CAAjD,CACA,CAAAC,CAAA,CAAAA,IAAA,CAAoBzB,CAApB,CAAgC,CAAhC,CAAmCP,CAAnC,CAA2C6B,CAA3C,CALJ,GASIG,CAAA,CAAAA,IAAA,CAAoBzB,CAApB,CAAmCP,CAAnC,CAA2C0B,CAA3C,CAAiDI,CAAjD,CACA,CAAAE,CAAA,CAAAA,IAAA,CAAoBzB,CAApB,CAAgC,CAAhC,CAAmCP,CAAnC,CAA2C2B,CAA3C,CAVJ,CArBJ,CAmC6BM,SAAA,GAAQ,CAARA,CAAQ,CAACnQ,CAAD,CAAQ1I,CAAR,CACrC,CACI0I,CAAA,IAAW,CAGPC,EAAAA,CAAMD,CAANC,EAFJ3I,CAEI2I,GAFO,CAEPA,CAEJ,IAAGA,CAAH,EAAU,CAAAsJ,EAAAvG,GAAV,CAEI,MAAO,CAAA,CAMX,KAFAhD,CAEA,EAFS,OAET,CAAMA,CAAN,CAAcC,CAAd,CAAA,CACA,CACI,GAAGmQ,EAAA,CAAA,CAAA7G,EAAA,CAAyBvJ,CAAzB,CAAH,CAEI,MAAO,CAAA,CAGXA,EAAA,EC9FcqQ,MDwFlB,CASA,MAAO,CAAA,CAxBX;AA2BAlC,CAAAmC,GAAA,CAAgCC,QAAQ,CAACC,CAAD,CACxC,CAEI,IAAIC,EAAK,IAAAlH,EAAA2D,GAAA,CADUsD,CACV,GCzGSvD,EDyGT,CAET,OAAOwD,EAAA,CAAGD,CAAH,CAAP,CAAkBC,CAAA,CAAGD,CAAH,CAAU,CAAV,CAAlB,EAAkC,CAAlC,CACQC,CAAA,CAAGD,CAAH,CAAU,CAAV,CADR,EACwB,EADxB,CAC6BC,CAAA,CAAGD,CAAH,CAAU,CAAV,CAD7B,EAC6C,EALjD,CAQArC,EAAAuC,GAAA,CAAiCC,QAAQ,CAACH,CAAD,CAAOvL,CAAP,CACzC,CAEI,IAAIwL,EAAK,IAAAlH,EAAA4D,GAAA,CADUqD,CACV,GClHSvD,EDkHT,CAETwD,EAAA,CAAGD,CAAH,CAASvL,CAAT,CAAiB,GAAjB,CACAwL,EAAA,CAAGD,CAAH,CAAU,CAAV,CAAavL,CAAb,EAAsB,CAAtB,CAA0B,GAA1B,CACAwL,EAAA,CAAGD,CAAH,CAAU,CAAV,CAAavL,CAAb,EAAsB,EAAtB,CAA2B,GAA3B,CACAwL,EAAA,CAAGD,CAAH,CAAU,CAAV,CAAavL,CAAb,GAAuB,EAAvB,CAPJ,CAkB6B2L,SAAA,GAAQ,CAARA,CAAQ,CAACJ,CAAD,CAAOpd,CAAP,CAAayd,CAAb,CAAyBC,CAAzB,CAAsCC,CAAtC,CAAmDC,CAAnD,CACrC,CAMQD,CAAJ,GACIA,CADJ,CACkB,CAAAT,GAAA3b,KAAA,CAA2B,CAA3B,CADlB,CAGIqc,EAAJ,GACIA,CADJ,CACmB,CAAAN,GAAA/b,KAAA,CAA4B,CAA5B,CADnB,CAKA,KAFmB6b,CAEnB,ICjJkBvD,EDiJlB,CAAa,CAAb,CAAM7Z,CAAN,CAAgB6d,CAAA,EAAhB,CAEI,CAAA1H,EAAA2D,GAAA,CAA0B+D,CAA1B,CAKA,CAL0CJ,CAK1C,CAJA,CAAAtH,EAAA4D,GAAA,CAA2B8D,CAA3B,CAIA,CAJ2CH,CAI3C,CAHA,CAAAvH,EAAA6D,GAAA,CAA2B6D,CAA3B,CAGA,CAH2CF,CAG3C,CAFA,CAAAxH,EAAA8D,GAAA,CAA4B4D,CAA5B,CAEA,CAF4CD,CAE5C,CAAA5d,CAAA,ECtJcid,MDiItB,CA0B2Ba,QAAA,GAAQ,CAARA,CAAQ,CAACzC,CAAD,CAAYtZ,CAAZ,CACnC,CACQgc,CAAAA,CAAQ,CAAApE,MAAA,CAAW0B,CAAX,CASL0C,EAAArD,GAAArC,KAAA,CAAkB0F,CAAAjD,GAAlB,CAAgC/Y,CAAhC,CAVX,CAa4Bic,QAAA,GAAQ,CAARA,CAAQ,CAAC3C,CAAD,CAAYtZ,CAAZ,CACpC,CACQgc,CAAAA,CAAQ,CAAApE,MAAA,CAAW0B,CAAX,CASL0C,EAAAnD,GAAAvC,KAAA,CAAmB0F,CAAAjD,GAAnB,CAAiC/Y,CAAjC,CAVX,CAa4Bkc,QAAA,GAAQ,CAARA,CAAQ,CAAC5C,CAAD,CAAYtZ,CAAZ,CACpC,CACQgc,CAAAA,CAAQ,CAAApE,MAAA,CAAW0B,CAAX,CASL0C,EAAAlD,GAAAxC,KAAA,CAAmB0F,CAAAjD,GAAnB,CAAiC/Y,CAAjC,CAVX;AAa0Bmc,QAAA,GAAQ,CAARA,CAAQ,CAAC7C,CAAD,CAClC,CACQ0C,CAAAA,CAAQ,CAAApE,MAAA,CAAW0B,CAAX,CAWZ,OAFY0C,EAAA3D,GAAA/B,KAAAxG,CAAiBkM,CAAAjD,GAAjBjJ,CAVhB,CAe2BsM,QAAA,GAAQ,CAARA,CAAQ,CAAC9C,CAAD,CACnC,CACQ0C,CAAAA,CAAQ,CAAApE,MAAA,CAAW0B,CAAX,CAWZ,OAFY0C,EAAAzD,GAAAjC,KAAAxG,CAAkBkM,CAAAjD,GAAlBjJ,CAVhB,CAe2BuM,QAAA,GAAQ,CAARA,CAAQ,CAAC/C,CAAD,CACnC,CACQ0C,CAAAA,CAAQ,CAAApE,MAAA,CAAW0B,CAAX,CAWZ,OAFY0C,EAAAvD,GAAAnC,KAAAxG,CAAkBkM,CAAAjD,GAAlBjJ,CAVhB,C,CEnZAqE,QAASA,GAAG,CAAClY,CAAD,CACZ,CAKI,IAAA2K,EAAA,CAHA,IAAA0V,EAGA,CAHe,CAAA,CAMf,KAAAlI,EAAA,CAAW,IAAImI,CAAJ,CAAQtgB,CAAR,CAEX,KAAAA,EAAA,CAAWA,CACXA,EAAAuL,SAAA,CAAa,UAAb,CAAyB,IAAAS,GAAzB,CAAoC,IAApC,CACAhM,EAAAuL,SAAA,CAAa,SAAb,CAAwB,IAAAqL,GAAxB,CAAkC,IAAlC,CACA5W,EAAAuL,SAAA,CAAa,UAAb,CAAyB,IAAAoL,KAAzB,CAAoC,IAApC,CACA3W,EAAAuL,SAAA,CAAa,aAAb,CAA4B,IAAAwM,GAA5B,CAA0C,IAA1C,CAEA,KAAAwI,GAAA,EAhBJ,CAmBA,CAAA,CAAA,EAAA,UAAAC,EAAA5J,GAAA,CAAoB6J,QAAQ,EAC5B,CACQ,IAAAJ,EAAJ,GAEI,IAAArgB,EAAAsG,KAAA,CAAc,kBAAd,CACA,CAAA,IAAAoa,GAAA,EAHJ,CADJ,CAQwBC;QAAA,GAAQ,CAARA,CAAQ,CAChC,CACI,GAAG,CAAAhW,EAAH,CAEI,CAAAA,EACA,CADe,CAAA0V,EACf,CAD8B,CAAA,CAC9B,CAAA,CAAArgB,EAAAsG,KAAA,CAAc,kBAAd,CAHJ,KAAA,CAOA,CAAA+Z,EAAA,CAAe,CAAA,CCmanB,EAAA,CAAA,CDlaalI,IAAAA,EAAAA,CAAAA,ECmaT,IAAG,CAAAyI,GAAH,CACA,CA4xByB,IAAA,EAAAC,EAAA,EApxBTC,EAoyBGC,EAAAC,GAAA9U,GAAA,CAAuB+I,CAAvB,CAA4B,CAAA,CAA5B,CApyBH6L,EAqyBGC,EAAAE,GAAA/U,GAAA,CAAuB+I,CAAvB,CAA4B,CAAA,CAA5B,CAhBnBiM,GAAA,CArxBgBJ,CAqxBhB,CAlxBI,IAAG,CAAAF,GAAH,CACA,CACI,CAAA,CAkxBDO,CAlxBC,OAAA,CADJ,CAZJ,CA4oBA,IAJA,IAAIlM,EAHArG,CAGAqG,CAHQ4L,EAAA,EAOZ,CChiCiBO,CDgiCjB,CAAMnM,CAAN,CAAYrG,CAAZ,CAAA,CACA,CACIyS,IAAAA,EA7nBJC,CA2xBmB,EAAAP,EAAAC,GAAA9U,GAAA,CAAuB+I,CAAvB,CAA4B,CAAA,CAA5B,CACA,EAAA8L,EAAAE,GAAA/U,GAAA,CAAuB+I,CAAvB,CAA4B,CAAA,CAA5B,CA9JfiM,GAAA,CA9nBJI,CA8nBI,CAEAC,EAAAA,CAhoBJD,CA6oBA,IAAI,CACAE,CAAAA,CAAAA,CAYJ,KAAI,IAAIC,ECtkCOC,KDskCf,CAA0BD,CAAA,EAA1B,CAAA,CAEIE,EAAA,CAAAA,CAAA,CAfA,CAGJ,MAAMpV,CAAN,CACA,CACIqV,EAAA,CAAAA,CAAA,CAAuBrV,CAAvB,CADJ,CAfI,GAloBJ+U,CAkoBOV,GAAH,CAEI,KAGJ3L,EAAA,CAAM4L,EAAA,EAXV,CA1nBA,CAAA,CAAO,CArBX,CDhaa,CAAT,EAAGgB,CAAH,CAEI,CAAAnB,GAAA,EAFJ,CAMI,CAAAoB,GAAA,CAAeD,CAAf,CAhBJ,CADJ,CAqBArB,CAAA7J,KAAA,CAAqBoL,QAAQ,EAC7B,CACO,IAAA1B,EAAH,GAEI,IAAA1V,EAFJ,CAEmB,CAAA,CAFnB,CADJ,CAOA6V,EAAAtT,GAAA,CAAwB8U,QAAQ,EAChC,CACI,IAAAC,GAAA,EADJ,CAIAzB,EAAAzI,GAAA,CAAwBmK,QAAQ,EAChC,CACI,IAAA/J,EAAAgK,MAAA,EACAC,GAAA,CAAA,IAAAjK,EAAA,CAFJ,CAKAqI,EAAAxU,GAAA,CAAqBqW,QAAQ,CAAC/Q,CAAD,CAC7B,CACI,IAAA6G,EAAAnM,GAAA,CAAcsF,CAAd,CAAwB,IAAAtR,EAAxB,CACA,KAAAA,EAAAsG,KAAA,CAAc,gBAAd,CAFJ,CAKA;GAA2B,WAA3B,GAAG,MAAOgc,aAAV,CAGI,IAAI5B,GAAiBA,QAAQ,EAC7B,CAAA,IAAA,EAAA,IACI4B,aAAA,CAAa,QAAA,EAAM,CAAEC,EAAA,CAAAA,CAAA,CAAF,CAAnB,CADJ,CADA,CAMIhC,GAAgBA,QAAQ,EAAG,EAN/B,CASI0B,GAAkBA,QAAQ,EAAG,EAZrC,KAcK,IAAqB,WAArB,GAAG,MAAOra,OAAV,EAA2D,WAA3D,GAAoC,MAAO4a,YAA3C,CACL,CASI9B,EAAA,CAAiBA,QAAQ,EACzB,CACI9Y,MAAA4a,YAAA,CALqBC,KAKrB,CAAuC,GAAvC,CADJ,CAIA,KAAIC,EAGJnC,GAAA,CAAgBA,QAAQ,EACxB,CAAA,IAAA,EAAA,IACImC,GAAA,CAAOA,QAAA,CAAAnW,CAAA,CACP,CACOA,CAAAoW,OAAH,GAAgB/a,MAAhB,EAfiB6a,KAejB,GAA0BlW,CAAAxI,KAA1B,EAEIwe,EAAA,CAAAA,CAAA,CAHR,CAOA3a,OAAAuS,iBAAA,CAAwB,SAAxB,CAAmCuI,EAAnC,CAAyC,CAAA,CAAzC,CATJ,CAaAT,GAAA,CAAkBA,QAAQ,EAC1B,CACIra,MAAAgb,oBAAA,CAA2B,SAA3B,CAAsCF,EAAtC,CACAA,GAAA,CAAO,IAFX,CAhCJ,CADK,IAyCDhC,GASA,CATiBA,QAAQ,EACzB,CAAA,IAAA,EAAA,IACIpO,WAAA,CAAW,QAAA,EAAM,CAAEiQ,EAAA,CAAAA,CAAA,CAAF,CAAjB;AAAsC,CAAtC,CADJ,CAQA,CAHAhC,EAGA,CAHgBA,QAAQ,EAAG,EAG3B,CAAA0B,EAAA,CAAkBA,QAAQ,EAAG,EAGjC,EAAA,CAAA,EAAA,UAAAzB,EAAAE,GAAA,CAA+BA,EAC/BF,EAAAD,GAAA,CAA8BA,EAC9BC,EAAAyB,GAAA,CAAgCA,EA8BhCzB,EAAAsB,GAAA,CA5BuB,WAAvBA,GAAG,MAAO9X,SAAV8X,EAAiE,SAAjEA,GAAsC,MAAO9X,SAAA6Y,OAA7Cf,CAGoBA,QAAQ,CAACX,CAAD,CACxB,CAAA,IAAA,EAAA,IACW,EAAP,CAAGA,CAAH,EAAYnX,QAAA6Y,OAAZ,CAKI,IAAAnC,GAAA,EALJ,CASIpO,UAAA,CAAW,QAAA,EAAM,CAAEiQ,EAAA,CAAAA,CAAA,CAAF,CAAjB,CAAsCpB,CAAtC,CAVR,CAJJW,CAsBgBA,QAAQ,CAACX,CAAD,CACpB,CAAA,IAAA,EAAA,IACI7O,WAAA,CAAW,QAAA,EAAM,CAAEiQ,EAAA,CAAAA,CAAA,CAAF,CAAjB,CAAsCpB,CAAtC,CADJ,CAOJX,EAAAnI,GAAA,CAA2ByK,QAAQ,EACnC,CAEI,MAAO,KAAA3K,EAAAE,GAAA,EAFX,CAKAmI,EAAAzH,GAAA,CAA8BgK,QAAQ,CAAC9hB,CAAD,CACtC,CAEI,MAAO,KAAAkX,EAAAY,GAAA,CAAuB9X,CAAvB,CAFX,CAQI,KAAA4f,GAFsB,QAA1B,GAAG,MAAOmC,YAAV,EAAsCA,WAAA/N,IAAtC,CAEoB4L,QAAQ,EACxB,CACI,MAAOmC,YAAA/N,IAAA,EADX,CAHJ,CAiBoBvP,IAAAuP,I,CGhNpB,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAgBeS,SAAA,GAAQ,CAACuN,CAAD,CAAMC,CAAN,CACvB,CAGI,IAFAD,CAEA,CAFMA,CAAA,CAAMA,CAAN,CAAY,EAAZ,CAAiB,EAEvB,CAAMA,CAAApgB,OAAN,CAAmBqgB,CAAnB,CAAA,CAEID,CAAA,CAAM,GAAN,CAAYA,CAGhB,OAAOA,EARX,CAiBAE,QAASA,GAAC,CAAChb,CAAD,CAAI+a,CAAJ,CACV,CAUI,MAAO,IAAP,CAAcxN,EAAA,CAAa0N,CATvBjb,CAAJ8a,CAMc9a,CAAAC,SAAA,CAAW,EAAX,CANd6a,CAEc,EAOaG,aAAA,EAAb,CAAgCF,CAAhC,EAAuC,CAAvC,CAVlB,CAcA,GAAqB,WAArB,GAAG,MAAOtb,OAAV,EAAoCA,MAAAyb,OAApC,EAAqDzb,MAAAyb,OAAAC,gBAArD,CAEI,IAAIC,GAAY,IAAI1V,UAAJ,CAAe,CAAf,CAAhB,CAEA2V,GAAuBA,QAAQ,EAC/B,CACI,MAAO,CAAA,CADX,CAHA,CAOAC,GAAuBA,QAAQ,EAC/B,CACI7b,MAAAyb,OAAAC,gBAAA,CAA8BC,EAA9B,CACA,OAAOA,GAAA,CAAU,CAAV,CAFX,CAVJ,KAiBIC,GAKA,CALuBA,QAAQ,EAC/B,CACI,MAAO,CAAA,CADX,CAIA,CAAAC,EAAA,CAAuBA,QAAQ,EAC/B,CACIha,OAAAC,OAAA,CAAe,CAAA,CAAf,CADJ,CAUJga,SAASA,GAAU,CAACpV,CAAD,CACnB,CACI,IAAAA,OAAA,CAAcA,CACd,KAAAqV,WAAA,CAAkBrV,CAAAqV,WAClB,KAAAzS,OAAA,CAAcY,IAAAA,EAHlB;AAOA4R,EAAA5iB,UAAA4Z,KAAA,CAA4BkJ,QAAQ,EACpC,CACI,IAAA1S,OAAA,EAAe,IAAAA,OAAA,CAAY,CAAE5C,OAAQ,IAAAA,OAAV,CAAZ,CADnB,CASAoV,GAAA5iB,UAAA+iB,IAAA,CAA2BC,QAAQ,CAAClV,CAAD,CAAQsU,CAAR,CAAa7D,CAAb,CACnC,CAEIA,CAAA,CAAG,IAAI9e,UAAJ,CAAe,IAAA+N,OAAf,CAA4BM,CAA5B,CAAmCsU,CAAnC,CAAH,CAFJ,CAUAQ,GAAA5iB,UAAAijB,IAAA,CAA2BC,QAAQ,CAACpV,CAAD,CAAQqV,CAAR,CAAe5E,CAAf,CACnC,CAGI0E,CAAA,IAAIxjB,UAAJ,CAAe,IAAA+N,OAAf,CAA4BM,CAA5B,CAAmCqV,CAAAN,WAAnC,CAAAI,KAAA,CAAyDE,CAAzD,CACA5E,EAAA,EAJJ,CAUAqE,GAAA5iB,UAAAoV,GAAA,CAAkCgO,QAAQ,CAAC7E,CAAD,CAC1C,CACIA,CAAA,CAAG,IAAA/Q,OAAH,CADJ,CAMC;SAAQ,EACT,CACI,GAAyB,UAAzB,GAAG,MAAO7L,KAAA0hB,MAAV,CAQIC,EAaA,CAbwBA,QAAQ,CAACC,CAAD,CAChC,CAII,MAAO,GAAP,CAAY5hB,IAAA0hB,MAAA,CAAWE,CAAX,CAJhB,CAYA,CAAAC,EAAA,CAAmBA,QAAQ,CAACD,CAAD,CAC3B,CAGI,MAAO,GAAP,CAAY5hB,IAAA0hB,MAAA,CAAWE,CAAX,CAHhB,CAtBJ,KAAA,CAiCA,IAFA,IAAIE,EAAiB,IAAI3W,SAAJ,CAAc,GAAd,CAArB,CAEQ5J,EAAI,CAFZ,CAEemS,EAAK,EAApB,CAA2B,GAA3B,CAAuBnS,CAAvB,CAAgCA,CAAA,EAAhC,CAESA,CAGL,CAHSA,CAGT,CAHa,CAGb,EAFImS,CAAA,EAEJ,CAAAoO,CAAA,CAAevgB,CAAf,CAAA,CAAoBmS,CAQxBiO,GAAA,CAAwBA,QAAQ,CAACC,CAAD,CAChC,CAII,MAAOE,EAAA,CAAeF,CAAf,CAJX,CAYAC,GAAA,CAAmBA,QAAQ,CAACD,CAAD,CAC3B,CAII,IAAIG,EAAKH,CAALG,GAAW,EAEf,IAAGA,CAAH,CACA,CACI,IAAIrD,EAAIqD,CAAJrD,GAAW,CACf,OAAGA,EAAH,CAEW,EAFX,CAEgBoD,CAAA,CAAepD,CAAf,CAFhB,CAMW,EANX,CAMgBoD,CAAA,CAAeC,CAAf,CARpB,CAcI,MAAA,CADIrD,CACJ,CADQkD,CACR,GADc,CACd,EAEW,CAFX,CAEeE,CAAA,CAAepD,CAAf,CAFf,CAMWoD,CAAA,CAAeF,CAAf,CA3BnB,CA5DA,CADJ,CADC,CAAD,EAgGkBI,KAAAA,EAAAA,CAAlBC,GAAkBD,EAAlBC,CACyB,UAArB,GAAA,MAAOjiB,KAAAkiB,KAAP,EACuC,UADvC,GACAliB,IAAAkiB,KAAA,CAAU,QAAV,CAAsB,UAAtB,CADA,CACoDliB,IAAAkiB,KADpD,CACgE,QAAQ,CAACC,CAAD,CAAIzO,CAAJ,CAAO,CAC3EA,CAAA,EAAK,CACL,QAAQyO,CAAR,CAAY,OAAZ,EAA0BzO,CAA1B,GAAgCyO,CAAhC,CAAoC,UAApC,EAAkDzO,CAAlD,CAAsD,CAAtD,EAA2D,CAFgB,CAUhE0O;QAAA,GAAQ,CAACD,CAAD,CAAIzO,CAAJ,CAAO,CAC9B,MAAO1T,KAAAC,MAAA,EAAYkiB,CAAZ,GAAkB,CAAlB,GAAwBzO,CAAxB,GAA8B,CAA9B,EAAmC,UAAnC,CAAP,CAAyD,CAD3B,CAUlC2O,QAASA,GAAS,CAAC9iB,CAAD,CAClB,CAAA,IACQ+B,EAAO,IAAIxD,UAAJ,CAAeyB,CAAf,CADf,CAEQ4M,CAFR,CAGQC,CAIJ,KAAAhM,OAAA,CAAc,CAEd,KAAAwE,KAAA,CAAY0d,QAAQ,CAACC,CAAD,CACpB,CACO,IAAAniB,OAAH,GAAmBb,CAAnB,EAMI,IAAAa,OAAA,EAGJkB,EAAA,CAAK8K,CAAL,CAAA,CAAYmW,CACZnW,EAAA,CAAMA,CAAN,CAAY,CAAZ,CAAgB7M,CAAhB,CAAuB,CAX3B,CAcA,KAAAijB,MAAA,CAAaC,QAAQ,EACrB,CACI,GAAI,IAAAriB,OAAJ,CAKA,CACI,IAAImiB,EAAOjhB,CAAA,CAAK6K,CAAL,CAEXA,EAAA,CAAQA,CAAR,CAAgB,CAAhB,CAAoB5M,CAApB,CAA2B,CAC3B,KAAAa,OAAA,EAEA,OAAOmiB,EANX,CAHI,MAAQ,EAHhB,CA4BA,KAAAG,MAAA,CAAaC,QAAQ,EACrB,CAGI,IAAAviB,OAAA,CADAgM,CACA,CAFAD,CAEA,CAFQ,CADZ,CAMA,KAAAuW,MAAA,EA5DJ,CAsEAE,QAASA,GAAU,EACnB,CACI,IAAArjB,KAAA,CCzRwBsjB,KD0RxB,KAAAvhB,KAAA,CAAY,IAAIwhB,YAAJ,CC1RYD,KD0RZ,CAGZ,KAAAziB,OAAA,CADA,IAAAgM,EACA,CAFA,IAAAD,MAEA,CAFa,CAHjB;AAUAyW,EAAAvkB,UAAAuG,KAAA,CAA4Bme,QAAQ,CAACR,CAAD,CACpC,CACO,IAAAniB,OAAH,GAAmB,IAAAb,KAAnB,CAGI,IAAA4M,MAHJ,CAGiB,IAAAA,MAHjB,CAG8B,CAH9B,CAGkC,IAAA5M,KAHlC,CAG8C,CAH9C,CAOI,IAAAa,OAAA,EAGJ,KAAAkB,KAAA,CAAU,IAAA8K,EAAV,CAAA,CAAsBmW,CACtB,KAAAnW,EAAA,CAAW,IAAAA,EAAX,CAAsB,CAAtB,CAA0B,IAAA7M,KAA1B,CAAsC,CAZ1C,CAeAqjB,GAAAvkB,UAAAmkB,MAAA,CAA6BQ,QAAQ,EACrC,CACI,GAAI,IAAA5iB,OAAJ,CAKA,CACI,IAAImiB,EAAO,IAAAjhB,KAAA,CAAU,IAAA6K,MAAV,CAEX,KAAAA,MAAA,CAAa,IAAAA,MAAb,CAA0B,CAA1B,CAA8B,IAAA5M,KAA9B,CAA0C,CAC1C,KAAAa,OAAA,EAEA,OAAOmiB,EANX,CANJ,CAgBmCU;QAAA,GAAQ,CAARA,CAAQ,CAACxf,CAAD,CAC3C,CACI,IAAI+d,EAAQ,IAAIsB,YAAJ,CAAiBrf,CAAjB,CAETA,EAAH,CAAW,CAAArD,OAAX,GAEIqD,CAFJ,CAEY,CAAArD,OAFZ,CAIA,KAAI8iB,EAAY,CAAA/W,MAAZ+W,CAAyBzf,CAA7B,CAEI0f,EAAU,CAAA7hB,KAAA8hB,SAAA,CAAmB,CAAAjX,MAAnB,CAA+B+W,CAA/B,CAEd1B,EAAAF,IAAA,CAAU6B,CAAV,CACGD,EAAH,EAAgB,CAAA3jB,KAAhB,GAEI2jB,CACA,EADa,CAAA3jB,KACb,CAAAiiB,CAAAF,IAAA,CAAU,CAAAhgB,KAAA8hB,SAAA,CAAmB,CAAnB,CAAsBF,CAAtB,CAAV,CAA4CC,CAAA/iB,OAA5C,CAHJ,CAKA,EAAA+L,MAAA,CAAa+W,CAEb,EAAA9iB,OAAA,EAAeqD,CAEf,OAAO+d,EArBX,CAoCAoB,EAAAvkB,UAAAqkB,MAAA,CAA6BW,QAAQ,EACrC,CAGI,IAAAjjB,OAAA,CADA,IAAAgM,EACA,CAFA,IAAAD,MAEA,CAFa,CADjB,CA8CAwH,SAASA,GAAS,CAAC2P,CAAD,CAAKtiB,CAAL,CAClB,CACSsiB,CAAL,WAAmB1d,MAAnB,GAEI0d,CAFJ,CAES,CAACA,CAAD,CAFT,CAMA9P,GAAA,CADW+P,IAAIC,IAAJD,CAASD,CAATC,CACX,CAAeviB,CAAf,CAPJ;AAUAwS,QAASA,GAAQ,CAACiQ,CAAD,CAAeziB,CAAf,CACjB,CACI,IAAImhB,EAAI5a,QAAAC,cAAA,CAAuB,GAAvB,CACR2a,EAAA,SAAA,CAAgBnhB,CAChBmhB,EAAA/N,KAAA,CAASjP,MAAAue,IAAAC,gBAAA,CAA2BF,CAA3B,CACTtB,EAAAyB,QAAA,YAAA,CAA2B,CAAC,0BAAD,CAA6BzB,CAAA,SAA7B,CAA4CA,CAAA/N,KAA5C,CAAAvO,KAAA,CAAyD,GAAzD,CAExB0B,SAAAsc,YAAH,EAEQC,CAGJ,CAHSvc,QAAAsc,YAAA,CAAqB,YAArB,CAGT,CAFAC,CAAAC,eAAA,CAAkB,OAAlB,CAA2B,CAAA,CAA3B,CAAiC,CAAA,CAAjC,CAAuC5e,MAAvC,CACkB,CADlB,CACqB,CADrB,CACwB,CADxB,CAC2B,CAD3B,CAC8B,CAD9B,CACiC,CAAA,CADjC,CACwC,CAAA,CADxC,CAC+C,CAAA,CAD/C,CACsD,CAAA,CADtD,CAC6D,CAD7D,CACgE,IADhE,CAEA,CAAAgd,CAAA6B,cAAA,CAAgBF,CAAhB,CALJ,EASI3B,CAAAnM,MAAA,EAGJ7Q,OAAAue,IAAAO,gBAAA,CAA2B9B,CAAA/N,KAA3B,CAlBJ,C,CEvZA8P,QAASA,GAAG,CAACxO,CAAD,CACZ,CAMI,IAAAA,EAAA,CAAWA,CAGX,KAAAyO,EAAA,CAAU,IAAIC,YAAJ,CAAiB,CAAjB,CAGI,KAAAC,EAAA,CAAe,IAAIvB,YAAJ,CAAiB,CAAjB,CACK,KAAIhlB,UAAJ,CAAe,IAAAumB,EAAAxY,OAAf,CACpB,KAAAyY,EAAA,CAAmB,IAAIlZ,UAAJ,CAAe,IAAAiZ,EAAAxY,OAAf,CACnB,KAAA0Y,EAAA,CAAe,IAAIH,YAAJ,CAAiB,CAAjB,CACf,KAAAI,EAAA,CAAoB,IAAI1mB,UAAJ,CAAe,IAAAymB,EAAA1Y,OAAf,CACpB,KAAA4Y,EAAA,CAAmB,IAAIrZ,UAAJ,CAAe,IAAAmZ,EAAA1Y,OAAf,CAEnB,KAAA6Y,EAAA,CAAW,IAAI5mB,UAAJ,CAAe,IAAAqmB,EAAAtY,OAAf,CACC,KAAIT,UAAJ,CAAe,IAAA+Y,EAAAtY,OAAf,CAI1B,KAAA8Y,GAAA,CAAmB,GACnB,KAAAC,EAAA,CAAiB,CAEjB,KAAAC,GAAA,CAAoB,GAMpB,KAAAC,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAHA,IAAAC,GAGA,CAJA,IAAAC,GAIA,CALA,IAAAC,EAKA,CALmB,CAQnB,KAAAC,EAAA,CAAsBC,GAGtB,KAAAC,EAAA,CAAiB,IAAIlB,YAAJ,CAAiB,CAC9B,CAD8B,CAC3BpkB,IAAA8V,IAAA,CAAS,EAAT,CAD2B,CACZ9V,IAAAulB,IADY,CACFvlB,IAAAwlB,MADE,CACUxlB,IAAAylB,GADV,CAE9BzlB,IAAA8V,IAAA,CAAS,CAAT,CAF8B,CAEhB9V,IAAA0lB,KAFgB,CAEL1lB,IAAAulB,IAFK;AAEK,CAFL,CAAjB,CAvCrB,CA8CA,CAAA,CAAA,EAAA,UAAAI,EAAArnB,GAAA,CAA0BsnB,QAAQ,EAClC,CACI,IAAIpnB,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2lB,EACX3lB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAmmB,GACXnmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAomB,EACXpmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAqmB,GACXrmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAsmB,GACXtmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA0mB,GACX1mB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAymB,GACXzmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAumB,GACXvmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAsmB,GACXtmB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwmB,GAEX,OAAOxmB,EAdX,CAiBAmnB,EAAA7mB,GAAA,CAA0B+mB,QAAQ,CAACrnB,CAAD,CAClC,CACI,IAAA2lB,EAAA7C,IAAA,CAAY9iB,CAAA,CAAM,CAAN,CAAZ,CACA,KAAAmmB,GAAA,CAAmBnmB,CAAA,CAAM,CAAN,CACnB,KAAAomB,EAAA,CAAiBpmB,CAAA,CAAM,CAAN,CACjB,KAAAqmB,GAAA,CAAoBrmB,CAAA,CAAM,CAAN,CAEpB,KAAA0mB,GAAA,CAAc1mB,CAAA,CAAM,CAAN,CACd,KAAAymB,GAAA,CAAuBzmB,CAAA,CAAM,CAAN,CACvB,KAAAumB,GAAA,CAAcvmB,CAAA,CAAM,CAAN,CACd,KAAAsmB,GAAA,CAAuBtmB,CAAA,CAAM,CAAN,CACvB,KAAAwmB,GAAA,CAAkBxmB,CAAA,CAAM,CAAN,CAVtB,CAa2BsnB,SAAA,GAAQ,CAARA,CAAQ,CACnC,CAGSC,CAAA,CAAA,CAAArQ,EAAA,CAHT,CAYAiQ,CAAAK,GAAA,CAAmCC,QAAQ,EAC3C,CACI,IAAAd,EAAA,EAxGWe,CAuGf,CAIqBC,SAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAC7B,CACI,IAAIxE,EAAIyE,EAAA,CAAAA,CAAA,CAER,EAAAlB,EAAA,EAAoB,MAEjBvD,EAAH,CAAOwE,CAAP,GAKI,CAAAjB,EALJ,CAGQiB,CAAH,CAAOxE,CAAP,CAED,CAAAuD,EAFC,CAxJImB,GAwJJ,CAIG1E,CAAH,GAASwE,CAAT,CAED,CAAAjB,EAFC,CAtJIoB,KAsJJ,CAMD,CAAApB,EANC,CAMmB,KAbxB,CALJ;AA6BsBqB,QAAA,GAAQ,CAARA,CAAQ,CAACJ,CAAD,CAC9B,CACI,IAAIxE,EAAI,CAAAuC,EAAA,CAAQ,CAAAS,EAAR,CAER,EAAAlP,EAAA+Q,EAAA,EAA0B,GAC1B,EAAA/Q,EAAAgR,MAAA,EAAkB,GAEf9E,EAAH,CAAOwE,CAAP,GAKI,CAAA1Q,EAAAgR,MALJ,CAGQN,CAAH,CAAOxE,CAAP,CAED,CAAAlM,EAAAgR,MAFC,CAEiB,CAFjB,CAIG9E,CAAH,GAASwE,CAAT,CAED,CAAA1Q,EAAAgR,MAFC,CNtHiBC,EMsHjB,CAMD,CAAAjR,EAAAgR,MANC,CAMiB,EAbtB,CANJ,CA8EsBE,QAAA,GAAQ,CAARA,CAAQ,CAC9B,CACI,CAAA/B,GAAA,CAAoB,GACpB,EAAAM,EAAA,CAAmB,CACnB,EAAAD,GAAA,CAAc,CACd,EAAAH,GAAA,CAAc,CACd,EAAAC,GAAA,CAAkB,CAElB,EAAAL,GAAA,CAAmB,GACnB,EAAAC,EAAA,CAAiB,CARrB,CAWiCiC,QAAA,GAAQ,CAARA,CAAQ,CACzC,CACI,MAAO,EAAA1B,EAAP,CAA0B,MAA1B,CAAuC,CAAAP,EAAvC,EAAyD,EAD7D;AAkDuBkC,QAAA,GAAQ,CAARA,CAAQ,CAACnK,CAAD,CAC/B,CACI,GAAGoK,EAAA,CAAA,CAAArR,EAAA,CAAH,CACA,CACIsR,EAAA,CAAA,CAAAtR,EAAA,CAA+BiH,CAA/B,CAAqC,EAArC,CAEAsK,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA4B,CAAAkI,GAA5B,CAEAoC,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAAgCuK,EAAA,CAAAA,CAAA,CAAhC,CA3CJ,KAJJ,IACQC,EAAW,CADnB,CAEQ/V,CAFR,CAIY7P,EAAI,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEI6P,CAEA,CAwCgCgW,CA1CxBjD,EAAA,CAAQ5iB,CAAR,CAER,CAwCgC6lB,CAxC7BzC,GAAH,EAAuBpjB,CAAvB,CAA2B,CAA3B,CAEI4lB,CAFJ,EAEgB,CAFhB,GAEsB5lB,CAFtB,EAE2B,CAF3B,EAIkB,CAAb,GAAG6P,CAAH,CAED+V,CAFC,EAEW,CAFX,GAEiB5lB,CAFjB,EAEsB,CAFtB,EAII8lB,QAAA,CAASjW,CAAT,CAJJ,GAMD+V,CANC,EAMW,CANX,GAMiB5lB,CANjB,EAMsB,CANtB,EAoCL0lB,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAxBGwK,CAwBH,CAEAG,EAAA,CAAA,CAAA5R,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CAAiC,CAAAuI,GAAjC,CACA+B,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CAAiC,CAAAsI,GAAjC,CACAgC,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CAAiC,CAAAqI,GAAjC,CACAsC,EAAA,CAAA,CAAA5R,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CAAiC,CAAAoI,GAAjC,CACAkC,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CAAiC,CAAAmI,GAAjC,CAZJ,CADA,IAiBIyC,GAAA,CAAAA,CAAA,CAlBR;AAsBuBC,QAAA,GAAQ,CAARA,CAAQ,CAAC7K,CAAD,CAC/B,CACI,GAAGoK,EAAA,CAAA,CAAArR,EAAA,CAAH,CACA,CACI,CAAAmP,GAAA,CAAoB4C,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAEC,KAAA,EAAA8K,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAA4B,CAA5B,CAArB+K,EAzEJvC,EAAA,CAAmBwC,CAAnB,CAAwB,MAyEpBD,EAxEJ9C,EAAA,CAAiB+C,CAAjB,EAAuB,EAAvB,CAA4B,CAyEN,EAAA,CAAAF,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAA4B,CAA5B,CAtCtB,KAAI,IAAIpb,EAsCJqmB,CAxCJjD,GAEQpjB,CAFW,CAEnB,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAsCIqmB,CApCAjD,GAAA,EAAqBwC,CAArB,EAAiC5lB,CAAjC,CAAuC4lB,CAAvC,EAAmD5lB,CAAnD,CAAuD,CAAvD,CAA4D,CAA5D,EAAiEA,CAsCjE,EAAA2jB,GAAA,CAAc2C,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CACd,EAAAsI,GAAA,CAAuBwC,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAA4B,EAA5B,CACvB,EAAAqI,GAAA,CAAkByC,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAA4B,EAA5B,CAClB,EAAAoI,GAAA,CAAc8C,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CAA6B,EAA7B,CACd,EAAAmI,GAAA,CAAuB2C,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAA4B,EAA5B,CAV3B,CADA,IAeI4K,GAAA,CAAAA,CAAA,CAhBR,CAiEA5B,CAAAmC,GAAA,CAA8BC,QAAQ,CAACrpB,CAAD,CACtC,CAEI,MAAO,KAAAgX,EAAAoS,GAAA,CAAuBppB,CAAvB,CADE,IAAAmmB,GACF,EADuB,EACvB,CAD4B,CAC5B,CAFX,CAKyBmD,SAAA,GAAQ,CAACpG,CAAD,CACjC,CACI,MAAW,EAAJ,CAAAA,CAAA,CAAQ5hB,IAAAC,MAAA,CAAW2hB,CAAX,CAAR,CAAwB5hB,IAAAioB,KAAA,CAAUrG,CAAV,CADnC,CAIA+D,CAAA/gB,KAAA,CAAqBsjB,QAAQ,CAACtG,CAAD,CAC7B,CACI,IAAAgD,EAAA,CAAiB,IAAAA,EAAjB,CAAkC,CAAlC,CAAsC,CAEnC,KAAAD,GAAH,EAAuB,IAAAC,EAAvB,CAAwC,CAAxC,EAEI,IAAAO,EAEA,EAFoB,IAEpB,CADA,IAAAR,GACA,EADoB,EAAE,CAAF,EAAO,IAAAC,EAAP,CACpB,CAAA,IAAAT,EAAA,CAAQ,IAAAS,EAAR,CAAA,CAA0BhD,CAJ9B,GAQI,IAAAuD,EAEA,EA3aKgD,GA2aL,CADAC,IArSJjD,EAsSI,EAtSgB,EAsShB,CAAA,IAAAhB,EAAA,CAAQ,IAAAS,EAAR,CAAA,CAA0B,IAAAQ,EAV9B,CAHJ,CAiBAO;CAAA0C,IAAA,CAAoBC,QAAQ,EAC5B,CACI,IAAA3D,GAAA,EAAoB,CAApB,EAAyB,IAAAC,EACzB,KAAAA,EAAA,CAAiB,IAAAA,EAAjB,CAAkC,CAAlC,CAAsC,CAF1C,CAKwB2D,SAAA,GAAQ,CAARA,CAAQ,CAAChnB,CAAD,CAChC,CAGIA,CAAA,CAAIA,CAAJ,CAAQ,CAAAqjB,EAAR,CAAyB,CAEzB,OAAG,EAAAD,GAAH,EAAuBpjB,CAAvB,CAA2B,CAA3B,EAEI,CAAA4jB,EAEOC,EAFa,IAEbA,CADPgD,CAzTJjD,EA0TWC,EA1TS,EA0TTA,CAAA,CAAAA,EAJX,EAQW,CAAAjB,EAAA,CAAQ5iB,CAAR,CAbf,CAiBwBinB,QAAA,GAAQ,CAARA,CAAQ,CAChC,CACI,MAAG,EAAA7D,GAAH,EAAuB,CAAAC,EAAvB,CAAwC,CAAxC,EAEI,CAAAO,EAEOC,EAFa,IAEbA,CADPgD,CAvUJjD,EAwUWC,EAxUS,EAwUTA,CAAA,CAAAA,EAJX,EAQW,CAAAjB,EAAA,CAAQ,CAAAS,EAAR,CATf,CAayB6D,QAAA,GAAQ,CAARA,CAAQ,CAAC9L,CAAD,CACjC,CAAA,IACQ+L,EAAWjB,CAAA,CAAA,CAAA/R,EAAA,CAAqBiH,CAArB,CAA4B,CAA5B,CADnB,CAGQgM,EAAMd,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CAANgM,GAAsC,CAH9C,CAIQC,EAAOf,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAAPiM,GAA2C,CAE/CC,EAAA,CAAOH,CAAP,EAAmB,EACnBA,EAAA,EAAY,MAEZ,IAAgB,CAAhB,GAAGA,CAAH,CAGI,MAAO,EAGX,IAAG,EAAW,KAAX,CAAAA,CAAA,CAAH,CAgBI,MARA,EAAAlE,EAAA,CAAkB,CAAlB,CAQO,CARgB,GAQhB,CARuBqE,CAQvB,EAR+B,CAQ/B,CAPP,CAAArE,EAAA,CAAkB,CAAlB,CAOO,CAPgB,GAOhB,CAPuBoE,CAOvB,EAP+B,EAO/B,EAPqC,CAOrC,CAPyC,CAOzC,CALP,CAAApE,EAAA,CAAkB,CAAlB,CAKO,CALgB,CAKhB,CAJP,CAAAA,EAAA,CAAkB,CAAlB,CAIO,CAJgB,CAIhB,CAFP,CAAAC,EAAA,CAAiB,CAAjB,CAEO,CAFe,CAEf,CAAA,CAAAF,EAAA,CAAa,CAAb,CAIPuE,EAAAA,CAAWH,CAAXG,CAAiB,UAAjBA,CAA+BF,CAEhCC,EAAH,GAEIC,CAFJ,CAEe,CAACA,CAFhB,CAcA,OAAOA,EAAP,CAAkB9oB,IAAA+oB,IAAA,CAAS,CAAT,CAlCdL,CAkCc,CAlCF,KAkCE,CAAuB,EAAvB,CAnDtB;AAsD0BM,QAAA,GAAQ,CAARA,CAAQ,CAACrM,CAAD,CAAOjX,CAAP,CAClC,CACI,CAAA6e,EAAA,CAAa,CAAb,CAAA,CAAkB7e,CAEdmjB,EAAAA,CAAO,CAAArE,EAAA,CAAkB,CAAlB,CAAPqE,CAA8B,GAHtC,KAIQH,GAAY,CAAAlE,EAAA,CAAkB,CAAlB,CAAZkE,CAAmC,GAAnCA,GAA4C,CAA5CA,CAAgD,CAAAlE,EAAA,CAAkB,CAAlB,CAAhDkE,EAAwE,CAI5E,IAAgB,IAAhB,GAAGA,CAAH,CACA,CAEIA,CAAA,CAAW,KACX,KAAAC,EAAM,CACN,KAAAC,EAAO,UAAPA,EAAqB,CAAAnE,EAAA,CAAiB,CAAjB,CAArBmE,CAA2C,MAA3CA,GAAuD,EAJ3D,CADA,IAOqB,EAAhB,GAAGF,CAAH,CAKDE,CALC,CAIDD,CAJC,CAIK,CAJL,EASDD,CAIA,EAJY,KAIZ,CADAC,CACA,CADM,CAAAlE,EAAA,CAAiB,CAAjB,CACN,EAD6B,EAC7B,CAAAmE,CAAA,CAAO,UAAP,EAAqB,CAAAnE,EAAA,CAAiB,CAAjB,CAArB,CAA2C,OAA3C,GAAuD,EAAvD,CAA6D,CAAAA,EAAA,CAAiB,CAAjB,CAA7D,GAAqF,EAbpF,CAkBL6C,EAAA,CAAA,CAAA5R,EAAA,CAAsBiH,CAAtB,CAA4BgM,CAA5B,CACArB,EAAA,CAAA,CAAA5R,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAAgCiM,CAAhC,CAEA3B,GAAA,CAAA,CAAAvR,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAAgCkM,CAAhC,EAAwC,CAAxC,CAA4CH,CAA5C,CApCJ,CAuCyBO,QAAA,GAAQ,CAARA,CAAQ,CAACtM,CAAD,CACjC,CAAA,IACQgM,EAAMd,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CACNiM,EAAAA,CAAOf,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAEX,EAAA8H,EAAA,CAAiB,CAAjB,CAAA,CAAsBkE,CACtB,EAAAlE,EAAA,CAAiB,CAAjB,CAAA,CAAsBmE,CAEtB,OAAO,EAAArE,EAAA,CAAa,CAAb,CAPX,CAU0B2E,QAAA,GAAQ,CAARA,CAAQ,CAACvM,CAAD,CAClC,CACIqK,EAAA,CAAA,CAAAtR,EAAA,CAA+BiH,CAA/B,CAAqC,CAArC,CAEA,EAAA4H,EAAA,CAAa,CAAb,CAAA,CAAkB4E,EAAA,CAAAA,CAAA,CAmwBW5nB,CAnwBX,CAElB+lB,EAAA,CAAA,CAAA5R,EAAA,CAAsBiH,CAAtB,CAA4B,CAAA8H,EAAA,CAAiB,CAAjB,CAA5B,CACA6C,EAAA,CAAA,CAAA5R,EAAA,CAAsBiH,CAAtB,CAA6B,CAA7B,CAAgC,CAAA8H,EAAA,CAAiB,CAAjB,CAAhC,CANJ,CASyB2E,QAAA,GAAQ,CAARA,CAAQ,CAACzM,CAAD,CACjC,CACI,CAAA2H,EAAA,CAAiB,CAAjB,CAAA,CAAsBuD,CAAA,CAAA,CAAAnS,EAAA,CAAsBiH,CAAtB,CAEtB,OAAO,EAAA0H,EAAA,CAAa,CAAb,CAHX;AAcAsB,CAAAkD,KAAA,CAAqBQ,QAAQ,CAAC9nB,CAAD,CAC7B,CACI,MAAO,KAAAmjB,EAAA,EAAU,IAAAE,EAAV,CAA2BrjB,CAA3B,CAA+B,CAA/B,GAAqC,CAArC,CAAyC,CAAzC,CAAP,EAAsD,CAD1D,C,CCpjBA+nB,QAASA,GAAS,CAAC5T,CAAD,CAAM7J,CAAN,CAAc0d,CAAd,CAAqBC,CAArB,CAAyBjsB,CAAzB,CAClB,CACI,IAAAksB,GAAA,CAAc,IAAIC,EAAJ,CAAiB,IAAjB,CAAuBhU,CAAvB,CAA4B7J,CAA5B,CAAoC0d,CAApC,CAA2CC,CAA3C,CAAkDjsB,CAAlD,CACd,KAAAosB,GAAA,CAAa,IAAID,EAAJ,CAAiB,IAAjB,CAAuBhU,CAAvB,CAA4BrG,IAAAA,EAA5B,CAAuC,CAAA,CAAvC,CAA8Cma,CAA9C,CAAqDjsB,CAArD,CAEb,KAAAqsB,GAAA,CAAyB,IAAAH,GAEzB,KAAA/T,EAAA,CAAWA,CAGD,EAAV,GAAG8T,CAAH,EAEI,IAAAK,EAGA,CAHgB,GAGhB,CAFA,IAAAC,GAEA,CAFW,EAEX,CAAA,IAAAC,GAAA,CAAc,GALlB,EAOe,CAPf,GAOQP,CAPR,GASI,IAAAK,EAGA,CAHgB,GAGhB,CAFA,IAAAC,GAEA,CAFW,EAEX,CAAA,IAAAC,GAAA,CAAc,GAZlB,CAqBA,KAAAC,EAAA,CAAqB,IAAAH,EAArB,CAAqC,GAGrC,KAAAI,EAAA,CAAmB,KAEnB,KAAAC,GAAA,CAAiB,CACb,GADa,CACP,GADO,CACD,EADC,CACK,GADL,CACW,CADX,CACiB,CADjB,CACuB,GADvB,CAC6B,CAD7B,CAEb,CAFa,CAEP,GAFO,CAED,CAFC,CAEK,CAFL,CAEW,CAFX,CAEiB,CAFjB,CAEuB,CAFvB,CAE6B,CAF7B,CAGb,IAAAL,EAHa,CAGG,GAHH,CAGU,CAHV,CAGkB,IAAAA,EAHlB,EAGmC,CAHnC,CAGsC,CAHtC,CAG4C,CAH5C,CAIb,IAAAG,EAJa,CAIQ,GAJR,CAIe,CAJf,CAIkB,IAAAA,EAJlB,EAIwC,CAJxC,CAI2C,CAJ3C,CAIiD,CAJjD,CAKb,CALa,CAKP,CALO,CAKD,CALC,CAKK,CALL,CAMb,CANa,CAMP,CANO,CAMD,CANC,CAMK,CANL,CAOb,IAAAC,EAPa,CAOM,GAPN,CAOa,CAPb,CAOkB,IAAAA,EAPlB,EAOsC,CAPtC,CAOyC,CAPzC,CAO+C,CAP/C,CAQb,CARa,CAQP,CARO,CAQD,CARC,CAQK,CARL,CASb,CATa,CASP,CATO,CASD,CATC,CASK,CATL,CAUb,EAVa,CAUP,EAVO,CAUD,GAVC,CAUK,GAVL,CAWb,CAXa,CAWP,CAXO,CAWD,CAXC,CAWK,CAXL,CAWW,CAXX,CAWiB,CAXjB,CAWuB,CAXvB,CAW6B,CAX7B,CAYb,CAZa,CAYP,CAZO,CAYD,CAZC,CAYK,CAZL,CAYW,IAAAH,GAZX,CAYqB,CAZrB,CAY2B,CAZ3B,CAYiC,CAZjC,CAeb,CAfa,CAeP,CAfO,CAeD,CAfC,CAeK,CAfL,CAeW,CAfX,CAeiB,CAfjB,CAeuB,CAfvB,CAe6B,CAf7B,CAgBb,CAhBa,CAgBP,CAhBO,CAgBD,CAhBC,CAgBK,CAhBL,CAgBW,CAhBX,CAgBiB,CAhBjB,CAgBuB,CAhBvB,CAgB6B,CAhB7B,CAiBb,CAjBa,CAiBP,CAjBO,CAiBD,CAjBC,CAiBK,CAjBL,CAiBW,CAjBX,CAiBiB,CAjBjB,CAiBuB,CAjBvB,CAiB6B,CAjB7B,CAkBb,CAlBa,CAkBP,CAlBO;AAkBD,CAlBC,CAkBK,CAlBL,CAkBW,CAlBX,CAkBiB,CAlBjB,CAkBuB,CAlBvB,CAkB6B,CAlB7B,CAmBb,CAnBa,CAmBP,CAnBO,CAmBD,CAnBC,CAmBK,CAnBL,CAmBW,CAnBX,CAmBiB,CAnBjB,CAmBuB,CAnBvB,CAmB6B,CAnB7B,CAoBb,CApBa,CAoBP,CApBO,CAoBD,CApBC,CAoBK,CApBL,CAoBW,CApBX,CAoBiB,CApBjB,CAoBuB,CApBvB,CAoB6B,CApB7B,CAqBb,CArBa,CAqBP,CArBO,CAqBD,CArBC,CAqBK,CArBL,CAqBW,CArBX,CAqBiB,CArBjB,CAqBuB,CArBvB,CAqB6B,CArB7B,CAsBb,CAtBa,CAsBP,CAtBO,CAsBD,CAtBC,CAsBK,CAtBL,CAsBW,CAtBX,CAsBiB,CAtBjB,CAsBuB,CAtBvB,CAsB6B,CAtB7B,CAwBb,CAxBa,CAwBP,CAxBO,CAwBD,CAxBC,CAwBK,CAxBL,CAwBW,CAxBX,CAwBiB,CAxBjB,CAwBuB,CAxBvB,CAwB6B,CAxB7B,CAyBb,CAzBa,CAyBP,CAzBO,CAyBD,CAzBC,CAyBK,CAzBL,CAyBW,CAzBX,CAyBiB,CAzBjB,CAyBuB,CAzBvB,CAyB6B,CAzB7B,CA0Bb,CA1Ba,CA0BP,CA1BO,CA0BD,CA1BC,CA0BK,CA1BL,CA0BW,CA1BX,CA0BiB,CA1BjB,CA0BuB,CA1BvB,CA0B6B,CA1B7B,CA2Bb,CA3Ba,CA2BP,CA3BO,CA2BD,CA3BC,CA2BK,CA3BL,CA2BW,CA3BX,CA2BiB,CA3BjB,CA2BuB,CA3BvB,CA2B6B,CA3B7B,CA6BjB,KAAAK,GAAA,CAAgB,CACZ,CACI5qB,KAAM,CADV,CADY,CAIZ,CACIA,KAAM,CADV,CAJY,CAOZ8P,IAAAA,EAPY,CAQZA,IAAAA,EARY,CASZ,CACI9P,KAAM,EADV,CATY,CAahB,KAAAyB,KAAA,CAAY,KAAZ,CAAoBwoB,CAGpB,KAAAY,EAAA,CAAsB,CAGtBxO,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EAAG,CAErDS,EAAA,CAAA,IAAA5U,EAAA,CAA0B,IAAAoU,GAA1B,CACA,OAAO,KAAAS,GAAA,EAH8C,CAAzD,CAKA3O,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAL,EAArB,CAA0C,CAA1C,CAA6C,IAA7C,CAAmD,IAAAO,GAAnD,CAEAlO,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAL,EAAtB,CAA2C,CAA3C,CAA8C,IAA9C,CAAoD,IAAAQ,GAApD,CACA5O,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CACI,MAAOY,GAAA,CAAA,IAAAb,GAAA,CAAiC,CAAjC,CADX,CADA,CAGG,QAAQ,EACX,CACI,MAAOa,GAAA,CAAA,IAAAb,GAAA,CAAiC,CAAjC,CADX,CAJA,CAMG,QAAQ,EACX,CACI,MAAOa,GAAA,CAAA,IAAAb,GAAA,CAAiC,CAAjC,CADX,CAPA,CAWAhO,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAGI,MAAO,KAAAD,GAAA/T,MAHX,CADA,CAMA+F;CAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAEI,MAAO,KAAAD,GAAAc,GAAP,CAA0C,GAF9C,CADA,CAKA9O,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAEI,MAAO,KAAAD,GAAAe,GAAP,CAAuC,GAF3C,CADA,CAMA/O,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAEI,MAAO,KAAAD,GAAAgB,GAAP,CAA6C,GAFjD,CADA,CAKAhP,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAEI,MAAO,KAAAD,GAAAiB,GAAP,CAA8C,GAFlD,CADA,CAKAjP,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAR,EAArB,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAEI,MAAO,KAAAD,GAAAkB,GAFX,CADA,CAMAzO,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CA4vCAypB,EAAA,CA3vCI,IAAAnB,GA2vCJ,CA3vC4CtoB,CA2vC5C,CAA2B,CAA3B,CA5vCA,CADA,CAGG,QAAQ,CAACA,CAAD,CACX,CA8vCAypB,EAAA,CA7vCI,IAAAnB,GA6vCJ,CA7vC6CtoB,CA6vC7C,CAA2B,CAA3B,CA9vCA,CAJA,CAMG,QAAQ,CAACA,CAAD,CACX,CAgwCAypB,EAAA,CA/vCI,IAAAnB,GA+vCJ,CA/vC6CtoB,CA+vC7C,CAA2B,CAA3B,CAhwCA,CAPA,CAWA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CAEI,IAAAmoB,GAAAuB,GAAA,EAAyB,IAAAvB,GAAAuB,GAAzB,EAAkD,CAAlD,CAAsD1pB,CAAtD,EAA8D,KAC9D,KAAAqoB,GAAAqB,GAAA,EAAwB,IAAArB,GAAAqB,GAAxB,EAAgD,CAAhD,CAAoD1pB,CAApD,EAA4D,KAHhE,CADA,CAMA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC;AAA+C,QAAQ,CAACvoB,CAAD,CACvD,CAEI,IAAAmoB,GAAAiB,GAAA,EAAyB,IAAAjB,GAAAiB,GAAzB,EAAkD,CAAlD,CAAsDppB,CAAtD,EAA8D,KAC9D,KAAAqoB,GAAAe,GAAA,EAAwB,IAAAf,GAAAe,GAAxB,EAAgD,CAAhD,CAAoDppB,CAApD,EAA4D,KAHhE,CADA,CAMA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CAEI,IAAAmoB,GAAAkB,GAAA,EAAsB,IAAAlB,GAAAkB,GAAtB,EAA4C,CAA5C,CAAgDrpB,CAAhD,EAAwD,KACxD,KAAAqoB,GAAAgB,GAAA,EAAqB,IAAAhB,GAAAgB,GAArB,EAA0C,CAA1C,CAA8CrpB,CAA9C,EAAsD,KAH1D,CADA,CAOA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CAEI,IAAAmoB,GAAAmB,GAAA,EAA4B,IAAAnB,GAAAmB,GAA5B,EAAwD,CAAxD,CAA4DtpB,CAA5D,EAAoE,KACpE,KAAAqoB,GAAAiB,GAAA,EAA2B,IAAAjB,GAAAiB,GAA3B,EAAsD,CAAtD,CAA0DtpB,CAA1D,EAAkE,KAHtE,CADA,CAMA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CAEI,IAAAmoB,GAAAoB,GAAA,EAA6B,IAAApB,GAAAoB,GAA7B,EAA0D,CAA1D,CAA8DvpB,CAA9D,EAAsE,KACtE,KAAAqoB,GAAAkB,GAAA,EAA4B,IAAAlB,GAAAkB,GAA5B,EAAwD,CAAxD,CAA4DvpB,CAA5D,EAAoE,KAHxE,CADA,CAMA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CASQ,IAAAsoB,GAAA,CARQtoB,CAKZ,CALmB,EAKnB,CAG6B,IAAAqoB,GAH7B,CAO6B,IAAAF,GAG7B,KAAAA,GAAAqB,GAAA,CAAyBxpB,CACzB,KAAAqoB,GAAAmB,GAAA,CAAwBxpB,CACxB,KAAAmoB,GAAAwB,GAAA,CAAqB,IAAAtB,GAAAsB,GAArB;AAAyC3pB,CAAzC,EAAiD,CAAjD,CAAqD,CACrD,KAAAmoB,GAAAyB,KAAA,CAAmB,IAAAvB,GAAAuB,KAAnB,CAAqC5pB,CAArC,CAA4C,EAnBhD,CADA,CA8BA,KAAA6pB,EAAA,CAHA,IAAAC,GAGA,CANA,IAAAC,GAMA,CANiB,CAQjBhP,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAR,EAAtB,CAAsC,CAAtC,CAAyC,IAAzC,CAA+C,QAAQ,CAACvoB,CAAD,CACvD,CAEIgpB,EAAA,CAAA,IAAA5U,EAAA,CAA0B,IAAAoU,GAA1B,CACAF,KAAAA,EAAAA,IAAAA,GA2YJ,IAAI,CAAA/d,OAAJ,CAYA,OAHA,CAAAyf,EApZuChqB,CAAAA,CAAAA,CAqZvC,CAAAuU,MArZuCvU,CAqZ1B,CArZ0BA,CAAAA,CAuZvC,EAEI,KAAK,CAAL,CAEI,CAAAiqB,EAAA,CAAoB,CACpB,EAAAC,EAAA,CAAgB,CAChB,EAAAC,EAAA,CAAmB,CACnBC,GAAA,CAAAA,CAAA,CACA,EAAAC,GAAA,EACA,MAEJ,MAAK,EAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAwoB,GAAA,CAAoB,CACpB,EAAAe,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,KAAIwpB,EAAc,CAAAC,EAAdD,CAAkC,CACtC,EAAAjB,GAAA,CAAciB,CAAd,CAA4B,GAC5B,EAAAhB,GAAA,CAAoBgB,CAApB,EAAmC,CAAnC,CAAuC,GACvC,EAAAf,GAAA,CAAqBe,CAArB,EAAoC,EAApC,CAAyC,GACzC,EAAAd,GAAA,CAAkB,CAAAA,GAAlB,CAAoC,GAApC,CAA2Cc,CAA3C,EAA0D,EAA1D,CAA+D,EAC/D,EAAAD,GAAA,EACA,MAEJ,MAAK,EAAL,CAEI,CAAAvpB,OAAA,CAAc,EACVwpB,EAAJ,CAAkB,CAAAC,EAAlB,CAAsC,CACtC,EAAAlB,GAAA,CAAciB,CAAd,CAA4B,GAC5B,EAAAhB,GAAA,CAAoBgB,CAApB,EAAmC,CAAnC,CAAuC,GACvC,EAAAf,GAAA,CAAqBe,CAArB,EAAoC,EAApC,CAAyC,GACzC,EAAAjB,GAAA,EAAeiB,CAAf,EAA8B,EAA9B,EAAoC,CAApC,CAAwC,KACxC,EAAAD,GAAA,EACA,MAEJ,MAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,GAAL,CAKIG,EAAA,CAAAA,CAAA;AAvc+BxqB,CAuc/B,CACA,MAEJ,MAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,GAAL,CAm7BJ,IAAIyqB,EAAmB,EAAnBA,GAh4CmCzqB,CAg4CnCyqB,EAAmC,EAAnCA,GAh4CmCzqB,CAi4CnCmC,EAAAA,CAAQuoB,EAAA,CA/6BJC,CA+6BI,CAAeF,CAAf,CACRG,EAAAA,CAAMC,EAAA,CAh7BFF,CAg7BE,CAAaF,CAAb,CAENK,EAAAA,CAAoB,EAApBA,GAp4CmC9qB,CAo4CnC8qB,EAAoC,EAApCA,GAp4CmC9qB,CAs4CtBmC,EAAb4oB,EAp7BIJ,CAo7BiBK,EACbJ,EAAR/f,EAr7BI8f,CAq7BUK,EAOfngB,EAAH,CAAWkgB,CAAX,CA57BQJ,CA47BgBpgB,OAAAqV,WAAxB,EA57BQ+K,CAg8BJ7pB,OACA,CADc,GACd,CAj8BI6pB,CAi8BJN,GAAA,EALJ,GA57BQM,CAq8BJ7pB,OAGA,CAHc,EAGd,CAFAmqB,EAAA,CAt8BIN,CAs8BJ,CAA2BI,CAA3B,CAEA,CAx8BIJ,CAu8BJT,EACA,CADgBY,CAAA,CAAY,GAAZ,CAAkBpsB,IAAAqM,IAAA,CAASggB,CAAT,CAA4C,GAA5C,CAv8B9BJ,CAu8BmDO,EAArB,CAClC,CAx8BIP,CAw8BJQ,GAAA,CAAkBtgB,CAZtB,CA37BQ,MAEJ,MAAK,GAAL,CAEI,CAAAwf,GAAA,EACA,EAAA9V,MAAA,CAAa,GACb,EAAAzT,OAAA,CAAc,EACd,MAEJ,MAAK,GAAL,CAEI,CAAAA,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEO,CAAAe,EAAH,GAEI,CAAAtqB,OAIA,CAJc,EAId,CAHAuqB,EAAA,CAAAA,CAAA,CAAmB,EAAnB,CAGA,CAFA,CAAAnB,EAEA,CAFgB,EAEhB,CADA,CAAAd,GACA,CADiB,CACjB,CAAA,CAAAiB,GAAA,EANJ,CAQA,MAEJ,MAAK,GAAL,CAGO,CAAAe,EAAH,EAEIE,EAAA,CAAAA,CAAA,CAIA,CAHA,CAAAxqB,OAGA,CAHc,EAGd,CADA,CAAAwoB,GACA,CADoB,EACpB,CAAA,CAAAC,GAAA,CAAqB,GANzB,EAYI,CAAAzoB,OAZJ,CAYkB,EAJd,EAAAupB,GAAA,EAOJ,MAEJ,MAAK,GAAL,CAII,CAAAa,EAAA,CAAuB,CAAA9B,GAAvB,CAAwC,GACxC,EAAAtoB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,EAAL,CACA,KAAK,GAAL,CA8xBAI,CAAAA;AAAmB,EAAnBA,GA1yCmCzqB,CA2yCnCmC,EAAAA,CAAQuoB,EAAA,CA9xBJa,CA8xBI,CAAed,CAAf,CACFI,GAAAD,CA/xBFW,CA+xBEX,CAAaH,CAAbG,CASV,CAxyBQW,CAkyBUP,EAMlB,CAPiB7oB,CAOjB,CAxyBQopB,CAiyBiBP,EAOzB,CAxyBQO,CAwyBgBhhB,OAAAqV,WAAxB,EAxyBQ2L,CA4yBJzqB,OACA,CADc,GACd,CA7yBIyqB,CA6yBJlB,GAAA,EALJ,GAxyBQkB,CAizBRzqB,OACA,CADc,EACd,CAlzBQyqB,CAkzBRxS,GAAA+Q,GAAA,EAA0B,CAV1B,CAvyBQ,MAEJ,MAAK,EAAL,CACA,KAAK,GAAL,CA+4BAW,CAAAA,CAAmB,EAAnBA,GAh6CmCzqB,CAi6CnCmC,EAAAA,CAAQuoB,EAAA,CA/4BJc,CA+4BI,CAAef,CAAf,CACFI,GAAAD,CAh5BFY,CAg5BEZ,CAAaH,CAAbG,CASV,CAz5BQY,CAm5BUR,EAMlB,CAPiB7oB,CAOjB,CAz5BQqpB,CAk5BiBR,EAOzB,CAz5BQQ,CAy5BgBjhB,OAAAqV,WAAxB,EAz5BQ4L,CA65BJ1qB,OACA,CADc,GACd,CA95BI0qB,CA85BJnB,GAAA,EALJ,GAz5BQmB,CAk6BR1qB,OACA,CADc,EACd,CAn6BQ0qB,CAm6BRzS,GAAA+Q,GAAA,EAA0B,CAV1B,CAx5BQ,MAEJ,MAAK,EAAL,CAEI,CAAAhpB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAyT,MAAA,CAAa,CACb,EAAA8V,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAGI,GAAG,CAAAe,EAAH,CACA,CACI,CAAAtqB,OAAA,CAAc,EACd,EAAAyT,MAAA,CAAa,CACb,EAAA8V,GAAA,EACA,MAJJ,CAOAiB,EAAA,CAAAA,CAAA,CACA,EAAAxqB,OAAA,CAAc,EAEd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA;AAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAupB,GAAA,EACA,MAEJ,MAAK,GAAL,CAEI,CAAAvpB,OAAA,CAAc,EACd,EAAAyT,MAAA,CAAa,CACb,MAEJ,SAGI,CAAAzT,OAEA,CAFc,EAEd,CAAA,CAAAyT,MAAA,CAAa,CA3MrB,CAZA,IAGI,EAAAA,MAEA,CAFa,CAEb,CADA,CAAAzT,OACA,CADc,EACd,CAAA,CAAAupB,GAAA,EAnZJ,CADA,CAOA/P,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAJ,EAArB,CAAwC,CAAxC,CAA2C,IAA3C,CAAiD5a,IAAAA,EAAjD,CAA4DA,IAAAA,EAA5D,CAAuE,IAAA0d,GAAvE,CACA1Q,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAJ,EAAtB,CAAyC,CAAzC,CAA4C,IAA5C,CAAkD5a,IAAAA,EAAlD,CAA6DA,IAAAA,EAA7D,CAAwE,IAAA2d,GAAxE,CAEApR,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAJ,EAArB,CAAuC,IAAvC,CACqB,IAAAgD,GADrB,CAC6C5d,IAAAA,EAD7C,CACwD,IAAA6d,GADxD,CAEA7Q,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAJ,EAAtB,CAAwC,IAAxC,CACsB,IAAAkD,GADtB,CAC+C9d,IAAAA,EAD/C,CAC0D,IAAA+d,GAD1D,CAGAxR,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAJ,EAArB,CAAwC,CAAxC,CAA2C,IAA3C,CAAiD,IAAAoD,GAAjD,CACAhR,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAAJ,EAAtB,CAAyC,CAAzC,CAA4C,IAA5C,CAAkD,IAAAqD,GAAlD,CAEA1R,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAJ,EAArB,CAAwC,CAAxC,CAA6C,IAA7C,CAAmD,QAAQ,EAAG,CACvB,MAAO,EADgB,CAA9D,CAGArO,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,IAAAJ,EAArB,CAAwC,EAAxC,CAA6C,IAA7C,CAAmD,QAAQ,EAAG,CACvB,MAAO,EADgB,CAA9D,CAIAsD,GAAA,CAAA7X,CAAA4I,EAAAkP,GAAA;AAAgC,IAAhC,CA1OJ,CA+OA,CAAA,CAAA,EAAA,UAAAC,EAAAlD,GAAA,CAAkCmD,QAAQ,EAC1C,CACI,MAAG,KAAA9D,GAAA/d,OAAH,CAEc,IAAA+d,GAAAxnB,OAFd,CAQW,CATf,CAaAqrB,EAAAjD,GAAA,CAAoCmD,QAAQ,CAACrsB,CAAD,CAC5C,CAIOA,CAAH,CAAU,CAAV,GAIIgpB,EAAA,CAAA,IAAA5U,EAAA,CAA0B,IAAAoU,GAA1B,CAGA,CADA4B,EAAA,CAAA,IAAAjC,GAAA,CACA,CAAAiC,EAAA,CAAA,IAAA/B,GAAA,CAPJ,CAUA,KAAAS,EAAA,CAAsB9oB,CAd1B,CAiBAmsB,EAAAV,GAAA,CAAoCa,QAAQ,EAC5C,CAEI,MAAO,KAAAvC,GAFX,CAKAoC,EAAAT,GAAA,CAAmCa,QAAQ,CAACvsB,CAAD,CAC3C,CAEI,IAAA+pB,GAAA,CAAiB/pB,CAFrB,CAKAmsB,EAAAJ,GAAA,CAAsCS,QAAQ,EAC9C,CAEI,MAAO,KAAA1C,GAFX,CAKAqC,EAAAH,GAAA,CAAuCS,QAAQ,CAAC3c,CAAD,CAC/C,CAEI,IAAAga,GAAA,EAAmB,EAAEha,CAAF,CAAU,CAAV,CAFvB,CAKAqc,EAAAP,GAAA,CAAuCc,QAAQ,EAC/C,CACI,MAAO,KAMA7C,EANP,CAAkC,IAX3BC,GAWP,EAA4D,EADhE,CAIAqC,EAAAR,GAAA,CAAwCgB,QAAQ,EAChD,CAEI,MAAO,KAAA9C,EAFX,CAKAsC,EAAAL,GAAA,CAAwCc,QAAQ,CAAC9c,CAAD,CAChD,CAGI,IAAA+b,GAAA,CAAwB/b,CAAxB,CAAgC,GAAhC,CACA,KAAAkc,GAAA,CAAsBlc,CAAtB,EAA+B,EAA/B,CAAoC,GAApC,CAJJ,CAOAqc;CAAAN,GAAA,CAAyCgB,QAAQ,CAAC/c,CAAD,CACjD,CAGI,IAAIgd,EAAc,IAAAjD,EAClB,KAAAA,EAAA,CAAmB/Z,CAAnB,CAA2B,CAE3B,KAAIgd,CAAJ,CAAkB,CAAlB,KAA0Bhd,CAA1B,CAAkC,CAAlC,EAKA,GAAmB,CAAnB,IAAIA,CAAJ,CAAY,CAAZ,EAEI,IAAAga,GAAA,EAAmB,EAFvB,KAQA,QAFA,IAAAA,GAEOE,EAFY,CAEZA,CAAA,IAAA1B,GAAA0B,EAAP,EAEI,KAAK,EAAL,CACA,KAAK,GAAL,CACI+C,EAAA,CAAA,IAAAzE,GAAA,CACA,MAEJ,MAAK,GAAL,CACA,KAAK,EAAL,CACI0E,EAAA,CAAA,IAAA1E,GAAA,CACA,MAEJ,MAAK,GAAL,CACI2E,EAAA,CAAA,IAAA3E,GAAA,CAbR,CAnBJ,CA0CA6D,EAAA9B,GAAA,CAA+B6C,QAAQ,EACvC,CACqC,CAAjC,IAAI,IAAApE,EAAJ,CAA0B,CAA1B,IAGI,IAAAgB,GACA,EADmB,CACnB,CAAA,IAAA1V,EAAA+Y,GAAA,CAA0B,IAAA3E,GAA1B,CAJJ,CADJ,CASA2D,EAAAnvB,GAAA,CAAgCowB,QAAQ,EACxC,CACI,IAAIlwB,EAAQ,EACZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAirB,GACXjrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAmrB,GACXnrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAqrB,EACXrrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAsrB,GACXtrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAurB,GACXvrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwrB,EACXxrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAyrB,EACXzrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwC,KACXxC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4rB,EACX5rB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA6sB,GACX7sB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4sB,GACZ5sB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAorB,GAAZ,GAAuC,IAAAH,GACvCjrB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA2sB,EACZ,OAAO3sB,EAfX,CAkBAivB;CAAA3uB,GAAA,CAAgC6vB,QAAQ,CAACnwB,CAAD,CACxC,CACI,IAAAirB,GAAA,CAAcjrB,CAAA,CAAM,CAAN,CACd,KAAAmrB,GAAA,CAAanrB,CAAA,CAAM,CAAN,CACb,KAAAqrB,EAAA,CAAgBrrB,CAAA,CAAM,CAAN,CAChB,KAAAsrB,GAAA,CAAWtrB,CAAA,CAAM,CAAN,CACX,KAAAurB,GAAA,CAAcvrB,CAAA,CAAM,CAAN,CACd,KAAAwrB,EAAA,CAAqBxrB,CAAA,CAAM,CAAN,CACrB,KAAAyrB,EAAA,CAAmBzrB,CAAA,CAAM,CAAN,CACnB,KAAAwC,KAAA,CAAYxC,CAAA,CAAM,CAAN,CACZ,KAAA4rB,EAAA,CAAsB5rB,CAAA,CAAM,CAAN,CACtB,KAAA6sB,GAAA,CAAiB7sB,CAAA,CAAM,CAAN,CACjB,KAAA4sB,GAAA,CAAkB5sB,CAAA,CAAM,EAAN,CAClB,KAAAorB,GAAA,CAAyBprB,CAAA,CAAM,EAAN,CAAA,CAAY,IAAAirB,GAAZ,CAA0B,IAAAE,GACnD,KAAAwB,EAAA,CAAmB3sB,CAAA,CAAM,EAAN,CAbvB,CAoBAkrB;QAASA,GAAY,CAACrP,CAAD,CAAS3E,CAAT,CAAc7J,CAAd,CAAsB0d,CAAtB,CAA6BqF,CAA7B,CAAsDrxB,CAAtD,CACrB,CACI,IAAA8c,GAAA,CAAcA,CAGd,KAAA9c,EAAA,CAAWA,CAMX,KAAAisB,GAAA,CAAUoF,CAGV,KAAAlZ,EAAA,CAAWA,CAEX,KAAA7J,OAAA,CAAcA,CAGd,KAAAygB,EAAA,CAAmB/C,CAAA,CAtbCsF,IAsbD,CApbFC,GAubjB,KAAApC,EAAA,CAAgBnD,CAYhB,KAAAwF,EAAA,CAHA,IAAAC,EAGA,CANA,IAAAC,EAMA,CATA,IAAApD,EASA,CAToB,CAWjB,KAAAhgB,OAAH,GAEI,IAAAggB,ECrNJ,CDqNwB,IAAAhgB,OAAAqV,WCrNxB,CDqNiD,IAAAoL,ECrNjD,CDuNO,IAAAT,ECvNP,IDuN8B,IAAAA,ECvN9B,CDuNkD,CCvNlD,ID0NQ,IAAAA,EC1NR,CD0N4B7rB,IAAAioB,KAAA,CAAU,IAAA4D,EAAV,CC1N5B,ED6NOtC,CAAH,EAEI,IAAA0F,EACA,CADkB,CAClB,CAAA,IAAAD,EAAA,CAAyB,CAH7B,GASI,IAAAC,EACA,CADkB,EAClB,CAAA,IAAAD,EAAA,CAAyB,EAV7B,CC7NJ,CD2OI,IAAAD,EC3OJ,CD2O0B,IAAAlD,EC3O1B,CD2O8C,IAAAoD,EC3O9C,CD2OgE,IAAAD,EC3OhE,CD6OO,IAAAD,EC7OP,ID6OgC,IAAAA,EC7OhC,CD6OsD,CC7OtD,IDgPQ,IAAAA,EChPR,CDgP8B/uB,IAAAC,MAAA,CAAW,IAAA8uB,EAAX,CChP9B,ED2PQvQ,CC3PR,CD2Pc9I,CAAA4I,EAAAE,GC3Pd,CD8PIA,CC9PJ0Q,GAAA,CApPwCC,EAoPxC,CAAA,ED+PiD,CC/PjD,ED+PgE,CC/PhE,CD+PsD,IAAA3F,GC/PtD,CDgQIhL,CChQJ0Q,GAAA,CApQ+BE,EAoQ/B,CAAA,CDgQmC5Q,CC3Q5B0Q,GAAA,CAzPwBE,EAyPxB,CAWP,CDgQmE,EChQnE,CDgQ0E,GChQ1E,CDmQI5Q,CCnQJ0Q,GAAA,CDmQmBxvB,ECnQnB,CAAA,CDmQ4B,IAAAqvB,ECnQ5B,CDmQkD,GCnQlD,CDoQIvQ,CCpQJ0Q,GAAA,CDoQmBxvB,ECpQnB,CAAA,CDoQ4B,IAAAqvB,ECpQ5B,EDoQmD,CCpQnD,CDoQuD,GCpQvD,CDqQIvQ,CCrQJ0Q,GAAA,CDqQmBxvB,ECrQnB,CAAA,CDqQ4B,IAAAuvB,ECrQ5B,CDqQ8C,GCrQ9C,CDsQIzQ,CCtQJ0Q,GAAA,CDsQmBxvB,ECtQnB,CAAA,CDsQ4B0R,GCtQ5B,CDuQIoN,CCvQJ0Q,GAAA,CDuQmBxvB,ECvQnB,CAAA,CDuQ4B0R,GCvQ5B,CDwQIoN,CCxQJ0Q,GAAA,CDwQmBxvB,ECxQnB,CAAA;ADwQ4B0R,GCxQ5B,CDyQIoN,CCzQJ0Q,GAAA,CDyQmBxvB,ECzQnB,CAAA,CDyQ4B,IAAAqvB,ECzQ5B,CDyQkD,GCzQlD,CD0QIvQ,CC1QJ0Q,GAAA,CD0QmBxvB,EC1QnB,CAAA,CD0Q4B,IAAAqvB,EC1Q5B,ED0QmD,CC1QnD,CD0QuD,GC1QvD,CD2QIvQ,CC3QJ0Q,GAAA,CD2QmBxvB,EC3QnB,CAAA,CD2Q4B,IAAAsvB,EC3Q5B,CD2QqD,GAxDrD,CA+DA,KAAAK,GAAA,CAAa,CACTC,GAAc,CADL,CAETC,GAAiB,CAFR,CAGTC,GAAY,CAHH,CAITC,GAAe,CAJN,CAKTC,GAAS,CAAA,CALA,CASb,KAAA7jB,OAAA,CAAcA,CAwBd,KAAAif,GAAA,CAHA,IAAAI,KAGA,CANA,IAAAL,GAMA,CATA,IAAAD,GASA,CAZA,IAAAI,GAYA,CAfA,IAAAL,GAeA,CAlBA,IAAAD,GAkBA,CArBA,IAAAO,GAqBA,CArBc,CAwBd,KAAA7oB,OAAA,CAAc,EAGd,KAAAoqB,EAAA,CAAuB,GAMvB,KAAAjB,EAAA,CAHA,IAAA1V,MAGA,CAHa,CAKb,KAAAvU,KAAA,CAAY,IAAIxD,UAAJ,CAAe,KAAf,CACZ,KAAA6xB,GAAA,CAAc,IAAItnB,WAAJ,CAAgB,IAAA/G,KAAAuK,OAAhB,CACd,KAAA+jB,EAAA,CAAc,IAAIxkB,UAAJ,CAAe,IAAA9J,KAAAuK,OAAf,CAMd,KAAA2f,EAAA,CAHA,IAAAC,EAGA,CAHmB,CASnB,KAAAoE,GAAA,CAHA,IAAAvE,EAGA,CAHwB,EAMxB,KAAAmB,GAAA,CAAkB,CAElBqD,OAAAC,KAAA,CAAY,IAAZ,CApKJ;AAuKsCC,QAAA,GAAQ,CAARA,CAAQ,CAC9C,CACO,CAAAtD,EAAH,EAEI,CAAAtqB,OAKA,CALc,CAKd,CAJA,CAAAsoB,GAIA,CAJiB,CAIjB,CAHA,CAAA7U,MAGA,CAHa,CAGb,CAFA,CAAA8U,GAEA,CAFc,CAEd,CADA,CAAAC,GACA,CADoB,EACpB,CAAA,CAAAC,GAAA,CAAqB,GAPzB,GAWI,CAAAzoB,OAOA,CAPc,EAOd,CANA,CAAAsoB,GAMA,CANiB,CAMjB,CALA,CAAA7U,MAKA,CALa,CAKb,CAJA,CAAA8U,GAIA,CAJc,CAId,CADA,CAAAC,GACA,CADoB,CACpB,CAAA,CAAAC,GAAA,CAAqB,CAlBzB,CADJ,CAuBAnB,EAAArrB,UAAAstB,GAAA,CAAkCsE,QAAQ,EAC1C,CACI,IAAA5V,GAAAsR,GAAA,EADJ,CAudAjC,GAAArrB,UAAA6xB,GAAA,CAAkCC,QAAQ,EAC1C,CACI,IAAA/tB,OAAA,CAAc,EAGd,KAAId,EAAO,IAAAA,KAAA8hB,SAAA,CAAmB,CAAnB,CAAsB,IAAAqI,EAAtB,CAIX2E,GAAA,CAAAA,IAAA,CAAiB,IAAA9E,EAAjB,CAAuC,IAAAG,EAAvC,CAA0D,GAA1D,CACA,KAAAE,GAAA,EAEA,KAAA9f,OAAAyV,IAAA,CAAgB,IAAAmL,GAAhB,CAAiCnrB,CAAjC,CAAuC,QAAQ,EAC/C,EADA,CAIA+uB,GAAA,CAAAA,IAAA,CAAkB,IAAA5E,EAAlB,CAfJ,CAkBoC6E;QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAC5C,CAKI,IAAIlE,GAFQkE,CAAA,CAAI,CAAJ,CAERlE,EAFkB,CAElBA,CAFsBkE,CAAA,CAAI,CAAJ,CAEtBlE,EAAqB,CAAAC,EACrBngB,EAAAA,EAJMokB,CAAA,CAAI,CAAJ,CAINpkB,EAJgB,EAIhBA,CAJqBokB,CAAA,CAAI,CAAJ,CAIrBpkB,EAJ+B,EAI/BA,CAJoCokB,CAAA,CAAI,CAAJ,CAIpCpkB,EAJ8C,CAI9CA,CAJkDokB,CAAA,CAAI,CAAJ,CAIlDpkB,EAAc,CAAAmgB,EAOlB,EAAAb,EAAA,CAAmB,CACnB,KAAI+E,EAAa,CAAA3F,GAAb2F,EAAmC,CAAnCA,CAAuC,KAAvCA,CAAgD,CAAA5F,GAAhD4F,CAAoE,GAExE,EAAA5F,GAAA,CAAoB,CAAAC,GAApB,CAAyC,CAEvB,MAAlB,GAAG2F,CAAH,EACIA,CAAA,EAEDA,EAAH,CAAgBnE,CAAhB,GAEImE,CAFJ,CAEiBnE,CAFjB,CAKGlgB,EAAH,EAAY,CAAAN,OAAAqV,WAAZ,EAKI,CAAA9e,OACA,CADc,GACd,CAAA,CAAAupB,GAAA,EANJ,EAQuB,CAAlB,GAAGU,CAAH,EAED,CAAAjqB,OAEA,CAFc,EAEd,CAAA,CAAAmpB,EAAA,CAAoB,CAJnB,GASDc,CAIA,CAJarsB,IAAAqM,IAAA,CAASggB,CAAT,CAAqB,CAAAxgB,OAAAqV,WAArB,CAA8C/U,CAA9C,CAIb,CAHA,CAAA/J,OAGA,CAHc,GAGd,CAFAquB,EAAA,CAAAA,CAAA,CAEA,CAAA,CAAA5kB,OAAAuV,IAAA,CAAgBjV,CAAhB,CAAuBkgB,CAAvB,CAAmC,QAAA,CAAC/qB,CAAD,CACnC,CAGIovB,EAAA,CAnDZA,CAmDY,CAAcpvB,CAAd,CAnDZ,EAoDYc,OAAA,CAAc,EApD1B,EAqDYsoB,GAAA,CArDZ,CAqD6BA,GAAjB,CAAkC,EAAlC,CAAuC,CArDnD,EAuDYiB,GAAA,EAEA6E,EAAA,EAAc,EAzD1B,EA2DYhF,EAAA,CAAgBgF,CA3D5B,EA4DehF,EAAH,CA5DZ,CA4D+BC,EAAnB,GA5DZ,CA8DgBD,EAFJ,CA5DZ,CA8DgCC,EAFpB,CA5DZ,EAgEYb,GAAA,CAhEZ,CAgEgCY,EAApB,CAAoC,GAhEhD,EAiEYX,GAAA,CAjEZ,CAiEiCW,EAArB,EAAsC,CAAtC,CAA0C,GAE1CmF,GAAA,CAnEZA,CAmEY,CAAqBtE,CAArB,CAnBJ,CADA,CAbC,CAlCT;AAyEwCuE,QAAA,GAAQ,CAARA,CAAQ,CAACL,CAAD,CAChD,CAKI,IAAIlE,GAFQkE,CAAA,CAAI,CAAJ,CAERlE,EAFkB,CAElBA,CAFsBkE,CAAA,CAAI,CAAJ,CAEtBlE,EAAqB,CAAAC,EACrBngB,EAAAA,EAJMokB,CAAA,CAAI,CAAJ,CAINpkB,EAJgB,EAIhBA,CAJqBokB,CAAA,CAAI,CAAJ,CAIrBpkB,EAJ+B,EAI/BA,CAJoCokB,CAAA,CAAI,CAAJ,CAIpCpkB,EAJ8C,CAI9CA,CAJkDokB,CAAA,CAAI,CAAJ,CAIlDpkB,EAAc,CAAAmgB,EAOfngB,EAAH,EAAY,CAAAN,OAAAqV,WAAZ,EAKI,CAAA9e,OACA,CADc,GACd,CAAA,CAAAupB,GAAA,EANJ,GAUI,CAAAvpB,OAGA,CAHc,GAGd,CAFAquB,EAAA,CAAAA,CAAA,CAEA,CAAA,CAAA5kB,OAAAuV,IAAA,CAAgBjV,CAAhB,CAAuBkgB,CAAvB,CAAmC,QAAA,CAAC/qB,CAAD,CACnC,CAEIqvB,EAAA,CA7BZA,CA6BY,CAAqBtE,CAArB,CA7BZ,EA8BYjqB,OAAA,CAAc,EA9B1B,EA+BYsoB,GAAA,CA/BZ,CA+B6BA,GAAjB,CAAkC,EAAlC,CAAuC,CACvCgG,GAAA,CAhCZA,CAgCY,CAAcpvB,CAAd,CAEAitB,GAAA,CAlCZA,CAkCY,CAPJ,CADA,CAbJ,CAbJ;AAuCsCsC,QAAA,GAAQ,CAARA,CAAQ,CAC9C,CACI,GAAoC,CAApC,IAAI,CAAAxW,GAAA+Q,GAAJ,CAA6B,CAA7B,GAM2B,CAN3B,IAMI,CAAAhpB,OANJ,CAMkB,CANlB,EAMA,CAQA,IAAI0uB,EAAa,CAAAzW,GAAAgR,GAAjB,CACI7nB,EAAS,CADb,CAGIlC,EAAO,CAAAA,KAEX,GAAG,CACC,IAAIqb,EAAOoU,EAAA,CAAA,CAAArb,EAAA,CAAiBob,CAAjB,CAAX,CACIrtB,EAAQ,CAAAiS,EAAAmE,GAAA,CAAgBiX,CAAhB,CAA6B,CAA7B,CADZ,CAEI1kB,EAAM,CAAAsJ,EAAAiE,GAAA,CAAemX,CAAf,CAA4B,CAA5B,CAAN1kB,CAAuC,GAEvC3I,EAAJ,GAEIA,CAFJ,CAEY,KAFZ,CAMA,EAAAiS,EEt+BJC,GAAA2L,IAAA,CFs+BwBhgB,CAAA8hB,SAAAG,CAAc/f,CAAd+f,CAChBvjB,IAAAqM,IAAA,CAAS7I,CAAT,CAAkBC,CAAlB,CAAyB,CAAAgoB,EAAzB,CADgBlI,CEt+BxB,CFu+BqD5G,CEv+BrD,CFy+BInZ,EAAA,EAAUC,CACVqtB,EAAA,EAAc,CAEd,IAAGttB,CAAH,EAAa,CAAAioB,EAAb,EAAiC,CAACrf,CAAlC,CAMI,KAvBL,CAAH,MA0BM,CAACA,CA1BP,CA8BA,EAAAhK,OAAA,CAAc,EACd,EAAAiY,GAAA+Q,GAAA,EAA0B,EAC1B,EAAAV,GAAA,CAAiB,CAAAA,GAAjB,CAAkC,EAAlC,CAAuC,CACvC,EAAAiB,GAAA,EA9CA,CAPJ;AAwDmCqF,QAAA,GAAQ,CAARA,CAAQ,CAAC5wB,CAAD,CAC3C,CACI,GAAG,CAAAmrB,EAAH,CAAuB,CAAAC,EAAvB,CACA,CAMQ,IAAInd,EAFM,CAAd,GAAGjO,CAAH,CAEiB,CAAAkB,KAAA,CAAU,CAAAiqB,EAAV,CAFjB,CAImB,CAAd,GAAGnrB,CAAH,CAEY,CAAAuvB,GAAA,CAAY,CAAApE,EAAZ,GAAkC,CAAlC,CAFZ,CAMY,CAAAqE,EAAA,CAAY,CAAArE,EAAZ,GAAkC,CAAlC,CAGjB,EAAAA,EAAA,EAAqBnrB,CAUlB,EAAAmrB,EAAH,EAAwB,CAAAC,EAAxB,GAqBwB,GAA5B,GAnBQyF,CAmBL3F,EAAH,CAnBQ2F,CAqBDzF,EAAH,GArBIyF,CAqBiBxF,EAArB,EArBIwF,CAuBA7uB,OAEA,CAFc,EAEd,CAzBA6uB,CAwBAvG,GACA,CAzBAuG,CAwBiBvG,GACjB,CADkC,EAClC,CADuC,CACvC,CAzBAuG,CAyBAtF,GAAA,EAJJ,GArBIsF,CA6BA7uB,OAKA,CALc,EAKd,CAlCA6uB,CA8BAvG,GAIA,CAlCAuG,CA8BiBvG,GAIjB,CAJkC,EAIlC,CAJuC,CAIvC,CAlCAuG,CA+BAtF,GAAA,EAGA,CAFIU,CAEJ,CAlCA4E,CAgCiBpG,GAEjB,EAFuC,CAEvC,CAF2C,KAE3C,CAlCAoG,CAgCoDrG,GAEpD,CAFwE,GAExE,CAlCAqG,CAkCGzF,EAAH,CAAmBa,CAAnB,CAlCA4E,CAkCgCxF,EAAhC,EAlCAwF,CAoCIrG,GAEA,CAtCJqG,CAoCyBxF,EAErB,CAtCJwF,CAoC4CzF,EAExC,CAFyD,GAEzD,CAtCJyF,CAqCIpG,GACA,CAtCJoG,CAqC0BxF,EACtB,CAtCJwF,CAqC6CzF,EACzC,EAD2D,CAC3D,CAD+D,GAC/D,CAtCJyF,CAsCIzF,EAAA,CAtCJyF,CAsCoBxF,EAJpB,EAlCAwF,CA0CIzF,EARJ,EAQqBa,CArBzB,CAFJ,EAnBQ4E,CAiDJpb,MAII,CAJS,CAIT,CArDAob,CAkDD1F,EAAH,EAlDI0F,CAkDoBxF,EAAxB,CAlDIwF,CAoDA7uB,OAFJ,CAEkB,EAFlB,EASYypB,CAWR,CAb4B,GAA5B,GAzDAoF,CAyDG3F,EAAH,EAA6D,EAA7D,GAzDA2F,CAyDoC3F,EAApC,CAEuBtrB,IAAAqM,IAAA,CA3DvB4kB,CA2DgCzE,EAAT,EA3DvByE,CA4DSxF,EADc,CA3DvBwF,CA4D4BzF,EADL,EACsB,GADtB,CAFvB,CASuB,CAIvB,CAFA4E,EAAA,CApEAa,CAoEA,CApEAA,CAoEiB3F,EAAjB,CAAuCO,CAAvC,CAEA,CAtEAoF,CAqEAzF,EACA,EADiB,GACjB,CADuBK,CACvB,CAtEAoF,CAsEA7uB,OAAA,CAAc,EApBlB,CAGI,CArDA6uB,CAqDAtF,GAAA,EAlCR,CArBI,CAKA,OAAOtd,EAhCX,CAsCI,CAAAkd,EAAA,EAAqBnrB,CACrB,OAAO,EAzCf;AA2GyC8wB,QAAA,GAAQ,CAARA,CAAQ,CAAC5vB,CAAD,CAAOlB,CAAP,CACjD,CAGI,GAAG,EAAA,CAAAmrB,EAAA,EAAqB,CAAAC,EAArB,CAAH,GAckB,CAAd,GAAGprB,CAAH,CAEI,CAAAkB,KAAA,CAAU,CAAAiqB,EAAA,EAAV,CAFJ,CAEqCjqB,CAFrC,CAImB,CAAd,GAAGlB,CAAH,EAED,CAAAuvB,GAAA,CAAY,CAAApE,EAAZ,GAAkC,CAAlC,CACA,CADuCjqB,CACvC,CAAA,CAAAiqB,EAAA,EAAqB,CAHpB,GAOD,CAAAqE,EAAA,CAAY,CAAArE,EAAZ,GAAkC,CAAlC,CACA,CADuCjqB,CACvC,CAAA,CAAAiqB,EAAA,EAAqB,CARpB,CAYF,CAAA,CAAAA,EAAA,GAAsB,CAAAC,EA9B7B,EAsDA,GAA4B,GAA5B,GAtBQ2F,CAsBL7F,EAAH,CACA,CAvBQ6F,CA7jBR5F,EAAA,CAAoB,CA6jBZ4F,EA5jBRtB,GAAA,CA4jBQsB,CA5jBqB7vB,KAAA,CAAU,CAAV,CAE7B,QA0jBQ6vB,CA1jBDtB,GAAP,EAEI,KAAK,CAAL,CAGIlD,EAAA,CAqjBAwE,CArjBA,CAAmB,CAAnB,CAqjBAA,EApjBA3F,EAAA,CAojBA2F,CApjBgB1F,EAojBhB0F,EAnjBA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,CAAL,CAEIuqB,EAAA,CA8iBAwE,CA9iBA,CA8iBAA,CA9iBmB7vB,KAAA,CAAU,CAAV,CAAnB,CA8iBA6vB,EA7iBA3F,EAAA,CA6iBA2F,CA7iBgB1F,EA6iBhB0F,EA5iBA/uB,OAAA,CAAc,EA4iBd+uB,EA1iBA7vB,KAAA,CAAU,CAAV,CAAA,CAAe,GA0iBf6vB,EAziBA7vB,KAAA,CAAU,CAAV,CAAA,CAAe,CAyiBf6vB,EAxiBA7vB,KAAA,CAAU,CAAV,CAAA,CAAe,CACf,MAEJ,MAAK,EAAL,CAEQlB,CAAAA,CAmiBJ+wB,CAniBa7vB,KAAA,CAAU,CAAV,CAmiBb6vB,EAliBA/uB,OAAA,CAAc,EAkiBd+uB,EA5hBA7vB,KAAAggB,IAAA,CAAc,CACV,CADU,CACJ,GADI,CACE,CADF,CACQ,EADR,CAGV,EAHU,CAIV,CAJU,CAIP,CAJO,CAIJ,CAJI,CAOV,EAPU,CAOJ,EAPI,CAOE,EAPF,CAOQ,EAPR,CAQV,EARU,CAQJ,EARI,CAQE,EARF,CAQQ,EARR,CAWV,EAXU,CAWJ,EAXI,CAWE,EAXF,CAWQ,EAXR,CAYV,EAZU,CAYJ,EAZI,CAYE,EAZF,CAYQ,EAZR,CAaV,EAbU,CAaJ,EAbI,CAaE,EAbF,CAaQ,EAbR,CAcV,EAdU,CAcJ,EAdI,CAcE,EAdF,CAcQ,EAdR,CAiBV,EAjBU,CAiBJ,EAjBI,CAiBE,EAjBF,CAiBQ,EAjBR,CAAd,CA4hBA6P,EAzgBA3F,EAAA,CAygBA2F,CAzgBgB1F,EAAhB,CAAmCzrB,IAAAqM,IAAA,CAAS,EAAT,CAAajM,CAAb,CACnC,MAEJ,MAAK,EAAL,CAEIusB,EAAA,CAogBAwE,CApgBA,CAogBAA,CApgBmB7vB,KAAA,CAAU,CAAV,CAAnB,CAogBA6vB;CAngBA3F,EAAA,CAmgBA2F,CAngBgB1F,EAmgBhB0F,EAlgBA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAEIuqB,EAAA,CA6fAwE,CA7fA,CAAmB,CAAnB,CA6fAA,EA5fA3F,EAAA,CA4fA2F,CA5fgB1F,EA4fhB0F,EA3fA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAEQqB,CAAAA,CAsfJ0tB,CAtfYtF,EAARpoB,CAA4B,CAChCitB,GAAA,CAqfAS,CArfA,CAAc,IAAIrzB,UAAJ,CAAe,CACzB2F,CADyB,EAChB,EADgB,CACX,GADW,CAEzBA,CAFyB,EAEhB,EAFgB,CAEX,GAFW,CAGzBA,CAHyB,EAGhB,CAHgB,CAGZ,GAHY,CAIzBA,CAJyB,CAIjB,GAJiB,CAKzB,CALyB,CAMzB,CANyB,CAqf7B0tB,CA9eI7E,EAPyB,EAOL,CAPK,CAOD,GAPC,CAqf7B6E,CA7eI7E,EARyB,CAQN,GARM,CAAf,CAAd,CAqfA6E,EA3eA3F,EAAA,CA2eA2F,CA3egB1F,EA2ehB0F,EA1eA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAueI+uB,CAreGnG,GAAH,CAAoB,CAApB,CAEIoG,EAAA,CAmeJD,CAneI,CAmeJA,CAnewB7vB,KAApB,CAFJ,CAMI+vB,EAAA,CA+dJF,CA/dI,CA+dJA,CA/doB7vB,KAAhB,CAEJ,MAEJ,MAAK,EAAL,CACQlB,CAAJ,CA0dA+wB,CA1da7vB,KAAA,CAAU,CAAV,CACbqrB,GAAA,CAydAwE,CAzdA,CAAmBnxB,IAAAqM,IAAA,CAAS,CAAT,CAAYjM,CAAZ,CAAnB,CAydA+wB,EAxdA3F,EAAA,CAwdA2F,CAxdgB1F,EAwdhB0F,EAtdA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAEQhC,CAAJ,CAidA+wB,CAjda7vB,KAAA,CAAU,CAAV,CAAb,CAidA6vB,CAjd4B7vB,KAAA,CAAU,CAAV,CAA5B,EAA4C,CACxCgwB,EAAAA,CAgdJH,CAhda7vB,KAAA,CAAU,CAAV,CAATgwB,EAAyB,CAE7B3E,GAAA,CA8cAwE,CA9cA,CAAmB/wB,CAAnB,CA8cA+wB,EA7cA3F,EAAA,CA6cA2F,CA7cgB1F,EAMF,EAAd,GAAG6F,CAAH,EAEQzF,CACJ,CAocJsF,CArcuBtF,EACnB,CAocJsF,CApcI7vB,KAAAggB,IAAA,CAAc,IAAIxjB,UAAJ,CAAe,CACzB,CADyB,CACtB,EADsB,CAEzB,CAFyB,CAEtB,CAFsB,CAIzB,CAJyB,CAKzB,EALyB,CAMzB,CANyB,CAOzB,CAPyB,CAQzB,CARyB,CAQtB,CARsB,CAQnB,CARmB,CAQhB,CARgB,CAUzB,CAVyB,CAWzB,EAXyB,CAYzB,GAZyB,CAazB,CAbyB,CAczB+tB,CAdyB,EAcT,EAdS,CAezBA,CAfyB,EAeT,EAfS,CAeJ,GAfI,CAgBzBA,CAhByB,EAgBT,CAhBS,CAgBL,GAhBK,CAiBzBA,CAjByB,CAiBV,GAjBU,CAAf,CAAd,CAHJ,EAuBmB,CAvBnB,GAuBQyF,CAvBR,EAucAH,CA9aI7vB,KAAAggB,IAAA,CAAc,IAAIxjB,UAAJ,CAAe,CACzB,CADyB;AACtB,EADsB,CAEzB,CAFyB,CAEtB,CAFsB,CAGzB,CAHyB,CAGtB,CAHsB,CAIzB,CAJyB,CAItB,CAJsB,CAKzB,CALyB,CAKtB,CALsB,CAMzB,CANyB,CAMtB,CANsB,CAAf,CAAd,CA8aJqzB,EAhaA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAEQhC,CAAJ,CA2ZA+wB,CA3Za7vB,KAAA,CAAU,CAAV,CAAb,CA2ZA6vB,CA3Z4B7vB,KAAA,CAAU,CAAV,CAA5B,EAA4C,CAC5ClB,EAAA,CAASJ,IAAAqM,IAAA,CAASjM,CAAT,CAAiB,EAAjB,CACTusB,GAAA,CAyZAwE,CAzZA,CAAmB/wB,CAAnB,CAyZA+wB,EAxZA3F,EAAA,CAwZA2F,CAxZgB1F,EAwZhB0F,EAvZA7vB,KAAA,CAAU,CAAV,CAAA,CAAelB,CAAf,CAAwB,CAAxB,EAA6B,EAA7B,CAAkC,GAuZlC+wB,EAtZA7vB,KAAA,CAAU,CAAV,CAAA,CAAelB,CAAf,CAAwB,CAAxB,EAA6B,EAA7B,CAAkC,GAsZlC+wB,EArZA7vB,KAAA,CAAU,CAAV,CAAA,CAAelB,CAAf,CAAwB,CAAxB,EAA6B,CAA7B,CAAiC,GAqZjC+wB,EApZA7vB,KAAA,CAAU,CAAV,CAAA,CAAelB,CAAf,CAAwB,CAAxB,CAA4B,GAoZ5B+wB,EAnZA7vB,KAAA,CAAU,CAAV,CAAA,CAAe,CAmZf6vB,EAlZA7vB,KAAA,CAAU,EAAV,CAAA,CAAgB,CAkZhB6vB,EAjZA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAEIuqB,EAAA,CA4YAwE,CA5YA,CAAmB,CAAnB,CA4YAA,EA3YA3F,EAAA,CA2YA2F,CA3YgB1F,EA2YhB0F,EA1YA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CAuYI+uB,CArYA/uB,OAAA,CAAc,EAqYd+uB,EApYA1F,EAAA,CAAmB,CAoYnB0F,EAnYAtb,MAAA,CAAa,EACb,MAEJ,MAAK,EAAL,CAEQzV,CAAJ,CA8XA+wB,CA9Xa7vB,KAAA,CAAU,CAAV,CAAb,CA8XA6vB,CA9X4B7vB,KAAA,CAAU,CAAV,CAA5B,EAA4C,CAG3B,GAAjB,GA2XA6vB,CA7XgB7vB,KAAAiwB,CAAU,CAAVA,CAEhB,EAEI5E,EAAA,CAyXJwE,CAzXI,CAAmBnxB,IAAAqM,IAAA,CAAS,EAAT,CAAajM,CAAb,CAAnB,CAyXJ+wB,EAvXA3F,EAAA,CAuXA2F,CAvXgB1F,EAuXhB0F,EAtXA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,GAAL,CAEIuqB,EAAA,CAiXAwE,CAjXA,CAiXAA,CAjXmB7vB,KAAA,CAAU,CAAV,CAAnB,CAiXA6vB,CAjXkC7vB,KAAA,CAAU,CAAV,CAAlC,EAAkD,CAAlD,CAiXA6vB,EAhXA3F,EAAA,CAgXA2F,CAhXgB1F,EAgXhB0F,EA/WA7vB,KAAA,CAAU,CAAV,CAAA,CAAe,CA+Wf6vB,EA9WA/uB,OAAA,CAAc,EACd,MAEJ,MAAK,EAAL,CA2WI+uB,CA1WA/uB,OAAA;AAAc,EA0Wd+uB,EAzWA1F,EAAA,CAAmB,CAyWnB0F,EAxWAtb,MAAA,CAAa,EAEb,MAEJ,SAoWIsb,CAnWA/uB,OAEA,CAFc,EAEd,CAiWA+uB,CAlWA1F,EACA,CADmB,CACnB,CAiWA0F,CAjWAtb,MAAA,CAAa,EAzNrB,CA0jBQsb,CA5VRzG,GAAA,CA4VQyG,CA5VSzG,GAAjB,CAAkC,EAAlC,CAAuC,CAEX,EAA5B,IA0VQyG,CA1VJ/uB,OAAJ,CAAkB,GAAlB,GA0VQ+uB,CAxVJxF,GAAA,EAGwB,EAA5B,IAqVQwF,CArVJ/uB,OAAJ,CAAkB,GAAlB,GAAsD,CAAtD,GAqVQ+uB,CArVyB1F,EAAjC,GAqVQ0F,CAnVJzG,GACA,EADkB,CAClB,CAkVIyG,CAlVJ/uB,OAAA,EAAe,EAHnB,CA4WA,CADA,IAtBQ+uB,EA+BD5F,EAAH,EA/BI4F,CA+BoB1F,EAAxB,CA/BI0F,CAiCAjB,GAAA,EAFJ,EA/BIiB,CAwCA/uB,OAEA,CAFc,EAEd,CA1CA+uB,CAyCA3F,EACA,EADiB,GACjB,CA1CA2F,CA0CAxF,GAAA,EAXJ,CAlER;AAkFqC6F,QAAA,GAAQ,CAARA,CAAQ,CAACjB,CAAD,CAAMkB,CAAN,CAC7C,CAEI,CAAA/G,GAAA,EAAkB+G,CAEP,GAAX,GAAGlB,CAAH,EAA2B,EAA3B,GAAmBA,CAAnB,EAA2C,EAA3C,GAAmCA,CAAnC,EAA2D,EAA3D,GAAmDA,CAAnD,EACW,EADX,GACGA,CADH,EAC2B,EAD3B,GACmBA,CADnB,EAGQmB,CAGJ,CAHiBD,CAGjB,CAH2BE,EAAA,CAAAA,CAAA,CAG3B,CAFA,CAAAhH,GAEA,CAFc+G,CAEd,CAF2B,GAE3B,CAFkCA,CAElC,EAFgD,EAEhD,CAFqD,KAErD,CADA,CAAA9G,GACA,CADoB8G,CACpB,EADkC,CAClC,CADsC,GACtC,CAAA,CAAA7G,GAAA,CAAqB6G,CAArB,EAAmC,EAAnC,CAAwC,GAN5C,EAQQ,CAAAzG,GAAH,EAEGyG,CAIJ,CAJiBD,CAIjB,CAJ2BG,EAAA,CAAAA,CAAA,CAI3B,CAHA,CAAAjH,GAGA,CAHc+G,CAGd,CAH2B,GAG3B,CAFA,CAAA9G,GAEA,CAFoB8G,CAEpB,EAFkC,CAElC,CAFsC,GAEtC,CADA,CAAA7G,GACA,CADqB6G,CACrB,EADmC,EACnC,CADwC,GACxC,CAAA,CAAAxG,KAAA,CAAY,CAAAA,KAAZ,CAAwB,GAAxB,CAA+BwG,CAA/B,CAA4C,EAN3C,GAUGA,CAQsB,CARTD,CAQS,CARCI,EAAA,CAAAA,CAAA,CAQD,CANtBC,CAMsB,CANlBJ,CAMkB,EANJ,CAAAzC,EAMI,CANc,CAAAD,EAMd,EANwC,CAMxC,CAL1B,CAAApE,GAK0B,CALNkH,CAKM,CALF,GAKE,CAJ1B,CAAAjH,GAI0B,CAJLiH,CAIK,EAJA,CAIA,CAJI,GAIJ,CAH1B,CAAA5G,KAG0B,EAHbwG,CAGa,CAHA,CAAA1C,EAGA,CAHyB,CAGzB,EAH8B,CAAAC,EAG9B,CAHgD,EAGhD,CAF1B,CAAAtE,GAE0B,CAFX+G,CAEW,CAFE,CAAA1C,EAEF,CAF2B,CAE3B,CAFgC,GAEhC,CAAA6C,EAAA,CAAAA,CAAA,CAlBzB,CAZT;AAkC0CE,QAAA,GAAQ,CAARA,CAAQ,CAACxB,CAAD,CAClD,CACI,IAAIxE,EAAmB,EAAnBA,GAAWwE,CAAXxE,EAAmC,EAAnCA,GAA2BwE,CAA/B,CACI9sB,EAAQuoB,EAAA,CAAAA,CAAA,CAAeD,CAAf,CACRG,EAAAA,CAAMC,EAAA,CAAAA,CAAA,CAAaJ,CAAb,CAEV,KAAIK,EAAoB,EAApBA,GAAYmE,CAAZnE,EAAoC,EAApCA,GAA4BmE,CAAhC,CAEIlE,EAAa5oB,CAAb4oB,CAAqB,CAAAC,EACbJ,EAAR/f,EAAc,CAAAmgB,EAQfngB,EAAH,CAAWkgB,CAAX,CAAwB,CAAAxgB,OAAAqV,WAAxB,EAII,CAAA9e,OACA,CADc,GACd,CAAA,CAAAupB,GAAA,EALJ,GASI,CAAAvpB,OAGA,CAHc,GAGd,CAFAquB,EAAA,CAAAA,CAAA,CAEA,CAAA,CAAA5kB,OAAAuV,IAAA,CAAgBjV,CAAhB,CAAuBkgB,CAAvB,CAAmC,QAAA,CAAC/qB,CAAD,CACnC,CAIIovB,EAAA,CAjCZA,CAiCY,CAAcpvB,CAAd,CAjCZ,EAkCYc,OAAA,CAAc,EAlC1B,EAmCYopB,EAAA,CAAgBY,CAAA,CAAY,GAAZ,CAAkBpsB,IAAAqM,IAAA,CAASggB,CAAT,CAA4C,GAA5C,CAnC9C,CAmCmEG,EAArB,CAClC4D,GAAA,CApCZA,CAoCY,CAAiBG,CAAjB,CAAsBnE,CAAA,CAAY,CAAZ,CAAgBpsB,IAAAqM,IAAA,CAAS5I,CAAT,CApClD,CAoCkEurB,EAAhB,CAAtC,CApCZ,EAsCYrD,GAAA,EACAgF,GAAA,CAvCZA,CAuCY,CAAqBtE,CAArB,CAVJ,CADA,CAZJ,CAhBJ;AAuEiD2F,QAAA,GAAQ,CAARA,CAAQ,CACzD,CAGI,IAAIjG,EAAmB,EAAnBA,GAFM,CAAAT,EAEV,CACI7nB,EAAQuoB,EAAA,CAAAA,CAAA,CAAeD,CAAf,CACRG,EAAAA,CAAMC,EAAA,CAAAA,CAAA,CAAaJ,CAAb,CAEV,KAAIM,EAAa5oB,CAAb4oB,CAAqB,CAAAC,EACbJ,EAAR/f,EAAc,CAAAmgB,EAIlBmE,GAAA,CAAAA,CAAA,CAIA,EAAA5kB,OAAAuV,IAAA,CAAgBjV,CAAhB,CAAuBkgB,CAAvB,CAAmC,QAAA,CAAC/qB,CAAD,CACnC,CAGI,IAAIwvB,EApBZ,CAoByBzW,GAAAgR,GAAjB,CACI7nB,EAAS,CAIb,GAAG,CACC,IAAIyuB,EAAWlB,EAAA,CA1B3B,CA0B2Brb,EAAA,CAAiBob,CAAjB,CAAf,CACIoB,EA3BhB,CA2B4Bxc,EAAAmE,GAAA,CAAgBiX,CAAhB,CAA6B,CAA7B,CADhB,CAEI1kB,EA5BhB,CA4BsBsJ,EAAAiE,GAAA,CAAemX,CAAf,CAA4B,CAA5B,CAAN1kB,CAAuC,GAEvC8lB,EAAJ,GAEIA,CAFJ,CAEgB,KAFhB,CA9BZ,EAsCYxc,EEh1CRC,GAAA2L,IAAA,CFg1C4BhgB,CAAA8hB,SAAAG,CAAc/f,CAAd+f,CAAsB/f,CAAtB+f,CAA+B2O,CAA/B3O,CEh1C5B,CFg1CuE0O,CEh1CvE,CFk1CQzuB,EAAA,EAAU0uB,CACVpB,EAAA,EAAc,CAhBf,CAAH,MAkBM,CAAC1kB,CAlBP,CAsBAgkB,GAAA,CA/CRA,CA+CQ,CA/CR,CA+CyB9E,EAAjB,CAAuC7nB,CAAvC,CA/CR,EAgDQrB,OAAA,CAAc,EAhDtB,EAiDQiY,GAAA+Q,GAAA,EAA0B,EAjDlC,EAkDQE,EAAA,CAAwB,EAlDhC,EAoDQK,GAAA,EAEAgF,GAAA,CAtDRA,CAsDQ,CAAqBtE,CAArB,CArCJ,CADA,CAhBJ;AAqHkD8F,QAAA,GAAQ,CAARA,CAAQ,CAC1D,CAGI,IAAIpG,EAAmB,EAAnBA,GAFM,CAAAT,EAEV,CACI7nB,EAAQuoB,EAAA,CAAAA,CAAA,CAAeD,CAAf,CADZ,CAEIG,EAAMC,EAAA,CAAAA,CAAA,CAAaJ,CAAb,CAENM,EAAAA,CAAa5oB,CAAb4oB,CAAqB,CAAAC,EACbJ,EAAR/f,EAAc,CAAAmgB,EAElB,KAAIwE,EAAa,CAAAzW,GAAAgR,GAAjB,CACI+G,EAAa,CADjB,CAEIC,EAAmB,CAFvB,CAGI7uB,EAAS,CAIb,GAAG,CACC,IAAIyuB,EAAWlB,EAAA,CAAA,CAAArb,EAAA,CAAiBob,CAAjB,CAAf,CACIoB,EAAY,CAAAxc,EAAAmE,GAAA,CAAgBiX,CAAhB,CAA6B,CAA7B,CADhB,CAEI1kB,EAAM,CAAAsJ,EAAAiE,GAAA,CAAemX,CAAf,CAA4B,CAA5B,CAAN1kB,CAAuC,GAEvC8lB,EAAJ,GAEIA,CAFJ,CAEgB,KAFhB,CAgBA,EAAArmB,OAAAyV,IAAA,CAAgBnV,CAAhB,CAAwB3I,CAAxB,CARY,CAAAkS,EAAAC,GAAAyN,SAAA5B,CAAuByQ,CAAvBzQ,CAAiCyQ,CAAjCzQ,CAA4C0Q,CAA5C1Q,CAQZ,CAAuC,QAAQ,EAC/C,CACI6Q,CAAA,EADJ,CADA,CAKA7uB,EAAA,EAAU0uB,CACVpB,EAAA,EAAc,CACdsB,EAAA,EA5BD,CAAH,MA8BM,CAAChmB,CA9BP,CAgCGimB,EAAH,GAAwBD,CAAxB,GAIIhC,EAAA,CAAAA,CAAA,CAAiB,CAAA9E,EAAjB,CAAuC7nB,CAAvC,CAIA,CAHA,CAAArB,OAGA,CAHc,EAGd,CAFA,CAAAupB,GAAA,EAEA,CADA,CAAAtR,GAAA+Q,GACA,EAD0B,EAC1B,CAAA,CAAAE,EAAA,CAAwB,EAR5B,CAkBA+E,GAAA,CAAAA,CAAA,CAAkBhE,CAAlB,CAnEJ,CAsEiCiG,QAAA,GAAQ,CAARA,CAAQ,CACzC,CAOI,QANQ,CAAA1H,GAMR,CAN4B,GAM5B,CANmC,CAAAC,GAMnC,EANyD,CAMzD,CAN6D,KAM7D,EAAY,CAAAoE,EAAZ,CALQ,CAAA/D,KAKR,EAAmC,CAAA8D,EAAnC,EAJQ,CAAArE,GAIR,CAJsB,GAItB,EAAgE,CAPpE,CAUmC4H,QAAA,GAAQ,CAARA,CAAQ,CAC3C,CACI,MAAO,EAAA5H,GAAP,CAAqB,GAArB,CACQ,CAAAC,GADR,EAC6B,CAD7B,CACiC,KADjC,CAEQ,CAAAC,GAFR,EAE8B,EAF9B,CAEmC,QAFnC,EAGS,CAAAK,KAHT,CAGqB,EAHrB,GAG6B,EAJjC;AAOmCsH,QAAA,GAAQ,CAARA,CAAQ,CAC3C,CAEI,OAAQ,CAAA7H,GAAR,CAAsB,GAAtB,CACQ,CAAAC,GADR,EAC6B,CAD7B,CACiC,KADjC,CAEQ,CAAAC,GAFR,EAE8B,EAF9B,CAEmC,QAFnC,CAGS,CAAAF,GAHT,EAGwB,CAHxB,EAG8B,EAH9B,CAGmC,UAHnC,IAGmD,CALvD,CAQiC8H,QAAA,GAAQ,CAARA,CAAQ,CAAC1G,CAAD,CACzC,CACI,MAAGA,EAAH,CAEW4F,EAAA,CAAAA,CAAA,CAFX,CAIQ,CAAA1G,GAAH,CAEM2G,EAAA,CAAAA,CAAA,CAFN,CAMMC,EAAA,CAAAA,CAAA,CAXf,CAemCa,QAAA,GAAQ,CAARA,CAAQ,CAAC3G,CAAD,CAC3C,CACOA,CAAH,EAEQtoB,CACJ,CADY,CAAAinB,GACZ,CAAa,CAAb,GAAGjnB,CAAH,GAAgBA,CAAhB,CAAwB,KAAxB,CAHJ,GAQQA,CACJ,CADY,CAAAinB,GACZ,CAD6B,GAC7B,CAAa,CAAb,GAAGjnB,CAAH,GAAgBA,CAAhB,CAAwB,GAAxB,CATJ,CAII,OAAOA,EALf;AAegDkvB,QAAA,GAAQ,CAARA,CAAQ,CACxD,CAGI,GAAG,CAAA7H,GAAH,CAAqB,EAArB,CAGI6B,EAAA,CAAAA,CAAA,CAAmB,CAAnB,CAHJ,KAAA,CAOA,IAAI,IAAIprB,EAAI,CAAZ,CAAmB,GAAnB,CAAeA,CAAf,CAAwBA,CAAA,EAAxB,CAEI,CAAAD,KAAA,CAAUC,CAAV,CAAA,CAAe,CAGfwtB,EAAAA,CAAiB/uB,IAAAqM,IAAA,CAAS,KAAT,CAAgB,CAAA0iB,EAAhB,CAErB2B,GAAA,CAAAA,CAAA,CAAc,CACV,EADU,CACJ,CAAAhE,EAAA,CAAgB,GAAhB,CAAuB,CADnB,CAGVqC,CAHU,CAGMA,CAHN,EAGwB,CAHxB,CAIV,CAJU,CAIP,CAJO,CAOV,CAAAE,EAPU,CAOO,CAAAA,EAPP,EAO0B,CAP1B,CAQV,CAAAD,EARU,CAQe,GARf,CAQoB,CAAAA,EARpB,CAQ6C,GAR7C,EAQoD,CARpD,CAUV,CAVU,CAUP,CAVO,CAYV,CAAAA,EAZU,CAYc,CAAAA,EAZd,EAYwC,CAZxC,CAaV,CAbU,CAaP,CAbO,CAaJ,CAbI,CAaD,CAbC,CAaE,CAbF,CAaK,CAbL,CAeV,CAfU,CAeP,CAfO,CAeJ,CAfI,CAeD,CAfC,CAeE,CAfF,CAeK,CAfL,CAeQ,CAfR,CAeW,CAfX,CAec,CAfd,CAeiB,CAfjB,CAiBV,CAjBU,CAiBP,CAjBO,CAiBJ,CAjBI,CAiBD,CAjBC,CAiBE,CAjBF,CAiBK,CAjBL,CAiBQ,CAjBR,CAiBW,CAjBX,CAiBc,CAjBd,CAiBiB,CAjBjB,CAmBV,CAnBU,CAmBP,CAnBO,CAoBV,CApBU,CAoBP,CApBO,CAqBV,CArBU,CAqBP,CArBO,CAuBV,CAvBU,CAuBP,CAvBO,CAuBJ,CAvBI,CAuBD,CAvBC,CAuBE,CAvBF,CAuBK,CAvBL,CAuBQ,CAvBR,CAuBW,CAvBX,CA0BV,EA1BU,CA0BN,GA1BM,CA0BD,EA1BC,CA0BG,EA1BH,CA0BO,EA1BP,CA0BW,EA1BX,CA0Be,EA1Bf,CA0BmB,EA1BnB,CA0BuB,EA1BvB,CA0B2B,EA1B3B,CA0B+B,EA1B/B,CA0BmC,EA1BnC,CA0BuC,EA1BvC,CA0B2C,EA1B3C,CA0B+C,EA1B/C,CA0BmD,EA1BnD,CA0BuD,EA1BvD,CA2BV,EA3BU,CA2BN,EA3BM,CA2BF,EA3BE,CA2BE,EA3BF,CA2BM,EA3BN,CA2BU,EA3BV,CA2Bc,EA3Bd,CA2BkB,EA3BlB,CA2BsB,EA3BtB,CA2B0B,EA3B1B,CA2B8B,EA3B9B,CA2BkC,EA3BlC,CA2BsC,EA3BtC,CA2B0C,EA3B1C,CA2B8C,EA3B9C,CA2BkD,EA3BlD,CA2BsD,EA3BtD,CA2B0D,EA3B1D,CA2B8D,EA3B9D,CA2BkE,EA3BlE,CA2BsE,EA3BtE,CA2B0E,EA3B1E,CA2B8E,EA3B9E,CA8BV,GA9BU,CA8BJ,CA9BI,CA+BV,CA/BU,CA+BP,CA/BO,CAiCV,CAjCU,CAiCP,CAjCO,CAmCV,CAnCU,CAmCP,CAnCO,CAoCV,CApCU,CAoCP,CApCO,CAqCV,CArCU,CAqCP,CArCO,CAsCV,CAtCU,CAsCP,CAtCO,CAyCVD,CAzCU,CAyCMA,CAzCN,EAyCwB,CAzCxB,CA2CV,CAAAE,EA3CU,CA2CO,CAAAA,EA3CP,EA2C0B,CA3C1B,CA6CV,CAAAD,EA7CU,CA6Cc,CA7Cd,CA+CV,CAAAnD,EA/CU,CA+CU,GA/CV,CA+CgB,CAAAA,EA/ChB,EA+CqC,CA/CrC,CA+CyC,GA/CzC,CAgDV,CAAAA,EAhDU,EAgDW,EAhDX,CAgDgB,GAhDhB,CAgDsB,CAAAA,EAhDtB,EAgD2C,EAhD3C,CAgDgD,GAhDhD,CAkDV,CAlDU,CAkDP,CAlDO,CAoDV,CAAAA,EApDU,CAoDU,GApDV,CAoDgB,CAAAA,EApDhB,EAoDqC,CApDrC,CAoDyC,GApDzC,CAqDV,CAAAA,EArDU,EAqDW,EArDX,CAqDgB,GArDhB;AAqDsB,CAAAA,EArDtB,EAqD2C,EArD3C,CAqDgD,GArDhD,CAuDV,CAvDU,CAuDP,CAvDO,CAyDe,GAAzB,GAAA,CAAAP,EAAA,CAAgC,CAAhC,CAAoC,CAzD1B,CAyDsD,GAAzB,GAAA,CAAAA,EAAA,CAAgC,CAAhC,CAAoC,CAzDjE,CA4DV,CA5DU,CA4DP,CA5DO,CA8DV,EA9DU,CA8DN,CA9DM,CA8DH,EA9DG,CA8DC,CA9DD,CA8DI,EA9DJ,CA8DQ,CA9DR,CA8DW,EA9DX,CA8De,CA9Df,CA8DkB,CA9DlB,CA8DqB,CA9DrB,CAgEV,CAhEU,CAgEP,CAhEO,CAgEJ,CAhEI,CAgED,CAhEC,CAgEE,CAhEF,CAgEK,CAhEL,CAgEQ,CAhER,CAgEW,CAhEX,CAgEc,CAhEd,CAgEiB,CAhEjB,CAkEV,CAlEU,CAkEP,CAlEO,CAkEJ,CAlEI,CAkED,CAlEC,CAkEE,CAlEF,CAkEK,CAlEL,CAkEQ,CAlER,CAkEW,CAlEX,CAkEc,CAlEd,CAkEiB,CAlEjB,CAoEV,GApEU,CAoEJ,CApEI,CAoED,CApEC,CAoEE,CApEF,CAoEK,CApEL,CAoEQ,CApER,CAoEW,CApEX,CAoEc,GApEd,CAoEoB,CApEpB,CAoEuB,EApEvB,CAsEV,CAtEU,CAsEP,EAtEO,CAsED,CAtEC,CAsEE,GAtEF,CAsEQ,CAtER,CAsEW,EAtEX,CAsEiB,CAtEjB,CAsEoB,CAtEpB,CAsEuB,CAtEvB,CAsE0B,CAtE1B,CAwEV,CAxEU,CAwEP,CAxEO,CAwEJ,CAxEI,CAwED,CAxEC,CAwEE,CAxEF,CAwEK,CAxEL,CAwEQ,CAxER,CAwEW,EAxEX,CAwEiB,CAxEjB,CAwEoB,CAxEpB,CA0EV,CA1EU,CA0EP,CA1EO,CA0EJ,CA1EI,CA0ED,CA1EC,CA0EE,CA1EF,CA0EK,CA1EL,CA0EQ,CA1ER,CA0EW,CA1EX,CA0Ec,CA1Ed,CA0EiB,CA1EjB,CA4EV,CAAAO,EA5EU,CA4EU,GA5EV,CA4EgB,CAAAA,EA5EhB,EA4EqC,CA5ErC,CA4EyC,GA5EzC,CA6EV,CAAAA,EA7EU,EA6EW,EA7EX,CA6EgB,GA7EhB,CA6EsB,CAAAA,EA7EtB,EA6E2C,EA7E3C,CA6EgD,GA7EhD,CAAd,CAgFA,EAAAJ,EAAA,CAAmB,GACnB,EAAAD,EAAA,CAAgB,GA/FhB,CAHJ,CAqGuCoH,QAAA,GAAQ,CAARA,CAAQ,CAACnS,CAAD,CAC/C,CACI8L,EAAA,CAAAA,CAAA,CAA2B9L,CAA3B,CAEA,KAAI,IAAIlf,EAAI,CAAZ,CAAeA,CAAf,CAAoBkf,CAApB,CAA0B,CAA1B,EAA+B,CAA/B,CAAmClf,CAAA,EAAnC,CAEI,CAAAquB,EAAA,CAAYruB,CAAZ,CAAA,CAAiB,CALzB,CAS+CsxB,QAAA,GAAQ,CAARA,CAAQ,CAACpS,CAAD,CACvD,CACO,CAAAnf,KAAAlB,OAAH,CAAsBqgB,CAAtB,GAEI,CAAAnf,KAEA,CAFY,IAAIxD,UAAJ,CAAe2iB,CAAf,CAAqB,CAArB,CAAyB,EAAzB,CAEZ,CADA,CAAAkP,GACA,CADc,IAAItnB,WAAJ,CAAgB,CAAA/G,KAAAuK,OAAhB,CACd,CAAA,CAAA+jB,EAAA,CAAc,IAAIxkB,UAAJ,CAAe,CAAA9J,KAAAuK,OAAf,CAJlB,CAOA,EAAA4f,EAAA,CAAmBhL,CACnB,EAAA8K,EAAA,CAAoB,CATxB;AAYkCuH,QAAA,GAAQ,CAARA,CAAQ,CAACxxB,CAAD,CAC1C,CACIirB,EAAA,CAAAA,CAAA,CAA2BjrB,CAAAlB,OAA3B,CACA,EAAAkB,KAAAggB,IAAA,CAAchgB,CAAd,CAFJ,CAK2CyxB,QAAA,GAAQ,CAARA,CAAQ,CACnD,CACI,CAAA1D,GAAAK,GAAA,CAAqB,CAAA,CACrB,EAAAnyB,EAAAsG,KAAA,CAAc,gBAAd,CAFJ,CAKyCmvB,QAAA,GAAQ,CAARA,CAAQ,CAAC3G,CAAD,CACjD,CACI,CAAAgD,GAAAK,GAAA,CAAqB,CAAA,CAErB,KAAI7D,EAAeQ,CAAfR,CAA4B,CAAAS,EAA5BT,CAA+C,CACnD,EAAAwD,GAAAC,GAAA,EAA2BzD,CAC3B,EAAAwD,GAAAG,GAAA,EAAyBnD,CAEzB,EAAA9uB,EAAAsG,KAAA,CAAc,cAAd,CAA8B,CAAC,CAAA2lB,GAAD,CAAU6C,CAAV,CAAsBR,CAAtB,CAA9B,CAPJ,CAUsCoH,QAAA,GAAQ,CAARA,CAAQ,CAAC5G,CAAD,CAC9C,CACI,IAAIR,EAAeQ,CAAfR,CAA4B,CAAAS,EAA5BT,CAA+C,CACnD,EAAAwD,GAAAE,GAAA,EAA8B1D,CAC9B,EAAAwD,GAAAI,GAAA,EAA4BpD,CAE5B,EAAA9uB,EAAAsG,KAAA,CAAc,eAAd,CAA+B,CAAC,CAAA2lB,GAAD,CAAU6C,CAAV,CAAsBR,CAAtB,CAA/B,CALJ;AAQAnC,EAAArrB,UAAAC,GAAA,CAAmC40B,QAAQ,EAC3C,CACI,IAAI10B,EAAQ,EACZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAksB,GACXlsB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAuwB,EACXvwB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAqsB,GACXrsB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAosB,GACXpsB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA+sB,EACX/sB,EAAA,CAAM,CAAN,CAAA,CAAW,CACXA,EAAA,CAAM,CAAN,CAAA,CAAW,CACXA,EAAA,CAAM,CAAN,CAAA,CAAW,CACXA,EAAA,CAAM,CAAN,CAAA,CAAW,CACXA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAssB,GACXtsB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqX,MACZrX,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA0sB,KACZ1sB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAywB,EACZzwB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAkuB,EACZluB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAysB,GACZzsB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwsB,GACZxsB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8C,KACZ9C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAitB,EACZjtB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAmsB,GACZnsB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqtB,EACZrtB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8tB,EACZ9tB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAguB,EACZhuB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwwB,EACZxwB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4D,OACZ5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAiuB,GACZjuB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8sB,EACZ9sB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAgtB,EACZhtB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqxB,GACZ,OAAOrxB,EA9BX,CAiCAkrB;EAAArrB,UAAAS,GAAA,CAAmCq0B,QAAQ,CAAC30B,CAAD,CAC3C,CACI,IAAAksB,GAAA,CAAiBlsB,CAAA,CAAM,CAAN,CACjB,KAAAuwB,EAAA,CAAsBvwB,CAAA,CAAM,CAAN,CACtB,KAAAqsB,GAAA,CAAqBrsB,CAAA,CAAM,CAAN,CACrB,KAAAosB,GAAA,CAAoBpsB,CAAA,CAAM,CAAN,CACpB,KAAA+sB,EAAA,CAAoB/sB,CAAA,CAAM,CAAN,CAEpB,KAAAssB,GAAA,CAAkBtsB,CAAA,CAAM,CAAN,CAClB,KAAAqX,MAAA,CAAarX,CAAA,CAAM,EAAN,CACb,KAAA0sB,KAAA,CAAY1sB,CAAA,CAAM,EAAN,CACZ,KAAAywB,EAAA,CAAkBzwB,CAAA,CAAM,EAAN,CAClB,KAAAkuB,EAAA,CAAgBluB,CAAA,CAAM,EAAN,CAChB,KAAAysB,GAAA,CAAczsB,CAAA,CAAM,EAAN,CACd,KAAAwsB,GAAA,CAAiBxsB,CAAA,CAAM,EAAN,CACjB,KAAA8C,KAAA,CAAY9C,CAAA,CAAM,EAAN,CACZ,KAAAitB,EAAA,CAAmBjtB,CAAA,CAAM,EAAN,CACnB,KAAAmsB,GAAA,CAAcnsB,CAAA,CAAM,EAAN,CACd,KAAAqtB,EAAA,CAAoBrtB,CAAA,CAAM,EAAN,CACpB,KAAA8tB,EAAA,CAAmB9tB,CAAA,CAAM,EAAN,CACnB,KAAAguB,EAAA,CAAuBhuB,CAAA,CAAM,EAAN,CACvB,KAAAwwB,EAAA,CAAyBxwB,CAAA,CAAM,EAAN,CACzB,KAAA4D,OAAA,CAAc5D,CAAA,CAAM,EAAN,CACd,KAAAiuB,GAAA,CAAkBjuB,CAAA,CAAM,EAAN,CAClB,KAAA8sB,EAAA,CAAuB9sB,CAAA,CAAM,EAAN,CAEvB,KAAAgtB,EAAA,CAAgBhtB,CAAA,CAAM,EAAN,CAChB,KAAAqxB,GAAA,CAA6BrxB,CAAA,CAAM,EAAN,CAE7B,KAAAmxB,GAAA,CAAc,IAAItnB,WAAJ,CAAgB,IAAA/G,KAAAuK,OAAhB,CACd,KAAA+jB,EAAA,CAAc,IAAIxkB,UAAJ,CAAe,IAAA9J,KAAAuK,OAAf,CA7BlB,C,CGn/DAunB,QAASA,GAAG,CAAC1d,CAAD,CACZ,CACI,IAAA2d,GAAA,CAAgB,IAAIv1B,UAAJ,CAAe,CAAf,CAChB,KAAAw1B,EAAA,CAAiB,IAAIx1B,UAAJ,CAAe,CAAf,CACjB,KAAAy1B,GAAA,CAAoB,IAAIz1B,UAAJ,CAAe,CAAf,CACpB,KAAA01B,GAAA,CAAkB,IAAI11B,UAAJ,CAAe,CAAf,CAElB,KAAA21B,GAAA,CAAkB,IAAIroB,UAAJ,CAAe,IAAAioB,GAAAxnB,OAAf,CACC,KAAIT,UAAJ,CAAe,IAAAkoB,EAAAznB,OAAf,CACnB,KAAA6nB,GAAA,CAAsB,IAAItoB,UAAJ,CAAe,IAAAmoB,GAAA1nB,OAAf,CACtB,KAAA8nB,GAAA,CAAoB,IAAIvoB,UAAJ,CAAe,IAAAooB,GAAA3nB,OAAf,CAEpB,KAAA+nB,GAAA,CAAqB,EACrB,KAAAtV,EAAA,CAAe,EAGf,KAAA5I,EAAA,CAAWA,CAEX,KAAI,IAAInU,EAAI,CAAZ,CAAmB,GAAnB,CAAeA,CAAf,CAAwBA,CAAA,EAAxB,CAEI,IAAAqyB,GAAA,CAAmBryB,CAAnB,CACA,CADwB8N,IAAAA,EACxB,CAAA,IAAAiP,EAAA,CAAa/c,CAAb,CAAA,CAAkB8N,IAAAA,EAGtB,KAAAgb,EAAA,CAAU3U,CAAA2U,EAEVhO,EAAA,CAAA3G,CAAA2U,EAAA,CAhC4BwJ,IAgC5B,CAAuC,IAAvC,CACI,QAAQ,CAACziB,CAAD,CACR,CACI0iB,EAAA,CAAAA,IAAA,CAAgB,IAAAL,GAAA,CAAgB,CAAhB,CAAhB,CAAoCriB,CAApC,CADJ,CAFJ,CAKI,QAAQ,CAACA,CAAD,CACR,CACI2iB,EAAA,CAAAA,IAAA,CAAiB,IAAAN,GAAA,CAAgB,CAAhB,CAAjB,CAAqCriB,CAArC,CADJ,CANJ,CASI,QAAQ,CAACA,CAAD,CACR,CACqB,IAAA,EAAA,IAAAqiB,GAAA,CAAgB,CAAhB,CAAA,CAiTrBO,EAAMC,CAAND,EAAiB,CAAjBA,CAAqB,KAjTA,CAkTrBrX,EAAOsX,CAAPtX,CAAiB,GAEjBuX,EAAAA;AApTIC,IAoTIP,GAAA,CAAmBI,CAAnB,CACR3Z,EAAAA,CArTI8Z,IAqTK7V,EAAA,CAAa0V,CAAb,CAEb,IAAIE,CAAJ,CAKA,GAAW,EAAX,EAAGvX,CAAH,EAA0B,EAA1B,CAAmBA,CAAnB,CAQI,GALIyX,CAKJ,CALU/Z,CAAA8P,GAAA,CADGxN,CACH,CADU,EACV,EADkB,CAClB,CAKV,CACA,CAGqBA,CAAb0X,GAAqB,CACzB,KAAIz1B,EAAOs1B,CAAA,CAAMG,CAAN,CAAPz1B,CAA2B,CAEO,GAAtC,IAAI01B,CAAJ,CAAc,CAAd,CAAkBF,CAAA70B,KAAlB,CAA6B,CAA7B,GAEI+0B,CAEA,CAFU,EAAEF,CAAA70B,KAAF,CAAa,CAAb,CAEV,CAF4BX,CAE5B,CAAY,CAAZ,GAAGA,CAAH,GAEIs1B,CAAA,CAAMG,CAAN,CAFJ,CAEwBC,CAFxB,CAJJ,EAWgB,CAXhB,GAWO11B,CAXP,GAuBQs1B,CAAA,CAAMG,CAAN,CAvBR,CAc2BD,CAAAG,GAd3B,CA2BY,EAAZ,GAAG31B,CAAH,GASI41B,EAAA,CA/WJL,IA+WI,CAAiBC,CAAjB,CAJWF,CAAA,CAAMG,CAAN,CAIX,CAJoC,KAIpC,CAHSC,CAGT,CAHwB,KAGxB,CACA,CAAAJ,CAAA,CAAMG,CAAN,CAAA,CAAoBC,CAApB,CAA8B,CAVlC,CAjCJ,CADA,IAiDIJ,EAAA,CAAMvX,CAAN,EAAc,CAAd,CAAA,CAAmB,CAzD3B,KA8DiB,GAAZ,GAAGA,CAAH,CASOuX,CAAA,CAAMvX,CAAN,EAAc,CAAd,CATP,CAKEtC,CAAAoa,GAAH,CAE8B,EAA1B,IAAIH,CAAJ,CAAc,IAAd,EAEuB,CAACja,CAAAoa,GAFxB,CAE8C,CAF9C,CAMuBpa,CAAAqa,GANvB,CAMgD,CARpD,CAauB,CAlBtB,CAyBDR,CAAA,CAAMvX,CAAN,GAAe,CAAf,CAzBC,CAyBmB2X,CApZpB,CAVJ,CAcAjY,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAtB,CAA2C,IAA3C,CACI,QAAQ,CAACjZ,CAAD,CACR,CACI0iB,EAAA,CAAAA,IAAA,CAAgB,IAAAL,GAAA,CAAgB,CAAhB,CAAhB,CAAqC,CAArC,CAAyC,CAAzC,CAA4CriB,CAA5C,CADJ,CAFJ,CAMAiL,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAtB,CAA2C,IAA3C,CACI,QAAQ,CAACjZ,CAAD,CACR,CACI0iB,EAAA,CAAAA,IAAA,CAAgB,IAAAL,GAAA,CAAgB,CAAhB,CAAhB,CAAqC,CAArC,CAAyC,CAAzC,CAA4CriB,CAA5C,CADJ,CAFJ,CAKI,QAAQ,CAACA,CAAD,CACR,CACI2iB,EAAA,CAAAA,IAAA,CAAiB,IAAAN,GAAA,CAAgB,CAAhB,CAAjB,CAAsC,CAAtC,CAA0C,CAA1C,CAA6CriB,CAA7C,CADJ,CANJ,CAUAiL,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,IAAtB,CAA2C,IAA3C,CACI,QAAQ,CAACjZ,CAAD,CACR,CACI0iB,EAAA,CAAAA,IAAA,CAAgB,IAAAL,GAAA,CAAgB,CAAhB,CAAhB,CAAqC,CAArC,CAAyC,CAAzC,CAA4CriB,CAA5C,CADJ,CAFJ,CAMAsE,EAAA2U,EAAAjP,GAAA,CApE4ByY,IAoE5B;AAAkD,IAAlD,CACI,QAAQ,EACR,CACI,MAAO,KAAAN,GAAA,CAAkB,CAAlB,CADX,CAFJ,CAKI,QAAQ,EACR,CACI,MAAO,KAAAA,GAAA,CAAkB,CAAlB,CADX,CANJ,CASI,QAAQ,EACR,CACI,MAAO,KAAAA,GAAA,CAAkB,CAAlB,CADX,CAVJ,CAaI,QAAQ,EACR,CACI,MAAO,KAAAA,GAAA,CAAkB,CAAlB,CADX,CAdJ,CAmBA7d,EAAA2U,EAAAjP,GAAA,CAxF+BuZ,IAwF/B,CAAqD,IAArD,CACI,QAAQ,EACR,CACI,MAAO,KAAAnB,GAAA,CAAgB,CAAhB,CADX,CAFJ,CAKI,QAAQ,EACR,CACI,MAAO,KAAAA,GAAA,CAAgB,CAAhB,CADX,CANJ,CASI,QAAQ,EACR,CACI,MAAO,KAAAA,GAAA,CAAgB,CAAhB,CADX,CAVJ,CAaI,QAAQ,EACR,CACI,MAAO,KAAAA,GAAA,CAAgB,CAAhB,CADX,CAdJ,CAmBA9d,EAAA2U,EAAAxO,GAAA,CA3G+B8Y,IA2G/B,CAAsD,IAAtD,CACI,QAAQ,CAACC,CAAD,CACR,CACI,IAAAvB,GAAA,CAAc,CAAd,CAAA,CAAmBuB,CAAnB,CAA8B,GADlC,CAFJ,CAKI,QAAQ,CAACA,CAAD,CACR,CACI,IAAAvB,GAAA,CAAc,CAAd,CAAA,CAAmBuB,CADvB,CANJ,CASI,QAAQ,CAACA,CAAD,CACR,CACI,IAAAvB,GAAA,CAAc,CAAd,CAAA,CAAmBuB,CADvB,CAVJ,CAaI,QAAQ,CAACA,CAAD,CACR,CACI,IAAAvB,GAAA,CAAc,CAAd,CAAA,CAAmBuB,CAmIvBjY,EAAAA,CAlIIkY,IAkIGxB,GAAA,CAAc,CAAd,CAAP1W,CAA0B,GAY9B,KAAItC,EA9IIwa,IA8IKjB,GAAA,CA9ILiB,IAiIExB,GAAA,CAAc,CAAd,CAaG,EAbiB,CAajB,CA9ILwB,IAiI0BxB,GAAA,CAAc,CAAd,CAarB,CAEChkB,KAAAA,EAAd,GAAGgL,CAAH,EAhJQwa,IAkJJlB,GAAA,CAAkB,CAAlB,CAII,CAJmB,WAInB,CAtJAkB,IAsJAnB,GAAA,CAAoB,CAApB,CAAA,CAFD/W,CAAH,CAAUtC,CAAA6G,WAAV;AAE6B7G,CAAA,CAAOsC,CAAP,EAAe,CAAf,CAF7B,CAO6B,CAXjC,GAhJQkY,IA2KJnB,GAAA,CAAoB,CAApB,CACA,CAD0B,EAC1B,CA5KImB,IA4KJlB,GAAA,CAAkB,CAAlB,CAAA,CAAuB,CA5B3B,CAlJI,CAdJ,CA+CApG,GAAA,CAAAA,IAAA,CAZkBuH,CACd/K,GAAQ,CADM+K,CAEd5K,GAAW,CAEP,GAFO,CAED,GAFC,CAEK,EAFL,CAEW,EAFX,CAEiB,CAFjB,CAEuB,CAFvB,CAE6B,CAF7B,CAEmC,CAFnC,CAEyC,CAFzC,CAE+C,CAF/C,CAEqD,CAFrD,CAE2D,CAF3D,CAEiE,CAFjE,CAEuE,CAFvE,CAE6E,CAF7E,CAEmF,CAFnF,CAGP,CAHO,CAGD,CAHC,CAGK,CAHL,CAGW,CAHX,CAGiB,CAHjB,CAGuB,CAHvB,CAG6B,CAH7B,CAGmC,CAHnC,CAGyC,CAHzC,CAG+C,CAH/C,CAGqD,CAHrD,CAG2D,CAH3D,CAGiE,CAHjE,CAGuE,CAHvE,CAG6E,CAH7E,CAGmF,CAHnF,CAIP,CAJO,CAID,CAJC,CAIK,CAJL,CAIW,CAJX,CAIiB,CAJjB,CAIuB,CAJvB,CAI6B,CAJ7B,CAImC,CAJnC,CAIyC,CAJzC,CAI+C,CAJ/C,CAIqD,CAJrD,CAI2D,CAJ3D,CAIiE,CAJjE,CAIuE,CAJvE,CAI6E,CAJ7E,CAImF,CAJnF,CAKP,CALO,CAKD,CALC,CAKK,CALL,CAKW,CALX,CAKiB,CALjB,CAKuB,CALvB,CAK6B,CAL7B,CAKmC,CALnC,CAKyC,CALzC,CAK+C,CAL/C,CAKqD,CALrD,CAK2D,CAL3D,CAKiE,CALjE,CAKuE,CALvE,CAK6E,CAL7E,CAKmF,CALnF,CAFG4K,CASd3K,GAAU,EATI2K,CAUd9zB,KAAM,aAVQ8zB,CAYlB,CAEA,KAAAC,EAAA,CAAkB,CACdhL,GAAQ,CADM,CAEdG,GAAW,CAEP,GAFO,CAED,GAFC,CAEK,CAFL,CAEW,GAFX,CAEiB,CAFjB,CAEuB,CAFvB,CAE6B,CAF7B,CAEmC,CAFnC,CAEyC,CAFzC,CAE+C,CAF/C,CAEqD,CAFrD,CAE2D,CAF3D,CAEiE,CAFjE,CAEuE,CAFvE,CAE6E,GAF7E,CAEmF,CAFnF,CAGP,CAHO,CAGD,CAHC,CAGK,CAHL,CAGW,CAHX,CAGiB,CAHjB,CAGuB,CAHvB,CAG6B,CAH7B,CAGmC,CAHnC,CAGyC,CAHzC,CAG+C,CAH/C,CAGqD,CAHrD,CAG2D,CAH3D,CAGiE,CAHjE,CAGuE,CAHvE,CAG6E,CAH7E,CAGmF,CAHnF,CAIP,CAJO,CAID,CAJC,CAIK,CAJL,CAIW,CAJX,CAIiB,CAJjB,CAIuB,CAJvB,CAI6B,CAJ7B,CAImC,CAJnC,CAIyC,CAJzC,CAI+C,CAJ/C,CAIqD,CAJrD,CAI2D,CAJ3D,CAIiE,CAJjE,CAIuE,CAJvE,CAI6E,CAJ7E,CAImF,CAJnF,CAKP,CALO,CAKD,CALC,CAKK,CALL,CAKW,CALX,CAKiB,CALjB,CAKuB,CALvB,CAK6B,CAL7B,CAKmC,CALnC,CAKyC,CALzC,CAK+C,CAL/C,CAKqD,CALrD,CAK2D,CAL3D,CAKiE,CALjE,CAKuE,CALvE,CAK6E,CAL7E,CAKmF,CALnF,CAFG,CASdC,GAAU,EATI,CAUdnpB,KAAM,mBAVQ,CAYlB,KAAAg0B,EAAA,CAAwBzH,EAAA,CAAAA,IAAA,CAAqB,IAAAwH,EAArB,CACxB,KAAAE,EAAA,CAAyB,IAAIn3B,UAAJ,CAAe,IAAAk3B,EAAAnpB,OAAf,CAjK7B;AA4KAunB,EAAA/0B,UAAAC,GAAA,CAA0B42B,QAAQ,EAClC,CAGI,IAFA,IAAI12B,EAAQ,EAAZ,CAEQ+C,EAAI,CAAZ,CAAmB,GAAnB,CAAeA,CAAf,CAAwBA,CAAA,EAAxB,CAEI/C,CAAA,CAAM+C,CAAN,CAAA,CAAW,IAAAqyB,GAAA,CAAmBryB,CAAnB,CAGf/C,EAAA,CAAM,GAAN,CAAA,CAAa,IAAA60B,GACb70B,EAAA,CAAM,GAAN,CAAA,CAAa,IAAA80B,EACb90B,EAAA,CAAM,GAAN,CAAA,CAAa,IAAA+0B,GACb/0B,EAAA,CAAM,GAAN,CAAA,CAAa,IAAAg1B,GAEb,OAAOh1B,EAbX,CAgBA40B,GAAA/0B,UAAAS,GAAA,CAA0Bq2B,QAAQ,CAAC32B,CAAD,CAClC,CACI,IAAI,IAAI+C,EAAI,CAAZ,CAAmB,GAAnB,CAAeA,CAAf,CAAwBA,CAAA,EAAxB,CACA,CACI,IAAI8Y,EAAS,IAAAiE,EAAA,CAAa/c,CAAb,CAAb,CACI2yB,EAAQ11B,CAAA,CAAM+C,CAAN,CAEZ,IAAI8Y,CAAJ,EAAe6Z,CAAf,CAAA,CAeA,IAAI,IAAIkB,EAAS,CAAjB,CAAoBA,CAApB,CAA6B/a,CAAA8P,GAAA/pB,OAA7B,CAAqDg1B,CAAA,EAArD,CACA,CACI,IAAIhkB,EAAQ8iB,CAAA,CAAO,CAAP,CAAoBkB,CAApB,CAEZ,IAAGhkB,CAAH,CAAW,CAAX,CACA,CACI,IAAIgjB,EAAM/Z,CAAA8P,GAAA,CAAgBiL,CAAhB,CAGVZ,GAAA,CAAAA,IAAA,CAAiBJ,CAAjB,CAFWA,CAAAG,GAEX,CAFmC,KAEnC,CADSnjB,CACT,CADsB,KACtB,CAJJ,CAJJ,CAgBA,IAAAwiB,GAAA,CAAmBryB,CAAnB,CAAA+f,IAAA,CAA0B4S,CAA1B,CAhCA,CAJJ,CAuCA,IAAAb,GAAA/R,IAAA,CAAkB9iB,CAAA,CAAM,GAAN,CAAlB,CACA,KAAA80B,EAAAhS,IAAA,CAAmB9iB,CAAA,CAAM,GAAN,CAAnB,CACA,KAAA+0B,GAAAjS,IAAA,CAAsB9iB,CAAA,CAAM,GAAN,CAAtB,CACA,KAAAg1B,GAAAlS,IAAA,CAAoB9iB,CAAA,CAAM,GAAN,CAApB,CA5CJ,CAqG2B62B,SAAA,GAAQ,CAARA,CAAQ,CAACpB,CAAD,CAAUK,CAAV,CACnC,CAEI,IAAI3X,EAAOsX,CAAPtX,CAAiB,GAgBrB,EAdYuX,IAAIp2B,UAAJo2B,CAAe,CAAAN,GAAA,CAHjBK,CAGiB,EAHN,CAGM,CAHF,KAGE,CAAApoB,OAAfqoB,CAcZ,EAAMvX,CAAN,CAXA,CAWc2X,CAlBlB;AAqB4BgB,QAAA,GAAQ,CAARA,CAAQ,CAACrB,CAAD,CAAUK,CAAV,CACpC,CAII,IAAI3X,EAAOsX,CAAPtX,CAAiB,GAgBrB,EAdYuX,IAAI7rB,WAAJ6rB,CAAgB,CAAAN,GAAA,CAHlBK,CAGkB,EAHP,CAGO,CAHH,KAGG,CAAApoB,OAAhBqoB,CAcZ,EAAMvX,CAAN,GAAe,CAAf,CAXA,CAWoB2X,CApBxB,CAiIgCiB,QAAA,GAAQ,CAARA,CAAQ,CAAClb,CAAD,CACxC,CAKI,IAAImb,EAAYnb,CAAA0P,GAAhB,CASImK,EAAQ,IAAI9oB,UAAJ,CAAe,EAAf,CACZ8oB,EAAA5S,IAAA,CAAU,IAAIlW,UAAJ,CAAeS,CAAA,IAAI/N,UAAJ,CAAeuc,CAAA6P,GAAf,CAAAre,QAAf,CAAV,CACA,EAAA+nB,GAAA,CAAmB4B,CAAnB,CAAA,CAAgCtB,CAChC,EAAA5V,EAAA,CAAakX,CAAb,CAAA,CAA0Bnb,CAEtBob,EAAAA,CAAYvB,CAAA1S,MAAA,CAAY,CAAZ,CAAe,EAAf,CAEhB,KAAI,IAAIjgB,EAAI,CAAZ,CAAeA,CAAf,CAAmB8Y,CAAA8P,GAAA/pB,OAAnB,CAA2CmB,CAAA,EAA3C,CACA,CACI,IAAI6yB,EAAM/Z,CAAA8P,GAAA,CAAgB5oB,CAAhB,CAEV,IAAI6yB,CAAJ,CAAA,CAKA,IAAIsB,EAAWD,CAAA,CAAUl0B,CAAV,CAAf,CACI3C,EAAO82B,CAAP92B,CAAkB,CAEtBw1B,EAAAG,GAAA,CAAmBmB,CACnBtB,EAAAuB,QAAA,CAAc,EAEd,IAAY,CAAZ,GAAG/2B,CAAH,CASI,IAFW82B,CAEHE,EAFc,EAEdA,CAAAA,CAAAA,CAAI,CAAZ,CAAeA,CAAf,CAAmBxB,CAAA70B,KAAnB,CAA6Bq2B,CAAA,EAA7B,CAEIxB,CAAAuB,QAAA,CAAYC,CAAZ,CAAA,CAAiB,CAAAvL,EAAAnR,MAAA,CAAc2c,CAAd,CAAqBD,CAArB,CAtBzB,CAHJ,CA8BA,MAAO1B,EApDX,CAuD4B4B,QAAA,GAAQ,CAARA,CAAQ,CAAC1B,CAAD,CAAM2B,CAAN,CAAYC,CAAZ,CACpC,CAMI,IALA,IAAIvyB,EAAQ2wB,CAAA70B,KAAZ,CAGI2Z,EAAQ,CAAAmR,EAAAnR,MAHZ,CAKQ3X,EAAI,CAAZ,CAAeA,CAAf,CAAmBkC,CAAnB,CAA0BlC,CAAA,EAA1B,CAGI2X,CAAA,CAAM6c,CAAN,CAAax0B,CAAb,CAgBA,CAhBkB4X,EAAA,CAAA,CAAAkR,EAAA,CAgBlB,CAAAnR,CAAA,CAAM8c,CAAN,CAAWz0B,CAAX,CAAA,CAJY6yB,CAAAuB,QAAArY,CAAY/b,CAAZ+b,CArBpB;AAqCA8V,EAAA/0B,UAAA43B,GAAA,CAA0BC,QAAQ,CAACnM,CAAD,CAClC,CAWI,IAAArU,EAAA+Y,GAAA,CAJU,IAAAwG,EAAAnL,CAAuB,EAAvBA,GANE,IAAA8J,GAAAM,CAAmBnK,CAAnBmK,CAGD,CAAM,EAAN,CAGDpK,EAHsB,CAGtBA,CAH0B,GAG1BA,EAHkC,CAGlCA,GAFIC,CAEJD,EAFc,CAEdA,EAFmB,CAEnBA,CAFuB,GAEvBA,EADsB,CACtBA,EAIV,CAXJ,CAcAsJ,GAAA/0B,UAAA83B,GAAA,CAA0BC,QAAQ,CAACrM,CAAD,CAClC,CAWIO,EAAA,CAAA,IAAA5U,EAAA,CAJU,IAAAuf,EAAAnL,CAAuB,EAAvBA,GANE,IAAA8J,GAAAM,CAAmBnK,CAAnBmK,CAGF,CAAM,EAAN,CAGApK,EAHqB,CAGrBA,CAHyB,GAGzBA,GAFGC,CAEHD,EAFa,CAEbA,CAFiB,GAEjBA,EADsB,CACtBA,CAD0B,CAC1BA,EAIV,CAXJ,C,CC/iBAuM,QAASA,GAAgB,CAAC3gB,CAAD,CAAM4gB,CAAN,CACzB,CAEI,IAAAjM,EAAA,CAAU3U,CAAA2U,EAGV,KAAA3U,EAAA,CAAWA,CAGX,KAAA6gB,GAAA,CAAW7gB,CAAA4I,EAAAiY,GAEX,KAAAC,EAAA,CAAuB,CACvB,KAAAC,GAAA,CAAyB,IAAI34B,UAAJ,CAAe,EAAf,CACzB,KAAA44B,GAAA,CAAuB,CACvB,KAAAC,EAAA,CAAoB,IAEpB,KAAAC,EAAA,CAAqB,IAAI94B,UAAJ,CAAe,EAAf,CAIrB,KAAA+4B,EAAA,CAFA,IAAAC,EAEA,CAHA,IAAAC,EAGA,CAHsB,CAMtB,KAAAT,EAAA,CAAiBA,CAYjB,KAAAU,EAAA,CADA,IAAAC,EACA,CAHA,IAAAC,GAGA,CAJA,IAAAC,GAIA,CALA,IAAAC,GAKA,CANA,IAAAC,GAMA,CANmB,CAOnB,KAAAzL,GAAA,CAAmB,CAGnB,KAAA0L,EAAA,CAAW,CAEX,IAAIhB,CAAJ,CAYA,CACI,IAAAO,EAAA,CAAmBP,CAAApV,WADvB,KAiBQqW,CAKJ,KAFIC,CAEJ,CAnBmBC,CACf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,CAAhC,CAAoCkG,GAAO,CAA3C,CADQF,CAEf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,CAAhC,CAAoCkG,GAAO,CAA3C,CAFQF,CAGf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,EAAhC,CAAoCkG,GAAO,CAA3C,CAHQF,CAIf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,CAAhC,CAAoCkG,GAAO,CAA3C,CAJQF,CAKf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,CAAhC,CAAoCkG,GAAO,CAA3C,CALQF,CAMf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,EAAhC,CAAoCkG,GAAO,CAA3C,CANQF,CAOf,IAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,CAAhC,CAAoCkG,GAAO,CAA3C,CAPQF,CAQf,KAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,EAAhC;AAAoCkG,GAAO,CAA3C,CARQF,CASf,KAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,EAAhC,CAAoCkG,GAAO,CAA3C,CATQF,CAUf,KAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,EAAhC,CAAoCkG,GAAO,CAA3C,CAVQF,CAWf,KAAO,CAAE74B,KAAM,CAAR,CAAW84B,GAAQ,EAAnB,CAAuBjG,GAAS,EAAhC,CAAoCkG,GAAO,CAA3C,CAXQF,CAiBD,CAAa,IAAAZ,EAAb,EAAiC,EAAjC,CAElB,GAAiD,CAAjD,IAAmB,IAAAA,EAAnB,CAAsC,IAAtC,EAEInhB,CAAA4I,EAAAE,GHmMR0Q,GAAA,CArQuC0I,EAqQvC,CG/LQ,CAJmDJ,CAAA54B,KAInD,EAJuE,CAIvE,CAFAowB,CAEA,CAFoBwI,CAAA/F,GAEpB,CADAoG,CACA,CADkBL,CAAAG,GAClB,CAAAJ,CAAA,CAAsBC,CAAAE,GAN1B,KAUI,MAAM,uBAAN,CAAgChX,EAAA,CAAE4V,CAAApV,WAAF,CAAhC,CAGJ,IAAA8N,EAAA,CAAyBA,CACzB,KAAA6I,EAAA,CAAuBA,CACvB,KAAAN,GAAA,CAA2BA,CArC/B,CAZA,IAGI7hB,EAAA4I,EAAAE,GHoOJ0Q,GAAA,CArQuC0I,EAqQvC,CG9NI,CANmDxmB,EAMnD,CAAA,IAAAylB,EAAA,CAFA,IAAAU,GAEA,CAHA,IAAAM,EAGA,CAJA,IAAA7I,EAIA,CAJyB,CA+C7BpT,EAAA,CAAA,IAAAyO,EAAA,CAAsB,IAAtB,CAA6B,IAA7B,CAAmC,IAAAyN,GAAnC,CACAlc,EAAA,CAAA,IAAAyO,EAAA,CAAsB,IAAtB,CAA6B,IAA7B,CAAmC,IAAA0N,GAAnC,CACAnc,EAAA,CAAA,IAAAyO,EAAA,CAAsB,IAAtB,CAA6B,IAA7B,CAAmC,IAAA2N,GAAnC,CACApc,EAAA,CAAA,IAAAyO,EAAA,CAAsB,IAAtB,CAA6B,IAA7B,CAAmC,IAAA4N,GAAnC,CACArc,EAAA,CAAA,IAAAyO,EAAA,CAAsB,IAAtB,CAA6B,IAA7B,CAAmC,IAAA6N,GAAnC,CAEA7b,EAAA,CAAA,IAAAgO,EAAA,CAAuB,IAAvB,CAA8B,IAA9B,CAAoC,IAAA8N,GAApC,CACA9b,EAAA,CAAA,IAAAgO,EAAA,CAAuB,IAAvB,CAA8B,IAA9B,CAAoC,IAAA+N,GAApC,CAnGJ;AAsGA,CAAA,CAAA,EAAA,UAAAC,EAAA/5B,GAAA,CAAuCg6B,QAAQ,EAC/C,CACI,IAAI95B,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAg4B,EACXh4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAi4B,GACXj4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAk4B,GAEXl4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAo4B,EACXp4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAu4B,EACXv4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAs4B,EACXt4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAq4B,EACXr4B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA64B,GACX74B,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA44B,GACX54B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA24B,GACZ34B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA04B,GACZ14B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAy4B,EACZz4B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAw4B,EACZx4B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAotB,GACZptB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA84B,EACZ94B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwwB,EACZxwB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAq5B,EACZr5B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+4B,GAEZ,OAAO/4B,EAvBX,CA0BA65B;CAAAv5B,GAAA,CAAuCy5B,QAAQ,CAAC/5B,CAAD,CAC/C,CACI,IAAAg4B,EAAA,CAAuBh4B,CAAA,CAAM,CAAN,CACvB,KAAAi4B,GAAA,CAAyBj4B,CAAA,CAAM,CAAN,CACzB,KAAAk4B,GAAA,CAAuBl4B,CAAA,CAAM,CAAN,CACvB,KAAAm4B,EAAA,CAAoBn4B,CAAA,CAAM,CAAN,CACpB,KAAAo4B,EAAA,CAAqBp4B,CAAA,CAAM,CAAN,CACrB,KAAAu4B,EAAA,CAAsBv4B,CAAA,CAAM,CAAN,CACtB,KAAAs4B,EAAA,CAAuBt4B,CAAA,CAAM,CAAN,CACvB,KAAAq4B,EAAA,CAAmBr4B,CAAA,CAAM,CAAN,CACnB,KAAA64B,GAAA,CAAmB74B,CAAA,CAAM,CAAN,CACnB,KAAA44B,GAAA,CAAmB54B,CAAA,CAAM,CAAN,CACnB,KAAA24B,GAAA,CAAmB34B,CAAA,CAAM,EAAN,CACnB,KAAA04B,GAAA,CAAa14B,CAAA,CAAM,EAAN,CACb,KAAAy4B,EAAA,CAAqBz4B,CAAA,CAAM,EAAN,CACrB,KAAAw4B,EAAA,CAAiBx4B,CAAA,CAAM,EAAN,CACjB,KAAAotB,GAAA,CAAmBptB,CAAA,CAAM,EAAN,CACnB,KAAA84B,EAAA,CAAW94B,CAAA,CAAM,EAAN,CACX,KAAAwwB,EAAA,CAAyBxwB,CAAA,CAAM,EAAN,CACzB,KAAAq5B,EAAA,CAAuBr5B,CAAA,CAAM,EAAN,CACvB,KAAA+4B,GAAA,CAA2B/4B,CAAA,CAAM,EAAN,CAnB/B,CAsBA65B,EAAAP,GAAA,CAA0CU,QAAQ,EAClD,CAGI,MAAO,EAHX,CAOAH,EAAAL,GAAA,CAA0CS,QAAQ,EAClD,CAGI,IAAIC,EAAc,GAEf,KAAA3B,EAAH,CAAyB,IAAAD,EAAzB,GAEI4B,CAFJ,EAEmB,EAFnB,CAKsB,EAAtB,IAAI,IAAApB,EAAJ,CAAe,CAAf,IAEIoB,CAFJ,EAEmB,EAFnB,CAKA,OAAOA,EAfX,CAkBAL,EAAAH,GAAA,CAA0CS,QAAQ,EAClD,CAEI,MAAO,EAFX,CAKAN,EAAAJ,GAAA,CAA0CW,QAAQ,EAClD,CACI,MAAG,KAAA7B,EAAH,CAAyB,IAAAD,EAAzB,EAGIxM,EAAA,CAAA,IAAA5U,EAAA,CAA0B,CAA1B,CACO,CAAA,IAAAkhB,EAAA,CAAmB,IAAAG,EAAA,EAAnB,CAJX,EASW,GAVf,CAcAsB;CAAAD,GAAA,CAA2CS,QAAQ,CAACC,CAAD,CACnD,CACI,GAAI,IAAAxC,EAAJ,CAIA,GAA0B,CAA1B,CAAG,IAAAE,EAAH,CAEI,IAAAC,GAAA,CAAuB,IAAAC,GAAA,EAAvB,CAIA,CAJiDoC,CAIjD,CAFA,IAAAtC,EAAA,EAEA,CAA4B,CAA5B,GAAG,IAAAA,EAAH,EAUI,IAAAG,EAAA/e,KAAA,CAAuB,IAAvB,CAA6B,IAAA6e,GAA7B,CAhBR,KAoBA,CACI,OAAOqC,CAAP,EAOI,KAAK,CAAL,CACI,IAAAnC,EAAA,CAAoB,IAAAoC,GACpB,KAAAvC,EAAA,CAAuB,CACvB,MACJ,MAAK,CAAL,CACI,IAAAG,EAAA,CAAoB,IAAAqC,GACpB,KAAAxC,EAAA,CAAuB,CACvB,MACJ,MAAK,CAAL,CACA,KAAK,GAAL,CACI,IAAAG,EAAA,CAAoBsC,QAAQ,CAACnkB,CAAD,CAAO,CAAEokB,EAAA,CAAAA,IAAA,CAAe,CAAA,CAAf,CAAqBpkB,CAArB,CAAF,CACnC,KAAA0hB,EAAA,CAAuB,CACvB,MACJ,MAAK,GAAL,CACI,IAAAG,EAAA,CAAoBsC,QAAQ,CAACnkB,CAAD,CAAO,CAAEokB,EAAA,CAAAA,IAAA,CAAe,CAAA,CAAf,CAAsBpkB,CAAtB,CAAF,CACnC,KAAA0hB,EAAA,CAAuB,CACvB,MACJ,MAAK,CAAL,CACI,IAAAG,EAAA,CAAoB,IAAAwC,GACpB,KAAA3C,EAAA,CAAuB,CACvB,MACJ,MAAK,CAAL,CACI4C,IAmFZrC,EAAA,CAAsB,CAnFVqC,KAoFZtC,EAAA,CAAuB,CApFXsC,KAsFZxC,EAAA,CAAmB,CAAnB,CAAA,CAAwB,EAtFZwC,KAuFZxC,EAAA,CAAmB,CAAnB,CAAA,CAvFYwC,IAuFYnC,EAtFZ,MACJ,MAAK,EAAL,CACI,IAAAN,EAAA,CAAoB,IAAA0C,GACpB,KAAA7C,EAAA,CAAuB,CACvB,MACJ,MAAK,EAAL,CACI,IAAAA,EAAA,CAAuB,CACvB,KAAAG,EAAA,CAAoB,IAAA2C,GACpB,MACJ,MAAK,EAAL,CAGI,IAAA1C,EAAA,CAAmB,CAAnB,CAIA;AAJwB,GAIxB,CAHA,IAAAG,EAGA,CAHsB,CAGtB,CAFA,IAAAD,EAEA,CAFuB,CAEvB,CAAA,IAAAN,EAAA,CAAuB,CA9C/B,CAqDA,IAAAE,GAAA,CAAuB,CAtD3B,CAzBJ,CAmFA2B,EAAAN,GAAA,CAA0CwB,QAAQ,EAClD,CAEI,MAAO,KAAAjC,EAFX,CAKAe,EAAAF,GAAA,CAA2CqB,QAAQ,CAACpoB,CAAD,CACnD,CACuB,CAAnB,IAAIA,CAAJ,CAAY,CAAZ,GAA2C,CAA3C,IAAyB,IAAAkmB,EAAzB,CAAoC,CAApC,GAGI,IAAA5hB,EAAA+Y,GAAA,CAA0B,CAA1B,CASJ,KAAA6I,EAAA,CAAWlmB,CAbf,CAgBAinB,EAAAW,GAAA,CAAgDS,QAAQ,EACxD,CAGI,IAAA1C,EAAA,CAAsB,CACtB,KAAAD,EAAA,CAAuB,CACvB,KAAAF,EAAA,CAAmB,CAAnB,CAAA,CAAwB,EAL5B,CAQAyB,EAAAqB,GAAA,CAAkCC,QAAQ,CAAC7kB,CAAD,CAC1C,CAII,IAAAmiB,EAAA,CAAqBniB,CAAA,CAAK,CAAL,CACrB,KAAAkiB,EAAA,CAAiBliB,CAAA,CAAK,CAAL,CAAjB,EAA4B,CAA5B,CAAgC,CAEhC,KAAAmhB,GAAA,EAPJ,CAUAoC,EAAAc,GAAA,CAAuCS,QAAQ,EAC/C,CAGI,IAAA3D,GAAA,EAHJ,CAkBuC4D,SAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAWhlB,CAAX,CAC/C,CAAA,IACQoW,EAAOpW,CAAA,CAAK,CAAL,CADf,CAEQilB,EAAWjlB,CAAA,CAAK,CAAL,CAFnB,CAGQ6V,EAAS7V,CAAA,CAAK,CAAL,CAHjB,CAIQwX,EAAc,GAAdA,EAAqBxX,CAAA,CAAK,CAAL,CAJ7B,CAKQklB,EAAallB,CAAA,CAAK,CAAL,CAAbklB,CAAuBllB,CAAA,CAAK,CAAL,CAAvBklB,CAAiC,CALzC,CAOQC,IAAgB/O,CAAhB+O,CAAuB,CAAApC,EAAvBoC,CAA8CF,CAA9CE,EAA0D,CAAAjL,EAA1DiL,CAAmFtP,CAAnFsP,CAA4F,CAA5FA,EAAiG3N,CAWjG,EAAAgK,EAAJ,GAKGwD,CAAH,CAEI,CAAAvD,GAAArG,GAAA,CAAkB,CAAAoG,EAAlB,CAAkC2D,CAAlC,CAA+CD,CAA/C,CAA4D1N,CAA5D,CAAyE,CAAzE,CAA4E,CAAA5c,KAAA5O,KAAA,CAAe,CAAf,CAAqBgU,CAArB,CAA2BilB,CAA3B,CAAqC7O,CAArC,CAA2CP,CAA3C,CAA5E,CAFJ,CAMIuP,EAAA,CAAA,CAAA3D,GAAA,CAAiB,CAAAD,EAAjB,CAAiC2D,CAAjC,CAA2E,CAAAvqB,KAAA5O,KAAA,CAAe,CAAf,CAAqBgU,CAArB,CAA2BilB,CAA3B,CAAqC7O,CAArC,CAA2CP,CAA3C,CAA3E,CAXJ,CAlBJ;AAiCA0N,CAAA3oB,KAAA,CAAkCyqB,QAAQ,CAACrlB,CAAD,CAAOilB,CAAP,CAAiB7O,CAAjB,CAAuBP,CAAvB,CAA+B9U,CAA/B,CAC1C,CACOA,CAAH,GAMA8U,CAAA,EA6BA,CA3BGA,CA2BH,CA3BY,IAAAqE,EA2BZ,GAzBIrE,CAGA,CAHS,CAGT,CAFAO,CAAA,EAEA,CAAGA,CAAH,EAAW,IAAA2M,EAAX,GAEI3M,CACA,CADO,CACP,CAAA6O,CAAA,EAHJ,CAsBJ,EAfA,IAAA9C,EAeA,CAfqB8C,CAerB,CAdA,IAAA/C,EAcA,CAdiB9L,CAcjB,CAbA,IAAAU,GAaA,CAbmBjB,CAanB,CAXA,IAAAoM,EAWA,CAXsB,CAWtB,CAVA,IAAAD,EAUA,CAVuB,CAUvB,CARA,IAAAF,EAAA,CAAmB,CAAnB,CAQA,CARwB1L,CAQxB,EARgC,CAQhC,CARoC,EAQpC,CAPA,IAAA0L,EAAA,CAAmB,CAAnB,CAOA,CAPwB,CAOxB,CANA,IAAAA,EAAA,CAAmB,CAAnB,CAMA,CANwB,CAMxB,CALA,IAAAA,EAAA,CAAmB,CAAnB,CAKA,CALwBmD,CAKxB,CAJA,IAAAnD,EAAA,CAAmB,CAAnB,CAIA,CAJwB1L,CAIxB,CAHA,IAAA0L,EAAA,CAAmB,CAAnB,CAGA,CAHwBjM,CAGxB,CAFA,IAAAiM,EAAA,CAAmB,CAAnB,CAEA,CAFwB9hB,CAAA,CAAK,CAAL,CAExB,CAAA,IAAAmhB,GAAA,EAnCA,CADJ,CAuCAoC,EAAAU,GAAA,CAA4CqB,QAAQ,EACpD,EAIA/B,EAAAgB,GAAA,CAA4CgB,QAAQ,EACpD,CAGI,IAAAtD,EAAA,CAAsB,CACtB,KAAAD,EAAA,CAAuB,CAEvB,KAAAF,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,KAAAA,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,KAAAA,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,KAAAA,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,KAAAA,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,KAAAA,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,KAAAA,EAAA,CAAmB,CAAnB,CAAA,CAAwB,CAExB,KAAAX,GAAA,EAdJ,CAiBAoC,EAAApC,GAAA,CAAuCqE,QAAQ,EAC/C,CACO,IAAAhD,EAAH,CAAc,CAAd,EAEI,IAAA5hB,EAAA+Y,GAAA,CAA0B,CAA1B,CAHR,C,CFhZ4B8L,QAAA,GAAQ,CAARA,CAAQ,CAAC5d,CAAD,CACpC,CACQC,CAAAA,CAAK,CAAAvD,GAAA,CAAsBsD,CAAtB,GTwHSvD,ESxHT,CAET,OAAOwD,EAAA,CAAGD,CAAH,CAAP,CAAkBC,CAAA,CAAGD,CAAH,CAAU,CAAV,CAAc,CAAd,CAAlB,EAAsC,CAH1C,CAM6B6d,QAAA,GAAQ,CAARA,CAAQ,CAAC7d,CAAD,CAAOvL,CAAP,CACrC,CACQwL,CAAAA,CAAK,CAAAtD,GAAA,CAAuBqD,CAAvB,GTiHSvD,ESjHT,CAETwD,EAAA,CAAGD,CAAH,CAASvL,CAAT,CAAiB,GAAjB,CACAwL,EAAA,CAAGD,CAAH,CAAU,CAAV,CAAc,CAAd,CAAiBvL,CAAjB,EAA0B,CAA1B,CAA8B,GAA9B,CAJJ,CAqBgCqpB,QAAA,GAAQ,CAARA,CAAQ,CAAC9d,CAAD,CACxC,CACI,MAAqB,OAArB,GAAQA,CAAR,CAAe,CAAf,GAA6C,MAA7C,EAAiCA,CAAjC,CAAwC,CAAxC,GAAyDA,CAAzD,GAAkE,CAAlE,EAAyE,CAAAxN,GAAzE,GAA8F,CADlG,CAOA,CAAA,CAAA,CAAA,UAAAurB,EAAA/gB,GAAA,CAAsBghB,QAAQ,CAAChe,CAAD,CAC9B,CAII,MAAGJ,GAAA,CAAAA,IAAA,CAAqBI,CAArB,CAAH,CAEWie,IApDJvhB,GAAA,CAoDoBsD,CApDpB,GTkIWvD,ESlIX,CAAA,CAoDoBuD,CApDpB,CAkDP,CAMW,IAAAhH,GAAA,CAAUgH,CAAV,CAVf,CAiBA+d,EAAA7gB,GAAA,CAAuBghB,QAAQ,CAACle,CAAD,CAC/B,CAII,MAAGJ,GAAA,CAAAA,IAAA,CAAqBI,CAArB,CAAH,CAEWme,EAAA,CAAAA,IAAA,CAAiBne,CAAjB,CAFX,CAMW,IAAAhH,GAAA,CAAUgH,CAAV,CANX,CAM6B,IAAAhH,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAN7B,EAMwD,CAV5D,CAiB+Boe,SAAA,GAAQ,CAARA,CAAQ,CAACpe,CAAD,CACvC,CAKI,MAAGJ,GAAA,CAAAA,CAAA,CAAqBI,CAArB,EAA6B,CAA7B,CAAH,CAEWme,EAAA,CAAAA,CAAA,CAAiBne,CAAjB,EAAyB,CAAzB,CAFX,CAMW,CAAAqe,GAAA,CAAWre,CAAX,CAXf;AAkBwBse,QAAA,GAAQ,CAARA,CAAQ,CAACte,CAAD,CAChC,CAII,MAAGJ,GAAA,CAAAA,CAAA,CAAqBI,CAArB,CAAH,CAEWue,CAhFJ3hB,GAAA,CAgFqBoD,CAhFrB,GTuGWvD,ESvGX,CAAA,CAgFqBuD,CAhFrB,CA8EP,CAMW,CAAAhH,GAAA,CAAUgH,CAAV,CANX,CAM6B,CAAAhH,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAN7B,EAMwD,CANxD,CAOQ,CAAAhH,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAPR,EAOmC,EAPnC,CAOwC,CAAAhH,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAPxC,EAOmE,EAXvE,CAkB+Bwe,QAAA,GAAQ,CAARA,CAAQ,CAACxe,CAAD,CACvC,CAKOJ,EAAA,CAAAA,CAAA,CAAqBI,CAArB,EAA6B,CAA7B,CAAH,EAEW,CApGX,GAoGW,CApGX,CAAA,CAAA,CAoGW,CApGJpD,GAAA,CAFYoD,CAEZ,GTuGWvD,ESvGX,CAAA,CAAqCuD,CAArC,CAkGP,EAMW,CANX,CAMW,CAAA,GAAA,CAAA,CAAA,CANX,OAAA,EALJ,CAmBA+d,CAAAzgB,GAAA,CAAuBmhB,QAAQ,CAACze,CAAD,CAAOvL,CAAP,CAC/B,CAII,GAAGmL,EAAA,CAAAA,IAAA,CAAqBI,CAArB,CAAH,CAEI0e,IA7IJ/hB,GAAA,CA6IqBqD,CA7IrB,GT6HkBvD,ES7HlB,CAAA,CA6IqBuD,CA7IrB,CA6I2BvL,CA7I3B,CA2IA,KAMI,KAAAuE,GAAA,CAAUgH,CAAV,CAAA,CAAkBvL,CAV1B,CAkBAspB,EAAAvgB,GAAA,CAAwBmhB,QAAQ,CAAC3e,CAAD,CAAOvL,CAAP,CAChC,CAIOmL,EAAA,CAAAA,IAAA,CAAqBI,CAArB,CAAH,CAEI4e,EAAA,CAAAA,IAAA,CAAkB5e,CAAlB,CAAwBvL,CAAxB,CAFJ,EAMI,IAAAuE,GAAA,CAAUgH,CAAV,CACA,CADkBvL,CAClB,CAAA,IAAAuE,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAAA,CAA0BvL,CAA1B,EAAmC,CAPvC,CAJJ,CAmBgCoqB,SAAA,GAAQ,CAARA,CAAQ,CAAC7e,CAAD,CAAOvL,CAAP,CACxC,CAKOmL,EAAA,CAAAA,CAAA,CAAqBI,CAArB,EAA6B,CAA7B,CAAH,CAEI4e,EAAA,CAAAA,CAAA,CAAkB5e,CAAlB,EAA0B,CAA1B,CAA6BvL,CAA7B,CAFJ,CAMI,CAAA4pB,GAAA,CAAWre,CAAX,CANJ,CAMuBvL,CAX3B;AAmBAspB,CAAAtgB,GAAA,CAAwBqhB,QAAQ,CAAC9e,CAAD,CAAOvL,CAAP,CAChC,CAII,GAAGmL,EAAA,CAAAA,IAAA,CAAqBI,CAArB,CAAH,CAEI+e,IA3KJliB,GAAA,CA2KsBmD,CA3KtB,GTgGkBvD,EShGlB,CAAA,CA2KsBuD,CA3KtB,CA2K4BvL,CA3K5B,CAyKA,KAMI,KAAAuE,GAAA,CAAUgH,CAAV,CAGA,CAHkBvL,CAGlB,CAFA,IAAAuE,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAEA,CAF0BvL,CAE1B,EAFmC,CAEnC,CADA,IAAAuE,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CACA,CAD0BvL,CAC1B,EADmC,EACnC,CAAA,IAAAuE,GAAA,CAAUgH,CAAV,CAAiB,CAAjB,CAAqB,CAArB,CAAA,CAA0BvL,CAA1B,EAAmC,EAb3C,CAiBgCuqB,SAAA,GAAQ,CAARA,CAAQ,CAAChf,CAAD,CAAOvL,CAAP,CACxC,CAKOmL,EAAA,CAAAA,CAAA,CAAqBI,CAArB,EAA6B,CAA7B,CAAH,EAEsBA,CA9LtB,GA8L8B,CA9L9B,CA8LI+e,CA9LJliB,GAAA,CAFmBmD,CAEnB,GTgGkBvD,EShGlB,CAAA,CAAsCuD,CAAtC,CA8LiCvL,CA9LjC,CA4LA,EAMI,CAAAwqB,GAAA,CAAYjf,CAAZ,CANJ,CAMwBvL,CAX5B,C,CG/PAyqB,QAASA,GAAG,CAACnmB,CAAD,CACZ,CAEI,IAAAA,EAAA,CAAWA,CAEX,KAAAomB,EAAA,CAAoB,IAAIh+B,UAAJ,CAAe,CAAf,CACpB,KAAAi+B,EAAA,CAAsB,IAAIj+B,UAAJ,CAAe,CAAf,CACtB,KAAAk+B,EAAA,CAAoB,IAAI3zB,WAAJ,CAAgB,CAAhB,CACpB,KAAA4zB,EAAA,CAAyB,IAAI5zB,WAAJ,CAAgB,CAAhB,CACzB,KAAA6zB,EAAA,CAAqB,IAAI7zB,WAAJ,CAAgB,CAAhB,CACrB,KAAA8zB,EAAA,CAA0B,IAAI9zB,WAAJ,CAAgB,CAAhB,CAC1B,KAAA+zB,GAAA,CAAoB,IAAIt+B,UAAJ,CAAe,CAAf,CACpB,KAAAu+B,EAAA,CAAoB,IAAIv+B,UAAJ,CAAe,CAAf,CACpB,KAAAw+B,GAAA,CAAwB,EAExB,KAAAC,EAAA,CAAwB,CAEpBlS,EAAAA,CAAK3U,CAAA2U,EAEThO,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,CAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B;AAAiC,CAAjC,CAA9B,CAEA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,CAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CAEAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAmS,GAAA17B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B;AAAiC,CAAjC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAoS,GAAA37B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CAEA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAqS,GAAA57B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAsS,GAAA77B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA7B,CAEAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB;AAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAAuS,GAAA97B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CAEA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAAwS,GAAA/7B,KAAA,CAAyB,IAAzB,CAA+B,CAA/B,CAA7B,CAEAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B,CAAkC,CAAlC,CAA/B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B,CAAkC,CAAlC,CAA/B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B,CAAkC,CAAlC,CAA/B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B;AAAkC,CAAlC,CAA/B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B,CAAkC,CAAlC,CAA/B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B,CAAkC,CAAlC,CAA/B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+B,IAAAyS,GAAAh8B,KAAA,CAA4B,IAA5B,CAAkC,CAAlC,CAA/B,CAEA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,IAAA0S,GAAAj8B,KAAA,CAA2B,IAA3B,CAAiC,CAAjC,CAA9B,CAEAub,EAAA,CAAAgO,CAAA,CAAkB,EAAlB,CAAwB,IAAxB,CAA8B,IAAA2S,GAAAl8B,KAAA,CAAgC,IAAhC,CAAsC,CAAtC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAA2S,GAAAl8B,KAAA,CAAgC,IAAhC,CAAsC,CAAtC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,EAAlB,CAAwB,IAAxB,CAA8B,IAAA4S,GAAAn8B,KAAA,CAA+B,IAA/B,CAAqC,CAArC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAA4S,GAAAn8B,KAAA,CAA+B,IAA/B,CAAqC,CAArC,CAA9B,CAEA8a;CAAA,CAAAyO,CAAA,CAAiB,EAAjB,CAAuB,IAAvB,CAA6B,IAAA6S,GAAAp8B,KAAA,CAA8B,IAA9B,CAAoC,CAApC,CAA7B,CACA8a,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,IAAA6S,GAAAp8B,KAAA,CAA8B,IAA9B,CAAoC,CAApC,CAA7B,CAEAub,EAAA,CAAAgO,CAAA,CAAkB,EAAlB,CAAwB,IAAxB,CAA8B,IAAA8S,GAAAr8B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CACAub,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAA8S,GAAAr8B,KAAA,CAA0B,IAA1B,CAAgC,CAAhC,CAA9B,CAEAub,EAAA,CAAAgO,CAAA,CAAkB,EAAlB,CAAwB,IAAxB,CAA8B,IAAA+S,GAA9B,CACA/gB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,IAAA+S,GAA9B,CApGJ,CAuGA,CAAA,CAAA,EAAA,UAAAC,EAAA/+B,GAAA,CAA0Bg/B,QAAQ,EAClC,CACI,MAAO,CACH,IAAAxB,EADG,CAEH,IAAAC,EAFG,CAGH,IAAAC,EAHG,CAIH,IAAAC,EAJG,CAKH,IAAAC,EALG,CAMH,IAAAC,EANG,CAOH,IAAAC,GAPG,CAQH,IAAAC,EARG,CASH,IAAAE,EATG,CADX,CAcAc,EAAAv+B,GAAA,CAA0By+B,QAAQ,CAAC/+B,CAAD,CAClC,CACI,IAAAs9B,EAAA,CAAoBt9B,CAAA,CAAM,CAAN,CACpB,KAAAu9B,EAAA,CAAsBv9B,CAAA,CAAM,CAAN,CACtB,KAAAw9B,EAAA,CAAoBx9B,CAAA,CAAM,CAAN,CACpB,KAAAy9B,EAAA,CAAyBz9B,CAAA,CAAM,CAAN,CACzB,KAAA09B,EAAA,CAAqB19B,CAAA,CAAM,CAAN,CACrB,KAAA29B,EAAA,CAA0B39B,CAAA,CAAM,CAAN,CAC1B,KAAA49B,GAAA,CAAoB59B,CAAA,CAAM,CAAN,CACpB,KAAA69B,EAAA,CAAoB79B,CAAA,CAAM,CAAN,CACpB,KAAA+9B,EAAA,CAAwB/9B,CAAA,CAAM,CAAN,CAT5B,CAYA6+B,EAAAZ,GAAA,CAAiCe,QAAQ,CAACC,CAAD,CAAUC,CAAV,CACzC,CAGI,IAAAxB,EAAA,CAAmBuB,CAAnB,CAAA,CACIE,EAAA,CAAAA,IAAA,CAAkB,IAAAzB,EAAA,CAAmBuB,CAAnB,CAAlB,CAA+CC,CAA/C,CAA0D,CAAA,CAA1D,CAEJ,KAAAvB,EAAA,CAAwBsB,CAAxB,CAAA,CACIE,EAAA,CAAAA,IAAA,CAAkB,IAAAxB,EAAA,CAAwBsB,CAAxB,CAAlB,CAAoDC,CAApD,CAA+D,CAAA,CAA/D,CAPR,CAUAL;CAAAV,GAAA,CAAgCiB,QAAQ,CAACH,CAAD,CACxC,CAEI,MAAOI,GAAA,CAAAA,IAAA,CAAmB,IAAA3B,EAAA,CAAmBuB,CAAnB,CAAnB,CAFX,CAKAJ,EAAAb,GAAA,CAAgCsB,QAAQ,CAACL,CAAD,CAAUC,CAAV,CACxC,CAGI,IAAA1B,EAAA,CAAkByB,CAAlB,CAAA,CACIE,EAAA,CAAAA,IAAA,CAAkB,IAAA3B,EAAA,CAAkByB,CAAlB,CAAlB,CAA8CC,CAA9C,CAAyD,CAAA,CAAzD,CAEJ,KAAAzB,EAAA,CAAuBwB,CAAvB,CAAA,CACIE,EAAA,CAAAA,IAAA,CAAkB,IAAA1B,EAAA,CAAuBwB,CAAvB,CAAlB,CAAmDC,CAAnD,CAA8D,CAAA,CAA9D,CAPR,CAUAL,EAAAX,GAAA,CAA+BqB,QAAQ,CAACN,CAAD,CACvC,CAEI,MAAOI,GAAA,CAAAA,IAAA,CAAmB,IAAA7B,EAAA,CAAkByB,CAAlB,CAAnB,CAFX,CAKAJ,EAAAP,GAAA,CAAkCkB,QAAQ,CAACP,CAAD,CAAUC,CAAV,CAC1C,CAEI,IAAA3B,EAAA,CAAoB0B,CAApB,CAAA,CAA+BC,CAFnC,CAKAL,EAAAN,GAAA,CAAiCkB,QAAQ,CAACR,CAAD,CACzC,CAEI,MAAO,KAAA1B,EAAA,CAAoB0B,CAApB,CAFX,CAKAJ,EAAAT,GAAA,CAAgCsB,QAAQ,CAACT,CAAD,CAAUC,CAAV,CACxC,CAEI,IAAA5B,EAAA,CAAkB2B,CAAlB,CAAA,CAA6BC,CAFjC,CAKAL,EAAAR,GAAA,CAA+BsB,QAAQ,CAACV,CAAD,CACvC,CAEI,MAAO,KAAA3B,EAAA,CAAkB2B,CAAlB,CAFX,CAKAJ,EAAAL,GAAA,CAAsCoB,QAAQ,CAACC,CAAD,CAAiBX,CAAjB,CAC9C,CAIIY,EAAA,CAAAA,IAAA,EAHeZ,CAGf,CAH2B,CAG3B,EAHkCW,CAGlC,CAFYX,CAAAtsB,CAAY,CAAZA,CAAkB,CAAlBA,CAAsB,CAElC,CAJJ,CAOAisB,EAAAJ,GAAA,CAAqCsB,QAAQ,CAACF,CAAD,CAAiBX,CAAjB,CAC7C,CAEI,IAAI,IAAIn8B,EAAI,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEI+8B,EAAA,CAAAA,IAAA,CAAiBD,CAAjB,CAAkC98B,CAAlC,CAAqCm8B,CAArC,CAAkD,CAAlD,EAAuDn8B,CAAvD,CAJR,CAQA87B;CAAAH,GAAA,CAAoCsB,QAAQ,CAACH,CAAD,CAC5C,CAEI,IAAAjtB,EADYA,CACZA,CAAS,IAAAgrB,GAAA,CAAkBiC,CAAlB,CAAmC,CAAnC,CACTjtB,EAAA,EAAS,IAAAgrB,GAAA,CAAkBiC,CAAlB,CAAmC,CAAnC,CAAT,EAAkD,CAClDjtB,EAAA,EAAS,IAAAgrB,GAAA,CAAkBiC,CAAlB,CAAmC,CAAnC,CAAT,EAAkD,CAGlD,OAFAjtB,EAEA,EAFS,IAAAgrB,GAAA,CAAkBiC,CAAlB,CAAmC,CAAnC,CAET,EAFkD,CALtD,CAUAhB,EAAAF,GAAA,CAAgCsB,QAAQ,CAACJ,CAAD,CAAiBX,CAAjB,CACxC,CAGI,IAAArB,EAAA,EAFeqB,CAEf,CAF2B,CAE3B,EAFkCW,CAElC,CAAA,CAA6BX,CAHjC,CAMAL,EAAAD,GAAA,CAA4BsB,QAAQ,EACpC,CAEI,IAAAnC,EAAA,CAAwB,CAF5B,CAa4BoC,SAAA,GAAQ,CAARA,CAAQ,CAAClB,CAAD,CAAUrsB,CAAV,CACpC,CACI,GAAG,CAAAgrB,GAAA,CAAkBqB,CAAlB,CAAH,GAAkCrsB,CAAlC,GAEI,CAAAgrB,GAAA,CAAkBqB,CAAlB,CAEG,CAF0BrsB,CAE1B,CAAA,CAACA,CAJR,EAOQ,IAAQ7P,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB,CAAA+6B,GAAAl8B,OAAnB,CAAiDmB,CAAA,EAAjD,CAEI,CAAA+6B,GAAA,CAAsB/6B,CAAtB,CAAAqb,GAAAhF,KAAA,CACI,CAAA0kB,GAAA,CAAsB/6B,CAAtB,CAAAq9B,GADJ,CAEInB,CAFJ,CAVhB,CAoBwBoB,QAAA,GAAQ,CAARA,CAAQ,CAAChzB,CAAD,CAASM,CAAT,CAA8ByQ,CAA9B,CAChC,CAAA,IACQod,EAAa8E,CAgHL5C,EAAA,CDIgEuB,CCJhE,CAhHRzD,CAgHsC,CAjH9C,CAEQrd,EAAOoiB,EAAA,CAAAA,CAAA,CDmHiEtB,CCnHjE,CAUX,IAAGtxB,CAAH,CAAW6tB,CAAX,CAAwBnuB,CAAAqV,WAAxB,CAGItE,CAAA,CAAG,CAAA,CAAH,CAHJ,KAMA,CACI,IAAIlH,EAAM,CAAAA,EACV,EAAAsmB,EAAA,CDiGwEyB,CCjGxE,CAAA,EAA8BzD,CAE9BnuB,EAAAuV,IAAA,CAAWjV,CAAX,CAAkB6tB,CAAlB,CAA8B,QAAQ,CAAC14B,CAAD,CACtC,CACIoU,CHNRC,GAAA2L,IAAA,CGMuBhgB,CHNvB,CGM6Bqb,CHN7B,CGOQC,EAAA,CAAG,CAAA,CAAH,CAFJ,CADA,CAJJ,CAlBJ;AAgCAygB,CAAAnN,GAAA,CAAyB8O,QAAQ,CAACnzB,CAAD,CAASM,CAAT,CAAgBsU,CAAhB,CAAqBgd,CAArB,CAA8B7gB,CAA9B,CACjC,CAAA,IAAA,EAAA,IAAA,CACQod,EAAc,IAAAkC,EAAA,CAAmBuB,CAAnB,CAAdzD,CAA4C,CAA5CA,CAAiD,KADzD,CAEQiF,EAA6B,CAAX,EAAAxB,CAAA,CAAe,CAAf,CAAmB,CAF7C,CAGQyB,EAAalF,CAAbkF,CAA0BD,CAHlC,CAIQtiB,EAAOoiB,EAAA,CAAAA,IAAA,CAAsBtB,CAAtB,CAJf,CAKQ0B,EAAa,CAAA,CALrB,CAMQC,EAAY,CAAA,CANpB,CAOQC,EAAW,IAAAhD,EAAA,CAAkBoB,CAAlB,CAAX4B,CAAwC,EAKzC5e,EAAH,CAASye,CAAT,EAGIlF,CAEA,CAFah6B,IAAAC,MAAA,CAAWwgB,CAAX,CAAiBwe,CAAjB,CAEb,CADAC,CACA,CADalF,CACb,CAD0BiF,CAC1B,CAAAE,CAAA,CAAa,CAAA,CALjB,EAOQ1e,CAPR,CAOcye,CAPd,GAUIE,CAVJ,CAUgB,CAAA,CAVhB,CAaGjzB,EAAH,CAAW+yB,CAAX,CAAwBrzB,CAAAqV,WAAxB,CAGItE,CAAA,CAAG,CAAA,CAAH,CAHJ,EAOI,IAAAof,EAAA,CAAkByB,CAAlB,CAWA,EAX8BzD,CAW9B,CAVA,IAAAkC,EAAA,CAAmBuB,CAAnB,CAUA,EAV+BzD,CAU/B,CAPG,CAACmF,CAOJ,EAPkBE,CAOlB,GAJI,IAAArD,EAAA,CAAkByB,CAAlB,CACA,CAD6B,IAAAxB,EAAA,CAAuBwB,CAAvB,CAC7B,CAAA,IAAAvB,EAAA,CAAmBuB,CAAnB,CAAA,CAA8B,IAAAtB,EAAA,CAAwBsB,CAAxB,CAGlC,EAAA5xB,CAAAyV,IAAA,CAAWnV,CAAX,CACQ,IAAAuJ,EAAAC,GAAAyN,SAAA,CAAuBzG,CAAvB,CAA6BA,CAA7B,CAAoCuiB,CAApC,CADR,CAEQ,QAAA,EACA,CACOE,CAAH,EAAgBC,CAAhB,CAGI,CAAAnP,GAAA,CAAcrkB,CAAd,CAAsBM,CAAtB,CAA8B+yB,CAA9B,CAA0Cze,CAA1C,CAAgDye,CAAhD,CAA4DzB,CAA5D,CAAqE7gB,CAArE,CAHJ,CAOIA,CAAA,CAAG,CAAA,CAAH,CARR,CAHR,CAlBJ,CAzBJ,CA6DiC0iB,SAAA,GAAQ,CAARA,CAAQ,CAAC7B,CAAD,CACzC,CACI,IAAI9gB,EAAO,CAAAqf,EAAA,CAAkByB,CAAlB,CAGG,EAAd,EAAGA,CAAH,GAEY9gB,CAFZ,GAEoB,CAFpB,CAMAA,EAAA,CADAA,CACA,CADQ,KACR,CAAQ,CAAAmf,EAAA,CAAkB2B,CAAlB,CAAR,EAAsC,EAGtC,OAFA9gB,EAEA,EAFQ,CAAAof,EAAA,CAAoB0B,CAApB,CAER,EAFwC,EAX5C,CA4B6B8B,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAYC,CAAZ,CAAsBC,CAAtB,CACrC,CACQA,CAAJ,GAEI,CAAAnD,EAFJ,EAE6B,CAF7B,CAKA,OAAG,EAAAA,EAAH,CAGWiD,CAHX,CAGuB,IAHvB,CAG+BC,CAH/B,CAQWD,CARX,CAQuB,MARvB,CAQiCC,CARjC,EAQ6C,CAdjD;AAkB8BE,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACtC,CACI,CAAArD,EAAA,EAAyB,CAEzB,OAAG,EAAAA,EAAH,CAGWqD,CAHX,CAGmB,GAHnB,CAQYA,CARZ,EAQqB,CARrB,CAQ0B,GAX9B,C,CC7YAC,QAASA,GAAG,CAACnqB,CAAD,CAAMnY,CAAN,CACZ,CAEI,IAAAmY,EAAA,CAAWA,CAEX,KAAAnY,EAAA,CAAWA,CAEX,KAAAuiC,EAAA,CAA0B,IAAI1b,YAAJ,CAAiB,CAAjB,CAC1B,KAAA2b,EAAA,CAA2B,IAAI13B,WAAJ,CAAgB,CAAhB,CAE3B,KAAA23B,EAAA,CAAwB,IAAIliC,UAAJ,CAAe,CAAf,CACxB,KAAAmiC,EAAA,CAAuB,IAAIniC,UAAJ,CAAe,CAAf,CACvB,KAAAoiC,EAAA,CAAoB,IAAIpiC,UAAJ,CAAe,CAAf,CACpB,KAAAqiC,EAAA,CAAyB,IAAIriC,UAAJ,CAAe,CAAf,CAGzB,KAAAsiC,EAAA,CAAqB,IAAItiC,UAAJ,CAAe,CAAf,CACrB,KAAAuiC,EAAA,CAA2B,IAAIh4B,WAAJ,CAAgB,CAAhB,CAE3B,KAAAi4B,EAAA,CAAsB,IAAIj4B,WAAJ,CAAgB,CAAhB,CAKtBuT,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,EAArB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CACI,IAAI7X,EAAM4L,EAAA,EAAV,CAEImiB,EAAqB,iBAArBA,CAAc/tB,CAAd+tB,CAA6C,CAC7CC,EAAAA,CAAeC,EAAA,CAAAA,IAAA,CAAkB,CAAlB,CAAqBjuB,CAArB,CAEnB,OAAO+tB,EAAP,EAAqB,CAArB,CAAyBC,CAAzB,EAAyC,CAN7C,CADA,CASAnkB,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,EAAtB,CAA4B,IAA5B,CAAkC,QAAQ,CAAC/oB,CAAD,CAC1C,CACOA,CAAH,CAAU,CAAV,CAEI,IAAA/D,EAAAsG,KAAA,CAAc,kBAAd,CAFJ,CAMI,IAAAtG,EAAAsG,KAAA,CAAc,mBAAd,CAPR,CADA,CAYA+X,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,EAArB,CAA2B,IAA3B,CAAiC,QAAQ,EAAG,CAAE,MAAOqW,GAAA,CAAAA,IAAA,CAAkB,CAAlB,CAAT,CAA5C,CACA9kB;CAAA,CAAAlG,CAAA2U,EAAA,CAAqB,EAArB,CAA2B,IAA3B,CAAiC,QAAQ,EAAG,CAAE,MAAOqW,GAAA,CAAAA,IAAA,CAAkB,CAAlB,CAAT,CAA5C,CACA9kB,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,EAArB,CAA2B,IAA3B,CAAiC,QAAQ,EAAG,CAAE,MAAOqW,GAAA,CAAAA,IAAA,CAAkB,CAAlB,CAAT,CAA5C,CAEArkB,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,EAAtB,CAA4B,IAA5B,CAAkC,QAAQ,CAAC/oB,CAAD,CAAO,CAAEq/B,EAAA,CAAAA,IAAA,CAAmB,CAAnB,CAAsBr/B,CAAtB,CAAF,CAAjD,CACA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,EAAtB,CAA4B,IAA5B,CAAkC,QAAQ,CAAC/oB,CAAD,CAAO,CAAEq/B,EAAA,CAAAA,IAAA,CAAmB,CAAnB,CAAsBr/B,CAAtB,CAAF,CAAjD,CACA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,EAAtB,CAA4B,IAA5B,CAAkC,QAAQ,CAAC/oB,CAAD,CAAO,CAAEq/B,EAAA,CAAAA,IAAA,CAAmB,CAAnB,CAAsBr/B,CAAtB,CAAF,CAAjD,CAEA+a,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,EAAtB,CAA4B,IAA5B,CAAkC,IAAAuW,EAAlC,CApDJ,CAuDAf,EAAAxhC,UAAAC,GAAA,CAA0BuiC,QAAQ,EAClC,CACI,IAAIriC,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwhC,EACXxhC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAyhC,EACXzhC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA0hC,EACX1hC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2hC,EACX3hC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4hC,EACX5hC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA6hC,EACX7hC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA8hC,EACX9hC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAshC,EACXthC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAuhC,EAEX,OAAOvhC,EAbX,CAgBAqhC;EAAAxhC,UAAAS,GAAA,CAA0BgiC,QAAQ,CAACtiC,CAAD,CAClC,CACI,IAAAwhC,EAAA,CAAwBxhC,CAAA,CAAM,CAAN,CACxB,KAAAyhC,EAAA,CAAuBzhC,CAAA,CAAM,CAAN,CACvB,KAAA0hC,EAAA,CAAoB1hC,CAAA,CAAM,CAAN,CACpB,KAAA2hC,EAAA,CAAyB3hC,CAAA,CAAM,CAAN,CACzB,KAAA4hC,EAAA,CAAqB5hC,CAAA,CAAM,CAAN,CACrB,KAAA6hC,EAAA,CAA2B7hC,CAAA,CAAM,CAAN,CAC3B,KAAA8hC,EAAA,CAAsB9hC,CAAA,CAAM,CAAN,CACtB,KAAAshC,EAAA,CAA0BthC,CAAA,CAAM,CAAN,CAC1B,KAAAuhC,EAAA,CAA2BvhC,CAAA,CAAM,CAAN,CAT/B,CAYAqhC,GAAAxhC,UAAAoL,GAAA,CAAsBs3B,QAAQ,CAACvuB,CAAD,CAAMwuB,CAAN,CAC9B,CAIQA,CAAJ,GAEO,IAAAf,EAAA,CAAqB,CAArB,CAAH,EAA8BQ,EAAA,CAAAA,IAAA,CAAkB,CAAlB,CAAqBjuB,CAArB,CAA9B,EAII,IAAAutB,EAAA,CAAyB,CAAzB,CAQA,CAR8BkB,EAAA,CAAAA,IAAA,CAAuB,CAAvB,CAA0BzuB,CAA1B,CAQ9B,CAPA,IAAAstB,EAAA,CAAwB,CAAxB,CAOA,CAP6BttB,CAO7B,CAHA,IAAAkD,EAAA+Y,GAAA,CAA0B,CAA1B,CAGA,CAAY,CAAZ,GAFW,IAAAyR,EAAA5/B,CAAkB,CAAlBA,CAEX,GAEI,IAAA2/B,EAAA,CAAqB,CAArB,CAFJ,CAE8B,CAF9B,CAZJ,EAmBI3V,EAAA,CAAA,IAAA5U,EAAA,CAA0B,CAA1B,CArBR,CAJJ,CAiCkCwrB,SAAA,GAAQ,CAARA,CAAQ,CAAC3/B,CAAD,CAAIiR,CAAJ,CAC1C,CACI,GAAG,CAAC,CAAAytB,EAAA,CAAqB1+B,CAArB,CAAJ,CAEI,MAAO,EAMP6P,EAAAA,CAAQ,CAAA2uB,EAAA,CAAyBx+B,CAAzB,CAAR6P,CAFgBpR,IAAAC,MAAAkhC,CAvIFC,YAuIED,EADT3uB,CACS2uB,CADH,CAAArB,EAAA,CAAwBv+B,CAAxB,CACG4/B,EAMhB1oB,EAAAA,CAAS,CAAA6nB,EAAA,CAAoB/+B,CAApB,CAEV6P,EAAH,EAAYqH,CAAZ,CAGIrH,CAHJ,EAGaqH,CAHb,CAKgB,CALhB,CAKQrH,CALR,GAOIA,CAPJ,CAOYA,CAPZ,CAOoBqH,CAPpB,CAO6BA,CAP7B,CAUA,OAAOrH,EAzBX,CA4B6BiwB,QAAA,GAAQ,CAARA,CAAQ,CAAC9/B,CAAD,CAAIiR,CAAJ,CACrC,CACeA,CAAP8uB,EAAa,CAAAxB,EAAA,CAAwBv+B,CAAxB,CAEjB,OAAU,EAAV,CAAG+/B,CAAH,CAIW,CAAA,CAJX,CASO,CAAAvB,EAAA,CAAyBx+B,CAAzB,CATP,CAMoBvB,IAAAC,MAAAkhC,CAtKFC,YAsKED,CAAWG,CAAXH,CATxB;AAe6BI,QAAA,GAAQ,CAARA,CAAQ,CAAChgC,CAAD,CACrC,CACI,IAAIigC,EAAQ,CAAApB,EAAA,CAAmB7+B,CAAnB,CAEZ,IAAGigC,CAAH,CAII,MAFA,EAAApB,EAAA,CAAmB7+B,CAAnB,CAAA,EAEA,CAAa,CAAb,GAAGigC,CAAH,CAEW,CAAAnB,EAAA,CAAyB9+B,CAAzB,CAFX,CAEyC,GAFzC,CAMW,CAAA8+B,EAAA,CAAyB9+B,CAAzB,CANX,EAM0C,CAKtCkgC,EAAAA,CAAW,CAAAzB,EAAA,CAAsBz+B,CAAtB,CAEa,EAA5B,GAAG,CAAA2+B,EAAA,CAAkB3+B,CAAlB,CAAH,GAEI,CAAAy+B,EAAA,CAAsBz+B,CAAtB,CAFJ,EAEgC,CAFhC,CAKI6P,EAAAA,CAAQ6vB,EAAA,CAAAA,CAAA,CAAuB1/B,CAAvB,CAA0B6c,EAAA,EAA1B,CAEZ,OAAGqjB,EAAH,CAEWrwB,CAFX,CAEmB,GAFnB,CAMWA,CANX,EAMoB,CAjC5B,CAsC8BswB,QAAA,GAAQ,CAARA,CAAQ,CAACngC,CAAD,CAAI6P,CAAJ,CACtC,CAGQ,CAAAkvB,EAAA,CAAoB/+B,CAApB,CAAA,CAFD,CAAAy+B,EAAA,CAAsBz+B,CAAtB,CAAH,CAE6B,CAAA++B,EAAA,CAAoB/+B,CAApB,CAF7B,CAEsD,IAFtD,CAE8D6P,CAF9D,CAM6B,CAAAkvB,EAAA,CAAoB/+B,CAApB,CAN7B,CAMsD,GANtD,CAM6D6P,CAN7D,EAMsE,CAGrC,EAAjC,GAAG,CAAA+uB,EAAA,CAAuB5+B,CAAvB,CAAH,EAAuC,CAAAy+B,EAAA,CAAsBz+B,CAAtB,CAAvC,GAEQ,CAAA++B,EAAA,CAAoB/+B,CAApB,CAWJ,GATI,CAAA++B,EAAA,CAAoB/+B,CAApB,CASJ,CAT6B,KAS7B,EAJA,CAAAw+B,EAAA,CAAyBx+B,CAAzB,CAIA,CAJ8B,CAAA++B,EAAA,CAAoB/+B,CAApB,CAI9B,CAFA,CAAA0+B,EAAA,CAAqB1+B,CAArB,CAEA,CAF0B,CAAA,CAE1B,CAAA,CAAAu+B,EAAA,CAAwBv+B,CAAxB,CAAA,CAA6B6c,EAAA,EAbjC,CAmBiC,EAAjC,GAAG,CAAA+hB,EAAA,CAAuB5+B,CAAvB,CAAH,GAEI,CAAAy+B,EAAA,CAAsBz+B,CAAtB,CAFJ,EAEgC,CAFhC,CAKA,EAAAhE,EAAAsG,KAAA,CAAc,kBAAd,CAAkC,CAAC,CAAAq8B,EAAA,CAAkB,CAAlB,CAAD,CAAuB,CAAAI,EAAA,CAAoB,CAApB,CAAvB,CAAlC,CAlCJ;AAqCAT,EAAAxhC,UAAAuiC,EAAA,CAA6Be,QAAQ,CAAC7I,CAAD,CACrC,CAAA,IACQx4B,EAAOw4B,CAAPx4B,EAAmB,CAAnBA,CAAuB,CAD/B,CAGQiB,EAAIu3B,CAAJv3B,EAAgB,CAAhBA,CAAoB,CACpBqgC,EAAAA,CAAY9I,CAAZ8I,EAAwB,CAAxBA,CAA4B,CAOvB,EAAT,GAAGrgC,CAAH,GAMiB,CAAjB,GAAGqgC,CAAH,EAGI,IAAAxB,EAAA,CAAmB7+B,CAAnB,CAGA,CAHwB,CAGxB,CAFI6P,CAEJ,CAFY6vB,EAAA,CAAAA,IAAA,CAAuB1/B,CAAvB,CAA0B6c,EAAA,EAA1B,CAEZ,CAAA,IAAAiiB,EAAA,CAAyB9+B,CAAzB,CAAA,CAA8B6P,CAAA,CAAQA,CAAR,CAAgB,CAAhB,CAAoB,CANtD,GAWW,CA6CX,EA7CG9Q,CA6CH,GA1CIA,CA0CJ,EA1CY,EA0CZ,EAjCI,IAAA0/B,EAAA,CAAsBz+B,CAAtB,CAiCJ,CApCiB,CAAjB,GAAGqgC,CAAH,CAG+B,CAH/B,CAQ+B,CA4B/B,CApBS,CAoBT,GApBGrgC,CAoBH,EAlBI+oB,EAAA,CAAA,IAAA5U,EAAA,CAA0B,CAA1B,CAkBJ,CAHA,IAAAwqB,EAAA,CAAkB3+B,CAAlB,CAGA,CAHuBjB,CAGvB,CAFA,IAAA6/B,EAAA,CAAuB5+B,CAAvB,CAEA,CAF4BqgC,CAE5B,CAAA,IAAArkC,EAAAsG,KAAA,CAAc,kBAAd,CAAkC,CAAC,IAAAq8B,EAAA,CAAkB,CAAlB,CAAD,CAAuB,IAAAI,EAAA,CAAoB,CAApB,CAAvB,CAAlC,CAxDA,CANA,CAXJ,C,CCxNA,IAAIuB,GAA8BC,WAAA/L,KAAA,CAAiB,CAC/C,MAD+C,CAE/C,MAF+C,CAG/C,MAH+C,CAI/C,MAJ+C,CAAjB,CAAlC,CAWIgM,GAA6BD,WAAA/L,KAAA,CAAiB,CAC9C,MAD8C,CAE9C,KAF8C,CAG9C,KAH8C,CAI9C,KAJ8C,CAAjB,CAajCiM;QAASA,GAAS,CAACtsB,CAAD,CAAMnY,CAAN,CAAW6R,CAAX,CAClB,CAAA,IAAA,EAAA,IAEI,KAAA7R,EAAA,CAAWA,CAEX,KAAA6R,GAAA,CAAuBA,CAGvB,KAAA6yB,EAAA,CAAsB,CAGtB,KAAAC,GAAA,CAA6B,EAG7B,KAAAC,GAAA,CAA2B,EAM3B,KAAAC,EAAA,CAAgB,EAMhB,KAAAC,GAAA,CAAgB,EAwBhB,KAAAC,GAAA,CANA,IAAAC,GAMA,CAZA,IAAAC,GAYA,CAlBA,IAAAC,GAkBA,CAlBoB,CAyBpB,KAAAt1B,GAAA,CAAc,EAad,KAAAu1B,GAAA,CAPA,IAAAC,GAOA,CAPqB,CAYrB,KAAAC,GAAA,CAAY,IAAI9kC,UAAJ,CAAe,EAAf,CA6BZ,KAAA+kC,EAAA,CAHA,IAAAC,EAGA,CANA,IAAAC,GAMA,CATA,IAAAC,EASA,CAZA,IAAAC,EAYA,CAfA,IAAAC,EAeA,CAlBA,IAAAC,GAkBA,CArBA,IAAAC,GAqBA,CAxBA,IAAAC,GAwBA,CAxBiB,CAgCjB,KAAAC,GAAA,CAAgC,CAAA,CAGhC,KAAAC,GAAA,CAAsB,CAAA,CACtB1zB,WAAA,CAAW,QAAA,EAAM,CAAEtS,CAAAsG,KAAA,CAAS,iBAAT,CAA4B,CAAA0/B,GAA5B,CAAF,CAAjB,CAAwE,CAAxE,CAMA,KAAAC,GAAA,CAAsB,IAAIp4B,UAAJ,CAAe,GAAf,CAYtB,KAAAq4B,EAAA,CAHA,IAAAC,GAGA,CANA,IAAAC,EAMA,CANmB,CAQnB,KAAAC,GAAA,CAAoB,CAAA,CAGpB,KAAAC,GAAA,CAAgB,EAUhB,KAAAC,GAAA,CAPA,IAAAC,GAOA,CAPwB,CAWxB,KAAA7Z,GAAA,CAAiB,CACb,GADa,CACP,EADO,CACD,EADC,CACK,EADL,CACW,CADX,CACiB,CADjB,CACuB,CADvB,CAC6B,CAD7B,CACoC,GADpC,CAC0C,CAD1C,CACgD,CADhD,CACsD,CADtD,CAC4D,CAD5D,CACkE,CADlE,CACwE,GADxE,CAC8E,CAD9E,CAEb,CAFa,CAEP,QAFO,CAEgB,KAFhB,CAEwC,GAFxC;AAGW,CAHX,CAGiB,CAHjB,CAGuB,CAHvB,CAG6B,CAH7B,CAGoC,CAHpC,CAG0C,CAH1C,CAGgD,CAHhD,CAGsD,CAHtD,CAG4D,CAH5D,CAGkE,CAHlE,CAGwE,CAHxE,CAG8E,CAH9E,CAIb,CAJa,CAIP,CAJO,CAID,CAJC,CAIK,CAJL,CAIW,CAJX,CAIiB,CAJjB,CAIuB,CAJvB,CAI6B,CAJ7B,CAIoC,CAJpC,CAI0C,CAJ1C,CAIgD,CAJhD,CAIsD,CAJtD,CAI4D,CAJ5D,CAIkE,CAJlE,CAIwE,CAJxE,CAI8E,CAJ9E,CAKb,CALa,CAKP,CALO,CAKD,CALC,CAKK,CALL,CAKW,CALX,CAKiB,CALjB,CAKuB,CALvB,CAK6B,CAL7B,CAKoC,CALpC,CAK0C,CAL1C,CAKgD,CALhD,CAKsD,CALtD,CAK4D,EAL5D,CAKkE,CALlE,CAKwE,CALxE,CAK8E,CAL9E,CAOjB,KAAAH,GAAA,CAAc,GACd,KAAAI,GAAA,CAAgB,CACZ,CACI5qB,KAAM6P,CADV,CADY,CAahB,KAAAqlB,GAAA,CAAoB,KACpB,KAAAC,GAAA,CAAuB,UAEvB,KAAA1zB,KAAA,CAAY,KAEZ,KAAAquB,GAAA,CAAa,CACTvnB,GAAc,CAAA,CADL,CAETk8B,GAAO,CAFE,CAGTC,GAAO,CAHE,CAITC,GAAK,CAJI,CAYb,KAAAC,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CALA,IAAAC,EAKA,CALkB,CAOlB,KAAAC,GAAA,CAAe,IAAIzmC,UAAJ,CAAe,EAAf,CAEf,KAAA0mC,EAAA,CAAmC,EACnC,KAAAC,GAAA,CAAsB,EAItB,KAAAC,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAHA,IAAAC,GAGA,CAHsB,CAKtB,KAAAC,GAAA,CAAwB,EAGxB,KAAAC,GAAA,CAAsB,EAEtB,KAAAC,GAAA,CADA,IAAAC,GACA,CAD6B,CAE7B,KAAAC,GAAA,CAAuB,EAIvB,KAAAC,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAFkB,CAGlB,KAAAC,GAAA,CAAqB,GAQrB,KAAAC,GAAA,CAFA,IAAAC,GAEA,CAHA,IAAAC,GAGA,CALA,IAAAC,GAKA,CANA,IAAAC,GAMA,CAPA,IAAAC,GAOA,CAPuB,CAUvB,KAAAC,EAAA,CADA,IAAAC,GACA,CADqC,GAIjCzb,EAAAA,CAAK3U,CAAA2U,EAEThO,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+B,IAAA0b,GAA/B,CACAnqB;CAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAA2b,GAA9B,CAAiD,IAAAC,GAAjD,CAEArqB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAA6b,GAA9B,CACA7pB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+B,IAAA8b,GAA/B,CAEA9b,EAAAxO,GAAA,CAA8B,GAA9B,CAAqC,IAArC,CAA2C,IAAAuqB,GAA3C,CAA+D,IAAAC,GAA/D,CAEAzqB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAic,GAA9B,CACA1qB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAkc,GAA9B,CAEAlc,EAAAxO,GAAA,CAA8B,GAA9B,CAAqC,IAArC,CAA2C,IAAA2qB,GAA3C,CAA+D,IAAAC,GAA/D,CAEA7qB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAqc,GAA9B,CACA9qB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAsc,GAA9B,CAEAtqB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+B,IAAAuc,GAA/B,CACAhrB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAwc,GAA9B,CACAxqB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+B,IAAAyc,GAA/B,CACAlrB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAA0c,GAA9B,CACA1qB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+B,IAAA2c,GAA/B,CACAprB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAA4c,GAA9B,CAEArrB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAA6c,GAA9B,CAEA7c,EAAAxO,GAAA,CAA8B,GAA9B,CAAqC,IAArC,CAA2C,IAAAsrB,GAA3C,CAA+D,IAAAC,GAA/D,CACAxrB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAgd,GAA9B,CACAzrB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAid,GAA9B,CAEA1rB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,QAAQ,EAAG,CAAgC,MAAO,EAAvC,CAAzC,CAEAzO,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB;AAA8B,IAAAkd,GAA9B,CACA3rB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8B,IAAAkd,GAA9B,CAKA,KAAAC,GAAA,CAAoB,EACpB,KAAAC,GAAA,CAA0B,CAE1BprB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+Bhb,IAAAA,EAA/B,CAA0C,IAAAq4B,GAA1C,CAEArrB,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAyB,IAAzB,CAA+Bhb,IAAAA,EAA/B,CAA0C,IAAAs4B,GAA1C,CACA/rB,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAwB,IAAxB,CAA8Bhb,IAAAA,EAA9B,CAAyC,IAAAu4B,GAAzC,CAE4Bv4B,KAAAA,EAA5B,GAAG,IAAAD,GAAH,EAhTsBy4B,MAgTtB,CAAyC,IAAAz4B,GAAzC,CAEI,IAAAA,GAFJ,CAhTsBy4B,MAgTtB,CAKQ,IAAAz4B,GALR,CAKgC,KALhC,GAQI,IAAAA,GACA,EADwB,KACxB,CAAA,IAAAA,GAAA,EATJ,CAYA,KAAA04B,GAAA,CAAmB,IAAIhqC,UAAJ,CAAe,IAAAsR,GAAf,CAEnB,KAAA24B,GAAA,CAAqB,IAAA34B,GACrB,KAAA44B,GAAA,CAAqB,CACrB,KAAAC,GAAA,CAAqB,IAAA74B,GACrB,KAAA84B,GAAA,CAAqB,CAErB,KAAAC,GAAA,CAAmB94B,IAAAA,EAEnB9R,EAAAuL,SAAA,CAAa,oBAAb,CAAmC,QAAQ,CAACxH,CAAD,CAC3C,CACO,IAAA6mC,GAAH,EAAuB7mC,CAAA,CAAK,CAAL,CAAvB,EAEIA,CAAA,CAAK,CAAL,CAAAggB,IAAA,CAAY,IAAA6mB,GAAA/kB,SAAA,CAA0B,CAA1B,CAA6B9hB,CAAA,CAAK,CAAL,CAAAlB,OAA7B,CAAZ,CAEJ,KAAA+nC,GAAA,CAAmB7mC,CAAA,CAAK,CAAL,CALvB,CADA,CAOG,IAPH,CASA/D,EAAAuL,SAAA,CAAa,oBAAb,CAAmC,QAAQ,EAC3C,CA+5DA,GA95DIs/B,IA85DA7E,GAAJ;AA95DI6E,IAu6DAD,GATJ,CAiBA,GA/6DIC,IA+6DDJ,GAAH,CA/6DII,IA+6DoBL,GAAxB,EA/6DIK,IA+6D0CF,GAA9C,CA/6DIE,IA+6D+DH,GAAnE,CA/6DIG,IAk7DA7qC,EAAAsG,KAAA,CAAc,wBAAd,CAl7DAukC,IAk7DwCj7B,GAAxC,CAHJ,KAAA,CAQA,GAv7DIi7B,IAu7DDxE,GAAH,CACA,CAGI,IAAI/3B,EA37DJu8B,IA27DaD,GAAb,CAEIh8B,EA77DJi8B,IA67DYL,GAFZ,CAGI37B,EA97DJg8B,IA87DUJ,GAEV,QAh8DAI,IAy7DUvE,GAOV,EAEI,KAAK,EAAL,CACI,IAAIwE,EAAcl8B,CAAdk8B,EAAuB,CAA3B,CACIC,GAAal8B,CAAbk8B,EAAoB,CAApBA,EAAyB,CAE7B,KAAQ/mC,CAAR,CAAY8mC,CAAZ,CAAyB9mC,CAAzB,CAA6B+mC,CAA7B,CAAwC/mC,CAAA,EAAxC,CAEQq+B,CAEJ,CA18DZwI,IAw8DwBG,GAAA,CAAmBhnC,CAAnB,CAEZ,CAAAsK,CAAA,CAAOtK,CAAP,CAAA,CAAYq+B,CAAZ,EAAqB,EAArB,CAA0BA,CAA1B,EAAmC,EAAnC,CAAwC,GAAxC,CAA+CA,CAA/C,CAAuD,KAAvD,CAAgE,UAEpE,MAEJ,MAAK,EAAL,CACQyI,CAAJ,CAAkBl8B,CAAlB,CAA0B,CAA1B,CAA8B,CAC1Bm8B,EAAJ,EAAiBl8B,CAAjB,CAAuB,CAAvB,CAA2B,CAA3B,EAAgC,CAChC,KAAIuQ,EAAqB,CAArBA,CAAO0rB,CAEX,KAAQ9mC,CAAR,CAAY8mC,CAAZ,CAAyB1rB,CAAzB,CAAgCvQ,CAAhC,CAAqC7K,CAAA,EAArC,CACA,CACI,IAAIinC,EAr9DhBJ,IAq9DsBN,GAAA,CAAiBnrB,CAAA,EAAjB,CAAV,CACI8rB,EAt9DhBL,IAs9DwBN,GAAA,CAAiBnrB,CAAA,EAAjB,CADZ,CAEI+rB,EAv9DhBN,IAu9DuBN,GAAA,CAAiBnrB,CAAA,EAAjB,CAEX9Q,EAAA,CAAOtK,CAAP,CAAA,CAAYinC,CAAZ,EAAmB,EAAnB,CAAwBC,CAAxB,EAAiC,CAAjC,CAAqCC,CAArC,CAA4C,UALhD,CAOA,KAEJ,MAAK,EAAL,CACQL,CAAJ,CAAkBl8B,CAAlB,EAA2B,CACvBm8B,EAAJ,EAAiBl8B,CAAjB,EAAwB,CAAxB,EAA6B,CAE7B,KAAQ7K,CAAR,CAAY8mC,CAAZ,CAAyB9mC,CAAzB,CAA6B+mC,CAA7B,CAAwC/mC,CAAA,EAAxC,CAEQonC,CAMJ,CAz+DZP,IAm+DuBQ,GAAA,CAAmBrnC,CAAnB,CAMX,CAJImnC,CAIJ,CAJ0B,GAI1B,EAJYC,CAIZ,EAJoB,EAIpB,EAJiC,EAIjC,CAJwC,CAIxC,CAHIF,CAGJ,CAHiC,GAGjC,EAHaE,CAGb,EAHqB,CAGrB,CAHyB,EAGzB,EAHwC,EAGxC,CAH+C,CAG/C,CAFIH,CAEJ,CAF0B,GAE1B;CAFWG,CAEX,CAFkB,EAElB,EAFiC,EAEjC,CAFwC,CAExC,CAAA98B,CAAA,CAAOtK,CAAP,CAAA,CAAYinC,CAAZ,EAAmB,EAAnB,CAAwBC,CAAxB,EAAiC,CAAjC,CAAqCC,CAArC,CAA4C,UAEhD,MAEJ,MAAK,CAAL,CAII,IAHIL,CACJ,CADkBl8B,CAClB,CAAIm8B,CAAJ,CAAgBl8B,CAAhB,CAAsB,CAEtB,CAAmB7K,CAAnB,EAAwB6K,CAAxB,CAA6B7K,CAAA,EAA7B,CAEQsL,CACJ,CAp/DZu7B,IAm/DwB5E,GAAA,CAn/DxB4E,IAm/D4CN,GAAA,CAAiBvmC,CAAjB,CAApB,CACZ,CAAAsK,CAAA,CAAOtK,CAAP,CAAA,CAAYsL,CAAZ,CAAoB,KAApB,CAA6BA,CAA7B,EAAsC,EAAtC,CAA2CA,CAA3C,EAAoD,EAApD,CAAyD,UApDrE,CA4DIg8B,CAAAA,CAAQR,CAARQ,CA5/DJT,IA4/D0B1E,GAAtBmF,CAAwC,CA5/D5CT,KA+/DA7qC,EAAAsG,KAAA,CAAc,wBAAd,CAAwC,CAAC,CACrC0J,GAAU,CAD2B,CACxBE,GAAUo7B,CADc,CAErCr7B,GAAU,CAF2B,CAExBE,GAAUm7B,CAFc,CAGrCn9B,GAlgEJ08B,IAkgEkB1E,GAHuB,CAIrC/3B,IANQ28B,CAMR38B,CAngEJy8B,IA6/DwB1E,GAMpB/3B,CANsC,CAMtCA,EAAuBk9B,CAAvBl9B,CAA+B,CAJM,CAAD,CAAxC,CAvEJ,CADA,IAgFA,CAtRIS,CAAAA,CAAMpM,IAAAqM,IAAA,CAjvDN+7B,IAivDgBF,GAAV,CAA+B,EAA/B,CAAqC,MAArC,CAENY,EAAAA,CAAaC,EAAA,CAnvDbX,IAmvDa,CACbY,EAAAA,CAAoB,CApvDpBZ,IAovDqB/E,GAArB2F,CAAsC,CAEtCC,EAAAA,CAtvDAb,IAsvDahD,GAAb6D,CAAgC,EAChCC,EAAAA,CAvvDAd,IAuvDYvD,GAAZqE,CAAkC,EAEtC,KAAQC,CAAR,CAzvDIf,IAgvDQH,GASZ,CATiC,GASjC,CAA4BkB,CAA5B,EAA0C/8B,CAA1C,CAAA,CACA,CACI,IAAIuQ,EAAOwsB,CAAPxsB,GAAsBmsB,CAC1B,IAAGE,CAAH,CACA,CACQh/B,CAAAA,CAAMm/B,CAANn/B,CA9vDRo+B,IA8vD2B7F,GAAnBv4B,CAAwC,CACxCC,EAAAA,CAAMk/B,CAANl/B,CA/vDRm+B,IA+vD2B7F,GAAnBt4B,CAAwCD,CAE5C,QAAOg/B,CAAP,EAEI,KAAK,CAAL,CAGIrsB,CAAA,EAAQ3S,CAAR,CAAc,CAAd,GAAsB,EACtBA,EAAA,IAAS,CACT,MACJ,MAAK,CAAL,CAGI2S,CAAA,EAAQ3S,CAAR,CAAc,CAAd,GAAsB,EACtBA,EAAA,IAAS,CACT,MACJ,MAAK,CAAL,CAGI2S,CACA,EADQ3S,CACR,CADc,CACd,GADsB,EACtB,CAAAA,CAAA,IAAS,CAlBjB,CAsBA2S,CAAA;CAAS3S,CAAT,CAvxDJo+B,IAuxDmB7F,GAAf,CAAoCt4B,CAApC,GAA4C6+B,CAA5C,EAvxDJV,IAuxD8DzF,GA1B9D,CA6BIyG,CAAAA,CA1xDJhB,IA0xDYiB,GAAA,CAAY1sB,CAAZ,CACR2sB,EAAAA,CA3xDJlB,IA2xDYmB,GAAA,CAAY5sB,CAAZ,CACR6sB,EAAAA,CA5xDJpB,IA4xDYqB,GAAA,CAAY9sB,CAAZ,CACZ,KAAI+sB,EA7xDJtB,IA6xDYuB,GAAA,CAAYhtB,CAAZ,CAERitB,EAAAA,CAAc,IAAI9rC,UAAJ,CAAe,CAAf,CAClB,QAAOmrC,CAAP,EAII,KAAK,CAAL,CAGIG,CAAA,GAAU,CACVE,EAAA,GAAU,CACVE,EAAA,GAAU,CACVE,EAAA,GAAU,CAEV,KAAI,IAAInoC,EAAI,CAAZ,CAAoB,CAApB,EAAeA,CAAf,CAAuBA,CAAA,EAAvB,CAEIqoC,CAAA,CAAY,CAAZ,CAAgBroC,CAAhB,CAAA,CACQ6nC,CADR,EACiB7nC,CADjB,CACqB,CADrB,CAEQ+nC,CAFR,EAEiB/nC,CAFjB,CAEqB,CAFrB,CAGQioC,CAHR,EAGiBjoC,CAHjB,CAGqB,CAHrB,CAIQmoC,CAJR,EAIiBnoC,CAJjB,CAIqB,CAEzB,MAIJ,MAAK,EAAL,CACIqoC,CAAA,CAAY,CAAZ,CAAA,CAAkBR,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpDI,EAAA,CAAY,CAAZ,CAAA,CAAkBR,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpDI,EAAA,CAAY,CAAZ,CAAA,CAAkBR,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpDI,EAAA,CAAY,CAAZ,CAAA,CAAkBR,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EAEpDI,EAAA,CAAY,CAAZ,CAAA,CAAkBN,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpDE,EAAA,CAAY,CAAZ,CAAA,CAAkBN,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpDE,EAAA,CAAY,CAAZ,CAAA,CAAkBN,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpDE,EAAA,CAAY,CAAZ,CAAA,CAAkBN,CAAlB,EAA2B,CAA3B,CAA+B,CAA/B,CAAuCI,CAAvC,EAAgD,CAAhD,CAAoD,EACpD,MAIJ,MAAK,EAAL,CACA,KAAK,EAAL,CACIE,CAAA,CAAY,CAAZ,CAOA,CAPiBR,CAOjB,EAP0B,CAO1B,CAP8B,EAO9B,CANAQ,CAAA,CAAY,CAAZ,CAMA,CANiBR,CAMjB,EAN0B,CAM1B,CAN8B,EAM9B,CALAQ,CAAA,CAAY,CAAZ,CAKA,CALiBN,CAKjB,EAL0B,CAK1B,CAL8B,EAK9B,CAJAM,CAAA,CAAY,CAAZ,CAIA,CAJiBN,CAIjB,EAJ0B,CAI1B,CAJ8B,EAI9B,CAHAM,CAAA,CAAY,CAAZ,CAGA,CAHiBJ,CAGjB,EAH0B,CAG1B,CAH8B,EAG9B,CAFAI,CAAA,CAAY,CAAZ,CAEA,CAFiBJ,CAEjB,EAF0B,CAE1B,CAF8B,EAE9B,CADAI,CAAA,CAAY,CAAZ,CACA,CADiBF,CACjB,EAD0B,CAC1B,CAD8B,EAC9B,CAAAE,CAAA,CAAY,CAAZ,CAAA,CAAiBF,CAAjB,EAA0B,CAA1B,CAA8B,EA/CtC,CAmDA,GAAGR,CAAH,CAGI,IAAetT,CAAf;AAAQr0B,CAAR,CAAY,CAAZ,CAA0B,CAA1B,CAAsBA,CAAtB,CAA6BA,CAAA,EAAA,CAAK4nC,CAAA,EAAL,CAAmBvT,CAAnB,EAAwB,CAArD,CAt1DJwS,IAw1DQyB,GAAA,CAAkBV,CAAlB,CAAA,CAAiCS,CAAA,CAAYhU,CAAZ,CAAjC,EAAmD,CAAnD,CAAwDgU,CAAA,CAAYhU,CAAZ,CAAgB,CAAhB,CALhE,KAUI,KAAQr0B,CAAR,CAAY,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAA,CAAK4nC,CAAA,EAA3B,CA71DJf,IA+1DQyB,GAAA,CAAkBV,CAAlB,CAAA,CAAgCS,CAAA,CAAYroC,CAAZ,CArG5C,CAmHI4K,CAAAA,CA72DAi8B,IA62DQL,GACR37B,EAAAA,CAAMpM,IAAAqM,IAAA,CA92DN+7B,IA82DeJ,GAAT,CAA6B,MAA7B,CAIV,IAHIn8B,CAGJ,CAl3DIu8B,IA+2DSD,GAGb,CAWA,GATI2B,CASD,CATQ,GASR,CARCC,CAQD,CARY,CAQZ,CA73DC3B,IAs3DDvD,GAOA,CAPsB,GAOtB,GAJCiF,CACA,EADQ,GACR,CAAAC,CAAA,EA13DA3B,IA03DY1D,GAAZ,EAAiC,CAAjC,CAAqC,EAGtC,EA73DC0D,IA63DDvD,GAAA,CAAsB,EAAzB,CAII,IAAA,CAA4BsE,CAA5B,EAA0C/8B,CAA1C,CAA+C+8B,CAAA,EAA/C,CAEQa,CAGJ,CAt4DJ5B,IAm4DoByB,GAAA,CAAkBV,CAAlB,CAGhB,CAHgDW,CAGhD,CAHwDC,CAGxD,CAFIl9B,CAEJ,CAt4DJu7B,IAo4DgB5E,GAAA,CAAoBwG,CAApB,CAEZ,CAAAn+B,CAAA,CAAOs9B,CAAP,CAAA,CAAqBt8B,CAArB,CAA6B,KAA7B,CAAsCA,CAAtC,EAA+C,EAA/C,CAAoDA,CAApD,EAA6D,EAA7D,CAAkE,UAT1E,KAoBI,KAHAi9B,CACA,EADQ,EACR,CAAAC,CAAA,EA/4DA3B,IA+4DY1D,GAAZ,EAAiC,CAAjC,CAAqC,GAErC,CAA4ByE,CAA5B,EAA0C/8B,CAA1C,CAA+C+8B,CAAA,EAA/C,CAGQa,CAGJ,CAv5DJ5B,IAo5DoB7D,GAAA,CAp5DpB6D,IAm5DkByB,GAAA,CAAkBV,CAAlB,CACE,CAp5DpBf,IAm5DkDxD,GAC9B,CAGhB,CAHwCkF,CAGxC,CAHgDC,CAGhD,CAFIl9B,CAEJ,CAv5DJu7B,IAq5DgB5E,GAAA,CAAoBwG,CAApB,CAEZ,CAAAn+B,CAAA,CAAOs9B,CAAP,CAAA,CAAqBt8B,CAArB,CAA6B,KAA7B,CAAsCA,CAAtC,EAA+C,EAA/C,CAAoDA,CAApD,EAA6D,EAA7D,CAAkE,UAv5DtEu7B,KA0gEA7qC,EAAAsG,KAAA,CAAc,wBAAd,CA1gEAukC,IA0gEwCj7B,GAAxC,CAHJ,CAvgEIi7B,IAqnBJL,GAAA,CArnBIK,IAqnBiBh5B,GArnBjBg5B,KAsnBJJ,GAAA,CAAqB,CAtnBjBI,KAunBJH,GAAA,CAvnBIG,IAunBiBh5B,GAvnBjBg5B,KAwnBJF,GAAA;AAAqB,CAuzCrB,CAZI+B,EAAA,CAn6DA7B,IAm6DA,CAp6DJ,CADA,CAGG,IAHH,CAMA,KAAAQ,GAAA,CAAqB,IAAIvgC,WAAJ,CAAgB,IAAAy/B,GAAAj8B,OAAhB,CACrB,KAAA08B,GAAA,CAAqB,IAAIn9B,UAAJ,CAAe,IAAA08B,GAAAj8B,OAAf,CACrB,KAAAq+B,GAAA,CAAkB,IAAIpsC,UAAJ,CAAe,IAAAgqC,GAAAj8B,OAAf,CAAwC,CAAxC,CAA2C,MAA3C,CAClB,KAAAw9B,GAAA,CAAc,IAAIvrC,UAAJ,CAAe,IAAAgqC,GAAAj8B,OAAf,CAAwC,CAAxC,CAjXEs+B,KAiXF,CACd,KAAAZ,GAAA,CAAc,IAAIzrC,UAAJ,CAAe,IAAAgqC,GAAAj8B,OAAf,CAlXEs+B,KAkXF,CAlXEA,KAkXF,CACd,KAAAV,GAAA,CAAc,IAAI3rC,UAAJ,CAAe,IAAAgqC,GAAAj8B,OAAf,CAAwC,MAAxC,CAnXEs+B,KAmXF,CACd,KAAAR,GAAA,CAAc,IAAI7rC,UAAJ,CAAe,IAAAgqC,GAAAj8B,OAAf,CAAwC,MAAxC,CApXEs+B,KAoXF,CACd,KAAAN,GAAA,CAAoB,IAAI/rC,UAAJ,CAAe,IAAAgqC,GAAAj8B,OAAf,CArWKu+B,MAqWL,CA9VIC,MA8VJ,CAGpB,KAAIC,EAAK,IACT7wB,GAAA,CAAA4Q,CAAA,CAAiB,MAAjB,CAA0B,MAA1B,CACI,QAAQ,CAAC1N,CAAD,CAAO,CAAE,MAAO4tB,GAAA,CAAAD,CAAA,CAAmB3tB,CAAnB,CAAT,CADnB,CAEI,QAAQ,CAACA,CAAD,CAAOvL,CAAP,CAAc,CA2P1B,GA3P4Bk5B,CA2PzB1G,GAAH,EA3P4B0G,CA2PJ/G,GAAxB,EA3P4B+G,CA2PmBhH,GAA/C,CACA,CAiCA,IAAA3mB,EA/BIA,CA+BJA;AA/BYA,MA+BZA,CA7R4B2tB,CA6RpBvG,GA7RoBuG,EA+R5BvC,GAAA,CAAqBprB,CAAA,CA/RO2tB,CA+RAvC,GAAP,CAA4BprB,CAA5B,CA/RO2tB,CA+R4BvC,GA/R5BuC,EAgS5BtC,GAAA,CAAqBrrB,CAAA,CAhSO2tB,CAgSAtC,GAAP,CAA4BrrB,CAA5B,CAhSO2tB,CAgS4BtC,GAhS5BsC,EAkS5BxC,GAAA,CAAiBnrB,CAAjB,CAAA,CAlSsDvL,CA4PtD,CADA,IAAA,CAQA,IAAIo5B,EAnQwBF,CAmQF5E,GAAtB8E,EAA8D,CAA9DA,CAAkE,CACtE7tB,EAAA,EAAQklB,EAAA,CAA4B2I,CAA5B,CAER,IAAG,EAAO,CAAP,CAAA7tB,CAAA,EAAYA,CAAZ,EAAoBolB,EAAA,CAA2ByI,CAA3B,CAApB,CAAH,CAMA,GA5Q4BF,CA4QzB/G,GAAH,CAAA,CA5QsDnyB,IAAAA,EAAAA,CAySlDq5B,EAAAA,CAAUC,EAAA,CAzScJ,CAySEhF,GAAhB,CACd,KAAIqF,EAAiBC,EAAA,CA1SON,CA0SW1E,GAAlB,CACjBiF,EAAAA,CAAwBD,EAAA,CA3SAN,CA2SkB3E,GAAlB,CAG5B,QA9S4B2E,CAwSXlF,GAMjB,CANoC,CAMpC,EAEI,KAAK,CAAL,CACIh0B,CAAA,EAA0BA,CAA1B,CAA0BA,CAA1B,EA+FgC,CA/FhC,KAjToBk5B,CAiZhBnF,GAhGJ,CAgG6B,CAhG7B,EAkGS,GAjGT2F,EAAA,CAAcJ,EAAA,CAAgBt5B,CAAhB,CA8GlBu5B,EAAAA,CAAiBC,EAAA,CAhaON,CAgaW1E,GAAlB,CA5GbkF,EAAA,CAAcC,EAAA,CApTMT,CAoTN,EADoBQ,CACpB,CADiCD,CACjC,CA6GOF,CA7GP,GA8GR,CA/GyCE,CACjC,CA8GQF,CA9GR,EApTML,CAoT0B3G,EAAhC,CACdmH,EAAA,CAA8CL,CAA9C,CAAiCK,CAAjC,CAkJO,CAlJuCL,CAA9C,CArToBH,CAucI3G,EAjJxB,MACJ,MAAK,CAAL,CACImH,CAAA,CAxToBR,CAwTN3G,EACd,MACJ,MAAK,CAAL,CACImH,CAAA,CAAcF,EAAA,CAAkBx5B,CAAlB,CACd05B,EAAA,CAAcC,EAAA,CA5TMT,CA4TN,CAAmBQ,CAAnB,CA5TMR,CA4T0B3G,EAAhC,CACdmH,EAAA,CAA8CL,CAA9C,CAAiCK,CAAjC,CA0IO,CA1IuCL,CAA9C,CA7ToBH,CAucI3G,EAzIxB,MACJ,MAAK,CAAL,CACIvyB,CAGA,EAH0BA,CAG1B,CAH0BA,CAG1B,EA6EgC,CA7EhC,KAnUoBk5B,CAiZhBnF,GA9EJ,CA8E6B,CA9E7B,EAgFS,GAhFT,CAFAsF,CAEA,EAFWC,EAAA,CAAgBt5B,CAAhB,CAEX,CAAA05B,CAAA,CAA8CL,CAA9C,CADcE,CACd,CAoIO,CApIuCF,CAA9C,CAnUoBH,CAucI3G,EAzJhC,CAyBIqH,CAAAA,CAAe,EAEnB,QAzU4BV,CAyUrBrF,GAAP,CAAoC,EAApC,EAGI,KAAK,CAAL,CACI+F,CAAA,CAAe,CAAf,GAAuBruB,CAAvB,CAA8B,CAA9B,CACAA,EAAA,EAAQ,EACR,MAMJ,MAAK,CAAL,CACA,KAAK,EAAL,CACIquB,CACA,CADe,CACf,GADqBruB,CACrB,CAD4B,CAC5B,EAAAA,CAAA,EAAQ,EAfhB,CAqBAquB,CAAA,EA9V4BV,CA8VZvF,GAEbiG,EAAH,CAAkB,CAAlB,GAhW4BV,CAgWLjB,GAAA,CAAY1sB,CAAZ,CAAvB;AAA4CmuB,CAA5C,EAA2D,CAA3D,CAAgE,GAAhE,CACGE,EAAH,CAAkB,CAAlB,GAjW4BV,CAiWLf,GAAA,CAAY5sB,CAAZ,CAAvB,CAA4CmuB,CAA5C,EAA2D,CAA3D,CAAgE,GAAhE,CACGE,EAAH,CAAkB,CAAlB,GAlW4BV,CAkWLb,GAAA,CAAY9sB,CAAZ,CAAvB,CAA4CmuB,CAA5C,EAA2D,EAA3D,CAAiE,GAAjE,CACGE,EAAH,CAAkB,CAAlB,GAnW4BV,CAmWLX,GAAA,CAAYhtB,CAAZ,CAAvB,CAA4CmuB,CAA5C,EAA2D,EAA3D,CAAiE,GAAjE,CAEI3B,EAAAA,CAAa8B,EAAA,CArWWX,CAqWX,CAAuB3tB,CAAvB,CACe,EAAA,CAAAwsB,CAAA,CAAa,CAAzBA,EAsPpB,CA5lB4BmB,CA4lBnBrC,GAAT,GA5lB4BqC,CA4lBCrC,GAA7B,CAtPoBkB,CAsPpB,CACGh3B,EAAH,CA7lB4Bm4B,CA6lBnBpC,GAAT,GA7lB4BoC,CA6lBCpC,GAA7B,CAAkD/1B,CAAlD,CAvPoBg3B,EAgPpB,CAtlB4BmB,CAslBnBvC,GAAT,GAtlB4BuC,CAslBCvC,GAA7B,CAhPoBoB,CAgPpB,CASyBh3B,EARzB,CAvlB4Bm4B,CAulBnBtC,GAAT,GAvlB4BsC,CAulBCtC,GAA7B,CAQyB71B,CARzB,CA3UA,CAAA,IA5Q4Bm4B,EAkRnBvF,GAAL,CAA2B,CAA3B,GAKgCpoB,CAgOpC,CAhOoCA,CAgOpC,CArBIuuB,CAqBJ,EArBoBvuB,CAqBpB,EArB4B,CAqB5B,EAvf4B2tB,CAkeK3H,GAqBjC,CApBI34B,CAoBJ,CApBUkhC,CAoBV,CAvf4BZ,CAmeHlI,EAoBzB,CApByC,CAoBzC,CAnBU8I,CAmBV,EAvf4BZ,CAoeHlI,EAmBzB,CAdGzlB,CAAH,CAAU,CAAV,EAEI9P,CACA,CA5ekDuE,CA4elD,CAAA5I,CAAA,CA5ewB8hC,CA4elBJ,GAAA,CAAgBvtB,CAAhB,CAAuB,EAAvB,CAHV,GAOInU,CACA,CAjfkD4I,CAiflD,CAAAvE,CAAA,CAjfwBy9B,CAifhBJ,GAAA,CAAgBvtB,CAAhB,CAAuB,CAAvB,CARZ,CAcA,CAvf4B2tB,CAof5B/sC,EAAAsG,KAAA,CAAc,iBAAd,CAAiC,CAACmG,CAAD,CAAMC,CAAN,CAAWzB,CAAX,CApfL8hC,CAqfpB9G,GAAA,CAAoB32B,CAApB,EAA6B,CAA7B,CAAiC,EAAjC,CADyB,CApfLy9B,CAqfmB9G,GAAA,CAAoB32B,CAApB,CAA4B,EAA5B,CADd,CAAjC,CAGA,CAvf4By9B,CAuf5BJ,GAAA,CAAgBvtB,CAAhB,CAAA,CAvfsDvL,CAkRlD,CAvBJ,CA3P0B,CAF1B,CAIAqI,GAAA,CAAA4Q,CAAA,CAhXkB8gB,UAgXlB,CAAkC,IAAA/7B,GAAlC,CACI,QAAQ,CAACuN,CAAD,CAAO,CAAE,MAAO2tB,EAmgBrBxC,GAAA,CAngB0CnrB,CAmgB1C,CAAwB,SAAxB,CAngBY,CADnB,CAEI,QAAQ,CAACA,CAAD,CAAOvL,CAAP,CAAc,CAAwBuL,CAshBlD,EAAQ,SAthBoB2tB,EAuhB5BxC,GAAA,CAAiBnrB,CAAjB,CAAA,CAvhBwDvL,CAA5Bk5B,EAyhB5BvC,GAAA,CAAqBprB,CAAA,CAzhBO2tB,CAyhBAvC,GAAP,CAA4BprB,CAA5B,CAzhBO2tB,CAyhB4BvC,GAzhB5BuC,EA0hB5BtC,GAAA,CAAqBrrB,CAAA,CA1hBO2tB,CA0hBAtC,GAAP,CAA4BrrB,CAA5B,CA1hBO2tB,CA0hB4BtC,GA1hB9B,CAF1B,CAGI,QAAQ,CAACrrB,CAAD,CAAO,CAA+BA,CAsgBlD,EAAQ,SAtgBa,OAwgBlBA,EAAH;AAAU,CAAV,CAxgB4B2tB,CA0gBjBxC,GAAA,CAAiBnrB,CAAjB,CAFX,CAxgB4B2tB,CA0gBQxC,GAAA,CAAiBnrB,CAAjB,CAAwB,CAAxB,CAFpC,EAEkE,CAFlE,CAxgB4B2tB,CA2gBjBxC,GAAA,CAAiBnrB,CAAjB,CAAwB,CAAxB,CAHX,EAGyC,EAHzC,CAxgB4B2tB,CA2gBkBxC,GAAA,CAAiBnrB,CAAjB,CAAwB,CAAxB,CAH9C,EAG4E,EAH5E,CAxgB4B2tB,CA+gBjB/B,GAAA,CAAmB5rB,CAAnB,EAA2B,CAA3B,CA/gBQ,CAHnB,CAII,QAAQ,CAACA,CAAD,CAAOvL,CAAP,CAAc,CAAyBuL,CA6hBnD,EAAQ,SA7hBoB2tB,EA+hB5BvC,GAAA,CAAqBprB,CAAA,CA/hBO2tB,CA+hBAvC,GAAP,CAA4BprB,CAA5B,CA/hBO2tB,CA+hB4BvC,GA/hB5BuC,EAgiB5BtC,GAAA,CAAqBrrB,CAAA,CAAO,CAAP,CAhiBO2tB,CAgiBItC,GAAX,CAAgCrrB,CAAhC,CAAuC,CAAvC,CAhiBO2tB,CAgiBoCtC,GAhiBpCsC,EAkiB5BxC,GAAA,CAAiBnrB,CAAjB,CAAA,CAliByDvL,CAA7Bk5B,EAmiB5BxC,GAAA,CAAiBnrB,CAAjB,CAAwB,CAAxB,CAAA,CAniByDvL,CAmiBzD,EAAsC,CAniBVk5B,EAoiB5BxC,GAAA,CAAiBnrB,CAAjB,CAAwB,CAAxB,CAAA,CApiByDvL,CAoiBzD,EAAsC,EApiBVk5B,EAqiB5BxC,GAAA,CAAiBnrB,CAAjB,CAAwB,CAAxB,CAAA,CAriByDvL,CAqiBzD,EAAsC,EAriBZ,CAJ1B,CAOAmc,GAAA,CAAA7X,CAAA4I,EAAAkP,GAAA,CAAgC,IAAhC,CA3UJ,CA8UA,CAAA,CAAA,EAAA,UAAA4d;CAAA9sC,GAAA,CAAgC+sC,QAAQ,EACxC,CACI,IAAI7sC,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4Q,GACX5Q,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAyjC,EACXzjC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA0jC,GACX1jC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2jC,GACX3jC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4jC,EACX5jC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA6jC,GACX7jC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2O,GACX3O,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2lC,GACX3lC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAmkC,GACXnkC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA+kC,GACX/kC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAglC,GACZhlC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAmlC,EACZnlC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAinC,GACZjnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAgnC,GACZhnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAknC,GACZlnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAklC,GACZllC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAilC,EACZjlC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA6kC,GACZ7kC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAolC,GACZplC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqlC,GACZrlC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAulC,GACZvlC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAslC,GACZtlC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8lC,EACZ9lC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA6lC,GACZ7lC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4lC,GACZ5lC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+lC,GACZ/lC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAsmC,GACZtmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAumC,GACZvmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAymC,GACZzmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA0mC,GACZ1mC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA6mC,GACZ7mC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4mC,GACZ5mC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA2mC,GACZ3mC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8mC,GACZ9mC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+mC,GACZ/mC,EAAA,CAAM,EAAN,CAAA;AAAY,IAAAsnC,GACZtnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqnC,EACZrnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAgpC,GACZhpC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAipC,GACZjpC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAspC,GACZtpC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8kC,GACZ9kC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAgmC,EACZhmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAskC,EACZtkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAonC,GACZpnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAmnC,GACZnnC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAkkC,GACZlkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAokC,GACZpkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4kC,GACZ5kC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA2kC,GACZ3kC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA0kC,EACZ1kC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAykC,EACZzkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwkC,EACZxkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAukC,GACZvkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAskC,EACZtkC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAimC,GACZjmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqmC,GACZrmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAomC,GACZpmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAmmC,GACZnmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAkmC,GACZlmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwmC,GACZxmC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqkC,EAEZ,OAAOrkC,EAjEX,CAoEA4sC;CAAAtsC,GAAA,CAAgCwsC,QAAQ,CAAC9sC,CAAD,CACxC,CACI,IAAA4Q,GAAA,CAAuB5Q,CAAA,CAAM,CAAN,CACvB,KAAAyjC,EAAA,CAAsBzjC,CAAA,CAAM,CAAN,CACtB,KAAA0jC,GAAA,CAA6B1jC,CAAA,CAAM,CAAN,CAC7B,KAAA2jC,GAAA,CAA2B3jC,CAAA,CAAM,CAAN,CAC3B,KAAA4jC,EAAA,CAAgB5jC,CAAA,CAAM,CAAN,CAChB,KAAA6jC,GAAA,CAAgB7jC,CAAA,CAAM,CAAN,CAChB,KAAA2O,GAAA,CAAc3O,CAAA,CAAM,CAAN,CACd,KAAA2lC,GAAA,CAAiB3lC,CAAA,CAAM,CAAN,CACjB,KAAAmkC,GAAA,CAAqBnkC,CAAA,CAAM,CAAN,CACrB,KAAA+kC,GAAA,CAAsB/kC,CAAA,CAAM,CAAN,CACtB,KAAAglC,GAAA,CAAsBhlC,CAAA,CAAM,EAAN,CACtB,KAAAmlC,EAAA,CAAmBnlC,CAAA,CAAM,EAAN,CACnB,KAAAinC,GAAA,CAAqBjnC,CAAA,CAAM,EAAN,CACrB,KAAAgnC,GAAA,CAAuBhnC,CAAA,CAAM,EAAN,CACvB,KAAAknC,GAAA,CAAuClnC,CAAA,CAAM,EAAN,CACvC,KAAAklC,GAAA,CAAkBllC,CAAA,CAAM,EAAN,CAClB,KAAAilC,EAAA,CAAmBjlC,CAAA,CAAM,EAAN,CACnB,KAAA6kC,GAAA,CAAiB7kC,CAAA,CAAM,EAAN,CACjB,KAAAolC,GAAA,CAAoBplC,CAAA,CAAM,EAAN,CACpB,KAAAqlC,GAAA,CAAgBrlC,CAAA,CAAM,EAAN,CAChB,KAAAulC,GAAA,CAAwBvlC,CAAA,CAAM,EAAN,CACxB,KAAAslC,GAAA,CAAmBtlC,CAAA,CAAM,EAAN,CACnB,KAAA8lC,EAAA,CAAkB9lC,CAAA,CAAM,EAAN,CAClB,KAAA6lC,GAAA,CAA6B7lC,CAAA,CAAM,EAAN,CAC7B,KAAA4lC,GAAA,CAA4B5lC,CAAA,CAAM,EAAN,CAC5B,KAAA+lC,GAAA,CAAe/lC,CAAA,CAAM,EAAN,CACf,KAAAsmC,GAAA,CAAuBtmC,CAAA,CAAM,EAAN,CACvB,KAAAumC,GAAA,CAAsBvmC,CAAA,CAAM,EAAN,CACtB,KAAAymC,GAAA,CAA6BzmC,CAAA,CAAM,EAAN,CAC7B,KAAA0mC,GAAA,CAAsB1mC,CAAA,CAAM,EAAN,CACtB,KAAA6mC,GAAA,CAAkB7mC,CAAA,CAAM,EAAN,CAClB,KAAA4mC,GAAA,CAAmB5mC,CAAA,CAAM,EAAN,CACnB,KAAA2mC,GAAA,CAAyB3mC,CAAA,CAAM,EAAN,CACzB,KAAA8mC,GAAA,CAAqB9mC,CAAA,CAAM,EAAN,CACrB,KAAA+mC,GAAA,CAAqB/mC,CAAA,CAAM,EAAN,CACrB,KAAAsnC,GAAA,CAAqCtnC,CAAA,CAAM,EAAN,CACrC;IAAAqnC,EAAA,CAAsBrnC,CAAA,CAAM,EAAN,CACtB,KAAAgpC,GAAA,CAAmBhpC,CAAA,CAAM,EAAN,CACnB,KAAAipC,GAAA,CAA0BjpC,CAAA,CAAM,EAAN,CAC1B,KAAAspC,GAAAxmB,IAAA,CAAqB9iB,CAAA,CAAM,EAAN,CAArB,CACA,KAAA8kC,GAAA,CAAgC9kC,CAAA,CAAM,EAAN,CAChC,KAAAgmC,EAAA,CAAkChmC,CAAA,CAAM,EAAN,CAClC,KAAAskC,EAAA,CAAuBtkC,CAAA,CAAM,EAAN,CACvB,KAAAonC,GAAA,CAAuBpnC,CAAA,CAAM,EAAN,CACvB,KAAAmnC,GAAA,CAA8BnnC,CAAA,CAAM,EAAN,CAC9B,KAAAkkC,GAAA,CAA6BlkC,CAAA,CAAM,EAAN,CAC7B,KAAAokC,GAAAthB,IAAA,CAAc9iB,CAAA,CAAM,EAAN,CAAd,CACA,KAAA4kC,GAAA,CAAqC5kC,CAAA,CAAM,EAAN,CACrC,KAAA2kC,GAAA,CAA8B3kC,CAAA,CAAM,EAAN,CAC9B,KAAA0kC,EAAA,CAAmC1kC,CAAA,CAAM,EAAN,CACnC,KAAAykC,EAAA,CAA4BzkC,CAAA,CAAM,EAAN,CAC5B,KAAAwkC,EAAA,CAAmCxkC,CAAA,CAAM,EAAN,CACnC,KAAAukC,GAAA,CAAuBvkC,CAAA,CAAM,EAAN,CACvB,KAAAskC,EAAA,CAAuBtkC,CAAA,CAAM,EAAN,CACvB,KAAAimC,GAAA,CAAsBjmC,CAAA,CAAM,EAAN,CACtB,KAAAqmC,GAAA,CAAsBrmC,CAAA,CAAM,EAAN,CACtB,KAAAomC,GAAA,CAA0BpmC,CAAA,CAAM,EAAN,CAC1B,KAAAmmC,GAAA,CAA0BnmC,CAAA,CAAM,EAAN,CAC1B,KAAAkmC,GAAA,CAAoBlmC,CAAA,CAAM,EAAN,CACpB,KAAAwmC,GAAA,CAAqBxmC,CAAA,CAAM,EAAN,CACrB,KAAAqkC,EAAA,CAAoBrkC,CAAA,CAAM,EAAN,CAEpB,KAAAjB,EAAAsG,KAAA,CAAc,iBAAd,CAAiC,IAAA0/B,GAAjC,CAEG,KAAAA,GAAH,EAII,IAAAf,GAEA,CAHA,IAAAC,GAGA,CAHoB,CAGpB,CAAG,IAAAmB,GAAH,EAEI,IAAAt6B,GAAA,CAAwB,IAAAo6B,GAAxB,CAAyC,IAAAD,EAAzC,CACI,IAAAI,GADJ,CACmB,IAAAH,GADnB,CACoC,IAAAD,EADpC,CAEA,CAAA8H,EAAA,CAAAA,IAAA,CAJJ,GAQIC,EAAA,CAAAA,IAAA,CACA,CAAAC,EAAA,CAAAA,IAAA,CATJ,CANJ;CAoBI,IAAApiC,GAAA,CAAmB,IAAA+4B,EAAnB,CAAkC,IAAAC,GAAlC,CAEA,CADA,IAAAl5B,GAAA,EACA,CAAA,IAAAD,GAAA,EAtBJ,CAwBAwiC,GAAA,CAAAA,IAAA,CAzFJ,CA4FsCC,SAAA,GAAQ,CAARA,CAAQ,CAAChvB,CAAD,CAC9C,CACI,GAAG,CAAAinB,GAAH,EAAwB,CAAAN,GAAxB,CAKI,MAFA3mB,EAEO,CAHPA,CAGO,CAHC,MAGD,CAFC,CAAAonB,GAED,CAAA,CAAA+D,GAAA,CAAiBnrB,CAAjB,CAGX,KAAI6tB,EAAsB,CAAA9E,GAAtB8E,EAA8D,CAA9DA,CAAkE,CACtE7tB,EAAA,EAAQklB,EAAA,CAA4B2I,CAA5B,CAGR,IAAU,CAAV,CAAG7tB,CAAH,EAAeA,CAAf,EAAuBolB,EAAA,CAA2ByI,CAA3B,CAAvB,CAGI,MAAO,EAGX,EAAA7G,EAAA,CAAmB,CAAA0F,GAAA,CAAY1sB,CAAZ,CACnB,EAAAgnB,EAAA,EAAoB,CAAA4F,GAAA,CAAY5sB,CAAZ,CAApB,EAAyC,CACzC,EAAAgnB,EAAA,EAAoB,CAAA8F,GAAA,CAAY9sB,CAAZ,CAApB,EAAyC,EACzC,EAAAgnB,EAAA,EAAoB,CAAAgG,GAAA,CAAYhtB,CAAZ,CAApB,EAAyC,EAEzC,IAAG,CAAAyoB,GAAH,CAAsB,CAAtB,CAsBI,MAnBIwG,EAmBGA,CAnBO,GAmBPA,CAjBJ,CAAApG,GAiBIoG,CAjBmB,CAiBnBA,GAfHA,CAeGA,EAfQ,CAAAvC,GAAA,CAAY1sB,CAAZ,CAeRivB,CAf4B,EAAE,CAAAnG,GAAA,CAAqB,CAArB,CAA2B,GAA3B,CAAkC,CAApC,CAe5BmG,EAbJ,CAAApG,GAaIoG,CAbmB,CAanBA,GAXHA,CAWGA,EAXQ,CAAArC,GAAA,CAAY5sB,CAAZ,CAWRivB,CAX4B,EAAE,CAAAnG,GAAA,CAAqB,CAArB,CAA2B,GAA3B,CAAkC,CAApC,CAW5BmG,EATJ,CAAApG,GASIoG,CATmB,CASnBA,GAPHA,CAOGA,EAPQ,CAAAnC,GAAA,CAAY9sB,CAAZ,CAORivB,CAP4B,EAAE,CAAAnG,GAAA,CAAqB,CAArB,CAA2B,GAA3B,CAAkC,CAApC,CAO5BmG,EALJ,CAAApG,GAKIoG,CALmB,CAKnBA,GAHHA,CAGGA,EAHQ,CAAAjC,GAAA,CAAYhtB,CAAZ,CAGRivB,CAH4B,EAAE,CAAAnG,GAAA,CAAqB,CAArB,CAA2B,GAA3B,CAAkC,CAApC,CAG5BmG,EAAAA,CAMHC,EAAAA,CAAQ,CAAAxG,GACR,EAAA9B,GAAJ,CAKQ,CAAA0B,GAAH,CAAgC,CAAhC,EAGD4G,CACA,CADQlvB,CACR,CADe,CACf,CAAAA,CAAA,EAAQ,EAJP,EAMG,CAAAyoB,GANH,CAMsB,EANtB,GASDyG,CACA,CADQlvB,CACR,CADe,CACf,CAAAA,CAAA,EAAQ,EAVP,CALL,CAGIkvB,CAHJ,CAGY,CAcZ,OAAO,EAAA3B,GAAA,CAAgB2B,CAAhB,EAAyB,EAAzB,CAA8BlvB,CAA9B,CAtEf;AAgMiCmvB,QAAA,GAAQ,CAACpO,CAAD,CACzC,CAKI,MAJYA,EAIZ,CAHSA,CAGT,EAHsB,CAGtB,CAFSA,CAET,EAFsB,EAEtB,CADSA,CACT,EADsB,EAJ1B,CAcmCqO,QAAA,GAAQ,CAACrO,CAAD,CAC3C,CAKI,OAJYA,CAAAkC,CAAY,CAAZA,CAAkB,GAAlBA,CAAyB,CAIrC,GAHUlC,CAAA,CAAY,CAAZ,CAAkB,GAAlB,CAAyB,CAGnC,GAH4C,CAG5C,EAFUA,CAAA,CAAY,CAAZ,CAAkB,GAAlB,CAAyB,CAEnC,GAF4C,EAE5C,EADUA,CAAA,CAAY,CAAZ,CAAkB,GAAlB,CAAyB,CACnC,GAD4C,EAJhD,CA+CoCsO,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAatI,CAAb,CAC5C,CACI,OAAO,CAAAwB,GAAP,CAAgC,EAAhC,EAEI,KAAK,CAAL,CACI,MAAO8G,EAAP,CAAoBtI,CACxB,MAAK,EAAL,CACI,MAAOsI,EAAP,CAAoBtI,CACxB,MAAK,EAAL,CACI,MAAOsI,EAAP,CAAoBtI,CAP5B,CASA,MAAOsI,EAVX,CA4BuCC,QAAA,GAAQ,CAARA,CAAQ,CAC/C,CAKI,IALJ,IACQvvB,EAAO,CAAAgmB,GAAPhmB,EAA6B,CADrC,CAEQnU,CAFR,CAGQqE,CAHR,CAKY7C,EAAM,CAAd,CAAiBA,CAAjB,CAAuB,CAAAq4B,GAAvB,CAAsCr4B,CAAA,EAAtC,CAEI,IAAI,IAAIC,EAAM,CAAd,CAAiBA,CAAjB,CAAuB,CAAAm4B,EAAvB,CAAsCn4B,CAAA,EAAtC,CAEIzB,CAMA,CANM,CAAA0hC,GAAA,CAAgBvtB,CAAhB,CAMN,CALA9P,CAKA,CALQ,CAAAq9B,GAAA,CAAgBvtB,CAAhB,CAAuB,CAAvB,CAKR,CAHA,CAAApf,EAAAsG,KAAA,CAAc,iBAAd,CAAiC,CAACmG,CAAD,CAAMC,CAAN,CAAWzB,CAAX,CAC7B,CAAAg7B,GAAA,CAAoB32B,CAApB,EAA6B,CAA7B,CAAiC,EAAjC,CAD6B,CACU,CAAA22B,GAAA,CAAoB32B,CAApB,CAA4B,EAA5B,CADV,CAAjC,CAGA,CAAA8P,CAAA,EAAQ,CAfpB;AA8CAyuB,CAAAliC,GAAA,CAAoCijC,QAAQ,EAC5C,CAAA,IACQniC,GAAO,IAAAi4B,EAAPj4B,CAA6B,IAAA24B,GAA7B34B,EAAmD,IAAAo4B,EAAnDp4B,CAAmE,CAD3E,CAEQC,GAAO,IAAAg4B,EAAPh4B,CAA6B,IAAA04B,GAA7B14B,EAAmD,IAAAm4B,EAEvDp4B,EAAA,CAAMhK,IAAAqM,IAAA,CAAS,IAAAg2B,GAAT,CAAyB,CAAzB,CAA4Br4B,CAA5B,CAEN,KAAAzM,EAAAsG,KAAA,CAAc,sBAAd,CAAsC,CAACmG,CAAD,CAAMC,CAAN,CAAtC,CANJ,CAmDsCmiC,SAAA,GAAQ,CAARA,CAAQ,CAC9C,CAGO,CAAA7I,GAAH,EAEI,CAAAwE,GAEA,CAFqB,CAErB,CAAG,CAAAnE,GAAH,CAEI,CAAAoE,GAFJ,CAEyB,CAAA54B,GAFzB,CAMI,CAAA44B,GANJ,CA15BoBqC,MAs5BxB,EAeIgC,EAAA,CAAAA,CAAA,CAlBR,CAsBsCC,QAAA,GAAQ,CAARA,CAAQ,CAC9C,CAGQ,CAAA/I,GAAJ,EAA2BK,CAAA,CAAAA,GAA3B,GAKA,CAAAqE,GAGA,CAHqB,CAGrB,CAFA,CAAAC,GAEA,CAr7BwBmC,MAq7BxB,CAAAqB,EAAA,CAAAA,CAAA,CARA,CAHJ,CAoCAN,CAAA3gC,GAAA,CAA8B8hC,QAAQ,EACtC,EAY2CC,SAAA,GAAQ,CAARA,CAAQ,CACnD,CAMI,IAAAC,EAHkBA,GAGlBA,EAAe,CAAC,CAAAzJ,EAAhByJ,CAAmD,CAAApJ,GAAnDoJ,CAAoE,EAApEA,CAGAA,EAAA,EAAe,CAAAzJ,EAAf,CAAkD,EAGlDyJ,EAAA,EAAe,CAAA5H,GAAf,CAAqC,EAErC,OAAO4H,EAAP,GAAuB,CAd3B;AAiBwCC,QAAA,GAAQ,CAARA,CAAQ,CAAC/vB,CAAD,CAChD,CACI,IAAI8vB,EAAc1D,EAAA,CAAAA,CAAA,CAOlB,IAAG,CAAC,CAAA1F,GAAJ,CAAqB,CAArB,CACA,CACI,IAAI8F,EAAaxsB,CAAbwsB,CAAoB,CAAAxG,GAGxBwG,EAAA,EAAc,CAAA9F,GAAd,EAAgC,EAAhC,CAAqC,MAGrC8F,EAAA,GAAesD,CAGf,KAAIziC,EAAMm/B,CAANn/B,CAAmB,CAAAu4B,GAAnBv4B,CAAwC,CAClCm/B,EAANl/B,EAAmB,CAAAs4B,GAEvB,QAAO,CAAAc,GAAP,CAAwB,CAAxB,EAEI,KAAK,CAAL,CAGIr5B,CAAA,CAAMA,CAAN,EAAa,CAAb,CAAkB2S,CAAlB,EAA0B,EAA1B,CAA+B,CAC/B,MACJ,MAAK,CAAL,CAGI3S,CAAA,CAAMA,CAAN,EAAa,CAAb,CAAkB2S,CAAlB,EAA0B,EAA1B,CAA+B,CAC/B,MACJ,MAAK,CAAL,CAGI3S,CAAA,CAAMA,CAAN,EAAa,CAAb,CAAkB2S,CAAlB,EAA0B,EAA1B,CAA+B,CAfvC,CAoBA,MAAO3S,EAAP,CAAa,CAAAu4B,GAAb,CAAkCt4B,CAAlC,EAAyC,CAAA04B,GAAzC,EAA+D8J,CAA/D,CAjCJ,CAsCI,MAAO9vB,EAAP,EAAe8vB,CA/CvB,CAmD8CE,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACtD,CAGO,CAAArH,GAAH,CAAwB,GAAxB,GAEIqH,CAFJ,IAEmB,CAFnB,CAQAA,EAAA,CAAY5sC,IAAAioB,KAAA,CAAU2kB,CAAV,EADQ,CACR,EADa,CAAArH,GACb,CADkC,EAClC,GAQP,EAAAlC,GAAL,CAAsB,CAAtB,GAEIuJ,CAFJ,GAEkB,CAFlB,CAUK,EAAAvJ,GAAL,CAAsB,CAAtB,GAEIuJ,CAFJ,GAEkB,CAFlB,CAKA,OAAOA,EAlCX,CAyCAxB,CAAA/hC,GAAA,CAAoCwjC,QAAQ,CAACC,CAAD,CAAaC,CAAb,CAC5C,CACI,IAAA3K,EAAA,CAAgB0K,CAChB,KAAAzK,GAAA,CAAgB0K,CAEhB,KAAAxvC,EAAAsG,KAAA,CAAc,sBAAd,CAAsC,CAACipC,CAAD,CAAaC,CAAb,CAAtC,CAJJ,CAOA3B;CAAA9hC,GAAA,CAAyC0jC,QAAQ,CAAC5mC,CAAD,CAAQC,CAAR,CAAgB69B,CAAhB,CAAqB3B,CAArB,CAAoCD,CAApC,CACjD,CACwB,IAAAjT,GAAAvnB,GAOpB,EANI,IAAAunB,GAAA6U,GAMJ,GANuBA,CAMvB,EALI,IAAAzB,GAKJ,GAL0Br8B,CAK1B,EAJI,IAAAo8B,GAIJ,GAJ2Bn8B,CAI3B,EAHI,IAAAk8B,GAGJ,GAH2BA,CAG3B,EAFI,IAAAD,GAEJ,GAF4BA,CAE5B,GAEI,IAAAG,GAUA,CAVoBr8B,CAUpB,CATA,IAAAo8B,GASA,CATqBn8B,CASrB,CARA,IAAAk8B,GAQA,CARqBA,CAQrB,CAPA,IAAAD,GAOA,CAPsBA,CAOtB,CALA,IAAAjT,GAAA6U,GAKA,CALiBA,CAKjB,CAJA,IAAA7U,GAAAvnB,GAIA,CAJ0B,CAAA,CAI1B,CAHA,IAAAunB,GAAA2U,GAGA,CAHmB59B,CAGnB,CAFA,IAAAipB,GAAA4U,GAEA,CAFmB59B,CAEnB,CAAA,IAAA9I,EAAAsG,KAAA,CAAc,2BAAd,CAA2C,CAACuC,CAAD,CAAQC,CAAR,CAAgBk8B,CAAhB,CAA+BD,CAA/B,CAA+C4B,CAA/C,CAA3C,CAZJ,CARJ,CAwBsC+I;QAAA,GAAQ,CAARA,CAAQ,CAC9C,CACI,GAAGrJ,CAAA,CAAAA,GAAH,CAAA,CAKA,IAAIsJ,EAAwBltC,IAAAqM,IAAA,CAAS,CAAT,CAAa,CAAA+2B,GAAb,CACxB,CAAAD,GADwB,CAA5B,CAEIgK,EAAiBntC,IAAAqM,IAAA,CAAS,CAAT,CAAa,CAAA62B,EAAb,CACjB,CAAAD,EADiB,CAGrB,IAAIiK,CAAJ,EAA8BC,CAA9B,CAOA,GAAG,CAAA5J,GAAH,CACA,CACuB2J,CAAfzK,GAAwC,CAO5C,KAAIF,EAAgB,CAAAO,EAAhBP,EAAwC,CAGzC,EAAAsC,GAAH,CAAyB,EAAzB,GAEIpC,CACA,IADkB,CAClB,CAAAF,CAAA,IAAmB,CAHvB,CAtLJ,KAAI6K,EAsMiDC,CAtMhCvK,EAAjBsK,EAAyC,CAsMQC,EArMlDrK,EAAH,CAAsC,EAAtC,CAA4CoK,CAA5C,GAA+D,CAA/D,CAqMqDC,CApM7ChK,GADR,CACyB,EADzB,GAC+B+J,CAD/B,IACmD,CADnD,CAuMI,EAAA9jC,GAAA,CAAwBm5B,CAAxB,CAZoB6K,EAAA9K,CAAA8K,CAAA9K,CAA6B2K,CAA7B3K,CAYpB,CAAqD,CAArD,CACID,CADJ,CAFqBviC,IAAAioB,KAAAqa,CAFCP,EAAAwL,CAA2B,CAA3BA,CAEDjL,CAnMlB8K,CAmMkB9K,CAErB,CAGA2H,GAAA,CAAAA,CAAA,CACAsB,GAAA,CAAAA,CAAA,CAjCJ,CADA,IAsCO,EAAAhG,GASH,CATwB,GASxB,GALI4H,CAKJ,IALwB,CAKxB,EAFI9mC,CAEJ,CAFa8mC,CAEb,EAF+B,CAE/B,EAFoC,CAAA5H,GAEpC,CAFyD,EAEzD,GAFkE,CAElE,CAAG2H,CAAH,EAA4B7mC,CAA5B,EAEI,CAAAgD,GAAA,CAAmB6jC,CAAnB,CAA0C7mC,CAA1C,CAlER,CADJ;AAwEoCmnC,QAAA,GAAQ,CAARA,CAAQ,CAC5C,CACQ,CAAAjK,GAAJ,EAEI8I,EAAA,CAAAA,CAAA,CAGJ,IAAG,CAAAzI,GAAH,CAEI,CAAAz2B,GAAA,CAAc,EAFlB,KAMA,IAAI,CAAAo1B,GAAJ,EAA2B,CAAAE,GAA3B,CAMA,GAAG,CAAC,CAAAgC,GAAJ,EAA4B,CAAAO,GAA5B,CAAiD,EAAjD,CAKI,CAAA73B,GACA,CADc,EACd,CAAA,CAAA5P,EAAAsG,KAAA,CAAc,cAAd,CANJ,KAAA,CAUA,IAAI4pC,EAAa,CAAA/K,GAAjB,CAEIgL,EAAgB,CAAA/I,GACjB,EAAAE,GAAH,CAAyB,EAAzB,GAEI6I,CAFJ,IAEuB,CAFvB,CAKA,KAAIC,EAAe,CAAA5K,GAAf4K,EAAuC,CAAvCA,CAA2C,CAA/C,CACIC,EAAmB3C,EAAA,CAAAA,CAAA,CAAuBwC,CAAvB,CAAoCE,CAApC,CAEnBE,EAAAA,CAAmBD,CAAnBC,CAAsC,CAAAtL,GAAtCsL,CAA2D,CAC/D,KAAIC,EAAmBF,CAAnBE,CAAsC,CAAAvL,GAAtCuL,CAA2DJ,CAE3DK,EAAAA,CAAmBT,EAAA,CAAAA,CAAA,CAA6B,CAA7B,CAAiC,CAAAzK,EAAjC,CACvBkL,EAAA,CAAmB/tC,IAAAqM,IAAA,CAAS0hC,CAAT,CAA2B,CAAAvL,GAA3B,CAEnB,KAAIwL,EAAsB,CAAAxL,GAAtBwL,CAA2CD,CAE/C,EAAA5gC,GAAA,CAAc,EAENyU,EAAAA,CAAI,CAACksB,CAAb,KAAI,IAA2B1nB,EAAI,CAAnC,CAAsCxE,CAAtC,CAA0C,CAAA6gB,GAA1C,CAA6D7gB,CAAA,EAAK,CAAA2gB,GAAL,CAAyBnc,CAAA,EAAtF,CAEI,CAAAjZ,GAAAvI,KAAA,CAAiB,CACb2I,GAAUqU,CADG,CAEbnU,GAAU,CAFG,CAGbD,GAAU,CAHG,CAIbE,GAAUmgC,CAAVngC,CAA6B0Y,CAJhB,CAKb1a,GAAc,CAAA62B,GALD,CAMb52B,GAAeoiC,CANF,CAAjB,CAUAE,EAAAA,CAAkB,CACjB,EAAApJ,GAAL,CAA2B,EAA3B,GAGIoJ,CAHJ,CAGsBhD,EAAA,CAAAA,CAAA,CAAuB0C,CAAvB,CAHtB,CAG6DD,CAH7D,CAMQ9rB,EApEZ,CAoEgB,CAACqsB,CAAb,KAA8B7nB,CAA9B,CAAkC,CAAlC,CAAqCxE,CAArC,CAAyC,CAAA6gB,GAAzC,CAA4D7gB,CAAA,EAAK,CAAA2gB,GAAL,CAAyBnc,CAAA,EAArF,CAEI,CAAAjZ,GAAAvI,KAAA,CAAiB,CACb2I,GAAUqU,CADG,CAEbnU,GAAUsgC,CAFG,CAGbvgC,GAAU,CAHG,CAIbE,GAAU0Y,CAJG,CAKb1a,GAAc,CAAA62B,GALD,CAMb52B,GAAeqiC,CANF,CAAjB,CApDJ,CAlBJ;AAiF8CE,QAAA,GAAQ,CAARA,CAAQ,CACtD,CAEI,CAAArI,EAAA,EAAuB,CACpB,EAAAnD,GAAH,GAAkC,CAAAC,GAAlC,GAEI,CAAAD,GACA,CAD6B,CAAAC,GAC7B,CAAA4I,EAAA,CAAAA,CAAA,CAHJ,CAHJ,CAUAH,CAAAjiC,GAAA,CAA6CglC,QAAQ,EACrD,CACI,IAAA5wC,EAAAsG,KAAA,CAAc,+BAAd,CAA+C,CAAC,IAAAq+B,GAAD,CAA6B,IAAAC,GAA7B,CAA/C,CADJ,CAUAiJ;CAAArF,GAAA,CAAoCqI,QAAQ,CAACh9B,CAAD,CAC5C,CACI,GAAwC,EAAxC,GAAG,IAAAozB,EAAH,CAGI,IAAAA,EAGA,CAHkCpzB,CAGlC,CAH0C,EAG1C,CAAG,IAAAqzB,GAAH,IAA4BrzB,CAA5B,CAAoC,EAApC,IAII,IAAAqzB,GACA,CADsBrzB,CACtB,CAD8B,EAC9B,CAAAm6B,EAAA,CAAAA,IAAA,CALJ,CANJ,KAeA,CACI,GAAqC,EAArC,CAAG,IAAA/G,EAAH,CAGI,IAAAD,GAAA,CAAa,IAAAC,EAAb,CAEA,CAFgDpzB,CAEhD,CAAK,IAAAyzB,GAAL,CAA2B,EAA3B,EAEI6G,EAAA,CAAAA,IAAA,CAPR,KAWA,QAAO,IAAAlH,EAAP,EAEI,KAAK,EAAL,CAEI,GAAG,IAAAK,GAAH,GAA2BzzB,CAA3B,CACA,CACI,IAAIi9B,EAAgB,IAAAxJ,GACpB,KAAAA,GAAA,CAAsBzzB,CAEtB,KAAItJ,EAA+B,CAA/BA,EAAgBsJ,CAAhBtJ,CAAwB,CAAxBA,CACA,KAAA87B,GAAJ,EAAyB,IAAAL,GAAzB,GAAiDz7B,CAAjD,GAEI,IAAAy7B,GACA,CADsBz7B,CACtB,CAAA,IAAAvK,EAAAsG,KAAA,CAAc,iBAAd,CAAiC,IAAA0/B,GAAjC,CAHJ,CAMA,EAAI8K,CAAJ,CAAoBj9B,CAApB,EAA6B,EAA7B,EAGIq6B,EAAA,CAAAA,IAAA,CAGJD,GAAA,CAAAA,IAAA,CAGAE,GAAA,CAAAA,IAAA,CApBJ,CAsBA,KACJ,MAAK,EAAL,CAEO,IAAA9G,GAAH,GAA+BxzB,CAA/B,GAEI,IAAAwzB,GAGA,CAH0BxzB,CAG1B,CAAAs6B,EAAA,CAAAA,IAAA,CALJ,CAOA,MACJ,MAAK,EAAL,CAEO,IAAA/G,GAAH,GAA+BvzB,CAA/B,GAEI,IAAAuzB,GACA,CAD0BvzB,CAC1B,CADkC,EAClC,CAAAm6B,EAAA,CAAAA,IAAA,CAHJ,CAKA,MACJ,MAAK,EAAL,CAEO,IAAA7G,GAAH,GAAyBtzB,CAAzB,GAEI,IAAAszB,GAGA,CAHoBtzB,CAGpB,CAAAs6B,EAAA,CAAAA,IAAA,CALJ,CAhDR,CA4DA,IAAAlH,EAAA,CAAmC,EAxEvC,CAhBJ,CA4FA4G;CAAApF,GAAA,CAAmCsI,QAAQ,EAC3C,CAGI,MADa,KAAA9J,EACb,CAD+C,IAAAC,GAFnD,CAMA2G,EAAAnF,GAAA,CAAqCsI,QAAQ,EAC7C,CAEI,MAAO,KAAAvI,GAAA,EAAP,CAA6B,GAA7B,CAAoC,IAAAE,GAAA,EAApC,EAA2D,CAA3D,CAA+D,KAFnE,CAKAkF,EAAAlF,GAAA,CAAmCsI,QAAQ,EAC3C,CACI,GAAqC,EAArC,CAAG,IAAAhK,EAAH,CAII,MAAO,KAAAD,GAAA,CAAa,IAAAC,EAAb,CAGX,QAAO,IAAAA,EAAP,EAEI,KAAK,EAAL,CAEI,MAAO,KAAAK,GACX,MAAK,EAAL,CAEI,MAAO,KAAAD,GACX,MAAK,EAAL,CAEI,MAAO,KAAAD,GACX,MAAK,EAAL,CAEI,MAAO,KAAAD,GAbf,CAiBA,MAAQ,EAzBZ,CA6BA0G,EAAAjF,GAAA,CAAoCsI,QAAQ,CAACr9B,CAAD,CAC5C,CAEI,IAAA00B,GAAA,CAAqC10B,CAFzC,CAKAg6B,EAAAhF,GAAA,CAAoCsI,QAAQ,CAACt9B,CAAD,CAC5C,CACI,IAAA0zB,GAAA,CAAuB1zB,CAD3B,CAIAg6B,EAAA9E,GAAA,CAAmCqI,QAAQ,EAC3C,CACI,MAAO,KAAA7J,GADX,CAUAsG,EAAA/E,GAAA,CAAoCuI,QAAQ,CAACx9B,CAAD,CAC5C,CACI,OAAO,IAAA0zB,GAAP,EAEI,KAAK,CAAL,CAEI,IAAI+J,EAAyB,IAAA7J,GAC7B,KAAAA,GAAA,CAAqB5zB,CACrB,EAAIy9B,CAAJ,CAA6Bz9B,CAA7B,EAAsC,EAAtC,EAGIm6B,EAAA,CAAAA,IAAA,CAEJ,MACJ,MAAK,CAAL,CAEI,IAAAxG,GAAA,CAAsB3zB,CACtB,MACJ,MAAK,CAAL,CAEI,IAAA6zB,GAAA,CAA6B7zB,CAlBrC,CADJ,CA0BAg6B;CAAA7E,GAAA,CAAmCuI,QAAQ,EAC3C,CAGI,OAAO,IAAAhK,GAAP,EAEI,KAAK,CAAL,CACI,MAAO,KAAAE,GACX,MAAK,CAAL,CACI,MAAO,KAAAD,GACX,MAAK,CAAL,CACI,MAAO,KAAAE,GACX,MAAK,CAAL,CACI,MAAO,GATf,CAYA,MAAO,EAfX,CAkBAmG,EAAAxE,GAAA,CAAoCmI,QAAQ,CAACrvC,CAAD,CAC5C,CAGI,IAAA0kC,GAAA,CAAoC,CAApC,CAA4B1kC,CAC5B,KAAAykC,GAAA,EAAkB,CAJtB,CAOAiH,EAAAvE,GAAA,CAAmCmI,QAAQ,EAC3C,CAEI,MAAO,KAAA7K,GAFX,CAKAiH,EAAAtE,GAAA,CAAoCmI,QAAQ,CAACvvC,CAAD,CAC5C,CACI,IAAA2kC,GAAA,CAAqC,CAArC,CAA6B3kC,CAC7B,KAAAykC,GAAA,EAAkB,CAFtB,CAKAiH,EAAArE,GAAA,CAAmCmI,QAAQ,EAC3C,CACI,MAAO,KAAA7K,GAAP,CAAoC,CAApC,CAAwC,CAD5C,CAUA+G,EAAApE,GAAA,CAAoCmI,QAAQ,CAACC,CAAD,CAC5C,CAAA,IACQ1vC,EAAQ,IAAA2kC,GAAR3kC,CAAqC,CAArCA,CAAyC,CADjD,CAEQ8D,EAAS,IAAA6gC,GAAT7gC,CAAsC,CAF9C,CAGQqJ,EAAQ,IAAA22B,GAAA,CAAoB9jC,CAApB,CAEZ0vC,EAAA,CAAmC,GAAnC,EAAcA,CAAd,CAA2B,EAA3B,EAAyC,EAAzC,CAA8C,CAI1CviC,EAAA,CAFU,CAAd,GAAGrJ,CAAH,CAEYqJ,CAFZ,CAEoB,SAFpB,CAEgCuiC,CAFhC,EAE8C,EAF9C,CAImB,CAAd,GAAG5rC,CAAH,CAEOqJ,CAFP,CAEe,MAFf,CAEyBuiC,CAFzB,EAEuC,CAFvC,CAMOviC,CANP,CAMe,IANf,CAMuBuiC,CAIzB,KAAA5L,GAAA,CAAoB9jC,CAApB,CAAH,GAAkCmN,CAAlC,GAEI,IAAA22B,GAAA,CAAoB9jC,CAApB,CACA,CAD6BmN,CAC7B,CAAA6+B,EAAA,CAAAA,IAAA,CAHJ,CAKA,KAAArH,GAAA,EA1BJ,CA6BA+G;CAAAnE,GAAA,CAAmCoI,QAAQ,EAC3C,CAII,IAAI7rC,EAAS,IAAA4gC,GAAT5gC,CAAqC,CAAzC,CACIqJ,EAAQ,IAAA22B,GAAA,CAFA,IAAAY,GAEA,CAF4B,CAE5B,CAFgC,CAEhC,CAEZ,KAAAA,GAAA,EACA,QAAQv3B,CAAR,EAAgC,CAAhC,EAAkB,CAAlB,CAAsBrJ,CAAtB,EAAoC,GAApC,EAA4C,GAA5C,CAAkD,EAAlD,CAAuD,CAR3D,CAWA4nC,EAAAlE,GAAA,CAAmCoI,QAAQ,EAC3C,CAEI,MAAO,KAAAxJ,GAFX,CAKAsF,EAAA5E,GAAA,CAAoC+I,QAAQ,CAACn+B,CAAD,CAC5C,CACI,IAAA8zB,GAAA,CAAsB9zB,CAD1B,CAIAg6B,EAAA1E,GAAA,CAAmC8I,QAAQ,EAC3C,CACI,MAAO,KAAAtK,GADX,CAUAkG,EAAA3E,GAAA,CAAoCgJ,QAAQ,CAACr+B,CAAD,CAC5C,CACI,OAAO,IAAA8zB,GAAP,EAEI,KAAK,CAAL,CACI,IAAAU,GAAA,CAAuBx0B,CAEvB,MACJ,MAAK,CAAL,CACI,IAAAu0B,GAAA,CAA8Bv0B,CAE9B,MACJ,MAAK,CAAL,CACI,IAAAq0B,GAAA,CAAqBr0B,CAErB,MACJ,MAAK,CAAL,CACI,IAAA+zB,GAAA,CAAyB/zB,CAEzB,MACJ,MAAK,CAAL,CACI,IAAAi0B,GAAA,CAAkBj0B,CAElB,MACJ,MAAK,CAAL,CACI,IAAIs+B,EAAuB,IAAAtK,GAC3B,KAAAA,GAAA,CAAmBh0B,CAEnB,EAAIs+B,CAAJ,CAA2Bt+B,CAA3B,EAAoC,EAApC,EAGIq6B,EAAA,CAAAA,IAAA,CAEJ,MACJ,MAAK,CAAL,CAEO,IAAA/F,GAAH,GAA4Ct0B,CAA5C,GAEI,IAAAs0B,GACA,CADuCt0B,CACvC,CAAAo6B,EAAA,CAAAA,IAAA,CAHJ,CAKA,MACJ,MAAK,CAAL,CACI,IAAAhG,GAAA,CAAuBp0B,CAEvB,MACJ,MAAK,CAAL,CACI,IAAAk0B,GAAA,CAAqBl0B,CA7C7B,CADJ,CAsDAg6B;CAAAzE,GAAA,CAAmCgJ,QAAQ,EAC3C,CAGI,OAAO,IAAAzK,GAAP,EAEI,KAAK,CAAL,CACI,MAAO,KAAAU,GACX,MAAK,CAAL,CACI,MAAO,KAAAD,GACX,MAAK,CAAL,CACI,MAAO,KAAAF,GACX,MAAK,CAAL,CACI,MAAO,KAAAN,GACX,MAAK,CAAL,CACI,MAAO,KAAAE,GACX,MAAK,CAAL,CACI,MAAO,KAAAD,GACX,MAAK,CAAL,CACI,MAAO,KAAAM,GACX,MAAK,CAAL,CACI,MAAO,KAAAF,GACX,MAAK,CAAL,CACI,MAAO,KAAAF,GAnBf,CAsBA,MAAO,EAzBX,CA4BA8F,EAAAjE,GAAA,CAAoCyI,QAAQ,CAAC9mC,CAAD,CAC5C,CAEI,IAAAw7B,EAAA,CAAkBx7B,CAFtB,CAKAsiC,EAAA/D,GAAA,CAAmCwI,QAAQ,EAC3C,CAEI,MAAO,KAAAvL,EAFX,CAWA8G;CAAAhE,GAAA,CAAoC0I,QAAQ,CAAC1+B,CAAD,CAC5C,CACI,OAAO,IAAAkzB,EAAP,EAEI,KAAK,CAAL,CAEO,IAAAlB,GAAH,GAA0ChyB,CAA1C,GAEI,IAAAgyB,GACA,CADqChyB,CACrC,CAAAo6B,EAAA,CAAAA,IAAA,CAHJ,CAKA,MACJ,MAAK,CAAL,CACO,IAAArI,GAAH,GAAmC/xB,CAAnC,GAEI,IAAA+xB,GACA,CAD8B/xB,CAC9B,CAAAo6B,EAAA,CAAAA,IAAA,CAHJ,CAKA,MACJ,MAAK,CAAL,CAEI,IAAIuE,EAAuC,IAAA7M,EAC3C,KAAAA,EAAA,EAAoC,GACpC,KAAAA,EAAA,CAAA,IAAAA,EAAA,CAAqC9xB,CAArC,EAA8C,CAA9C,CAAkD,GAAlD,CAA4DA,CAA5D,EAAqE,CAArE,CAAyE,GACtE2+B,EAAH,EAA2C,IAAA7M,EAA3C,EAEIsI,EAAA,CAAAA,IAAA,CAEJ,KAAA3I,EAAA,CAAqB,IAAAA,EAArB,CAAyC,GAAzC,CAAmDzxB,CAAnD,EAA4D,CAA5D,CAAgE,GAE5D4+B,EAAAA,CAAgC,IAAA/M,EACpC,KAAAA,EAAA,CAA6B,IAAAA,EAA7B,CAAyD,GAAzD,CAAmE7xB,CAAnE,EAA4E,CAA5E,CAAgF,GAC7E4+B,EAAH,GAAqC,IAAA/M,EAArC,EAEIuI,EAAA,CAAAA,IAAA,CAEJD,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,CAAL,CAEI,IAAAxI,GAAA,CAAuB3xB,CACvBm6B,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,CAAL,CAEI,IAAAhG,GAAA,CAAqBn0B,CACrB,KAAAyxB,EAAA,CAAqB,IAAAA,EAArB,CAAyC,GAAzC,CAAmDzxB,CAAnD,EAA4D,CAA5D,CAAgE,GAE5D4+B,EAAJ,CAAoC,IAAA/M,EACpC,KAAAA,EAAA,CAA6B,IAAAA,EAA7B,CAAyD,GAAzD,CAAmE7xB,CAAnE,EAA4E,CAA5E,CAAgF,GAC7E4+B,EAAH,GAAqC,IAAA/M,EAArC,EAEIuI,EAAA,CAAAA,IAAA,CAGJD,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,EAAL,CAEI,IAAArJ,GAAA,CAA6B9wB,CAC7B,KAAAjI,GAAA,EACA,MACJ,MAAK,EAAL,CAEI,IAAAg5B,GAAA;AAA2B/wB,CAC3B,KAAAjI,GAAA,EACA,MACJ,MAAK,EAAL,CACI,CAAI,IAAAw5B,GAAJ,EAA0B,CAA1B,CAA8B,GAA9B,IAAwCvxB,CAAxC,GAEI,IAAAuxB,GAEA,CAFqB,IAAAA,GAErB,CAF0C,GAE1C,CAFiDvxB,CAEjD,EAF0D,CAE1D,CADAm6B,EAAA,CAAAA,IAAA,CACA,CAAG,CAAC,IAAAlI,GAAJ,CAAsB,CAAtB,EAIIoI,EAAA,CAAAA,IAAA,CARR,CAYA,MACJ,MAAK,EAAL,CACI,CAAI,IAAA9I,GAAJ,CAAyB,GAAzB,IAAmCvxB,CAAnC,GAEI,IAAAuxB,GAEA,CAFqB,IAAAA,GAErB,CAF0C,KAE1C,CAFmDvxB,CAEnD,CADAm6B,EAAA,CAAAA,IAAA,CACA,CAAG,CAAC,IAAAlI,GAAJ,CAAsB,CAAtB,EAIIoI,EAAA,CAAAA,IAAA,CARR,CAYA,MACJ,MAAK,EAAL,CAEI,IAAAxJ,EAAA,CAAsB,IAAAA,EAAtB,CAA4C,GAA5C,CAAmD7wB,CAAnD,EAA4D,CAC5D,KAAAlI,GAAA,EACA,MACJ,MAAK,EAAL,CAEI,IAAA+4B,EAAA,CAAsB,IAAAA,EAAtB,CAA4C,KAA5C,CAAqD7wB,CACrD,KAAAlI,GAAA,EACA,MACJ,MAAK,EAAL,CAEI,CAAI,IAAAg6B,EAAJ,CAAuC,GAAvC,IAAiD9xB,CAAjD,GAEI,IAAA8xB,EACA,CADoC,IAAAA,EACpC,CADuE,GACvE,CADgF9xB,CAChF,CAAAo6B,EAAA,CAAAA,IAAA,CAHJ,CAKA,MACJ,MAAK,EAAL,CAEO,IAAA1I,EAAH,GAA4B1xB,CAA5B,GAEI,IAAA0xB,EAGA,CAHuB1xB,CAGvB,CAFAo6B,EAAA,CAAAA,IAAA,CAEA,CAAG,CAAC,IAAAnI,GAAJ,CAAqB,CAArB,EAIIoI,EAAA,CAAAA,IAAA,CATR,CAYA,MACJ,MAAK,EAAL,CAEO,IAAAzI,EAAH,GAAwC5xB,CAAxC,GAEQ6+B,CAKJ,CALyB,IAAAjN,EAKzB,CAHA,IAAAA,EAGA,CAHmC5xB,CAGnC,CAFAo6B,EAAA,CAAAA,IAAA,CAEA,EAAIyE,CAAJ,CAAyB7+B,CAAzB,EAAkC,EAAlC,EAGIq6B,EAAA,CAAAA,IAAA,CAVR,CAaA,MACJ,MAAK,EAAL,CAEI,CAAI,IAAAxI,EAAJ;AAAgC,GAAhC,IAA0C7xB,CAA1C,GAEI,IAAA6xB,EACA,CAD6B,IAAAA,EAC7B,CADyD,GACzD,CADkE7xB,CAClE,CAAAo6B,EAAA,CAAAA,IAAA,CAHJ,CAKA,MACJ,MAAK,EAAL,CAEO,IAAAnI,GAAH,GAAsBjyB,CAAtB,GAEQi9B,CAKJ,CALoB,IAAAhL,GAKpB,CAHA,IAAAA,GAGA,CAHiBjyB,CAGjB,CAFAo6B,EAAA,CAAAA,IAAA,CAEA,EAAI6C,CAAJ,CAAoBj9B,CAApB,EAA6B,EAA7B,EAIIq6B,EAAA,CAAAA,IAAA,CAXR,CAcA,MACJ,MAAK,EAAL,CAEI,IAAA5I,EAAA,CAAqB,IAAAA,EAArB,CAAyC,GAAzC,CAAkDzxB,CAClDm6B,GAAA,CAAAA,IAAA,CACA,MACJ,SACO,IAAAjH,EAAH,CAAqB,IAAA1B,GAAAxiC,OAArB,GAEI,IAAAwiC,GAAA,CAAU,IAAA0B,EAAV,CAFJ,CAEiClzB,CAFjC,CA7KR,CADJ,CAuLAg6B;CAAA9D,GAAA,CAAmC4I,QAAQ,EAC3C,CAGI,OAAO,IAAA5L,EAAP,EAEI,KAAK,CAAL,CACI,MAAO,KAAAlB,GACX,MAAK,CAAL,CACI,MAAO,KAAAD,GACX,MAAK,CAAL,CACI,MAAQ,KAAAD,EAAR,EAA4C,CAA5C,CAAgD,CAAhD,CACK,IAAAD,EADL,EACkC,CADlC,CACsC,CADtC,CAEK,IAAAJ,EAFL,EAE0B,CAF1B,CAE8B,EAF9B,CAGK,IAAAK,EAHL,EAGyC,CAHzC,CAG6C,EACjD,MAAK,CAAL,CACI,MAAO,KAAAH,GACX,MAAK,CAAL,CACI,MAAO,KAAAwC,GACX,MAAK,EAAL,CACI,MAAO,KAAArD,GACX,MAAK,EAAL,CACI,MAAO,KAAAC,GACX,MAAK,EAAL,CACI,MAAO,KAAAQ,GAAP,CAA4B,GAChC,MAAK,EAAL,CACI,MAAO,KAAAA,GAAP,EAA6B,CACjC,MAAK,EAAL,CACI,MAAO,KAAAV,EAAP,EAA8B,CAClC,MAAK,EAAL,CACI,MAAO,KAAAA,EAAP,CAA6B,GACjC,MAAK,EAAL,CACI,MAAO,KAAAiB,EAAP,CAA0C,GAC9C,MAAK,EAAL,CACI,MAAO,KAAAJ,EACX,MAAK,EAAL,CACI,MAAO,KAAAE,EACX,MAAK,EAAL,CACI,MAAO,KAAAC,EAAP,CAAmC,GACvC,MAAK,EAAL,CACI,MAAO,KAAAI,GACX,MAAK,EAAL,CACI,MAAO,KAAAR,EAAP,CAA2B,GAtCnC,CAyCA,MAAG,KAAAyB,EAAH,CAAqB,IAAA1B,GAAAxiC,OAArB;AAEW,IAAAwiC,GAAA,CAAU,IAAA0B,EAAV,CAFX,CAMW,CAlDf,CAsDA8G,EAAA7D,GAAA,CAAmC4I,QAAQ,EAC3C,CAGI,IAAI/+B,EAAQ,IAAAy0B,EAIR,KAAAtC,GAAJ,EAYI,IAAAsC,EACA,EADuB,CACvB,CAAA,IAAAA,EAAA,EAAuB,CAb3B,GAIO,IAAAA,EAIH,CAJyB,CAIzB,GAFI,IAAAA,EAEJ,EAF2B,CAE3B,EAAA,IAAAA,EAAA,EAAuB,CAR3B,CAeA,KAAArB,EAAA,CAAmC,EACnC,OAAOpzB,EAvBX,CAiCAg6B,EAAA1D,GAAA,CAAoC0I,QAAQ,CAACh/B,CAAD,CAC5C,CACI,IAAAo2B,GAAA,CAAmBp2B,CADvB,CAIAg6B;CAAAzD,GAAA,CAAoC0I,QAAQ,CAACj/B,CAAD,CAC5C,CAGI,OAAO,IAAAo2B,GAAP,EAEI,KAAK,CAAL,CACI,IAAA9D,GAAA,CAAkBtyB,CA/9Dfk/B,KAg+DH,CAAG,IAAA5M,GAAH,GAGI,IAAAA,GAHJ,CAh+DG4M,IAg+DH,CAKA,MACJ,MAAK,CAAL,CACI,IAAA7M,EAAA,CAAmBryB,CAp+DhBm/B,KAq+DH,CAAG,IAAA9M,EAAH,GAGI,IAAAA,EAHJ,CAr+DG8M,IAq+DH,CAKA,MACJ,MAAK,CAAL,CACI,IAAA1M,GAAA,CAAgBzyB,CAChB,MACJ,MAAK,CAAL,CAEI,IAAAwyB,GAAA,CAAoC,CAApC,IAAqBxyB,CAArB,CAA6B,CAA7B,CACA,KAAAq2B,GAAA,CAA0Br2B,CAC1B,MACJ,MAAK,CAAL,CACI,IAAA2yB,GAAA,CAAwB3yB,CAAxB,EAAiC,EACjC,MACJ,MAAK,CAAL,CAEI,IAAA0yB,GAEA,CAF2B0M,IA3C5B9M,GA6CC,EA/CqB,EAAlB+M,GA6CwBD,IA7CxB3M,GAAA4M,CAAuB,EAAvBA,CA6CwBD,IA7CI3M,GA+C/B,EA7CwB,CA6CxB,CAFmBzyB,CAEnB,CAAAs6B,EAAA,CAAAA,IAAA,CAjCR,CAsCG9H,CAAA,IAAAA,GAAH,EAA0B,IAAAF,GAA1B,EAA8C,IAAAD,EAA9C,GAGI,IAAAG,GAHJ,CAGwB,CAAA,CAHxB,CAeG,KAAAA,GAAH,EAA6C,CAA7C,GAAwB,IAAA4D,GAAxB,GAEI,IAAAl+B,GAAA,CAAwB,IAAAo6B,GAAxB,CAAyC,IAAAD,EAAzC,CAA2D,IAAAI,GAA3D,CAA0E,IAAAH,GAA1E,CAA2F,IAAAD,EAA3F,CAGA,CAFA,IAAAlmC,EAAAsG,KAAA,CAAc,iBAAd,CAAiC,CAAA,CAAjC,CAEA,CAAA,IAAAy/B,GAAA,CADA,IAAAC,GACA,CADsB,CAAA,CAJ1B,CAQI,KAAAK,GAAJ,GAEI,IAAAG,GAFJ,CAE4B,CAF5B,CAKAwH,GAAA,CAAAA,IAAA,CArEJ,CAwEAH;CAAAxD,GAAA,CAAmC8I,QAAQ,EAC3C,CAEI,MAAOC,GAAA,CAAAA,IAAA,CAAwB,IAAAnJ,GAAxB,CAFX,CAKyCoJ,SAAA,GAAQ,CAARA,CAAQ,CAAClrC,CAAD,CACjD,CACI,OAAOA,CAAP,EAEI,KAAK,CAAL,CAEI,MAAO,MACX,MAAK,CAAL,CACI,MAAO,EAAA+hC,GAAA,CAA0B,CAA1B,CA/iEJ6I,IA+iEI,CAAyC,CAAA5M,GACpD,MAAK,CAAL,CACI,MAAO,EAAA+D,GAAA,CAA0B,CAA1B,CA9iEJ8I,IA8iEI,CAAyC,CAAA9M,EACpD,MAAK,CAAL,CACI,MAAO,EAAAgE,GAAA,CAA0B,CAA1B,CA7iELoJ,EA6iEK,CAAwC,CAAAhN,GACnD,MAAK,CAAL,CACI,MAAO,EAAA4D,GACX,MAAK,CAAL,CACI,MAAO,EAAA1D,GAAP,GAAiC,EACrC,MAAK,CAAL,CAEI,MAAG,EAAAtB,GAAH,CAEW,CAAAA,GAFX,CAMW,CAIf,MAAK,CAAL,CAEI,MAAO,EACX,MAAK,EAAL,CAEI,MAAO,EAAArzB,GAAP,CA5kEQ+6B,KA4kER,CAA8C,CAhCtD,CAmCA,MAAO,IApCX,C,CC5iEA2G,QAASA,GAAG,CAACp7B,CAAD,CAAMnY,CAAN,CACZ,CAEI,IAAAmY,EAAA,CAAWA,CAGX,KAAAnY,EAAA,CAAWA,CAMX,KAAAwzC,GAAA,CAHA,IAAAC,GAGA,CAH2B,CAAA,CAM3B,KAAAC,GAAA,CAAkB,CAAA,CAOlB,KAAAC,GAAA,CAFA,IAAAC,GAEA,CAJA,IAAAC,GAIA,CAJqB,CAOrB,KAAAC,GAAA,CAAqB,CAAA,CAqBrB,KAAAC,EAAA,CAHA,IAAAC,EAGA,CANA,IAAAC,EAMA,CATA,IAAAC,EASA,CAZA,IAAAC,EAYA,CAfA,IAAAC,EAeA,CAlBA,IAAAC,GAkBA,CAlB8B,CAAA,CAuB9B,KAAAC,GAAA,CAAkB,IAAIxvB,EAAJ,CAAc,IAAd,CAElB,KAAAyvB,EAAA,CAAwB,CAGxB,KAAAC,GAAA,CAAmB,GAGnB,KAAAC,GAAA,CAAkB,CAGlB,KAAAC,EAAA,CAAgB,CAAA,CAQhB,KAAAC,EAAA,CAAoB,IAAI7vB,EAAJ,CAAc,IAAd,CASpB,KAAA8vB,EAAA,CAHA,IAAAC,EAGA,CAH0B,CAAA,CAK1B,KAAA70C,EAAAuL,SAAA,CAAkB,eAAlB,CAAmC,QAAQ,CAACupC,CAAD,CAC3C,CACIC,IAuJDV,GAAH,GAvJIU,IA0JAT,GAAAjtC,KAAA,CA1JmBytC,CA0JnB,CACA,CA3JAC,IA2JArc,GAAA,EAJJ,CAxJA,CADA,CAGG,IAHH,CAKA,KAAA14B,EAAAuL,SAAA,CAAkB,aAAlB,CAAiC,QAAQ,CAACxH,CAAD,CACzC,CACIixC,IAiMAtB,GAAJ,EAjMIsB,IAiMoBxB,GAAxB,GAjMIwB,IAsMJrB,GAEA,CAxM0B5vC,CAAA+V,CAAK,CAALA,CAwM1B,CAxM4C/V,CAAAkxC,CAAK,CAALA,CAwM5C,EAFoC,CAEpC,CAxMmClxC,CAAAmxC,CAAK,CAALA,CAwMnC,EAFkD,CAElD,CAxMIF,IAwMDvB,GAAH,EAEI0B,EAAA,CA1MAH,IA0MA,CAAuB,CAAvB,CAA0B,CAA1B,CATJ,CAlMA,CADA,CAGG,IAHH,CAKA,KAAAh1C,EAAAuL,SAAA,CAAkB,aAAlB,CAAiC,QAAQ,CAACxH,CAAD,CACzC,CACmC,IAAA;AAAAA,CAAA,CAAK,CAAL,CAuJnC,IAvJIqxC,IAuJA1B,GAAJ,EAvJI0B,IAuJoB5B,GAAxB,CAAA,CAOA,IAAI6B,EA9JAD,IA8JSX,GAATY,CA9JAD,IA8J2BZ,GAA3Ba,CAA8C,EA9J9CD,KAgKJvB,GAAA,EAhK0B9vC,CAAAuxC,CAAK,CAALA,CAgK1B,CAAgCD,CAhK5BD,KAiKJxB,GAAA,EAAsB2B,CAAtB,CAAgCF,CAjK5BD,KAmKD3B,GAAH,GAEQ+B,CAGD,CAxKHJ,IAqKevB,GAGZ,CAHiC,CAGjC,CAFC4B,CAED,CAxKHL,IAsKexB,GAEZ,CAFiC,CAEjC,CAAA4B,CAAA,EAAYC,CALnB,IAnKIL,IAkLIvB,GAGA,EAHsB2B,CAGtB,CArLJJ,IAmLIxB,GAEA,EAFsB6B,CAEtB,CAAAN,EAAA,CArLJC,IAqLI,CAAuBI,CAAvB,CAAiCC,CAAjC,CAlBR,CAZA,CAxJA,CADA,CAGG,IAHH,CAKA,KAAAz1C,EAAAuL,SAAA,CAAkB,aAAlB,CAAiC,QAAQ,EACzC,EADA,CAIG,IAJH,CAMA,KAAAmqC,EAAA,CAAwB,CAExB,KAAAC,GAAA,CADA,IAAAC,GACA,CAD4B,CAAA,CAG5Bv3B,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,EAArB,CAA2B,IAA3B,CAAiC,IAAA+oB,GAAjC,CACAx3B,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA2B,IAA3B,CAAiC,IAAAgpB,GAAjC,CAEAh3B,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,EAAtB,CAA4B,IAA5B,CAAkC,IAAAipB,GAAlC,CACAj3B,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA4B,IAA5B,CAAkC,IAAAkpB,GAAlC,CA7GJ,CAgHA,CAAA,CAAA,EAAA,UAAAC;CAAAl1C,GAAA,CAA0Bm1C,QAAQ,EAClC,CACI,IAAIj1C,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwyC,GACXxyC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAuyC,GACXvyC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAyyC,GACXzyC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4yC,GACX5yC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2yC,GACX3yC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA0yC,GACX1yC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA6yC,GACX7yC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAozC,GACXpzC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAmzC,EACXnzC,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAkzC,EACXlzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAizC,EACZjzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAgzC,EACZhzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+yC,EACZ/yC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8yC,EAEZ9yC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAszC,EACZtzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAuzC,GACZvzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwzC,GACZxzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAyzC,EAEZzzC,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAy0C,EACZz0C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA20C,GACZ30C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA00C,GAEZ,OAAO10C,EA3BX,CA8BAg1C;CAAA10C,GAAA,CAA0B40C,QAAQ,CAACl1C,CAAD,CAClC,CACI,IAAAwyC,GAAA,CAA2BxyC,CAAA,CAAM,CAAN,CAC3B,KAAAuyC,GAAA,CAAiBvyC,CAAA,CAAM,CAAN,CACjB,KAAAyyC,GAAA,CAAkBzyC,CAAA,CAAM,CAAN,CAClB,KAAA4yC,GAAA,CAAqB5yC,CAAA,CAAM,CAAN,CACrB,KAAA2yC,GAAA,CAAqB3yC,CAAA,CAAM,CAAN,CACrB,KAAA0yC,GAAA,CAAoB1yC,CAAA,CAAM,CAAN,CACpB,KAAA6yC,GAAA,CAAqB7yC,CAAA,CAAM,CAAN,CACrB,KAAAozC,GAAA,CAA8BpzC,CAAA,CAAM,CAAN,CAC9B,KAAAmzC,EAAA,CAA6BnzC,CAAA,CAAM,CAAN,CAC7B,KAAAkzC,EAAA,CAAwBlzC,CAAA,CAAM,CAAN,CACxB,KAAAizC,EAAA,CAAqBjzC,CAAA,CAAM,EAAN,CACrB,KAAAgzC,EAAA,CAAiChzC,CAAA,CAAM,EAAN,CACjC,KAAA+yC,EAAA,CAAsB/yC,CAAA,CAAM,EAAN,CACtB,KAAA8yC,EAAA,CAA4B9yC,CAAA,CAAM,EAAN,CAE5B,KAAAszC,EAAA,CAAwBtzC,CAAA,CAAM,EAAN,CACxB,KAAAuzC,GAAA,CAAmBvzC,CAAA,CAAM,EAAN,CACnB,KAAAwzC,GAAA,CAAkBxzC,CAAA,CAAM,EAAN,CAClB,KAAAyzC,EAAA,CAAgBzzC,CAAA,CAAM,EAAN,CAEhB,KAAAy0C,EAAA,CAAwBz0C,CAAA,CAAM,EAAN,CACxB,KAAA20C,GAAA,CAA4B30C,CAAA,CAAM,EAAN,CAC5B,KAAA00C,GAAA,CAA6B10C,CAAA,CAAM,EAAN,CAG7B,KAAA2zC,EAAA,CADA,IAAAC,EACA,CAD0B,CAAA,CAE1B,KAAAP,GAAAnvB,MAAA,EACA,KAAAwvB,EAAAxvB,MAAA,EAEA,KAAAnlB,EAAAsG,KAAA,CAAc,cAAd,CAA8B,IAAAktC,GAA9B,CA9BJ,CAiCAyC,EAAAvd,GAAA,CAA0B0d,QAAQ,EAClC,CACO,IAAAvB,EAAH,GAQG,IAAAP,GAAAzxC,OAAH,CAEIwzC,EAAA,CAAAA,IAAA,CAFJ,CAIQ,IAAA1B,EAAA9xC,OAJR,EAMIyzC,EAAA,CAAAA,IAAA,CAdJ,CADJ,CAmB0BC;QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,CAAA1B,EAAA,CAA0B,CAAA,CAC1B,EAAAD,EAAA,CAAwB,CAAA,CAErB,EAAAc,EAAH,CAA2B,CAA3B,GAOI3oB,EAAA,CAAA,CAAA5U,EAAA,CAA0B,EAA1B,CACA,CAAA,CAAAA,EAAA+Y,GAAA,CAA0B,EAA1B,CARJ,CAJJ,CAgBwBslB,QAAA,GAAQ,CAARA,CAAQ,CAChC,CACI,CAAA3B,EAAA,CAA0B,CAAA,CAC1B,EAAAD,EAAA,CAAwB,CAAA,CAErB,EAAAc,EAAH,CAA2B,CAA3B,GAOI3oB,EAAA,CAAA,CAAA5U,EAAA,CAA0B,CAA1B,CACA,CAAA,CAAAA,EAAA+Y,GAAA,CAA0B,CAA1B,CARJ,CAJJ,CA8EkCulB,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAKC,CAAL,CAC1C,CAkBI,CAAAhC,EAAAttC,KAAA,EAhBc,CAgBd,CAhBSsvC,CAgBT,GAhBoB,CAgBpB,EAfc,CAed,CAfSD,CAeT,GAfoB,CAepB,CAdQ,CAcR,CAbQ,CAAA/C,GAaR,CACA,EAAAgB,EAAAttC,KAAA,CAbcqvC,CAad,CACA,EAAA/B,EAAAttC,KAAA,CAbcsvC,CAad,CAIA,EAAAje,GAAA,EAxBJ,CAkDAud,CAAAJ,GAAA,CAA4Be,QAAQ,EACpC,CAGI,IAAA/B,EAAA,CAA0B,CAAA,CAE1B,IAAG,CAAC,IAAAP,GAAAzxC,OAAJ,EAA8B,CAAC,IAAA8xC,EAAA9xC,OAA/B,CAII,MAAO,KAAA0xC,EAGR,KAAAK,EAAH,EAEI7nB,EAAA,CAAA,IAAA5U,EAAA,CAA0B,EAA1B,CACA,CAAA,IAAAo8B,EAAA,CAAwB,IAAAI,EAAA1vB,MAAA,EAH5B,GAQI8H,EAAA,CAAA,IAAA5U,EAAA,CAA0B,CAA1B,CACA,CAAA,IAAAo8B,EAAA,CAAwB,IAAAD,GAAArvB,MAAA,EAT5B,CAaA,EAAG,IAAAqvB,GAAAzxC,OAAH,EAA6B,IAAA8xC,EAAA9xC,OAA7B,GAEI,IAAA61B,GAAA,EAGJ,OAAO,KAAA6b,EA9BX,CAiCA0B,EAAAH,GAAA,CAA4Be,QAAQ,EACpC,CAGI,IAAIC,EAAc,EAEf,KAAAjC,EAAH,GAEIiC,CAFJ,EAEmB,CAFnB,CAIG,KAAAlC,EAAH,GAEIkC,CAFJ,EAEmB,EAFnB,CAOA,OAAOA,EAhBX,CAmBAb;CAAAF,GAAA,CAA6BgB,QAAQ,CAACC,CAAD,CACrC,CAGI,GAAG,IAAArB,GAAH,CAEI,IAAAD,EACA,CADwBsB,CACxB,CAAA,IAAArB,GAAA,CAA6B,CAAA,CAHjC,KAWK,IAAG,IAAAC,GAAH,CAED,IAAAA,GAIA,CAJ4B,CAAA,CAI5B,CAFA,IAAAjB,EAAAxvB,MAAA,EAEA,CADA,IAAAwvB,EAAAttC,KAAA,CAAuB2vC,CAAvB,CACA,CAAAV,EAAA,CAAAA,IAAA,CANC,KAQA,IAAG,IAAAnC,EAAH,CAED,IAAAA,EAWA,CAXwB,CAAA,CAWxB,CAVA,IAAAQ,EAAAxvB,MAAA,EAUA,CATA,IAAAwvB,EAAAttC,KAAA,CAAuB,GAAvB,CASA,CAPA,IAAAmtC,GAOA,CAPmBwC,CAOnB,CALI,IAAAxC,GAKJ,GAFI,IAAAA,GAEJ,CAFuB,GAEvB,EAAA8B,EAAA,CAAAA,IAAA,CAbC,KAeA,IAAG,IAAAvC,EAAH,CAED,IAAAA,EAcA,CAd4B,CAAA,CAc5B,CAbA,IAAAY,EAAAxvB,MAAA,EAaA,CAZA,IAAAwvB,EAAAttC,KAAA,CAAuB,GAAvB,CAYA,CARI,IAAAotC,GAQJ,CAVgB,CAAhB,CAAGuC,CAAH,CAEsB,CAFtB,CAOsB,CAPtB,EAO2BA,CAG3B,CAAAV,EAAA,CAAAA,IAAA,CAhBC,KAkBA,IAAG,IAAApC,EAAH,CAGD,IAAAA,EAEA,CAFqB,CAAA,CAErB,CADA,IAAAI,GAAAjtC,KAAA,CAAqB,GAArB,CACA,CAAAgvC,EAAA,CAAAA,IAAA,CALC,KAOA,IAAG,IAAApC,EAAH,CAED,IAAAA,EAKA,CALiC,CAAA,CAKjC,CAHA,IAAAK,GAAAjtC,KAAA,CAAqB,GAArB,CAGA,CAFAgvC,EAAA,CAAAA,IAAA,CAEA,CAAGW,CAAH,EAMI,IAAA1C,GAAAjtC,KAAA,CAAqB,CAArB,CAbH,KAgBA,IAAG,IAAA2sC,EAAH,CAGD,IAAAA,EAEA,CAFsB,CAAA,CAEtB,CADA,IAAAM,GAAAjtC,KAAA,CAAqB,GAArB,CACA,CAAAgvC,EAAA,CAAAA,IAAA,CALC,KAOA,IAAG,IAAAjC,EAAH,CAKD,IAHA,IAAAA,EAGIV,CAHyB,CAAA,CAGzBA;AAAA,IAAAA,GAAJ,CAAA,CAMA,IAAAY,GAAAnvB,MAAA,EACA,KAAAwvB,EAAAxvB,MAAA,EACA,KAAAwvB,EAAAttC,KAAA,CAAuB,GAAvB,CAEA,QAAO2vC,CAAP,EAEA,KAAK,GAAL,CAGI,IAAAtC,EAAA,CAAgB,CAAA,CAChB,MACJ,MAAK,GAAL,CAGI,IAAAA,EAAA,CAAgB,CAAA,CAChB,MACJ,MAAK,GAAL,CAEI,IAAAX,EAAA,CAA4B,CAAA,CAC5B,MACJ,MAAK,GAAL,CAEIoB,EAAA,CAAAA,IAAA,CAAuB,CAAvB,CAA0B,CAA1B,CACA,MACJ,MAAK,GAAL,CAGIA,EAAA,CAAAA,IAAA,CAAuB,CAAvB,CAA0B,CAA1B,CACA,MACJ,MAAK,GAAL,CAEI,IAAAR,EAAAttC,KAAA,CAAuB,CAAvB,CACA,KAAAstC,EAAAttC,KAAA,CAAuB,CAAvB,CAEA,KAAAssC,GAAA,CAAoB,IAAAE,GAApB,CAAyC,IAAAD,GAAzC,CAA8D,CAC9D,MACJ,MAAK,GAAL,CAEI,IAAAO,EAAA,CAAwB,CAAA,CACxB,MACJ,MAAK,GAAL,CAGI,IAAAX,GAAA,CADA,IAAAC,GACA,CAD2B,CAAA,CAE3B,KAAAzzC,EAAAsG,KAAA,CAAc,cAAd,CAA8B,CAAA,CAA9B,CAEA,KAAAqtC,GAAA,CAAoB,IAAAE,GAApB,CAAyC,IAAAD,GAAzC,CAA8D,CAC9D,MACJ,MAAK,GAAL,CAEI,IAAAH,GAAA,CAA2B,CAAA,CAC3B,MACJ,MAAK,GAAL,CAEI,IAAAA,GAAA,CAA2B,CAAA,CAC3B,KAAAe,GAAA,CAAmB,GACnB,KAAAE,EAAA,CAAgB,CAAA,CAChB,KAAAD,GAAA,CAAkB,CAClB,MACJ,MAAK,GAAL,CAGI,IAAAE,EAAAttC,KAAA,CAAuB,GAAvB,CAWA,CAVA,IAAAstC,EAAAttC,KAAA,CAAuB,CAAvB,CAUA;AARA,IAAAmsC,GAQA,CARiB,CAAA,CAQjB,CAPA,IAAAxzC,EAAAsG,KAAA,CAAc,cAAd,CAA8B,CAAA,CAA9B,CAOA,CALA,IAAAmtC,GAKA,CAL2B,CAAA,CAK3B,CAJA,IAAAe,GAIA,CAJmB,GAInB,CAHA,IAAAE,EAGA,CAHgB,CAAA,CAGhB,CAFA,IAAAD,GAEA,CAFkB,CAElB,CAAA,IAAAd,GAAA,CAAoB,IAAAE,GAApB,CAAyC,IAAAD,GAAzC,CAA8D,CArElE,CA4EA0C,EAAA,CAAAA,IAAA,CAtFA,CAAA,CALC,IA8FL,CAII,IAAA3B,EAAAxvB,MAAA,EACA,KAAAmvB,GAAAnvB,MAAA,EACA,KAAAmvB,GAAAjtC,KAAA,CAAqB,GAArB,CAEA,QAAO2vC,CAAP,EAEA,KAAK,GAAL,CACI,IAAA9C,EAAA,CAAqB,CAAA,CACrB,MACJ,MAAK,GAAL,CAEI,IAAAD,EAAA,CAAiC,CAAA,CACjC,MACJ,MAAK,GAAL,CAEI,IAAAK,GAAAjtC,KAAA,CAAqB,GAArB,CACA,KAAAitC,GAAAjtC,KAAA,CAAqB,EAArB,CACA,MACJ,MAAK,GAAL,CAEI,IAAA2sC,EAAA,CAAsB,CAAA,CACtB,MACJ,MAAK,GAAL,CAGI,IAAAK,GAAA,CAA8B,CAAA,CAC9B,MACJ,MAAK,GAAL,CAGI,IAAAA,GAAA,CAA8B,CAAA,CAC9B,MAKJ,MAAK,GAAL,CACI,IAAAC,GAAAnvB,MAAA,EAGA,CAFA,IAAAmvB,GAAAjtC,KAAA,CAAqB,GAArB,CAEA,CADA,IAAAitC,GAAAjtC,KAAA,CAAqB,GAArB,CACA,CAAA,IAAAitC,GAAAjtC,KAAA,CAAqB,CAArB,CApCJ,CA0CAgvC,EAAA,CAAAA,IAAA,CAlDJ,CAnLJ,CAyOAJ;CAAAD,GAAA,CAA6BiB,QAAQ,CAACD,CAAD,CACrC,CAGI,OAAOA,CAAP,EAEA,KAAK,EAAL,CACI,IAAA1C,GAAAnvB,MAAA,EACA,KAAAwvB,EAAAxvB,MAAA,EACA,KAAAmvB,GAAAjtC,KAAA,CAAqB,IAAAquC,EAArB,CACAW,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,EAAL,CACI,IAAAV,GAAA,CAA6B,CAAA,CAC7B,MACJ,MAAK,GAAL,CACI,IAAAC,GAAA,CAA4B,CAAA,CAC5B,MACJ,MAAK,GAAL,CACI,IAAAxB,EAAA,CAA6B,CAAA,CAC7B,MACJ,MAAK,GAAL,CAGI,IAAAsB,EAAA,EAAyB,EACzB,MACJ,MAAK,GAAL,CAGI,IAAAA,EAAA,EAAyB,GACzB,MACJ,MAAK,GAAL,CAEI,IAAApB,GAAAnvB,MAAA,EACA,KAAAwvB,EAAAxvB,MAAA,EACA,KAAAmvB,GAAAjtC,KAAA,CAAqB,CAArB,CACAgvC,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,GAAL,CACI,IAAA/B,GAAAnvB,MAAA,EACA,KAAAwvB,EAAAxvB,MAAA,EACA,KAAAmvB,GAAAjtC,KAAA,CAAqB,EAArB,CACAgvC,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,GAAL,CAEI,IAAA/B,GAAAnvB,MAAA,EACA,KAAAwvB,EAAAxvB,MAAA,EACA,KAAAmvB,GAAAjtC,KAAA,CAAqB,CAArB,CACAgvC,GAAA,CAAAA,IAAA,CACA,MACJ,MAAK,GAAL,CAGI,IAAAX,EAAA,EAAyB,EACzB,MACJ,MAAK,GAAL,CAGI,IAAAA,EAAA,EAAyB,GACzB,MACJ,MAAK,GAAL,Cb7LA,Ka+LIv9B,EfvgBkB++B;AeugBlB/+B,IAAAA,EfvgBkB++B,CEqUtB,CAAA/0B,MAAA,EFrUsB+0B,CEsUtB90B,EAAA,CAAAA,CAAA,CFtUsB80B,CAAAA,SEwUtB,CaoIA,CAHJ,C,CCpnBAC,QAASA,GAAG,CAACh/B,CAAD,CAAM+T,CAAN,CACZ,CA6BI,IAAAkrB,EAAA,CAFA,IAAAC,EAEA,CATA,IAAAC,GASA,CAhBA,IAAAC,EAgBA,CAxBA,IAAAC,EAwBA,CAxBgB,CA6BhB,KAAAC,EAAA,CAAsB,EAEtB,KAAAvrB,GAAA,CAAcA,CACd,KAAAwrB,EAAA,CAAiC5lC,IAAAA,EAAjC,GAAiB,IAAAoa,GACjB,KAAAE,GAAA,CAAata,IAAAA,EAEb,KAAArO,KAAA,CAAY,IAAAi0C,EAAA,CAAiB,QAAjB,CAA4B,QAExC,KAAAC,EAAA,CAAmB,CAAA,CAEnB,KAAAC,EAAA,CADA,IAAA32C,MACA,CADa,CAEb,KAAA42C,EAAA,CAAgB,CAGhB,KAAAC,EAAA,CAFA,IAAAC,EAEA,CAFyB,CAIzB,KAAA5/B,EAAA,CAAWA,CAUR,KAAAu/B,EAAH,EAEI,IAAAtrB,GA4CA,CA5Ca,IAAI+qB,EAAJ,CAAQ,IAAAh/B,EAAR,CAAkB,IAAlB,CA4Cb,CA1CA,IAAA6/B,EA0CA,CA1CkBC,QAAQ,EAC1B,CACI,GAAyB,CAAzB,EAAG,IAAAR,EAAH,CAGIv2B,EAAA,CAAA,IAAA/I,EAAA,CAHJ,KAAA,CAOA,IAAI+/B,EAAc,IAAAb,EAAda,CAAyB,IAAAV,EAE7B,IAAIU,CAAJ,CAAA,CAUeA,CAAXV,EAAyB,CAACU,CAC9B,KAAIC,EAAe,IAAAJ,EAAA,CAAyB,IAAAP,EAAzB,CAA0C,EAE1D,KAAAF,GAAH,GAAgB,IAAAA,GAAhB,CAA2B,CAAC,IAAAA,GAA5B,CAAuCa,CAAvC,GAAwDX,CAAxD,GAcA,IAAAC,EACA,CANiBrzB,EAAAg0B,CAAsBZ,CAAtBY,CAMjB,CAAAl3B,EAAA,CAAA,IAAA/I,EAAA,CAfA,CAbA,CATA,CADJ,CAyCA,CAAA,IAAAkgC,GAAA,CAAuBC,QAAQ,EAC/B,CACI,GAA2B,EAA3B,GAAG,IAAAb,EAAH,CAKA,GAAgB,CAAhB,GAAG,IAAAJ,EAAH,CAGI,IAAAI,EACA,CADsB,EACtB,CAAAc,EAAA,CAAA,IAAApgC,EAAA,CAAsB,IAAAo/B,EAAtB,CAAqC,CAArC,CAJJ,KAAA,CAUA,IAAIC;AAAW,CAAXA,EAAgB,IAAAC,EAEU,EAA9B,IAAI,IAAAK,EAAJ,CAAgBN,CAAhB,IAEI,IAAAH,EAFJ,EAEgB,CAACG,CAFjB,CAKI,KAAAK,EAAJ,GAEI,IAAAP,GAFJ,EAEgBE,CAFhB,CAM0B,EAA1B,GAAG,IAAAC,EAAH,CAEI,IAAArrB,GAAAisB,GAAA,EAFJ,CAMIE,EAAA,CAAA,IAAApgC,EAAA,CAAsB,IAAAo/B,EAAtB,CAAqC,IAAAE,EAArC,CAGJ,KAAAA,EAAA,CAAsB,EACtB,KAAAO,EAAA,EAjCA,CANJ,CA/CJ,GA4FI,IAAAA,EAwCA,CAxCkBC,QAAQ,EAC1B,CACI,GAAyB,CAAzB,EAAG,IAAAR,EAAH,CAGIv2B,EAAA,CAAA,IAAA/I,EAAA,CAHJ,KAAA,CAOA,IAAI+/B,EAAc,IAAAb,EAAda,CAAyB,IAAAV,EAE7B,IAAIU,CAAJ,CAAA,CAUeA,CAAXV,EAAyB,CAACU,CAC9B,KAAIC,EAAe,IAAAJ,EAAA,CAAyB,IAAAP,EAAzB,CAA0C,EAE1D,KAAAF,GAAH,GAAgB,IAAAA,GAAhB,CAA2B,CAAC,IAAAA,GAA5B,CAAuCa,CAAvC,GAAwDX,CAAxD,GAYA,IAAAC,EACA,CALiBrzB,EAAAg0B,CAAsBZ,CAAtBY,CAKjB,CAAA,IAAAlsB,GAAAssB,GAAA,CAAoB,CAApB,CAbA,CAbA,CATA,CADJ,CAuCA,CAAA,IAAAH,GAAA,CAAuBC,QAAQ,EAC/B,CACI,GAA2B,EAA3B,GAAG,IAAAb,EAAH,CAKA,GAAgB,CAAhB,GAAG,IAAAJ,EAAH,CAGI,IAAAI,EAEA,CAFsB,EAEtB,CADA,IAAAvrB,GAAAkrB,EACA,EADyB,EACzB,CAAAmB,EAAA,CAAA,IAAApgC,EAAA,CAAsB,IAAAo/B,EAAtB,CAAqC,CAArC,CALJ,KAAA,CAYA,IAAIC,EAAW,CAAXA,EAAgB,IAAAC,EAEU,EAA9B,IAAI,IAAAK,EAAJ,CAAgBN,CAAhB,IAEI,IAAAH,EAFJ,EAEgB,CAACG,CAFjB,CAKI,KAAAK,EAAJ,GAEI,IAAAP,GAFJ,EAEgBE,CAFhB,CAKA,KAAAtrB,GAAAkrB,EAAA,EAAyB,EAEzBmB,GAAA,CAAA,IAAApgC,EAAA,CAAsB,IAAAo/B,EAAtB,CAAqC,IAAAE,EAArC,CAEA;IAAAA,EAAA,CAAsB,EACtB,KAAAO,EAAA,EA7BA,CANJ,CArIJ,CA2LG,KAAAN,EAAH,EAEIe,CACA,CADU,EACV,CAAAC,CAAA,CAAc,IAHlB,GAOID,CACA,CADU,GACV,CAAAC,CAAA,CAAc,IARlB,CAWA55B,EAAA,CAAA,IAAA3G,EAAA2U,EAAA,CAA2B2rB,CAA3B,CAAoC,IAApC,CAA0C,IAAAE,GAA1C,CACAt6B,EAAA,CAAA,IAAAlG,EAAA2U,EAAA,CAA0B2rB,CAA1B,CAAmC,IAAnC,CAAyC,IAAAG,GAAzC,CAEA95B,EAAA,CAAA,IAAA3G,EAAA2U,EAAA,CAA2B2rB,CAA3B,CAAqC,CAArC,CAAwC,IAAxC,CAA8C,IAAAI,GAA9C,CACAx6B,EAAA,CAAA,IAAAlG,EAAA2U,EAAA,CAA0B2rB,CAA1B,CAAoC,CAApC,CAAuC,IAAvC,CAA6C,IAAAK,GAA7C,CAEAh6B,EAAA,CAAA,IAAA3G,EAAA2U,EAAA,CAA2B4rB,CAA3B,CAAwC,IAAxC,CAA8C,IAAAK,GAA9C,CACA16B,EAAA,CAAA,IAAAlG,EAAA2U,EAAA,CAA0B4rB,CAA1B,CAAuC,IAAvC,CAA6C,IAAAM,GAA7C,CAGG,KAAAtB,EAAH,EAEI,IAAAc,GAwBA,CAxBeS,QAAQ,CAACb,CAAD,CACvB,CAGqB,CAAjB,EAAGA,CAAH,CAEI,IAAAhsB,GAAAosB,GAAA,CAAmBJ,CAAnB,CAAgC,CAAhC,CAFJ,EAWIZ,CACJ,CADe,CACf,EADoBY,CACpB,CAAmC,CAAnC,IAAI,IAAAhB,EAAJ,CAAqBI,CAArB,IAEI,IAAAH,EAEA,EAFYG,CAEZ,CADA,IAAAJ,EACA,EADkBI,CAClB,CAAA,IAAAQ,EAAA,EAJJ,CAZA,CAHJ,CAuBA,CAAA,IAAAkB,GAAA,CAAiBC,QAAQ,CAACf,CAAD,CACzB,CAOqB,CAAjB,EAAGA,CAAH,CAEI,IAAAhsB,GAAA8sB,GAAA,CAAqBd,CAArB,CAAkC,CAAlC,CAFJ,EAMIZ,CACJ,CADe,CACf,EADoBY,CACpB,CAAG,IAAAhB,EAAH,CAAoBI,CAApB,GAEI,IAAAJ,EAEA,EAFkB,CAACI,CAEnB,CADA,IAAAH,EACA,EADY,CAACG,CACb,CAAA,IAAAQ,EAAA,EAJJ,CAPA,CAPJ,CA3BJ,GAmDI,IAAAQ,GAiBA,CAjBeS,QAAQ,CAACb,CAAD,CACvB,CAOQZ,CAAAA,CAAW,CAAXA,EAAgBY,CACe,EAAnC,IAAI,IAAAhB,EAAJ,CAAqBI,CAArB,IAEI,IAAAH,EAEA,EAFYG,CAEZ,CADA,IAAAJ,EACA,EADkBI,CAClB,CAAA,IAAAQ,EAAA,EAJJ,CARJ,CAgBA;AAAA,IAAAkB,GAAA,CAAiBC,QAAQ,CAACf,CAAD,CACzB,CAOQZ,CAAAA,CAAW,CAAXA,EAAgBY,CACjB,KAAAhB,EAAH,CAAoBI,CAApB,GAEI,IAAAJ,EAEA,EAFkB,CAACI,CAEnB,CADA,IAAAH,EACA,EADY,CAACG,CACb,CAAA,IAAAQ,EAAA,EAJJ,CARJ,CArEJ,CA5QJ,CAwWA,CAAA,CAAA,EAAA,UAAAoB,EAAAr4C,GAAA,CAA0Bs4C,QAAQ,EAClC,CACI,IAAIp4C,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAu2C,EACXv2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAs2C,EACXt2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAq2C,GACXr2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAo2C,EACXp2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAy2C,EACXz2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAmrB,GACXnrB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA02C,EACX12C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAA,MACXA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA22C,EACX32C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA42C,EACX52C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA62C,EAEZ,OAAO72C,EAfX,CAkBAm4C,EAAA73C,GAAA,CAA0B+3C,QAAQ,CAACr4C,CAAD,CAClC,CACI,IAAAu2C,EAAA,CAAgBv2C,CAAA,CAAM,CAAN,CAChB,KAAAs2C,EAAA,CAAet2C,CAAA,CAAM,CAAN,CACf,KAAAq2C,GAAA,CAAWr2C,CAAA,CAAM,CAAN,CACX,KAAAo2C,EAAA,CAAWp2C,CAAA,CAAM,CAAN,CACX,KAAAy2C,EAAA,CAAiBz2C,CAAA,CAAM,CAAN,CACjB,KAAAmrB,GAAA,CAAanrB,CAAA,CAAM,CAAN,CACb,KAAA02C,EAAA,CAAmB12C,CAAA,CAAM,CAAN,CACnB,KAAAA,MAAA,CAAaA,CAAA,CAAM,CAAN,CACb,KAAA22C,EAAA,CAAgB32C,CAAA,CAAM,CAAN,CAChB,KAAA42C,EAAA,CAAgB52C,CAAA,CAAM,CAAN,CAChB,KAAA62C,EAAA,CAAY72C,CAAA,CAAM,EAAN,CAXhB,CAcAm4C;CAAAT,GAAA,CAA6BY,QAAQ,CAACpZ,CAAD,CACrC,CAEI,GAAGA,CAAH,CAAe,EAAf,CAOI,IAAAiX,EAKA,CANA,IAAAI,EAMA,CAPA,IAAAH,EAOA,CARA,IAAAC,GAQA,CARW,CAQX,CAJA,IAAAO,EAIA,CAJgB,CAIhB,CAHA,IAAAJ,EAGA,CAHsB,EAGtB,CADA,IAAAE,EACA,CADmBxX,CACnB,CAD+B,CAC/B,CAAA,IAAAl/B,MAAA,CAAa,CAZjB,KAcK,IAAGk/B,CAAH,CAAe,CAAf,CAIEA,CAQH,CARe,CAQf,GANI,IAAAyX,EAMJ,CANoBzX,CAMpB,CANgC,CAMhC,EAAGA,CAAH,CAAe,EAAf,GAEI,IAAA4X,EAFJ,CAEoD,EAFpD,IAE8B5X,CAF9B,CAE0C,EAF1C,EAZC,KAmBL,CAKI,IAAIqZ,EAAWrZ,CAAXqZ,EAAwB,CAEZ,EAAhB,GAAGA,CAAH,CAGI,IAAAlC,GAHJ,EAGgB,IAAAA,GAHhB,CAG2B,CAH3B,CAMqB,CAAhB,GAAGkC,CAAH,CAGD,IAAAlC,GAHC,EAGW,EAAE,CAAF,GAAQnX,CAAR,CAAoB,CAApB,EAHX,CAK0B,GAL1B,IAKIA,CALJ,CAKgB,GALhB,IAeD,IAAAmX,GAfC,EAeW,IAAAA,GAfX,CAesB,CAftB,CAkBL,KAAAU,EAAA,EA/BJ,CAnCJ,CAsEAoB,EAAAR,GAAA,CAA4Ba,QAAQ,EACpC,CACI,MAAG,KAAA7B,EAAH,CAGW,IAAAN,GAHX,CAQW,IAAAD,EATf,CAaA+B,EAAAP,GAAA,CAA6Ba,QAAQ,CAACvZ,CAAD,CACrC,CAEsB,CAAlB,GAAG,IAAAl/B,MAAH,CAEO,IAAA02C,EAAH,EAGI,IAAAA,EACA,CADmB,CAAA,CACnB,CAAA,IAAAE,EAAA,CAAgB1X,CAAhB,CAA4B,CAJhC,GAeI,IAAAqX,EAQA,CARgB,CAACrX,CAQjB,CAAA,IAAA6X,EAAA,EAvBJ,CAFJ,CA4BuB,CAAlB,GAAG,IAAA/2C,MAAH,EAGD,IAAAs2C,EAGA,CAHepX,CAGf,CAAA,IAAAl/B,MAAA,EANC,EAQkB,CARlB,GAQG,IAAAA,MARH,GAWD,IAAAA,MAXC,CAWY,CAXZ,CA9BT,CA8CAm4C;CAAAN,GAAA,CAA4Ba,QAAQ,EACpC,CAEI,MAAO,CAAC,IAAAnC,EAAR,CAAwB,GAF5B,CAKA4B,EAAAJ,GAAA,CAA6BY,QAAQ,EACrC,CAEI,MAAO,KAAA9B,EAFX,CAKAsB,EAAAL,GAAA,CAA8Bc,QAAQ,CAAChmC,CAAD,CACtC,CAGI,IAAAikC,EAAA,CAAYjkC,CAHhB,C,CRzfAimC,QAASA,GAAG,CAAC3hC,CAAD,CACZ,CAEI,IAAAA,EAAA,CAAWA,CAEX,KAAA4hC,GAAA,CAAkB,CAClB,KAAApoB,GAAA,CAAiB,IAAIpxB,UAAJ,CAAe,GAAf,CAIjB,KAAAy5C,EAAA,CADA,IAAAC,EACA,CADgBv0C,IAAAuP,IAAA,EAIhB,KAAAilC,EAAA,CAAsB,CAEtB,KAAAC,EAAA,CAA0B,CAAA,CAG1B,KAAAC,EAAA,CAA+B,QAE/B,KAAAC,EAAA,CAAc,EACd,KAAAC,EAAA,CAAc,CAGd,KAAAC,GAAA,CAFA,IAAAC,EAEA,CAFc,CAId17B,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA4B,IAA5B,CAAkC,QAAQ,CAACuK,CAAD,CAC1C,CACI,IAAA0iB,GAAA,CAAkB1iB,CAAlB,CAA6B,GAC7B,KAAAkjB,GAAA,CAAoBljB,CAApB,EAAgC,CAFpC,CADA,CAMAvY,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA4B,IAA5B,CAAkC,IAAA2tB,GAAlC,CACAp8B,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA2B,IAA3B,CAAiC,IAAA4tB,GAAjC,CAhCJ,CAmCA,CAAA,CAAA,EAAA,UAAAC,EAAA55C,GAAA,CAA0B65C,QAAQ,EAClC,CACI,IAAI35C,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA84C,GACX94C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA0wB,GACX1wB,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAg5C,EACXh5C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA+4C,EACX/4C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAi5C,EAEXj5C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAk5C,EACXl5C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAm5C,EACXn5C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAo5C,EACXp5C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAq5C,EACXr5C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAu5C,EACZv5C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAs5C,GAEZ,OAAOt5C,EAhBX,CAmBA05C;CAAAp5C,GAAA,CAA0Bs5C,QAAQ,CAAC55C,CAAD,CAClC,CACI,IAAA84C,GAAA,CAAkB94C,CAAA,CAAM,CAAN,CAClB,KAAA0wB,GAAA,CAAiB1wB,CAAA,CAAM,CAAN,CACjB,KAAAg5C,EAAA,CAAgBh5C,CAAA,CAAM,CAAN,CAChB,KAAA+4C,EAAA,CAAmB/4C,CAAA,CAAM,CAAN,CACnB,KAAAi5C,EAAA,CAAsBj5C,CAAA,CAAM,CAAN,CAEtB,KAAAk5C,EAAA,CAA0Bl5C,CAAA,CAAM,CAAN,CAC1B,KAAAm5C,EAAA,CAA+Bn5C,CAAA,CAAM,CAAN,CAC/B,KAAAo5C,EAAA,CAAcp5C,CAAA,CAAM,CAAN,CACd,KAAAq5C,EAAA,CAAcr5C,CAAA,CAAM,CAAN,CACd,KAAAu5C,EAAA,CAAcv5C,CAAA,CAAM,EAAN,CACd,KAAAs5C,GAAA,CAAoBt5C,CAAA,CAAM,EAAN,CAZxB,CAeA05C,EAAAzuC,GAAA,CAAsB4uC,QAAQ,CAACrlC,CAAD,CAC9B,CACIA,CAAA,CAAO/P,IAAAuP,IAAA,EACP,KAAAglC,EAAA,EAAiBxkC,CAAjB,CAAwB,IAAAukC,EACxB,KAAAA,EAAA,CAAmBvkC,CAEhB,KAAA0kC,EAAH,EAA8B,IAAAD,EAA9B,CAAoDzkC,CAApD,GAEI,IAAA0C,EAAA+Y,GAAA,CAA0B,CAA1B,CAGA,CAFA,IAAAspB,EAEA,EAFe,GAEf,CAAA,IAAAN,EAAA,EAAuB,IAAAE,EAAvB,CACQ33C,IAAAioB,KAAA,EAAWjV,CAAX,CAAkB,IAAAykC,EAAlB,EAAyC,IAAAE,EAAzC,CANZ,CALJ,CAqC4BW,SAAA,GAAQ,CAARA,CAAQ,CAAC55B,CAAD,CACpC,CACI,GAAG,CAAAm5B,EAAH,CAAiB,CAAjB,CAGWn5B,CAAAA,CAAAA,CAHX,KAAA,CAOW,CAAA,CAAA,CArBX,KALJ,IAEQrQ,EADA9M,CACA8M,CADI,CADZ,CAGQkqC,CAEJ,CAAM7yC,CAAN,CAAA,CAEI6yC,CAIA,CAJQ7yC,CAIR,CAJY,EAIZ,CAFA2I,CAEA,EAFUkqC,CAEV,EAFoB,CAEpB,CAFwBh3C,CAExB,CADAA,CAAA,EACA,CAAAmE,CAAA,EAAKA,CAAL,CAAS6yC,CAAT,EAAkB,EAGtB,EAAA,CAAOlqC,CAKP,CAAA,MAAA,EADJ;AAkBA6pC,CAAAD,GAAA,CAA+BO,QAAQ,EACvC,CAKI,OAJY,IAAAlB,GAIZ,EAEI,KAvL6BmB,CAuL7B,CACI,MAAOC,GAAA,CAAAA,IAAA,CAAiBC,CAAA,IAAI11C,IAAJ,CAAS,IAAAu0C,EAAT,CAAAmB,eAAA,EAAjB,CACX,MAvL6BC,CAuL7B,CACI,MAAOF,GAAA,CAAAA,IAAA,CAAiBG,CAAA,IAAI51C,IAAJ,CAAS,IAAAu0C,EAAT,CAAAqB,eAAA,EAAjB,CACX,MAvL2BC,CAuL3B,CAEI,MAAOJ,GAAA,CAAAA,IAAA,CAAiBK,CAAA,IAAI91C,IAAJ,CAAS,IAAAu0C,EAAT,CAAAuB,aAAA,EAAjB,CACX,MAvL+BC,CAuL/B,CACI,MAAON,GAAA,CAAAA,IAAA,CAAiBO,CAAA,IAAIh2C,IAAJ,CAAS,IAAAu0C,EAAT,CAAAyB,YAAA,EAAjB,CACX,MAxL2BC,CAwL3B,CACI,MAAOR,GAAA,CAAAA,IAAA,CAAiBS,CAAA,IAAIl2C,IAAJ,CAAS,IAAAu0C,EAAT,CAAA2B,aAAA,EAAjB,CAAyD,CAAzD,CACX,MAzL0BC,CAyL1B,CACI,MAAOV,GAAA,CAAAA,IAAA,CAAiBW,CAAA,IAAIp2C,IAAJ,CAAS,IAAAu0C,EAAT,CAAA6B,gBAAA,EAAjB,CAA4D,GAA5D,CAEX,MA3L0BC,EA2L1B,CACI,MAAO,KAAA1B,EACX,MA5L0B2B,EA4L1B,CAEI,MAAO,KAAA1B,EAEX,MA/L0B2B,EA+L1B,CAKIlvB,EAAA,CAAA,IAAA5U,EAAA,CAA0B,CAA1B,CAKA,KAAIoc,EAAI,IAAAimB,EAER,KAAAA,EAAA,EAAe,IAEf,OAAOjmB,EAEX,MA9M0B2nB,EA8M1B,CACI,MAAO,IAEX,MAjMyBC,EAiMzB,CACI,MAAOhB,GAAA,CAAAA,IAAA;AAAiBW,CAAA,IAAIp2C,IAAJ,CAAS,IAAAu0C,EAAT,CAAA6B,gBAAA,EAAjB,CAA4D,GAA5D,CAAkE,CAAlE,CAEX,SAEI,MAAO,KAAAnqB,GAAA,CAAe,IAAAooB,GAAf,CA9Cf,CALJ,CAuDAY,EAAAF,GAAA,CAAgC2B,QAAQ,CAACjc,CAAD,CACxC,CACI,OAAO,IAAA4Z,GAAP,EAEI,KAAK,EAAL,CACI,IAAAM,EAAA,CAAcla,CAAd,CAA0B,GAC1B,KAAAia,EAAA,CAA+B,GAA/B,EAAuC,KAAvC,GAAiD,IAAAC,EAAjD,CAA+D,EAA/D,EAAsE,CAAtE,CAGA,MACJ,MAAK,EAAL,CACI,IAAAC,EACA,CADcna,CACd,CAAG,IAAAma,EAAH,CAAiB,EAAjB,GAEI,IAAAJ,EAFJ,CAE0Bx0C,IAAAuP,IAAA,EAF1B,CAVR,CAwBA,IAAAklC,EAAA,CAAmD,EAAnD,IAA2B,IAAAG,EAA3B,CAAyC,EAAzC,GAAiF,CAAjF,EAA4D,IAAAD,EAA5D,CAA0E,EAA1E,CAzBJ,C,CSvMAgC,QAASA,GAAI,CAAClkC,CAAD,CAAMmgB,CAAN,CAAYt4B,CAAZ,CACb,CAEI,IAAAA,EAAA,CAAWA,CAGX,KAAAmY,EAAA,CAAWA,CAEX,KAAAmkC,GAAA,CAAY,CAIZ,KAAAC,GAAA,CAFA,IAAAC,GAEA,CAFiB,CAKjB,KAAAC,GAAA,CAAW,EAKX,KAAAC,GAAA,CAHA,IAAAC,GAGA,CAHoB,CAMpB,KAAAC,GAAA,CAxC+BC,CA+C/B,KAAAtwB,GAAA,CAFA,IAAAuwB,GAEA,CAJA,IAAAC,GAIA,CALA,IAAAC,GAKA,CALqB,CAOrB,KAAAC,MAAA,CAAa,IAAIn4B,EAAJ,CAAc,IAAd,CAEb,KAAAo4B,EAAA,CAAoB,EAEpB,QAAO5kB,CAAP,EAEI,KAAK,IAAL,CACI,IAAA6kB,EAAA,CAAW,CACX,KAAA5wB,GAAA,CAAW,CACX,MACJ,MAAK,GAAL,CACI,IAAA4wB,EAAA,CAAW,CACX,KAAA5wB,GAAA,CAAW,CACX,MACJ,MAAK,GAAL,CACI,IAAA4wB,EAAA,CAAW,CACX,KAAA5wB,GAAA,CAAW,CACX,MACJ,MAAK,GAAL,CAEI,IAAAA,GAAA,CADA,IAAA4wB,EACA,CADW,CAEX,MACJ,SAEI,IAAAA,EACA,CADW,CACX,CAAA,IAAA5wB,GAAA,CAAW,CArBnB,CAwBA,IAAAvsB,EAAAuL,SAAA,CAAkB,QAAlB,CAA6B,IAAA4xC,EAA7B,CAAwC,QAAxC,CAAkD,QAAQ,CAACp5C,CAAD,CAC1D,CACIq5C,IA+MJH,MAAA51C,KAAA,CA/MuBtD,CA+MvB,CA/MIq5C,KAiNJX,GAAA,EA1R2CY,CAyEvCD,KAgMJd,GAAA,EAAc,IACdgB,GAAA,CAjMIF,IAiMJ,CAlMA,CADA,CAGG,IAHH,CAKItwB,EAAAA,CAAK3U,CAAA2U,EAEThO,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAwB,IAAxB,CAA8B,QAAQ,CAACjB,CAAD,CACtC,CACIkmB,EAAA,CAAAA,IAAA,CAAgBlmB,CAAhB,CADJ,CADA,CAGG,QAAQ,CAACmmB,CAAD,CACX,CACID,EAAA,CAAAA,IAAA;AAAgBC,CAAhB,CAA2B,GAA3B,CACAD,GAAA,CAAAA,IAAA,CAAgBC,CAAhB,EAA4B,CAA5B,CAFJ,CAJA,CASA1+B,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,CAACjB,CAAD,CAC1C,CACO,IAAAklB,GAAH,CAvGGkB,GAuGH,CAEI,IAAAjB,GAFJ,CAEqB,IAAAA,GAFrB,CAEsC,GAFtC,CAE6CnlB,CAF7C,EAEyD,CAFzD,EAOI,IAAAqlB,GAEA,CAFWrlB,CAEX,CAFsB,EAEtB,CAAAimB,EAAA,CAAAA,IAAA,CATJ,CADJ,CADA,CAeAj/B,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAuB,IAAvB,CAA6B,QAAQ,EACrC,CACI,GAAG,IAAAikB,GAAH,CAtHGkB,GAsHH,CAEI,MAAO,KAAAjB,GAAP,CAAwB,GAIxB,KAAIz4C,EAAO,IAAAk5C,MAAAh4B,MAAA,EAWc,EAAzB,GAAG,IAAAg4B,MAAAp6C,OAAH,GAEI,IAAA45C,GAoJZ,EApJwB,EAoJxB,CAnJYiB,IAkJZpB,GACA,EADa,KACb,CAAAgB,EAAA,CAnJYI,IAmJZ,CAtJQ,CAMA,OAAO35C,EAxBf,CADA,CA6BAsa,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CACI,MAAG,KAAAikB,GAAH,CAnJGkB,GAmJH,CAEW,IAAAjB,GAFX,EAE6B,CAF7B,CAMW,IAAAE,GANX,CAMsB,EAP1B,CADA,CAYAr+B,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CACI,IAAIn1B,EAAM,IAAAy5C,GAANz5C,CAAiB,EAAjBA,CAAuB,GAtJFw6C,EAyJzB,EAAI,IAAAf,GAAJ,GACIc,IAyHRpB,GACA,EADa,EACb,CAAAgB,EAAA,CA1HQI,IA0HR,CA3HI,CAIA,OAAOv6C,EARX,CADA,CAWA2b,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,CAACjB,CAAD,CAC1C,CAEI,IAAAslB,GAAA,CAAoBtlB,CAFxB,CADA,CAMAhZ,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CAEI,MAAO,KAAAikB,GAFX,CADA,CAKAz9B,EAAA,CAAAgO,CAAA;AAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,CAACjB,CAAD,CAC1C,CAEI,IAAAklB,GAAA,CAAoBllB,CAFxB,CADA,CAOAhZ,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CACI,MAAO,KAAA0kB,GADX,CADA,CAIAl+B,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,CAACjB,CAAD,CAC1C,CAEI,IAAA2lB,GAAA,CAAqB3lB,CAFzB,CADA,CAMAhZ,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CAEI,MAAO,KAAAmkB,GAFX,CADA,CAKA39B,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,EAC1C,EADA,CAKAja,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CAEI,MAAO,KAAAykB,GAFX,CADA,CAKAj+B,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,EAC1C,EADA,CAKAja,EAAA,CAAAyO,CAAA,CAAiBwL,CAAjB,CAAwB,CAAxB,CAA2B,IAA3B,CAAiC,QAAQ,EACzC,CACI,MAAO,KAAAwkB,GADX,CADA,CAIAh+B,EAAA,CAAAgO,CAAA,CAAkBwL,CAAlB,CAAyB,CAAzB,CAA4B,IAA5B,CAAkC,QAAQ,CAACjB,CAAD,CAC1C,CACI,IAAAylB,GAAA,CAAwBzlB,CAD5B,CADA,CAlMJ;AAwMAglB,EAAAv7C,UAAAC,GAAA,CAA2B68C,QAAQ,EACnC,CACI,IAAI38C,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAq7C,GACXr7C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAu7C,GACXv7C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAs7C,GACXt7C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAw7C,GACXx7C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA07C,GACX17C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAy7C,GACXz7C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA27C,GACX37C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA+7C,GACX/7C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA87C,GACX97C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA67C,GACX77C,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAsrB,GAEZ,OAAOtrB,EAfX,CAkBAo7C,GAAAv7C,UAAAS,GAAA,CAA2Bs8C,QAAQ,CAAC58C,CAAD,CACnC,CACI,IAAAq7C,GAAA,CAAYr7C,CAAA,CAAM,CAAN,CACZ,KAAAu7C,GAAA,CAAiBv7C,CAAA,CAAM,CAAN,CACjB,KAAAs7C,GAAA,CAAoBt7C,CAAA,CAAM,CAAN,CACpB,KAAAw7C,GAAA,CAAWx7C,CAAA,CAAM,CAAN,CACX,KAAA07C,GAAA,CAAoB17C,CAAA,CAAM,CAAN,CACpB,KAAAy7C,GAAA,CAAWz7C,CAAA,CAAM,CAAN,CACX,KAAA27C,GAAA,CAAW37C,CAAA,CAAM,CAAN,CACX,KAAA+7C,GAAA,CAAqB/7C,CAAA,CAAM,CAAN,CACrB,KAAA87C,GAAA,CAAoB97C,CAAA,CAAM,CAAN,CACpB,KAAA67C,GAAA,CAAwB77C,CAAA,CAAM,CAAN,CACxB,KAAAsrB,GAAA,CAAWtrB,CAAA,CAAM,EAAN,CAXf,CAcgC68C;QAAA,GAAQ,CAARA,CAAQ,CAAG,CAClC,CAAAxB,GAAL,CAAkB,IAAlB,EAA2C,CAAAI,GAA3C,CAhQ6BqB,CAgQ7B,EACI,CAAAnB,GACA,CA3PwBoB,EA2PxB,CAAA,CAAA7lC,EAAA+Y,GAAA,CAA0B,CAAA3E,GAA1B,CAFJ,EAIK,CAAA+vB,GAAL,CAAkB,CAAlB,EAA2C,CAAAI,GAA3C,CArQ8BuB,CAqQ9B,EACI,CAAArB,GACA,CAlQyBe,CAkQzB,CAAA,CAAAxlC,EAAA+Y,GAAA,CAA0B,CAAA3E,GAA1B,CAFJ,EAIK,CAAA+vB,GAAL,CAAkB,CAAlB,EAA2C,CAAAI,GAA3C,CA1Q8BwB,CA0Q9B,EACI,CAAAtB,GACA,CAxQwBuB,CAwQxB,CAAA,CAAAhmC,EAAA+Y,GAAA,CAA0B,CAAA3E,GAA1B,CAFJ,GAII,CAAAqwB,GACA,CA1Q2BC,CA0Q3B,CAAA9vB,EAAA,CAAA,CAAA5U,EAAA,CAA0B,CAAAoU,GAA1B,CALJ,CATuC,CAwCf6xB,QAAA,GAAQ,CAARA,CAAQ,CAAC/mB,CAAD,CACpC,CACI,GAAG,CAAAklB,GAAH,CA9SOkB,GA8SP,CAEI,CAAAjB,GAAA,CAAiB,CAAAA,GAAjB,CAAkC,IAAlC,CAA0CnlB,CAF9C,KAYA,IAJAgnB,CA/BA/B,GAmCG,EAnCW,CAmCX,CAlCHgB,EAAA,CA8BAe,CA9BA,CAkCG,CAFH,CAAAr+C,EAAAsG,KAAA,CAAc,QAAd,CAAyB,CAAA62C,EAAzB,CAAoC,cAApC,CAAoD9lB,CAApD,CAEG,CAAa,GAAb,GAAAA,CAAH,CAAA,CAKA,IAAIinB,EAAOpzC,MAAAC,aAAA,CAAoBksB,CAApB,CAEX,EAAAr3B,EAAAsG,KAAA,CAAc,QAAd,CAAyB,CAAA62C,EAAzB,CAAoC,cAApC,CAAoDmB,CAApD,CAEA,EAAApB,EAAA71C,KAAA,CAAuBgwB,CAAvB,CAEY,KAAZ,GAAGinB,CAAH,GAGI,CAAAt+C,EAAAsG,KAAA,CAAc,QAAd,CAAyB,CAAA62C,EAAzB,CAAoC,cAApC,CAAoDjyC,MAAAC,aAAAozC,MAAA,CAA0B,EAA1B,CAA8B,CAAArB,EAA9B,CAApD,CACA,CAAA,CAAAA,EAAA,CAAoB,EAJxB,CAXA,CAbJ,C,CC9RAsB,QAASA,GAAc,CAACC,CAAD,CACvB,CACI,IAAAC,QAAA,CAAeD,CADnB,CAGAD,EAAA19C,UAAA,CAA+B69C,KAAJ,EAG3BC,SAASA,GAAW,CAAChpC,CAAD,CAAMipC,CAAN,CACpB,CACI,GAAkB,QAAlB,GAAG,MAAOjpC,EAAV,EAAsC,IAAtC,GAA8BA,CAA9B,EAA8CA,CAA9C,WAA6DvN,MAA7D,CAEI,MAAOuN,EAKX,IAAGA,CAAAkpC,kBAAH,CACA,CAEI,IAAIxwC,EAAS,IAAI/N,UAAJ,CAAeqV,CAAAtH,OAAf,CAA2BsH,CAAAmpC,WAA3B,CAA2CnpC,CAAA/S,OAA3C,CAAwD+S,CAAAkpC,kBAAxD,CAEb,OAAO,CACH,eAAkBlpC,CAAAopC,YAAAv7C,KADf,CAEH,UAAao7C,CAAAx3C,KAAA,CAAmBiH,CAAnB,CAAb,CAA0C,CAFvC,CAJX,CAeIrN,CAAAA,CAAQ2U,CAAA7U,GAAA,EACR+P,EAAAA,CAAS,EAEb,KAAI,IAAI9M,EAAI,CAAZ,CAAeA,CAAf,CAAmB/C,CAAA4B,OAAnB,CAAiCmB,CAAA,EAAjC,CAMI8M,CAAA,CAAO9M,CAAP,CAAA,CAAY46C,EAAA,CAJA39C,CAAA4S,CAAM7P,CAAN6P,CAIA,CAAmBgrC,CAAnB,CAGhB,OAAO/tC,EApCX;AAuCAmuC,QAASA,GAAc,CAACC,CAAD,CAAOtpC,CAAP,CAAYupC,CAAZ,CACvB,CAGI,GAAkB,QAAlB,GAAG,MAAOvpC,EAAV,EAAsC,IAAtC,GAA8BA,CAA9B,CAEI,MAAOA,EAGX,IAAGspC,CAAH,WAAmB72C,MAAnB,CAEI,MAAOuN,EAGX,KAAIvU,EAAOuU,CAAA,eAEX,IAAY9D,IAAAA,EAAZ,GAAGzQ,CAAH,CACA,CAYQ+9C,CAAAA,CAAUF,CAAAn+C,GAAA,EAId,KAAI,IAAIiD,EAAI,CAAZ,CAAeA,CAAf,CAAmB4R,CAAA/S,OAAnB,CAA+BmB,CAAA,EAA/B,CAEI4R,CAAA,CAAI5R,CAAJ,CAAA,CAASi7C,EAAA,CAAeG,CAAA,CAAQp7C,CAAR,CAAf,CAA2B4R,CAAA,CAAI5R,CAAJ,CAA3B,CAAmCm7C,CAAnC,CAGbD,EAAA39C,GAAA,CAAeqU,CAAf,CAEA,OAAOspC,EAvBX,CAsCQF,CAAAA,CAXQK,CACR,WAAc9+C,UADN8+C,CAER,UAAazxC,SAFLyxC,CAGR,YAAev0C,WAHPu0C,CAIR,WAAcC,UAJND,CAKR,YAAe9a,WALP8a,CAMR,WAAcxxC,UANNwxC,CAOR,aAAgB95B,YAPR85B,CAQR,aAAgBx4B,YARRw4B,CAWM,CAAMh+C,CAAN,CAGdk+C,EAAAA,CAAOJ,CAAA/tC,GAAA,CAAcwE,CAAA,UAAd,CAMX,OAAkB,QAAlB,EAAG2pC,CAAA18C,OAAH,EAAiCm8C,CAAjC,GAAiDz+C,UAAjD,CAEW,IAAIA,UAAJ,CAAe4+C,CAAAK,GAAf,CAA6BD,CAAAt5C,OAA7B,CAA0Cs5C,CAAA18C,OAA1C,CAFX,CAqBW,IAAIm8C,CAAJ,CADGG,CAAAK,GAAAv7B,MAAAw7B,CAAmBF,CAAAt5C,OAAnBw5C;AAAgCF,CAAAt5C,OAAhCw5C,CAA8CF,CAAA18C,OAA9C48C,CACH,CApFnB,CAyFAn/B,CAAAxf,UAAAuX,GAAA,CAA2BqnC,QAAQ,EACnC,CAOI,IANA,IAAIb,EAAgB,EAApB,CACI59C,EAAQ29C,EAAA,CAAY,IAAZ,CAAkBC,CAAlB,CADZ,CAGIc,EAAe,EAHnB,CAIIC,EAAoB,CAJxB,CAMQ57C,EAAI,CAAZ,CAAeA,CAAf,CAAmB66C,CAAAh8C,OAAnB,CAAyCmB,CAAA,EAAzC,CACA,CACI,IAAIkf,EAAM27B,CAAA,CAAc76C,CAAd,CAAA2f,WAEVg8B,EAAA,CAAa37C,CAAb,CAAA,CAAkB,CACdiC,OAAQ25C,CADM,CAEd/8C,OAAQqgB,CAFM,CAKlB08B,EAAA,EAAqB18B,CAGrB08B,EAAA,CAAoBA,CAApB,CAAwC,CAAxC,CAA4C,EAXhD,CAcIC,CAAAA,CAAcC,IAAAC,UAAA,CAAe,CAC7B,aAAgBJ,CADa,CAE7B,MAAS1+C,CAFoB,CAAf,CAKd++C,EAAAA,CAzKqBC,EAyKrBD,CAA8C,CAA9CA,CAAkDH,CAAAh9C,OACtDm9C,EAAA,CAAqBA,CAArB,CAA0C,CAA1C,CAA8C,EAC9C,KAAIr9C,EAAaq9C,CAAbr9C,CAAkCi9C,CAKlC9uC,EAAAA,CAAS,IAAIovC,WAAJ,CAAgBv9C,CAAhB,CAEb,KAAIw9C,EAAe,IAAItyC,UAAJ,CACfiD,CADe,CAEf,CAFe,CAGf,CAHe,CAKfsvC,EAAAA,CAAa,IAAIt1C,WAAJ,CACbgG,CADa,CAvLQmvC,EAuLR,CAGbJ,CAAAh9C,OAHa,CAKjB,KAAIw9C,EAAe,IAAI9/C,UAAJ,CACfuQ,CADe,CAEfkvC,CAFe,CAKnBG,EAAA,CA7MoBG,CA6MpB,CAAA,CAhNcC,WAiNdJ,EAAA,CA3MsBK,CA2MtB,CAAA,CApNgBC,CAqNhBN,EAAA,CAzMwBO,CAyMxB,CAAA,CAAsC/9C,CACtCw9C,EAAA,CAvMuBQ,CAuMvB,CAAA,CAA0D,CAA1D,CAAqCd,CAAAh9C,OAErC,KAAQmB,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB67C,CAAAh9C,OAAnB,CAAuCmB,CAAA,EAAvC,CAEIo8C,CAAA,CAAWp8C,CAAX,CAAA,CAAgB67C,CAAAe,WAAA,CAAuB58C,CAAvB,CAGpB,KAAQA,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB66C,CAAAh8C,OAAnB,CAAyCmB,CAAA,EAAzC,CAIIq8C,CAAAt8B,IAAA,CAFa86B,CAAAvwC,CAActK,CAAdsK,CAEb,CAAyBqxC,CAAA,CAAa37C,CAAb,CAAAiC,OAAzB,CAGJ,OAAO6K,EApEX,CAuEAwP;CAAAxf,UAAAiY,GAAA,CAA8B8nC,QAAQ,CAAC5/C,CAAD,CACtC,CACI,IAAIiiB,EAAMjiB,CAAA0iB,WAEV,IAzNyBs8B,EAyNzB,CAAG/8B,CAAH,CAEI,KAAM,KAAIs7B,EAAJ,CAAmB,kBAAnB,CAAwCt7B,CAAxC,CAAN,CAGJ,IAAIi9B,EAAe,IAAItyC,UAAJ,CAAe5M,CAAf,CAAsB,CAAtB,CAAyB,CAAzB,CAEnB,IA/Ocs/C,WA+Od,GAAGJ,CAAA,CA5OiBG,CA4OjB,CAAH,CAEI,KAAM,KAAI9B,EAAJ,CAAmB,kBAAnB,CAAwCr7B,EAAA,CAAEg9B,CAAA,CA9OhCG,CA8OgC,CAAF,GAAsC,CAAtC,CAAxC,CAAN,CAGJ,GAvPgBG,CAuPhB,GAAGN,CAAA,CA9OmBK,CA8OnB,CAAH,CAEI,KAAM,KAAIhC,EAAJ,CACE,yBADF,CAC8B2B,CAAA,CAjPlBK,CAiPkB,CAD9B,CAEE,OAFF,CAAN,CAKJ,GAAGL,CAAA,CAlPqBO,CAkPrB,CAAH,GAA2Cx9B,CAA3C,CAEI,KAAM,KAAIs7B,EAAJ,CACE,oCADF,CAEYt7B,CAFZ,CAEkB,UAFlB,CAE+Bi9B,CAAA,CAtPjBO,CAsPiB,CAF/B,CAAN,CAKAI,CAAAA,CAAiBX,CAAA,CAtPEQ,CAsPF,CAErB,IAAoB,CAApB,CAAGG,CAAH,EACGA,CADH,CACoB,EADpB,EAC0B59B,CAD1B,EAEG49B,CAFH,CAEoB,CAFpB,CAII,KAAM,KAAItC,EAAJ,CAAmB,6BAAnB,CAAmDsC,CAAnD,CAAN,CAGJ,IAAIC,EAAqBD,CAArBC,CAAsC,CAA1C,CACIC,EAAoB,IAAIl2C,WAAJ,CAAgB7J,CAAhB,CA7PCg/C,EA6PD,CAA+Cc,CAA/C,CADxB,CAEIX,EAAa,EAEjB,KAAQp8C,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB+8C,CAAnB,CAAwC,CAAxC,CAAA,CAEIX,CAAA,EAAcl1C,MAAAC,aAAA,CACV61C,CAAA,CAAkBh9C,CAAA,EAAlB,CADU,CACcg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CADd,CAEVg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CAFU;AAEcg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CAFd,CAGVg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CAHU,CAGcg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CAHd,CAIVg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CAJU,CAIcg9C,CAAA,CAAkBh9C,CAAA,EAAlB,CAJd,CAQlB,KAAA,CAAMA,CAAN,CAAU+8C,CAAV,CAAA,CAEIX,CAAA,EAAcl1C,MAAAC,aAAA,CAAoB61C,CAAA,CAAkBh9C,CAAA,EAAlB,CAApB,CAGdi9C,EAAAA,CAAiBnB,IAAAoB,MAAA,CAAWd,CAAX,CACjBe,EAAAA,CAAeF,CAAA,MACftB,EAAAA,CAAesB,CAAA,aAEnBjB,EAAA,CADkDc,CAClD,CAA0C,EAA1C,CAA8C,EAE9C,KAAQ98C,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB27C,CAAA98C,OAAnB,CAAwCmB,CAAA,EAAxC,CAEI27C,CAAA,CAAa37C,CAAb,CAAAiC,OAAA,EAA0B+5C,CAQ9Bf,GAAA,CAAe,IAAf,CAAqBkC,CAArB,CALchC,CACVK,GAAMv+C,CADIk+C,CAEV/tC,GAAOuuC,CAFGR,CAKd,CAzEJ,C,CChLAiC,QAASA,GAAI,CAACjpC,CAAD,CAAMnY,CAAN,CACb,CAEI,IAAAmY,EAAA,CAAWA,CAGX,KAAA8X,GAAA,CAAW9X,CAAA4I,EAAAkP,GAGX,KAAAjwB,EAAA,CAAWA,CACX,KAAAA,EAAAuL,SAAA,CAAkB,cAAlB,CAAkC,QAAQ,CAACxH,CAAD,CAC1C,CAqkBA,GAAG,EApkBCs9C,IAokBDC,EAAA,CAAU,CAAV,CAAH,GApkBID,IA0kBJrhD,EAAAsG,KAAA,CAAc,iBAAd,CAAiC,CA1kBhBvC,CA0kBiBlB,OAAD,CAAjC,CAEG,CA5kBCw+C,IA4kBDE,GAAA,CAAY,EAAZ,EA5kBCF,IAglBKE,GAJN,CAIkB,CAJlB,EAKiB,GALjB,GA5kBcx9C,CAilBT,CAAK,CAAL,CALL,EAKqC,GALrC,GA5kBcA,CAilBW,CAAK,CAAL,CALzB,EAKyD,GALzD,GA5kBcA,CAilB+B,CAAK,CAAL,CAL7C,EAMiB,GANjB,GA5kBcA,CAklBT,CAAK,CAAL,CANL,EAMqC,GANrC,GA5kBcA,CAklBW,CAAK,CAAL,CANzB,EAMyD,GANzD,GA5kBcA,CAklB+B,CAAK,CAAL,CAN7C,EAgBK,EA5lBJs9C,IAslBKE,GAMD,CANa,CAMb,EANqC,CAMrC,IA5lBSx9C,CAslBW,CAAK,CAAL,CAMpB,CAN8B,CAM9B,GA5lBSA,CA4lBT,CAAK,CAAL,CAAA,GA5lBJs9C,IA4lBgBG,OAAA,CAAY,CAAZ,CAAZ,EA5lBSz9C,CA4lBqB,CAAK,CAAL,CAA9B,GA5lBJs9C,IA4lB8CG,OAAA,CAAY,CAAZ,CAA1C,EA5lBSz9C,CA6lBT,CAAK,CAAL,CADA,GA5lBJs9C,IA6lBgBG,OAAA,CAAY,CAAZ,CADZ,EA5lBSz9C,CA6lBqB,CAAK,CAAL,CAD9B,GA5lBJs9C,IA6lB8CG,OAAA,CAAY,CAAZ,CAD1C,EA5lBSz9C,CA8lBT,CAAK,CAAL,CAFA,GA5lBJs9C,IA8lBgBG,OAAA,CAAY,CAAZ,CAFZ,EA5lBSz9C,CA8lBqB,CAAK,CAAL,CAF9B,GA5lBJs9C,IA8lB8CG,OAAA,CAAY,EAAZ,CAF1C,CAxBR,EAQA,CA4BA,IAAIv7C,EAxmBAo7C,IAwmBSI,GAATx7C,EAAuB,CAA3B,CACIy7C,EAHgBj/C,IAAAmS,IAAA+sC,CAAS,EAATA,CAtmBH59C,CAsmBgBlB,OAAb8+C,CAGhBD,CAA+B,CADnC,CAEIE,EAAa37C,CAAb27C,CAAsB,CAF1B,CAGIC,EA3mBAR,IA2mBOI,GAAPI,CAAoB,CAApBA,EAAyBH,CAAzBG,EAAyC,CAAzCA,CAIJ,IAFU57C,CAEV,CAFmBy7C,CAEnB,CA/mBIL,IA+mBKG,OAAA3+C,OAAT,CACA,CAII,IAAIi/C;AApnBJT,IAonBUG,OAAA3+C,OAANi/C,CAA2BF,CApnB/BP,KAqnBAG,OAAAz9B,IAAA,CArnBahgB,CAqnBG8hB,SAAA,CAAc,CAAd,CAAiBi8B,CAAjB,CAAhB,CAAuCF,CAAvC,CArnBAP,KAsnBAG,OAAAz9B,IAAA,CAtnBahgB,CAsnBG8hB,SAAA,CAAci8B,CAAd,CAAhB,CA3oB0BC,EA2oB1B,CANJ,CADA,IAcI,IA7nBAV,IA2nBAG,OAAAz9B,IAAA,CA3nBahgB,CA2nBb,CAAsB69C,CAAtB,CAEG,CAAc,EAAd,CA7nBU79C,CA6nBVlB,OAAH,CAEI,IAAQmB,CAAR,CA/nBSD,CA+nBGlB,OAAZ,CAA6B,EAA7B,CAAyBmB,CAAzB,CAAiCA,CAAA,EAAjC,CA/nBJq9C,IAioBQG,OAAA,CAAYI,CAAZ,CAAyB59C,CAAzB,CAAA,CAA8B,CAKvC69C,EAAH,EAtoBIR,IAsoBOW,GAAX,GAEIH,CAFJ,EAtoBIR,IAwoBQY,GAFZ,CAtoBIZ,IAwoBsBW,GAF1B,CAtoBIX,KA4oBJG,OAAA,CAAYv7C,CAAZ,CAAA,CApqB2Bi8C,CAwBvBb,KA6oBJG,OAAA,CAAYv7C,CAAZ,CAAqB,CAArB,CAAA,CAA0B47C,CA7oBtBR,KA8oBJG,OAAA,CAAYv7C,CAAZ,CAAqB,CAArB,CAAA,CAA0By7C,CA9oBtBL,KA+oBJG,OAAA,CAAYv7C,CAAZ,CAAqB,CAArB,CAAA,CAA0By7C,CAA1B,EAA0C,CA/oBtCL,KAipBJI,GAAA,CAAaI,CAIbM,GAAA,CArpBId,IAqpBJ,CAvrByBe,CAurBzB,CAzEA,CA7kBA,CADA,CAGG,IAHH,CAKA,KAAA9pB,KAAA,CAAY,GAEZ,KAAA70B,KAAA,CAAY,MAOR,KAAAkpB,GAAA,CAAiB,CACb,GADa,CACP,EADO,CACD,EADC,CACK,GADL,CACW,CADX,CACiB,CADjB,CACuB,CADvB,CAC6B,CAD7B,CACmC,CADnC,CACyC,CADzC,CAC+C,CAD/C,CACqD,CADrD,CAC2D,CAD3D,CACiE,CADjE,CACuE,CADvE,CAC6E,CAD7E,CAEb,IAAA2L,KAFa,CAED,GAFC,CAEM,CAFN,CAES,IAAAA,KAFT,EAEsB,CAFtB,CAEyB,CAFzB,CAE+B,CAF/B,CAEqC,CAFrC,CAE2C,CAF3C,CAEiD,CAFjD,CAEuD,CAFvD,CAE6D,CAF7D,CAEmE,CAFnE,CAEyE,CAFzE,CAE+E,CAF/E,CAEqF,CAFrF,CAE2F,CAF3F,CAEiG,CAFjG,CAEuG,CAFvG,CAGb,CAHa,CAGP,CAHO,CAGD,CAHC,CAGK,CAHL,CAGW,CAHX,CAGiB,CAHjB,CAGuB,CAHvB,CAG6B,CAH7B,CAGmC,CAHnC,CAGyC,CAHzC,CAG+C,CAH/C,CAGqD,CAHrD,CAG2D,GAH3D,CAGiE,EAHjE,CAGuE,CAHvE,CAG6E,EAH7E,CAIb,CAJa,CAIP,CAJO,CAID,GAJC,CAIK,GAJL,CAIW,CAJX,CAIiB,CAJjB,CAIuB,CAJvB;AAI6B,CAJ7B,CAImC,CAJnC,CAIyC,CAJzC,CAI+C,CAJ/C,CAIqD,CAJrD,CAI2D,CAJ3D,CAIiE,CAJjE,CAIuE,CAJvE,CAI6E,CAJ7E,CAMjB,KAAA9L,GAAA,CAAc,EACd,KAAAI,GAAA,CAAgB,CACZ,CACI5qB,KAAM,EADV,CADY,CAQpB,KAAAqgD,GAAA,CADA,IAAA/K,GACA,CADW,CAGX,KAAAgK,EAAA,CAAU,CAOV,KAAAgB,GAAA,CADA,IAAAC,GACA,CAHA,IAAAC,GAGA,CALA,IAAAC,GAKA,CALY,CAMZ,KAAAjB,OAAA,CAAc,IAAIjhD,UAAJ,CAAe,KAAf,CAEd,KAAAghD,GAAA,CAAY,CAEZ,KAAAmB,GAAA,CAAW,CAGPC,EAAAA,CAAM,CACN,CADM,CACA,EADA,CACM,EADN,CAEU,GAFV,CAENlgD,IAAAmgD,OAAA,EAFM,CAEgB,CAFhB,CAGU,GAHV,CAGNngD,IAAAmgD,OAAA,EAHM,CAGgB,CAHhB,CAIU,GAJV,CAINngD,IAAAmgD,OAAA,EAJM,CAIgB,CAJhB,CAOV,KAAI,IAAI5+C,EAAI,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEI,IAAAw9C,OAAA,CAAYx9C,CAAZ,EAAiB,CAAjB,CAAA,CAAsB,IAAAw9C,OAAA,CAAYx9C,CAAZ,EAAiB,CAAjB,CAAqB,CAArB,CAAtB,CAAgD2+C,CAAA,CAAI3+C,CAAJ,CAGpD,KAAAw9C,OAAA,CAAY,EAAZ,CAAA,CAAkB,IAAAA,OAAA,CAAY,EAAZ,CAAlB,CAAoC,EASpC,KAAAqB,GAAA,CAAY,CAEZ,KAAAZ,GAAA,CAzF2Ba,EA0F3B,KAAAd,GAAA,CAxF0Be,GA2F1B,KAAAC,GAAA,CADA,IAAAvB,GACA,CA5F8BM,EA8F1Bj1B,EAAAA,CAAK3U,CAAA2U,EAETzO,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CA/I0B2qB,CA+I1B,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,CAEI,MAAO,KAAA3B,EAFX,CADA,CAMAxiC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CArJ0B2qB,CAqJ1B,CAAyC,IAAzC,CAA+C,QAAQ,CAAC9iB,CAAD,CACvD,CACI,IAAAmhB,EAAA,CAAUnhB,CAAV,CAAsB,EAGnB,KAAAmhB,EAAH,CAAa,CAAb,GAKInhB,CAKJ,CALgB,EAKhB;AALuC,CAKvC,GALyB,IAAAqiB,GAKzB,EAHIL,EAAA,CAAAA,IAAA,CAzHkBe,EAyHlB,CAGJ,CAAG/iB,CAAH,CAAe,CAAf,GAEQvxB,CAIJ,CAJY,IAAA0zC,GAIZ,EAJyB,CAIzB,CAHIv+C,CAGJ,CAHW,IAAAy9C,OAAA37B,SAAA,CAAqBjX,CAArB,CAA4BA,CAA5B,CAAoC,IAAA2zC,GAApC,CAGX,CAFA,IAAAviD,EAAAsG,KAAA,CAAc,WAAd,CAA2BvC,CAA3B,CAEA,CADA,IAAA/D,EAAAsG,KAAA,CAAc,kBAAd,CAAkC,CAACvC,CAAAlB,OAAD,CAAlC,CACA,CAAAs/C,EAAA,CAAAA,IAAA,CAvIiBgB,CAuIjB,CANJ,CAVA,CAJJ,CADA,CA2BA9kC,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CAxJ6B8qB,EAwJ7B,CAA2C,IAA3C,CAAiD,QAAQ,EACzD,CAEI,MAAO,EAFX,CADA,CAMA/kC,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CA5J6B+qB,EA4J7B,CAA2C,IAA3C,CAAiD,QAAQ,EACzD,CAEI,MAAO,EAFX,CADA,CAMAhlC,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CAhK6BgrB,EAgK7B,CAA2C,IAA3C,CAAiD,QAAQ,EACzD,CAEI,MAAO,EAFX,CADA,CAMAjlC,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CAnKyBirB,EAmKzB,CAAuC,IAAvC,CAA6C,QAAQ,EACrD,CAEc,CAAV,IADSC,IA0hBNlC,EAzhBH,CAyhBa,GAzhBb,GAGIa,EAAA,CAAAA,IAAA,CA/JoBsB,GA+JpB,CAMJ,OAAO,EAXX,CADA,CAeA3kC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAlLyBirB,EAkLzB,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,EADA,CAcAzkC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CA3N4BorB,CA2N5B,CAA2C,IAA3C,CAAiD,QAAQ,CAACvjB,CAAD,CACzD,CAEc,CAAV,IADSqjB,IA6fNlC,EA5fH,CA4fa,GA5fb,IAGI,IAAAW,GAHJ,CAGkB9hB,CAHlB,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAvO2BqrB,CAuO3B,CAA0C,IAA1C,CAAgD,QAAQ,CAACxjB,CAAD,CACxD,CAEc,CAAV;CADSqjB,IA+eNlC,EA9eH,CA8ea,GA9eb,IAGI,IAAAU,GAHJ,CAGiB7hB,CAHjB,CAFJ,CADA,CAcA9hB,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CA7OwBsrB,CA6OxB,CAAsC,IAAtC,CAA4C,QAAQ,EACpD,CAEI,MAAU,EAAV,IADSJ,IAieNlC,EAheH,CAgea,GAheb,EAGW,IAAAhK,GAHX,CAQW,IAAAmK,GAVf,CADA,CAeA3iC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CA5PwBsrB,CA4PxB,CAAuC,IAAvC,CAA6C,QAAQ,CAACzjB,CAAD,CACrD,CAEc,CAAV,IADSqjB,IAkdNlC,EAjdH,CAida,GAjdb,GAII,IAAAhK,GACA,EADY,CAACnX,CACb,CAAA0jB,EAAA,CAAAA,IAAA,CALJ,EAUI,IAAApC,GAVJ,CAUiBthB,CAZrB,CADA,CAiBArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CApQyBwrB,EAoQzB,CAAwC,IAAxC,CAA8C,QAAQ,EACtD,EADA,CAcAhlC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAhRyByrB,EAgRzB,CAAwC,IAAxC,CAA8C,QAAQ,CAAC5jB,CAAD,CACtD,CAEc,CAAV,IADSqjB,IAmbNlC,EAlbH,CAkba,GAlbb,IAGI,IAAAmB,GAHJ,CAGgBtiB,CAHhB,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CApS2B0rB,EAoS3B,CAA0C,IAA1C,CAAgD,QAAQ,CAAC7jB,CAAD,CACxD,CAEc,CAAV,IADSqjB,IAqaNlC,EApaH,CAoaa,GApab,IAGI,IAAAkB,GAHJ,CAGgB,IAAAA,GAHhB,CAG4B,KAH5B,CAGqCriB,CAHrC,CAGiD,GAHjD,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAjT2B2rB,EAiT3B,CAA0C,IAA1C,CAAgD,QAAQ,CAAC9jB,CAAD,CACxD,CAEc,CAAV,IADSqjB,IAuZNlC,EAtZH,CAsZa,GAtZb,IAGI,IAAAkB,GAHJ,CAGgB,IAAAA,GAHhB,CAG4B,GAH5B,CAGmCriB,CAHnC,EAGgD,CAHhD,CAGoD,KAHpD,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAnU2B4rB,CAmU3B,CAA0C,IAA1C,CAAgD,QAAQ,CAAC/jB,CAAD,CACxD,CAEc,CAAV,IADSqjB,IAyYNlC,EAxYH;AAwYa,GAxYb,IAGI,IAAAuB,GAHJ,CAGgB,IAAAA,GAHhB,CAG4B,KAH5B,CAGqC1iB,CAHrC,CAGiD,GAHjD,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CA/U2B6rB,CA+U3B,CAA0C,IAA1C,CAAgD,QAAQ,CAAChkB,CAAD,CACxD,CAEc,CAAV,IADSqjB,IA2XNlC,EA1XH,CA0Xa,GA1Xb,IAGI,IAAAuB,GAHJ,CAGgB,IAAAA,GAHhB,CAG4B,GAH5B,CAGmC1iB,CAHnC,EAGgD,CAHhD,CAGoD,KAHpD,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CApVwB8rB,EAoVxB,CAAuC,IAAvC,CAA6C,QAAQ,CAACjkB,CAAD,CACrD,CAEc,CAAV,IADSqjB,IA6WNlC,EA5WH,CA4Wa,GA5Wb,IAGI,IAAAe,GACA,CADWliB,CACX,CAAA0jB,EAAA,CAAAA,IAAA,CAJJ,CAFJ,CADA,CAeAxlC,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CAvX6B+rB,CAuX7B,CAA2C,IAA3C,CAAiD,QAAQ,EACzD,CAEI,MAAU,EAAV,IADSb,IA8VNlC,EA7VH,CA6Va,GA7Vb,EAGW,IAAA0B,GAHX,CAQW,CAVf,CADA,CAeAlkC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAtY6B+rB,CAsY7B,CAA4C,IAA5C,CAAkD,QAAQ,CAAClkB,CAAD,CAC1D,CAEc,CAAV,IADSqjB,IA+UNlC,EA9UH,CA8Ua,GA9Ub,IAGI,IAAA0B,GAHJ,CAGoB7iB,CAHpB,CAFJ,CADA,CAcA9hB,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CAnZwBgsB,CAmZxB,CAAsC,IAAtC,CAA4C,QAAQ,EACpD,CAEI,MAAU,EAAV,IADSd,IAiUNlC,EAhUH,CAgUa,GAhUb,EAEW,IAAAoB,GAFX,CAOW,CATf,CADA,CAcA5jC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAhayBisB,CAgazB,CAAwC,IAAxC,CAA8C,QAAQ,CAACpkB,CAAD,CACtD,CAEc,CAAV,IADSqjB,IAmTNlC,EAlTH,CAkTa,GAlTb,IAGI,IAAAgB,GAHJ,CAGgBniB,CAHhB,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CA5a2BksB,CA4a3B,CAA0C,IAA1C,CAAgD,QAAQ,CAACrkB,CAAD,CACxD,CAEc,CAAV;CADSqjB,IAqSNlC,EApSH,CAoSa,GApSb,IAGI,IAAAiB,GAHJ,CAGgB,IAAAA,GAHhB,CAG4B,IAH5B,CAGoCpiB,CAHpC,CAFJ,CADA,CAcArhB,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAxb2BmsB,CAwb3B,CAA0C,IAA1C,CAAgD,QAAQ,CAACtkB,CAAD,CACxD,CAEc,CAAV,IADSqjB,IAuRNlC,EAtRH,CAsRa,GAtRb,IAGI,IAAAiB,GAHJ,CAGgB,IAAAA,GAHhB,CAG4B,GAH5B,CAGmCpiB,CAHnC,EAGgD,CAHhD,CAFJ,CADA,CAcA9hB,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CA9bwBosB,EA8bxB,CAAsC,IAAtC,CAA4C,QAAQ,EACpD,CAEI,MAAU,EAAV,IADSlB,IAyQNlC,EAxQH,CAwQa,GAxQb,EAEW,CAFX,CAOW,CATf,CADA,CAcAxiC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CA3cyBqsB,EA2czB,CAAwC,IAAxC,CAA8C,QAAQ,CAACxkB,CAAD,CACtD,CAEI,IAAAohB,GAAA,CAAYphB,CAFhB,CADA,CAMA9hB,EAAA,CAAAyO,CAAA,CAAiB,IAAAwL,KAAjB,CAA2C,EAA3C,CAA8C,IAA9C,CACQ,IAAAssB,GADR,CAEQ,IAAAC,GAFR,CAGQ,IAAAC,GAHR,CAIAhmC,EAAA,CAAAgO,CAAA,CAAkB,IAAAwL,KAAlB,CAA4C,EAA5C,CAA+C,IAA/C,CACQ,IAAAysB,GADR,CAEQ,IAAAA,GAFR,CAGQ,IAAAC,GAHR,CAOIh1B,GAAA,CAAA7X,CAAA4I,EAAAkP,GAAA,CAAgC,IAAhC,CAzbR,CA6bA,CAAA,CAAA,EAAA,UAAAg1B;CAAAlkD,GAAA,CAA2BmkD,QAAQ,EACnC,CACI,IAAIjkD,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAq2C,GACXr2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAohD,GACXphD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAqgD,EACXrgD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwhD,GACXxhD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAuhD,GACXvhD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAshD,GACXthD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAqhD,GACXrhD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4hD,GACX5hD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAghD,GACXhhD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwgD,GACXxgD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+hD,GAEZ,OAAO/hD,EAfX,CAkBAgkD,EAAA1jD,GAAA,CAA2B4jD,QAAQ,CAAClkD,CAAD,CACnC,CACI,IAAAq2C,GAAA,CAAWr2C,CAAA,CAAM,CAAN,CACX,KAAAohD,GAAA,CAAWphD,CAAA,CAAM,CAAN,CACX,KAAAqgD,EAAA,CAAUrgD,CAAA,CAAM,CAAN,CACV,KAAAwhD,GAAA,CAAYxhD,CAAA,CAAM,CAAN,CACZ,KAAAuhD,GAAA,CAAYvhD,CAAA,CAAM,CAAN,CACZ,KAAAshD,GAAA,CAAYthD,CAAA,CAAM,CAAN,CACZ,KAAAqhD,GAAA,CAAYrhD,CAAA,CAAM,CAAN,CACZ,KAAA4hD,GAAA,CAAY5hD,CAAA,CAAM,CAAN,CACZ,KAAAghD,GAAA,CAAchhD,CAAA,CAAM,CAAN,CACd,KAAAwgD,GAAA,CAAaxgD,CAAA,CAAM,CAAN,CACb,KAAA+hD,GAAA,CAAgB/hD,CAAA,CAAM,EAAN,CAXpB,CAc8BmkD,SAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACtC,CAEI,CAAA/N,GAAA,EAAY+N,CACZxB,GAAA,CAAAA,CAAA,CAHJ,CAM4ByB,QAAA,GAAQ,CAARA,CAAQ,CACpC,CACO,CAAAjD,GAAH,CAAc,CAAA/K,GAAd,CAEI,CAAArnB,GAAAyI,GAAA,CAAmB,CAAAlM,GAAnB,CAFJ,CAMI,CAAAyD,GAAA2I,GAAA,CAAmB,CAAApM,GAAnB,CAPR;AAWiC+4B,QAAA,GAAQ,CAARA,CAAQ,CAACplB,CAAD,CACzC,CAKmB,EAAf,CAAG,CAAA0iB,GAAH,EAAoC,KAApC,CAAuB,CAAAA,GAAvB,GAMA,CAAAL,GAAA,EAQA,CAPA,CAAAhB,OAAA,CAAY,CAAAqB,GAAA,EAAZ,CAOA,CAP2B1iB,CAO3B,CALG,CAAA0iB,GAKH,EALiB,CAAAb,GAKjB,EAL+B,CAK/B,GAHI,CAAAa,GAGJ,EAHkB,CAAAZ,GAGlB,CAHgC,CAAAD,GAGhC,EAH+C,CAG/C,EAAiB,CAAjB,GAAG,CAAAQ,GAAH,EAEIL,EAAA,CAAAA,CAAA,CAzhBsBe,EAyhBtB,CAhBJ,CALJ,CAyBA+B,CAAAF,GAAA,CAAmCS,QAAQ,CAACzhD,CAAD,CAC3C,CACI0hD,EAAA,CAAAA,IAAA,CAAqB1hD,CAArB,CAEG,KAAA0+C,GAAH,CAAe,CAAf,EAEIgD,EAAA,CAAAA,IAAA,CAAqB1hD,CAArB,EAA6B,CAA7B,CALR,CASAkhD,EAAAD,GAAA,CAAmCU,QAAQ,CAAC3hD,CAAD,CAC3C,CACI0hD,EAAA,CAAAA,IAAA,CAAqB1hD,CAArB,CACA0hD,GAAA,CAAAA,IAAA,CAAqB1hD,CAArB,EAA6B,CAA7B,CACA0hD,GAAA,CAAAA,IAAA,CAAqB1hD,CAArB,EAA6B,EAA7B,CACA0hD,GAAA,CAAAA,IAAA,CAAqB1hD,CAArB,EAA6B,EAA7B,CAJJ,CAOgC4hD,SAAA,GAAQ,CAARA,CAAQ,CACxC,CACI,IAAI5hD,EAAO,CAAAy9C,OAAA,CAAY,CAAAqB,GAAA,EAAZ,CAKX,EAAAL,GAAA,EAEG,EAAAK,GAAH,EAAiB,CAAAb,GAAjB,EAA+B,CAA/B,GAEI,CAAAa,GAFJ,EAEkB,CAAAZ,GAFlB,CAEgC,CAAAD,GAFhC,EAE+C,CAF/C,CAKiB,EAAjB,GAAG,CAAAQ,GAAH,EAEIL,EAAA,CAAAA,CAAA,CA/jBsBe,EA+jBtB,CAGJ,OAAOn/C,EAlBX,CAqBAkhD,CAAAL,GAAA,CAAiCgB,QAAQ,EACzC,CACI,MAAO,KAAAf,GAAA,EAAP,CAAiC,GADrC,CAIAI,EAAAJ,GAAA,CAAkCgB,QAAQ,EAC1C,CACI,MAAG,KAAApD,GAAH,CAAe,CAAf,CAEWqD,EAAA,CAAAA,IAAA,CAFX,CAEmCA,EAAA,CAAAA,IAAA,CAFnC,EAE4D,CAF5D,CAMWA,EAAA,CAAAA,IAAA,CAPf,CAWAb;CAAAH,GAAA,CAAkCiB,QAAQ,EAC1C,CACI,MAAOD,GAAA,CAAAA,IAAA,CAAP,CAA+BA,EAAA,CAAAA,IAAA,CAA/B,EAAwD,CAAxD,CACQA,EAAA,CAAAA,IAAA,CADR,EACiC,EADjC,CACsCA,EAAA,CAAAA,IAAA,CADtC,EAC+D,EAFnE,C,CdljBA,IAAIE,GAAoB,IAAIzlD,UAAJ,CAAe,GAAf,CAAxB,CACI0lD,GAAuB,EAD3B,CAEIC,GAAsB,EAF1B,CAGIC,GAAuB,EAH3B,CAIIC,GAA2B,IAAI7lD,UAAJ,CAAe,GAAf,CAJ/B,CAKI8lD,GAAc,EASlBC;QAASA,GAAI,CAACnuC,CAAD,CAAMnY,CAAN,CACb,CAEI,IAAAmY,EAAA,CAAWA,CAGX,KAAAnY,EAAA,CAAWA,CAGX,KAAAumD,GAAA,CAAoB,IAAIzhC,EAAJ,CAjEI0hC,EAiEJ,CACpB,KAAAC,GAAA,CAAmB,IAAI3hC,EAAJ,CAlEK0hC,EAkEL,CAQnB,KAAAE,EAAA,CAHA,IAAAC,EAGA,CAJA,IAAAC,GAIA,CAPA,IAAAC,EAOA,CAP6B,CAQ7B,KAAAC,EAAA,CAAuB,IAAIvmD,UAAJ,CAAe,GAAf,CACvBwmD,GAAA,CAAAA,IAAA,CAGA,KAAAC,GAAA,CAA6B,CAAA,CAC7B,KAAAC,GAAA,CAAqB,CAMrB,KAAAC,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAHA,IAAAC,GAGA,CAHqB,CAAA,CAUrB,KAAAC,GAAA,CAAmB,CACjB,IAAIjiC,EADa,CAEjB,IAAIA,EAFa,CAMnB,KAAA2T,GAAA,CAAW7gB,CAAA4I,EAAAiY,GAMX,KAAAuuB,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,EAEA,CAHA,IAAAC,GAGA,CAJA,IAAAC,EAIA,CALA,IAAAC,EAKA,CALwB,CAMxB,KAAAC,GAAA,CA5FoBC,CA6FpB,KAAAC,GAAA,CA3FoBC,CA4FpB,KAAAC,GAAA,CAAoB,CAAA,CACpB,KAAAC,EAAA,CAAkB,IAAIhI,WAAJ,CAtGSiI,KAsGT,CAClB,KAAAC,GAAA,CAAuB,IAAIx6C,SAAJ,CAAc,IAAAs6C,EAAd,CACvB,KAAAG,EAAA,CAAwB,IAAI9nD,UAAJ,CAAe,IAAA2nD,EAAf,CACxB,KAAAI,GAAA,CAAwB,IAAIhJ,UAAJ,CAAe,IAAA4I,EAAf,CACxB,KAAAK,GAAA,CAAyB,IAAIz9C,WAAJ,CAAgB,IAAAo9C,EAAhB,CACzB,KAAAM,GAAA,CAAsB,IAAI9kC,EAAJ,CAAe,IAAAwkC,EAAf,CAEtB,KAAAO,GAAA,CADA,IAAAC,EACA;AAD4B,CAAA,CAE5B,KAAAC,GAAA,CAAqB,KACrB3oD,EAAAsG,KAAA,CAAS,wBAAT,CAAmC,IAAAqiD,GAAnC,CACA,KAAAC,EAAA,CAAwB,CAGxB,KAAAC,GAAA,CAAgB,GAChB,KAAAC,EAAA,CAAgB,CAGhB,KAAAC,GAAA,CAAqB,IAAIxoD,UAAJ,CAAe,GAAf,CAGrB,KAAAyoD,EAAA,CAAuB,IAAIlkC,EAAJ,CAjIC0hC,EAiID,CAKvB,KAAAyC,GAAA,CADA,IAAAC,GACA,CAJA,IAAAC,GAIA,CAJiC,CAKjC,KAAAC,GAAA,CAAiC,CAAA,CAGjC,KAAA78B,GAAA,CAhHoB88B,CAiHpB,KAAAC,GAAA,CAAqB,IAAI/oD,UAAJ,CAAe,EAAf,CAMrB4X,EAAA2U,EAAAjP,GAAA,CAAiC,GAAjC,CAAwC,IAAxC,CACI,IAAA0rC,GADJ,CACuB,IAAAC,GADvB,CAC0C,IAAAC,GAD1C,CAC6D,IAAAC,GAD7D,CAEAvxC,EAAA2U,EAAAjP,GAAA,CAAiC,GAAjC,CAAwC,IAAxC,CACI,IAAA0rC,GADJ,CACuB,IAAAC,GADvB,CAGArxC,EAAA2U,EAAAjP,GAAA,CAAiC,GAAjC,CAAwC,IAAxC,CACI,IAAA8rC,GADJ,CACuB,IAAAC,GADvB,CAGAvrC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAA+8B,GAAlC,CACAxrC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAAg9B,GAAlC,CACAzrC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAAi9B,GAAlC,CACA1rC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAAk9B,GAAlC,CAEA3rC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAAm9B,GAAlC,CACA5rC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAAo9B,GAAlC,CACA7rC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB,CAA4B,IAA5B,CAAkC,IAAAq9B,GAAlC,CACA9rC,EAAA,CAAAlG,CAAA2U,EAAA,CAAqB,GAArB;AAA4B,IAA5B,CAAkC,IAAAs9B,GAAlC,CAEAjyC,EAAA2U,EAAAjP,GAAA,CAAiC,GAAjC,CAAwC,IAAxC,CACI,IAAAwsC,GADJ,CACuB,IAAAC,GADvB,CAGAnyC,EAAA2U,EAAAxO,GAAA,CAAkC,GAAlC,CAAyC,IAAzC,CACI,IAAAisC,GADJ,CACwB,IAAAC,GADxB,CAC4C,IAAAC,GAD5C,CACgE,IAAAC,GADhE,CAEAvyC,EAAA2U,EAAAxO,GAAA,CAAkC,GAAlC,CAAyC,IAAzC,CACI,IAAAisC,GADJ,CACwB,IAAAC,GADxB,CAGAryC,EAAA2U,EAAAxO,GAAA,CAAkC,GAAlC,CAAyC,IAAzC,CACI,IAAAqsC,GADJ,CACwB,IAAAC,GADxB,CAGA9rC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAA+9B,GAAnC,CACA/rC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAg+B,GAAnC,CAEA3yC,EAAA2U,EAAAxO,GAAA,CAAkC,GAAlC,CAAyC,IAAzC,CACI,IAAAysC,GADJ,CACwB,IAAAC,GADxB,CAGAlsC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAm+B,GAAnC,CACAnsC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAo+B,GAAnC,CACApsC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAq+B,GAAnC,CACArsC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAs+B,GAAnC,CACAtsC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAu+B,GAAnC,CACAvsC,EAAA,CAAA3G,CAAA2U,EAAA,CAAsB,GAAtB,CAA6B,IAA7B,CAAmC,IAAAw+B,GAAnC,CAEAnzC,EAAA2U,EAAAjP,GAAA,CAAiC,GAAjC,CAAwC,IAAxC,CAA8C,IAAA0tC,GAA9C,CAAiE,IAAAC,GAAjE,CACArzC,EAAA2U,EAAAxO,GAAA,CAAkC,GAAlC,CAAyC,IAAzC,CAA+C,IAAAmtC,GAA/C,CAAmE,IAAAC,GAAnE,CAEA,KAAA1yB,GOWA+F,GAAA13B,KAAA,CAA2B,CACvBgY,GPZe,IAAAssC,GOWQ,CAEvBtqB,GPbmCA,IOWZ,CAA3B,CPTArhC,EAAAuL,SAAA,CAAa,kBAAb;AAAiC,QAAQ,EACzC,CA0iDG,CAziDCqgD,IAyiDAlE,GAAJ,EAziDIkE,IAyiDuBnD,GAA3B,CAGIoD,EAAA,CA5iDAD,IA4iDA,CAHJ,CAOIE,EAAA,CAhjDAF,IAgjDA,CAjjDJ,CADA,CAGG,IAHH,CAIA5rD,EAAAuL,SAAA,CAAa,yBAAb,CAAwC,QAAQ,EAChD,CACIw7C,EAAA,CAAAA,IAAA,CADJ,CADA,CAGG,IAHH,CAIA/mD,EAAAsG,KAAA,CAAS,6BAAT,CAEAylD,GAAA,CAAAA,IAAA,CAjJJ,CAwJ2BC,QAAA,GAAQ,CAARA,CAAQ,CACnC,CACI,CAAAzF,GAAAphC,MAAA,EACA,EAAAshC,GAAAthC,MAAA,EAEA,EAAAyhC,GAAA,CAzN2BqF,CA0N3B,EAAAtF,EAAA,CAAoB,CAEpB,EAAAK,GAAA,CAA6B,CAAA,CAC7B,EAAAC,GAAA,CAAqB,CAErB,EAAAI,GAAA,CAAqB,CAAA,CACrB,EAAAD,GAAA,CAAkB,CAAA,CAClB,EAAAD,GAAA,CAAiB,CAAA,CACjB,EAAAD,GAAA,CAAkB,CAAA,CAElB,EAAAI,GAAA,CAAiB,CAAjB,CAAAniC,MAAA,EACA,EAAAmiC,GAAA,CAAiB,CAAjB,CAAAniC,MAAA,EAEA,EAAAyiC,EAAA,CAAwB,CACxB,EAAAD,EAAA,CAAuB,CACvB,EAAAD,GAAA,CAAsB,CACtB,EAAAD,EAAA,CAAuB,CACvB,EAAAD,GAAA,CAAe,CACf,EAAAD,GAAA,CAAmB,CACnB,EAAAU,GAAA,CAAoB,CAAA,CACpB,EAAAI,EAAA6D,KAAA,CAA2B,CAA3B,CACA,EAAAxD,EAAA,CAA4B,CAAA,CAC5B,EAAAD,GAAA,CAAkB,CAAA,CAElB,EAAAI,GAAA,CAAgB,GAChB,EAAAC,EAAA,CAAgB,CAEhB,EAAAH,GAAA,CAAqB,KACrB,EAAAC,EAAA,CAAwB,CAExB,EAAAhwB,GAAA,CAnNwBuzB,CAmNxB,CACA,EAAA7C,GAAA4C,KAAA,CAAwB,CAAxB,CAEA,EAAAnD,GAAAmD,KAAA,CAAwB,CAAxB,CACA,EAAAnD,GAAA,CAAmB,CAAnB,CAAA,CAAwB,CACxB,EAAAA,GAAA,CAAmB,CAAnB,CAAA,CAAwB,GAxC5B,CA2CA,CAAA,CAAA,EAAA,UAAAqD;CAAArrD,GAAA,CAA2BsrD,QAAQ,EACnC,CACI,IAAIprD,EAAQ,EAIZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4lD,EAEX5lD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2lD,GACX3lD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA0lD,EAEX1lD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAylD,EACXzlD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA6lD,EAEX7lD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA+lD,GACX/lD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAgmD,GAEXhmD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAomD,GACXpmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAmmD,GACZnmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAkmD,GACZlmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAimD,GAKZjmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA2mD,EACZ3mD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA0mD,EACZ1mD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAymD,GACZzmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwmD,EACZxmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAumD,GACZvmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAsmD,GACZtmD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4mD,GACZ5mD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8mD,GACZ9mD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAgnD,GACZhnD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAonD,EACZpnD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAynD,EACZznD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAwnD,GACZxnD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA0nD,GACZ1nD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA2nD,EAEZ3nD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA4nD,GACZ5nD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA6nD,EAEZ7nD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8nD,GAGZ9nD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqrD,GAEZrrD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAsrB,GACZtrB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqoD,GAGZ,OAAOroD,EAnDX,CAsDAmrD;CAAA7qD,GAAA,CAA2BgrD,QAAQ,CAACtrD,CAAD,CACnC,CAGI,IAAA4lD,EAAA,CAA6B5lD,CAAA,CAAM,CAAN,CAE7B,KAAA2lD,GAAA,CAAe3lD,CAAA,CAAM,CAAN,CACf,KAAA0lD,EAAA,CAAoB1lD,CAAA,CAAM,CAAN,CAEpB,KAAAylD,EAAA,CAA6BzlD,CAAA,CAAM,CAAN,CAC7B,KAAA6lD,EAAA,CAAuB7lD,CAAA,CAAM,CAAN,CACvBurD,GAAA,CAAAA,IAAA,CAEA,KAAAxF,GAAA,CAA6B/lD,CAAA,CAAM,CAAN,CAC7B,KAAAgmD,GAAA,CAAqBhmD,CAAA,CAAM,CAAN,CAErB,KAAAomD,GAAA,CAAqBpmD,CAAA,CAAM,CAAN,CACrB,KAAAmmD,GAAA,CAAkBnmD,CAAA,CAAM,EAAN,CAClB,KAAAkmD,GAAA,CAAiBlmD,CAAA,CAAM,EAAN,CACjB,KAAAimD,GAAA,CAAkBjmD,CAAA,CAAM,EAAN,CAKlB,KAAA2mD,EAAA,CAAwB3mD,CAAA,CAAM,EAAN,CACxB,KAAA0mD,EAAA,CAAuB1mD,CAAA,CAAM,EAAN,CACvB,KAAAymD,GAAA,CAAsBzmD,CAAA,CAAM,EAAN,CACtB,KAAAwmD,EAAA,CAAuBxmD,CAAA,CAAM,EAAN,CACvB,KAAAumD,GAAA,CAAevmD,CAAA,CAAM,EAAN,CACf,KAAAsmD,GAAA,CAAmBtmD,CAAA,CAAM,EAAN,CACnB,KAAA4mD,GAAA,CAAwB5mD,CAAA,CAAM,EAAN,CACxB,KAAA8mD,GAAA,CAAyB9mD,CAAA,CAAM,EAAN,CACzB,KAAAgnD,GAAA,CAAoBhnD,CAAA,CAAM,EAAN,CACpB,KAAAonD,EAAA,CAAwBpnD,CAAA,CAAM,EAAN,CACxB,KAAAynD,EAAA,CAA4BznD,CAAA,CAAM,EAAN,CAC5B,KAAAwnD,GAAA,CAAkBxnD,CAAA,CAAM,EAAN,CAClB,KAAA0nD,GAAA,CAAqB1nD,CAAA,CAAM,EAAN,CACrB,KAAA2nD,EAAA,CAAwB3nD,CAAA,CAAM,EAAN,CAExB,KAAA4nD,GAAA,CAAgB5nD,CAAA,CAAM,EAAN,CAChB,KAAA6nD,EAAA,CAAgB7nD,CAAA,CAAM,EAAN,CAEhB,KAAA8nD,GAAA,CAAqB9nD,CAAA,CAAM,EAAN,CAGrB,KAAAqrD,GAAA,CAAkCrrD,CAAA,CAAM,EAAN,CAElC,KAAAsrB,GAAA,CAAWtrB,CAAA,CAAM,EAAN,CACX,KAAAqoD,GAAA,CAAqBroD,CAAA,CAAM,EAAN,CAGrB,KAAAinD,EAAA,CAAkB,IAAAG,EAAA/5C,OAClB,KAAA85C,GAAA,CAAuB,IAAIx6C,SAAJ,CAAc,IAAAs6C,EAAd,CACvB,KAAAI,GAAA,CAAwB,IAAIhJ,UAAJ,CAAe,IAAA4I,EAAf,CACxB;IAAAK,GAAA,CAAyB,IAAIz9C,WAAJ,CAAgB,IAAAo9C,EAAhB,CACzB,KAAAM,GAAA,CAAsB,IAAI9kC,EAAJ,CAAe,IAAAwkC,EAAf,CAEnB,KAAAO,GAAH,CAEI,IAAAzoD,EAAAsG,KAAA,CAAc,aAAd,CAFJ,CAMI,IAAAtG,EAAAsG,KAAA,CAAc,YAAd,CA9DR,CAsEA8lD,EAAA7C,GAAA,CAA8BkD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAKAL,EAAA5C,GAAA,CAA8BkD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAKAN,EAAA3C,GAAA,CAA8BkD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAKAP,EAAA1C,GAAA,CAA8BkD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAMAR,EAAAzC,GAAA,CAA8BkD,QAAQ,EACtC,CAEI,MAAO,KAAAnG,EAFX,CAMA0F,EAAAxC,GAAA,CAA8BkD,QAAQ,EACtC,CAE2BpG,IAAAA,EAAAA,IAAAA,EAAAA,CAopBnBqG,EAAU7G,EAAA,CAAoBxvB,CAApB,CAppBSgwB,CAqpBnB3iD,CACDgpD,EAAH,CAEIhpD,CAFJ,CAEWgpD,CAAA1yC,KAAA,CAxpBJ2yC,IAwpBI,CAFX,CAMIjpD,CANJ,CAtpBOipD,IA4pBIlG,EAAA,CAAqBpwB,CAArB,CA5pBX,OA+pBO3yB,EAjqBX,CAKAqoD,EAAAvC,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAKAb,EAAAtC,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAKAd,EAAArC,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAKAf,EAAApC,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAOAhB;CAAAnC,GAAA,CAA8BoD,QAAQ,EACtC,CAEO,IAAA5G,GAAA5jD,OAAH,GAEI,IAAAgkD,EAFJ,CAEiC,IAAAJ,GAAAxhC,MAAA,EAFjC,CAKA,OAAO,KAAA4hC,EAPX,CAUAuF,EAAAlC,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAOAlB,EAAAjC,GAAA,CAA8BoD,QAAQ,EACtC,CAGI,MAAO,IAHX,CAMAnB,EAAAhC,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,MAAO,IAFX,CAQApB,EAAA/B,GAAA,CAA8BoD,QAAQ,EACtC,CAEO,IAAAnE,GAAA,CA/bqB6C,CA+brB,CAAH,EAEI,IAAAvzB,GAAA,CAjcoBuzB,CAicpB,CAGJ,QADY,IAAA1F,GAAA5jD,OACZ,EADuC,CAAC,IAAAwkD,GACxC,GAAiB,CAAjB,CAAsB,GAP1B,CAWA+E,EAAA9B,GAAA,CAA8BoD,QAAQ,EACtC,CAEI,IAAA90B,GAAA,CA1cyB+0B,CA0czB,CACA,OAAO,EAHX,CAQAvB,EAAA7B,GAAA,CAA+BqD,QAAQ,EACvC,CAEI,IAAA1E,GAAA,CAA2B,CAF/B,CAMAkD,EAAA5B,GAAA,CAA+BqD,QAAQ,CAACh6C,CAAD,CACvC,CAEI,IAAIk5C,EAAU1G,EAAA,CAAY,IAAA6C,GAAZ,CACV6D,EAAJ,GAEIA,CAFJ,CAEc,IAAAe,GAFd,CAIAf,EAAA1yC,KAAA,CAAa,IAAb,CAAmBxG,CAAnB,CAA0B,CAA1B,CAA6B,IAAAq1C,GAA7B,CAPJ,CAWAkD,EAAA3B,GAAA,CAA+BsD,QAAQ,EACvC,CAEI,IAAA9E,GAAA,CAA2B,CAF/B,CAMAmD,EAAA1B,GAAA,CAA+BsD,QAAQ,CAACn6C,CAAD,CACvC,CAEI,IAAIk5C,EAAU1G,EAAA,CAAY,IAAA4C,GAAZ,CACV8D,EAAJ,GAEIA,CAFJ,CAEc,IAAAe,GAFd,CAIAf,EAAA1yC,KAAA,CAAa,IAAb,CAAmBxG,CAAnB,CAA0B,CAA1B,CAA6B,IAAAo1C,GAA7B,CAPJ,CAWAmD;CAAAzB,GAAA,CAA+BsD,QAAQ,CAACp6C,CAAD,CACvC,CAEI,IAAA6yC,EAAA,CAA6B7yC,CAFjC,CAMAu4C,EAAAxB,GAAA,CAA+BsD,QAAQ,CAACr6C,CAAD,CACvC,CAEIs6C,EAAA,CAAAA,IAAA,CAAiB,IAAAzH,EAAjB,CAA6C7yC,CAA7C,CAFJ,CAOAu4C,EAAAvB,GAAA,CAA+BuD,QAAQ,CAACC,CAAD,CACvC,CAGO,IAAAhH,GAAH,CAGI,IAAAA,GAHJ,CAGyB,CAAA,CAHzB,CAKQgH,CALR,EAQItC,EAAA,CAAAA,IAAA,CAIJ,KAAAtF,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB,GAAtB,CAhBJ,CAmBA+kD,EAAAtB,GAAA,CAA+BwD,QAAQ,EACvC,EAIAlC,EAAArB,GAAA,CAA+BwD,QAAQ,EACvC,EAIAnC,EAAApB,GAAA,CAA+BwD,QAAQ,EACvC,EAIApC,EAAAnB,GAAA,CAA+BwD,QAAQ,EACvC,EAIArC,EAAAlB,GAAA,CAA+BwD,QAAQ,EACvC,EAMAtC,EAAAjB,GAAA,CAA+BwD,QAAQ,CAAC96C,CAAD,CACvC,CA3lB+Bo4C,CA8lB3B,GAAG,IAAArF,GAAH,EAII,IAAAA,GAEA,CAFe/yC,CAEf,CADA,IAAA0yC,GAAAphC,MAAA,EACA,CAAA,IAAAwhC,EAAA,CAAoBX,EAAA,CAAkBnyC,CAAlB,CANxB,EAYI,IAAA0yC,GAAAl/C,KAAA,CAAuBwM,CAAvB,CAID,KAAA0yC,GAAA1jD,OAAH,EAA+B,IAAA8jD,EAA/B,GAsEIoG,CAUJ,CAVc9G,EAAA,CApEV2I,IAoE+BhI,GAArB,CAUd,CATImG,CASJ,GAPIA,CAOJ,CA9EI6B,IAuEUC,GAOd,EALA9B,CAAA1yC,KAAA,CAzEIu0C,IAyEJ,CAKA,CA9EIA,IA6EJjI,EACA,CA9EIiI,IA4EJhI,GAEA,CA9rB2BqF,CA8rB3B,CA9EI2C,IA8EJrI,GAAAphC,MAAA,EAhFA,CAnBJ,CAyBAinC,EAAAhB,GAAA,CAA+B0D,QAAQ,EACvC,EAIA1C,EAAAf,GAAA,CAA+B0D,QAAQ,EACvC,EAIA3C,EAAAd,GAAA,CAA+B0D,QAAQ,EACvC,EAMA5C;CAAAb,GAAA,CAA8B0D,QAAQ,EACtC,CAGO,IAAAjG,EAAAnmD,OAAH,GAEI,IAAAsmD,GAFJ,CAEqC,IAAAH,EAAA/jC,MAAA,EAFrC,CAMA,OAAO,KAAAkkC,GATX,CAWAiD,EAAAX,GAAA,CAA+ByD,QAAQ,EACvC,EAKA9C,EAAAZ,GAAA,CAA8B2D,QAAQ,EACtC,CAOI,MAHAtqD,EAGA,CAFU,GAEV,CAFiB,CAAC,IAAAmkD,EAAAnmD,OALtB,CAWAupD,EAAAV,GAAA,CAA+B0D,QAAQ,CAACv7C,CAAD,CACvC,CAEgB,GAAZ,EAAGA,CAAH,GAGI,IAAAm1C,EAAA7jC,MAAA,EACA,CAAA,IAAA6jC,EAAA3hD,KAAA,CAA0B,GAA1B,CAJJ,CAFJ,CA6BA+kD,EAAAyC,GAAA,CAAqCQ,QAAQ,EAC7C,EASAC,SAASA,EAAoB,CAACC,CAAD,CAAWvtD,CAAX,CAAiB+qD,CAAjB,CAC7B,CACQA,CAAJ,GAEIA,CAFJ,CAEczG,EAAAxlD,UAAA+tD,GAFd,CAIA,KAAI,IAAI7qD,EAAI,CAAZ,CAAeA,CAAf,CAAmBurD,CAAA1sD,OAAnB,CAAoCmB,CAAA,EAApC,CAEIgiD,EAAA,CAAkBuJ,CAAA,CAASvrD,CAAT,CAAlB,CACA,CADiChC,CACjC,CAAAikD,EAAA,CAAqBsJ,CAAA,CAASvrD,CAAT,CAArB,CAAA,CAAoC+oD,CAR5C,CAYAyC,QAASA,GAAe,CAACtQ,CAAD,CACxB,CAEI,IADA,IAAIqQ,EAAW,EAAf,CACQvrD,EAAI,CAAZ,CAAmB,EAAnB,CAAeA,CAAf,CAAuBA,CAAA,EAAvB,CAEIurD,CAAAloD,KAAA,CAAc63C,CAAd,CAAqBl7C,CAArB,CAEJ,OAAOurD,EANX,CAUAD,CAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAAvG,GAAA,CAAmB,IAAAxC,GAAAthC,MAAA,EAAnB,CAAA,CAAgD,IAAAshC,GAAAthC,MAAA,EADpD,CADA,CAMAqqC,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7I,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB,IAAA0hD,GAAA,CAAmB,IAAAxC,GAAAthC,MAAA,EAAnB,CAAtB,CAFJ,CADA,CAOAqqC;CAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACgC,IAAA,EAAA,IAAA/I,GAAAthC,MAAA,EAuiC5B,EAAA,CAAOwqC,EAAA,CAAW57C,CAAX,CAviCgD67C,KAuiChD,CAviCwDzpD,EAuiCxD,CAriCP,KAAAqhD,GAAA,CAAiB,CAAjB,CAAAjgD,KAAA,CAAyBwM,CAAzB,CACA,KAAAyzC,GAAA,CAAiB,CAAjB,CAAAjgD,KAAA,CAAyBwM,CAAzB,CACA,KAAA7T,EAAAsG,KAAA,CAAc,YAAd,CALJ,CADA,CAUAgpD,EAAA,CAAqB,CAAC,EAAD,CAAO,EAAP,CAArB,CAAmC,CAAnC,CAAsC,QAAQ,EAC9C,CACI,IAAA9H,GAAA,CAvtBwB2E,CAwtBxB,KAAA5E,GAAA,CAAmB,IAAAM,GAInB,KAAAR,GAAA,CADA,IAAAF,GACA,CAFA,IAAAD,GAEA,CAHA,IAAAe,GAGA,CAHoB,CAAA,CAIpB0H,GAAA,CAAAA,IAAA,CACAC,GAAA,CAAAA,IAAA,CARJ,CADA,CAaAN,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAIAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA9H,GAAA,CA3uBwB2E,CA4uBxB,KAAA5E,GAAA,CAAmB,IAAAM,GACnB,KAAAI,GAAA,CAAoB,CAAA,CAGpB,KAAAZ,GAAA,CADA,IAAAF,GACA,CAFA,IAAAD,GAEA,CAFkB,CAAA,CAGlB0I,GAAA,CAAAA,IAAA,CAPJ,CADA,CAaAN,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CAEI,IAAA7I,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB,GAAtB,CAHJ,CADA,CAQAioD,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAGAA;CAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CAEIO,EAAA,CAAAA,IAAA,CACI,GADJ,EAEO,GAFP,CAEa,IAAAtJ,GAAAthC,MAAA,EAFb,GAGM6qC,IAqzBC1I,GAAA,CAAkB,CAAlB,CAAsB,CAxzB7B,EAFJ,CADA,CAYAkI,EAAA,CAAqB,CAAC,EAAD,CAAO,EAAP,CAArB,CAAmC,CAAnC,CAAsC,QAAQ,EAC9C,CACIO,EAAA,CAAAA,IAAA,CAA2B,IAAAtJ,GAAAthC,MAAA,EAA3B,EAAwD,CAAxD,CAA6D,IAAAshC,GAAAthC,MAAA,EAA7D,CADJ,CADA,CAMAqqC,EAAA,CAAqB,CAAC,EAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CAKIK,EAAA,CAAAA,IAAA,CALJ,CADA,CAUAL,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAIAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAIAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAIAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAIAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA9H,GAAA,CAn1BwB2E,CAo1BxB,KAAA5E,GAAA,CAAmB,IAAAM,GACnB,KAAAI,GAAA,CAAoB,CAAA,CACpB,KAAAf,GAAA,CAAkB,CAAA,CAClB,KAAAG,GAAA,CAAqB,CAAA,CACrB,KAAAF,GAAA,CAAiB,CAAA,CACjByI,GAAA,CAAAA,IAAA,CAPJ,CADA,CAYAN,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA;CAAA,CAAqBE,EAAA,CAAgB,GAAhB,CAArB,CAA4C,CAA5C,CAA+C,QAAQ,EACvD,CACI,GAAG,EAAA,IAAA5I,GAAA,CAAgB,CAAhB,CAAH,CAAA,CAMA,IAAI7jD,EAAO,IAAAwjD,GAAAthC,MAAA,EACX,KAAAuiC,GAAA,CAp3ByBmG,CAq3BzB,KAAApG,GAAA,CAAmB,IAAAQ,GACnB,KAAAE,GAAA,CAAoB,CAAC,EAAE,IAAArB,GAAF,CAAkB,CAAlB,CACrB,KAAAM,GAAA,CAAkB,CAAC,EAAEnkD,CAAF,CAAU,EAAV,CACnB,KAAAqkD,GAAA,CAAkB,CAAC,EAAErkD,CAAF,CAAU,EAAV,CACnB,KAAAokD,GAAA,CAAiB,CAAA,CACjBwI,GAAA,CAAAA,IAAA,CACAC,GAAA,CAAAA,IAAA,CAdA,CADJ,CADA,CAoBAN,EAAA,CAAqBE,EAAA,CAAgB,GAAhB,CAArB,CAA4C,CAA5C,CAA+C,QAAQ,EACvD,CACI,GAAG,EAAA,IAAA5I,GAAA,CAAgB,CAAhB,CAAH,CAAA,CAMA,IAAI7jD,EAAO,IAAAwjD,GAAAthC,MAAA,EACX,KAAAuiC,GAAA,CAz4BwB2E,CA04BxB,KAAA5E,GAAA,CAAmB,IAAAM,GACnB,KAAAI,GAAA,CAAoB,CAAC,EAAE,IAAArB,GAAF,CAAkB,CAAlB,CACrB,KAAAM,GAAA,CAAkB,CAAC,EAAEnkD,CAAF,CAAU,EAAV,CACnB,KAAAqkD,GAAA,CAAkB,CAAC,EAAErkD,CAAF,CAAU,EAAV,CACnB,KAAAokD,GAAA,CAAiB,CAAA,CACjBwI,GAAA,CAAAA,IAAA,CACAC,GAAA,CAAAA,IAAA,CAdA,CADJ,CADA,CAoBAN,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7G,GAAA,CAAkB,CAAA,CAClB,KAAAzoD,EAAAsG,KAAA,CAAc,aAAd,CAFJ,CADA,CAQAgpD,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAAtI,GAAA,CAA6B,CAAA,CADjC,CADA,CAOAsI,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAAtI,GAAA,CAA6B,CAAA,CADjC,CADA,CAMAsI;CAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7G,GAAA,CAAkB,CAAA,CAClB,KAAAzoD,EAAAsG,KAAA,CAAc,YAAd,CAFJ,CADA,CAOAgpD,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7G,GAAA,CAAkB,CAAA,CAClB,KAAAzoD,EAAAsG,KAAA,CAAc,aAAd,CAFJ,CADA,CAOAgpD,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7G,GAAA,CAAkB,CAAA,CAClB,KAAAzoD,EAAAsG,KAAA,CAAc,YAAd,CAFJ,CADA,CAOAgpD,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7I,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAmD,GAAnD,CAAsB,IAAA2/C,GAAtB,CAFJ,CADA,CAQAsI,EAAA,CAAqB,CAAC,GAAD,CAAO,GAAP,CAArB,CAAmC,CAAnC,CAAsC,QAAQ,EAC9C,CACI,IAAArH,GAAA,CAAoB,CAAA,CADxB,CADA,CAMAqH,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7I,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB,CAAC,IAAAk/C,GAAAthC,MAAA,EAAvB,CAFJ,CADA,CAOAqqC,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7I,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB,CAAtB,CACA,KAAAo/C,GAAAp/C,KAAA,CAAsB,CAAtB,CAHJ,CADA,CAQAioD,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAGAA;CAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7I,GAAAthC,MAAA,EACA,KAAI,IAAInhB,EAAI,CAAZ,CAAmBnB,EAAnB,CAAemB,CAAf,CAAyCA,CAAA,EAAzC,CAEI,IAAAyiD,GAAAp/C,KAAA,CA7gCsB0oD,8CA6gCAnP,WAAA,CAAyB58C,CAAzB,CAAtB,CAGJ,KAAAyiD,GAAAp/C,KAAA,CAAsB,CAAtB,CAPJ,CADA,CAYAioD,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAArI,GAAA,CAAqB,IAAAV,GAAAthC,MAAA,EADzB,CADA,CAMAqqC,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAA7I,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB,IAAA4/C,GAAtB,CAFJ,CADA,CAOAqI,EAAA,CAAqB,CAAC,GAAD,CAAO,GAAP,CAArB,CAAmC,CAAnC,CAAsC,QAAQ,EAC9C,CACI,IAAA52B,GAAA,EADJ,CADA,CAMA,KAAIs3B,GAAQ,IAAIzvD,UAAJ,CAAe,GAAf,CACZyvD,GAAA,CAAM,EAAN,CAAA,CAAc,GACdA,GAAA,CAAM,EAAN,CAAA,CAAc,CACdA,GAAA,CAAM,EAAN,CAAA,CAAc,EACdV,EAAA,CAAqB,CAAC,GAAD,CAArB,CAA6B,CAA7B,CAAgC,QAAQ,EACxC,CACI,IAAIrS,EAAQ,IAAAsJ,GAAAthC,MAAA,EAGZ,KAAAwhC,GAAAthC,MAAA,EACA,KAAAshC,GAAAp/C,KAAA,CAAsB2oD,EAAA,CAAM/S,CAAN,CAAtB,CALJ,CADA,CA6B6BgT,SAAA,GAAQ,CAARA,CAAQ,CAACv5B,CAAD,CAAU3yB,CAAV,CACrC,CAEI,CADIgpD,CACJ,CADc5G,EAAA,CAAqBzvB,CAArB,CACd,GAEIq2B,CAAA1yC,KAAA,CAAa,CAAb,CAAmBtW,CAAnB,CAJR,CAYAuiD,EAAAxlD,UAAAovD,GAAA,CAAoCC,QAAQ,EAC5C,CAEI,MAAO,KAAArJ,EAAA,CAAqB,IAAAJ,EAArB,CAFX,CAKAJ;EAAAxlD,UAAAsvD,GAAA,CAAqCC,QAAQ,CAACtsD,CAAD,CAC7C,CAEI,IAAA+iD,EAAA,CAAqB,IAAAJ,EAArB,CAAA,CAAmD3iD,CAFvD,CAK6BusD,SAAA,GAAQ,CAARA,CAAQ,CACrC,CAII,CAAAxJ,EAAA,CAAqB,CAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,EAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,EAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,EAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,CAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAC7B,EAAAA,EAAA,CAAqB,EAArB,CAAA,CAA6B,GAE7B0F,GAAA,CAAAA,CAAA,CAlCJ,CAqCmC+D,QAAA,GAAQ,CAARA,CAAQ,CAC3C,CAEI,IAAI,IAAIvsD,EAAI,CAAZ,CAAeA,CAAf,CAAmB,CAAA8iD,EAAAjkD,OAAnB,CAAgDmB,CAAA,EAAhD,CAEOoiD,EAAA,CAAyBpiD,CAAzB,CAAH,EAMAmqD,EAAA,CAAAA,CAAA,CAAiBnqD,CAAjB,CAAoB,CAAA8iD,EAAA,CAAqB9iD,CAArB,CAApB,CAVR,CAkBAwsD,QAASA,GAAmB,CAAC95B,CAAD,CAAUq2B,CAAV,CAC5B,CACQA,CAAJ,GAEIA,CAFJ,CAEczG,EAAAxlD,UAAAovD,GAFd,CAIAhK,GAAA,CAAoBxvB,CAApB,CAAA,CAA+Bq2B,CALnC;AAYA0D,QAASA,GAAoB,CAAC/5B,CAAD,CAAUq2B,CAAV,CAC7B,CACQA,CAAJ,GAEIA,CAFJ,CAEczG,EAAAxlD,UAAAsvD,GAFd,CAIAjK,GAAA,CAAqBzvB,CAArB,CAAA,CAAgCq2B,CALpC,CASA2D,QAASA,GAAqB,CAACC,CAAD,CAAcC,CAAd,CAAgCC,CAAhC,CAC9B,CACIzK,EAAA,CAAyBuK,CAAzB,CAAA,CAAwC,CAGxCzK,GAAA,CAAoByK,CAApB,CAAA,CAAmC,QAAQ,EAC3C,CAGI,MAFW,KAAA7J,EAAA,CAAqB8J,CAArB,CAEX,CAFoD,GAEpD,CADY,IAAA9J,EAAA,CAAqB+J,CAArB,CACZ,GADwD,CAF5D,CAOA1K,GAAA,CAAqBwK,CAArB,CAAA,CAAoC,QAAQ,CAAC5sD,CAAD,CAC5C,CACI,IAAA+iD,EAAA,CAAqB6J,CAArB,CAAA,CAAoC5sD,CAIpC,KAAIkxC,EAASlxC,CAATkxC,EAAiB,CAAjBA,CAAqB,GAArBA,CAFa,IAAA6R,EAAAgK,CAAqBD,CAArBC,CAEb7b,CAA2C,EAE/CkZ,GAAA,CAAAA,IAAA,CAAiByC,CAAjB,CAHY7sD,CAGZ,CAHmB,GAGnB,CALgB,IAAA+iD,EAAAiK,CAAqBH,CAArBG,CAKhB,CAHwC,EAGxC,CACA5C,GAAA,CAAAA,IAAA,CAAiB0C,CAAjB,CAAoC5b,CAApC,CARJ,CAbJ,CA8BA+b,QAASA,GAAqB,CAACt6B,CAAD,CAAUu6B,CAAV,CAAwB/wB,CAAxB,CAC9B,CACIgmB,EAAA,CAAoBxvB,CAApB,CAAA,CAA+B4vB,EAAAxlD,UAAAovD,GAG/B/J,GAAA,CAAqBzvB,CAArB,CAAA,CAAgC,QAAQ,CAAC3yB,CAAD,CACxC,CACI,IAAA+iD,EAAA,CAAqBpwB,CAArB,CAAA,CAAgC3yB,CAChC,KAAA/D,EAAAsG,KAAA,CAAc,cAAd,CACA,CACI2qD,CADJ,CAEI/wB,CAFJ,EAGKn8B,CAHL,GAGc,CAHd,EAGmB,EAHnB,CADA,CAFJ,CALJ,CAiBAysD,EAAA,CAAoB,CAApB,CAA0B,QAAQ,EAClC,CACIzJ,EAAA,CAAAA,IAAA,CACA,OAAO,EAFX,CADA,CAKA0J,GAAA,CAAqB,CAArB,CAGAC,GAAA,CAAsB,CAAtB,CAA4B,EAA5B,CAAkC,EAAlC,CAYAA,GAAA,CAAsB,EAAtB,CAA4B,EAA5B,CAAkC,EAAlC,CAEAA,GAAA,CAAsB,EAAtB,CAA4B,EAA5B,CAAkC,EAAlC,CAEAA,GAAA,CAAsB,EAAtB,CAA4B,EAA5B,CAAkC,EAAlC,CAEAA,GAAA,CAAsB,EAAtB,CAA4B,EAA5B,CAAkC,EAAlC,CAGAM,GAAA,CAAsB,EAAtB,CLr7BuBE,CKq7BvB,CL37ByBC,CK27BzB,CAEAH,GAAA,CAAsB,EAAtB,CLv7BuBE,CKu7BvB,CL37B0BE,CK27B1B,CAEAJ,GAAA,CAAsB,EAAtB,CLr7BoBK,CKq7BpB,CL/7ByBF,CK+7BzB,CAEAH,GAAA,CAAsB,EAAtB,CLv7BoBK,CKu7BpB,CL/7B0BD,CK+7B1B,CAiBAZ,GAAA,CAAoB,EAApB,CACAC;EAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7B,KAAA/D,EAAAsG,KAAA,CAAc,cAAd,CAA8B,CL98BRgrD,CK88BQ,CLl9BTC,CKk9BS,CAAyD,CAAzD,EAA2CxtD,CAA3C,GAAoD,CAApD,EAA6D,EAA7D,CAA9B,CAFJ,CADA,CA6CAysD,GAAA,CAAoB,EAApB,CACAC,GAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7B,KAAA/D,EAAAsG,KAAA,CAAc,iBAAd,CAAgD,CAAhD,EAAkCvC,CAAlC,GAA2C,CAA3C,EAFJ,CADA,CAOAysD,GAAA,CAAoB,EAApB,CACAC,GAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7B,KAAA/D,EAAAsG,KAAA,CAAc,kBAAd,CAAiD,CAAjD,EAAmCvC,CAAnC,GAA4C,CAA5C,EAFJ,CADA,CAWAysD,GAAA,CAAoB,EAApB,CACAC,GAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7BA,EAAA,IAAU,CACV,KAAA/D,EAAAsG,KAAA,CAAc,mBAAd,CAAmCvC,CAAnC,EAAkD,EAAP,CAAAA,CAAA,CAAY,EAAZ,CAAiB,EAA5D,EAHJ,CADA,CAQAysD,GAAA,CAAoB,EAApB,CACAC,GAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7BA,EAAA,IAAU,CACV,KAAA/D,EAAAsG,KAAA,CAAc,oBAAd,CAAoCvC,CAApC,EAAmD,EAAP,CAAAA,CAAA,CAAY,EAAZ,CAAiB,EAA7D,EAHJ,CADA,CAQAysD,GAAA,CAAoB,EAApB,CACAC;EAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7BA,EAAA,IAAU,CACV,KAAA/D,EAAAsG,KAAA,CAAc,kBAAd,CAAkCvC,CAAlC,EAAiD,EAAP,CAAAA,CAAA,CAAY,EAAZ,CAAiB,EAA3D,EAHJ,CADA,CAQAysD,GAAA,CAAoB,EAApB,CACAC,GAAA,CAAqB,EAArB,CAA2B,QAAQ,CAAC1sD,CAAD,CACnC,CACI,IAAA+iD,EAAA,CAAqB,EAArB,CAAA,CAA6B/iD,CAC7BA,EAAA,IAAU,CACV,KAAA/D,EAAAsG,KAAA,CAAc,kBAAd,CAAkCvC,CAAlC,EAAiD,EAAP,CAAAA,CAAA,CAAY,EAAZ,CAAiB,EAA3D,EAHJ,CADA,CAQAysD,GAAA,CAAoB,GAApB,CAA0B,QAAQ,EAClC,CACI,OAAO,IAAAjkC,GAAP,EAEI,KA/1CgBilC,CA+1ChB,CAAc,MAAO,EACrB,MA/1CgBnI,CA+1ChB,CAAc,MAAO,EACrB,MA/1CgBoI,CA+1ChB,CAAc,MAAO,EACrB,MA/1CiBC,EA+1CjB,CAAe,MAAO,EACtB,SAAS,MAAO,EANpB,CADJ,CADA,CAWAjB,GAAA,CAAqB,GAArB,CAA2B,QAAQ,CAACvd,CAAD,CACnC,CACOA,CAAH,CAAU,CAAV,GAAe,IAAA3mB,GAAf,CAx2CoBilC,CAw2CpB,CACGte,EAAH,CAAU,CAAV,GAAe,IAAA3mB,GAAf,CAx2CoB88B,CAw2CpB,CACGnW,EAAH,CAAU,CAAV,GAAe,IAAA3mB,GAAf,CAx2CoBklC,CAw2CpB,CACGve,EAAH,CAAU,CAAV,GAAe,IAAA3mB,GAAf,CAx2CqBmlC,EAw2CrB,CAJJ,CADA,CASAlB;EAAA,CAAoB,GAApB,CAA0B,QAAQ,EAClC,CACI,IAAIrtD,EAAM,CACV,QAAO,IAAA0kD,GAAP,EAEI,KAh4CgB8J,CAg4ChB,CAAcxuD,CAAA,EAAO,CAAK,MAC1B,MAh4CgB2kD,CAg4ChB,CAAc3kD,CAAA,EAAO,CAAK,MAE1B,MAj4CgByuD,CAi4ChB,CAAczuD,CAAA,EAAO,CALzB,CAOA,OAAO,IAAA4kD,GAAP,EAGI,KAr4CgBC,CAq4ChB,CAAc7kD,CAAA,EAAO,EAAM,MAC3B,MAr4CgB0uD,CAq4ChB,CAAc1uD,CAAA,EAAO,EAAM,MAC3B,MAr4CgB2uD,CAq4ChB,CAAc3uD,CAAA,EAAO,GALzB,CAOA,MAAOA,EAhBX,CADA,CAmBAstD,GAAA,CAAqB,GAArB,CAA2B,QAAQ,CAACvd,CAAD,CACnC,CACOA,CAAH,CAAU,CAAV,GAAe,IAAA2U,GAAf,CAh5CoB8J,CAg5CpB,CACGze,EAAH,CAAU,CAAV,GAAe,IAAA2U,GAAf,CAh5CoBC,CAg5CpB,CACG5U,EAAH,CAAU,CAAV,GAAe,IAAA2U,GAAf,CAh5CoB+J,CAg5CpB,CACG1e,EAAH,CAAU,EAAV,GAAgB,IAAA6U,GAAhB,CAh5CoBC,CAg5CpB,CACG9U,EAAH,CAAU,EAAV,GAAgB,IAAA6U,GAAhB,CAh5CoB8J,CAg5CpB,CACG3e,EAAH,CAAU,GAAV,GAAgB,IAAA6U,GAAhB,CAh5CoB+J,CAg5CpB,CANJ,CADA,CAWAtB,GAAA,CAAoB,GAApB,CAA0B,QAAQ,EAClC,CAEI,IADA,IAAIrtD,EAAM,EAAV,CACQa,EAAI,CAAZ,CAAmB,EAAnB,CAAeA,CAAf,CAAuBA,CAAA,EAAvB,CAEIb,CAAA,EAAOa,CAAP,CAAW,IAAAslD,GAAA,CAAmBtlD,CAAnB,CAEf,OAAOb,EANX,CADA,CAcAmjD,GAAAxlD,UAAAgtD,GAAA,CAAkCiE,QAAQ,EAC1C,EASAC,SAASA,GAAiB,CAACC,CAAD,CAAYlF,CAAZ,CAC1B,CACQA,CAAJ,GAEIA,CAFJ,CAEczG,EAAAxlD,UAAAgtD,GAFd,CAIA,KAAI,IAAI9pD,EAAI,CAAZ,CAAeA,CAAf,CAAmBiuD,CAAApvD,OAAnB,CAAqCmB,CAAA,EAArC,CAEIqiD,EAAA,CAAY4L,CAAA,CAAUjuD,CAAV,CAAZ,CAAA,CAA4B+oD,CAPpC;AAWAmF,QAASA,GAAO,CAACtjD,CAAD,CAAQC,CAAR,CAChB,CAEI,IADA,IAAI+V,EAAI,EACR,CAAmB5gB,CAAnB,EAAwB6K,CAAxB,CAA6B7K,CAAA,EAA7B,CAEI4gB,CAAAvd,KAAA,CAAOrD,CAAP,CAEJ,OAAO4gB,EANX,CASc,IAAIutC,GAA4B,IAAI5xD,UAAJ,CAAe,EAAf,CAC9C4xD,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,CAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,CAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAClCA,GAAA,CAA0B,EAA1B,CAAA,CAAkC,EAOlCH,GAAA,CAAkB,CAAC,CAAD,CAAlB,CAA0B,QAAQ,CAAC9e,CAAD,CAAO3nC,CAAP,CAClC,CACI,IAAA69C,GAAA,CAA+B79C,CAA/B,CAAA,CAA2C2nC,CAA3C,CAAkD,CADtD,CADA,CAOA8e,GAAA,CAAkB,CAAC,CAAD,CAAlB,CAGAA,GAAA,CAAkB,CAAC,CAAD,CAAlB,CAEAA,GAAA,CAAkB,CAAC,CAAD,CAAlB,CAA0B,QAAQ,EAClC,EADA,CAoBAA,GAAA,CAAkB,CAAC,CAAD,CAAlB,CAA0B,QAAQ,EAClC,EADA,CAWAA,GAAA,CAAkB,CAAC,CAAD,CAAlB,CAA0B,QAAQ,EAClC,EADA,CAMAA,GAAA,CAAkBE,EAAA,CAAQ,EAAR,CAAc,EAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAUAF,GAAA,CAAkBE,EAAA,CAAQ,EAAR,CAAc,EAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAOAF,GAAA,CAAkBE,EAAA,CAAQ,EAAR,CAAc,GAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAOAF,GAAA,CAAkBE,EAAA,CAAQ,GAAR,CAAc,GAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAOAF,GAAA,CAAkBE,EAAA,CAAQ,GAAR,CAAc,GAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAMAF;EAAA,CAAkBE,EAAA,CAAQ,GAAR,CAAc,GAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAOAF,GAAA,CAAkB,CAAC,GAAD,CAAlB,CAA0B,QAAQ,EAClC,EADA,CAYAA,GAAA,CAAkBE,EAAA,CAAQ,GAAR,CAAc,GAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAQAF,GAAA,CAAkBE,EAAA,CAAQ,GAAR,CAAc,GAAd,CAAlB,CAAuC,QAAQ,EAC/C,EADA,CAmBsCE,SAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAC9C,CACI,CAAA1J,GAAA,CAAqB0J,CACrB,EAAAryD,EAAAsG,KAAA,CAAc,wBAAd,CAAwC+rD,CAAxC,CAFJ,CAUuCC,QAAA,GAAQ,CAARA,CAAQ,CAC/C,CACI,CAAA1K,EAAA,CAAwB,CAAxB,EAA6B,CAAArB,GAAAthC,MAAA,EAA7B,EAA0D,CAA1D,GAAgE,CAAAshC,GAAAthC,MAAA,EAAhE,EAA6F,CAA7F,CADJ,CAIoCstC,QAAA,GAAQ,CAARA,CAAQ,CAC5C,CAKI,CAAA3J,EAAA,CAAwB,CACrB,EAAAzB,GAAH,GAAmB,CAAAyB,EAAnB,EAA4C,CAA5C,CAQA,EAAAjB,EAAA,CAAuB,CAAAC,EAAvB,CAA+C,CAAAgB,EAC/C,EAAAnB,EAAA,CAvoDiC+K,IAuoDjC,CAA8C,CAAA5J,EAI9C,EAAAnB,EAAA,CAAuBhlD,IAAAqM,IAAA,CADDrM,IAAAmS,IAAA69C,CAAS,CAAA9K,EAAT8K,EAAiC,CAAjCA,CAAqC,EAArCA,CAA2C,EAA3CA,CACC,CAA0B,CAAAhL,EAA1B,CAGvB,EAAAiB,EAAA,CAA4B,CAAA,CACxB,EAAA1vB,GAAA6F,GAAA,CAAsB,CAAA0oB,GAAtB,CAAJ,EAEI,CAAAoE,GAAA,CAAmB,CAAApE,GAAnB,CAzBR,CA6BAjB,EAAAxlD,UAAA6qD,GAAA,CAA+B+G,QAAQ,CAACxyB,CAAD,CACvC,CACOA,CAAH,GAAe,IAAAqnB,GAAf,EAAoC,IAAAmB,EAApC,GAOA,IAAAA,EAGA,CAH4B,CAAA,CAG5B,CAFA,IAAAhB,GAEA,CAFsB,IAAAC,EAEtB,CADA,IAAAc,GACA,CADkB,CAAA,CAClB,CAAA,IAAAzoD,EAAAsG,KAAA,CAAc,YAAd,CAVA,CADJ,CAcmCqsD;QAAA,GAAQ,CAARA,CAAQ,CAC3C,CAGI,IAAI3wD,EAAOS,IAAAqM,IAAA,CAAS,CAAA44C,GAAT,CAA8B,CAAAD,EAA9B,CAAX,CACImL,EAAUnwD,IAAAC,MAAA,CAAWV,CAAX,CAAkB,CAAA4mD,EAAlB,CAEd,EAAA5vB,GAAArG,GAAA,CAAkB,CAAA61B,GAAlB,CAAuC,CAAvC,CAA0CxmD,CAA1C,CAAgD,CAAAulD,GAAhD,CAAkE,QAAA,CAACjvC,CAAD,CAClE,CAEI,GAAGA,CAAAA,CAAH,CAAA,CAqBAo3C,CAAAA,CA9BRmD,CA8BoB1L,GAAA,CAAiB,OAAjB,CAA2B,KAC3C,KAAIlhD,EA/BR4sD,CA+BiB3L,GAAA,CAAkB,CAAlB,CAAuB,EAApC,CACI4L,EAhCRD,CAgCkBzL,GAAA,CAAkB,CAAlB,CAAsB,CADpC,CAGI94C,CAlCRukD,EAmCO1L,GAAH,CAEI74C,CAFJ,CAnCJukD,CAqCiB3L,GAAA,CArCjB2L,CAqCmCvK,GAAlB,CArCjBuK,CAqC2DtK,GAFvD,CAMIj6C,CANJ,CAnCJukD,CAyCiB3L,GAAA,CAzCjB2L,CAyCmCzK,GAAlB,CAzCjByK,CAyC0DxK,EAItD,KADA,IAAInoB,EAAU,CAAd,CACQl8B,EAAI,CAAZ,CAAeA,CAAf,CAlCoB4uD,CAkCpB,CAAiC5uD,CAAA,EAAjC,CAGI,IADA,IAAI+uD,EAwDDtD,EAAA,CAxD0BnhD,CAAAuF,CAAO7P,CAAP6P,CAwD1B,CAxDqC67C,CAwDrC,CAxDgDzpD,CAwDhD,CAxDH,CACQoyB,EAAI,CAAZ,CAAeA,CAAf,CAAmBy6B,CAAnB,CAA4Bz6B,CAAA,EAA5B,CAhDRw6B,CAkDYvL,GAAA,CAAiBpnB,CAAjB,CAAA74B,KAAA,CAA+B0rD,CAA/B,CACA,CAAA7yB,CAAA,EAAW,CAInB2rB,GAAA,CAvDJgH,CAuDI,CAvDJ,EAYQnL,GAAA,EAAuB1lD,CAZ/B,EAcY0lD,GAAJ,GAdR,CAiBYhvB,GAAA,CAjBZ,CAiB2B8uB,GAAf,CAEA,CAnBZ,CAmBeS,GAAH,GAnBZ,CAsBgBP,GAHJ,CAnBZ,CAsBsCC,EAH1B,CALJ,CALA,CAFJ,CADA,CANJ,CAuE0BqL,QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,GAAI,CAAA1L,GAAA,CAAiB,CAAjB,CAAAzkD,OAAJ,CAAA,CAKA,IAAIowD,EAAOC,EAAA,CAAA,CAAA5L,GAAA4L,CAAiB,CAAjBA,CAAA,CAAgC,CAAA5L,GAAA,CAAiB,CAAjB,CAAAzkD,OAAhC,CAAX,CACIswD,EAAOD,EAAA,CAAA,CAAA5L,GAAA4L,CAAiB,CAAjBA,CAAA,CAAgC,CAAA5L,GAAA,CAAiB,CAAjB,CAAAzkD,OAAhC,CACX,EAAA7C,EAAAsG,KAAA,CAAc,eAAd,CAA+B,CAAC2sD,CAAD,CAAOE,CAAP,CAA/B,CAA6C,CAACF,CAAA3kD,OAAD,CAAc6kD,CAAA7kD,OAAd,CAA7C,CAPA,CADJ;AAWAg4C,EAAAxlD,UAAA43B,GAAA,CAA2B06B,QAAQ,CAAC/xD,CAAD,CACnC,CAEI,IAAAioD,GAAA,CAAmBjoD,CAAnB,CAAA,CAA2B,CAC3B,KAAA8W,EAAA+Y,GAAA,CAA0B,IAAA3E,GAA1B,CAHJ,CAMA+5B,GAAAxlD,UAAA83B,GAAA,CAA2By6B,QAAQ,CAAChyD,CAAD,CACnC,CAEI,IAAAioD,GAAA,CAAmBjoD,CAAnB,CAAA,CAA2B,CAC3B0rB,GAAA,CAAA,IAAA5U,EAAA,CAA0B,IAAAoU,GAA1B,CAHJ,CAeAkjC,SAASA,GAAU,CAAC57C,CAAD,CACnB,CACI,MAL+CuX,EAK/C,EAL+CA,EAK/C,CAAQvX,CAAR,EALkDwX,CAKlD,EALkDA,CAKlD,CAA8BxX,CAA9B,GAL+CuX,EAK/C,EAA6DvX,CAA7D,EALkDwX,CAKlD,EAAsExX,CAAtE,EAAuFA,CAD3F,C,CevzDAy/C,QAASA,GAAM,CAACn7C,CAAD,CAAMnY,CAAN,CAAWD,CAAX,CACf,CAGI,IAAA4sB,GAAA,CAAiB,CACb,GADa,CACP,EADO,CACD,CADC,CACK,EADL,CACW,CADX,CACiB,CADjB,CACuB,EADvB,CAC6B,CAD7B,CACmC,CADnC,CACyC,CADzC,CAC+C,CAD/C,CACqD,CADrD,CAC2D,CAD3D,CACiE,CADjE,CACuE,CADvE,CAC6E,CAD7E,CAEb,CAFa,CAEP,GAFO,CAED,CAFC,CAEK,CAFL,CAEW,CAFX,CAEiB,EAFjB,CAEuB,GAFvB,CAE6B,GAF7B,CAEmC,CAFnC,CAEyC,CAFzC,CAE+C,CAF/C,CAEqD,CAFrD,CAE2D,CAF3D,CAEiE,CAFjE,CAEuE,CAFvE,CAE6E,CAF7E,CAGb,CAHa,CAGP,CAHO,CAGD,CAHC,CAGK,CAHL,CAGW,CAHX,CAGiB,CAHjB,CAGuB,CAHvB,CAG6B,CAH7B,CAGmC,CAHnC,CAGyC,CAHzC,CAG+C,CAH/C,CAGqD,CAHrD,CAG2D,GAH3D,CAGiE,EAHjE,CAGuE,CAHvE,CAG6E,CAH7E,CAIb,CAJa,CAIP,CAJO,CAID,CAJC,CAIK,CAJL,CAIW,EAJX,CAIiB,CAJjB,CAIuB,CAJvB,CAI6B,CAJ7B,CAImC,CAJnC,CAIyC,CAJzC,CAI+C,CAJ/C,CAIqD,CAJrD,CAI2D,CAJ3D,CAIiE,CAJjE,CAIuE,CAJvE,CAI6E,CAJ7E,CAMjB,KAAAH,GAAA,CAAc,EACd,KAAAI,GAAA,CAAgB,CACZ,CACI5qB,KAAM,GADV,CADY,CAKhB,KAAAyB,KAAA,CAAY,QAEZ,KAAIqpB,EAAK3U,CAAA2U,EAETzO,EAAA,CAAAyO,CAAA,CAAiB,KAAjB,CAAyB,IAAzB,CACI,QAAQ,EAAG,CAEP,MAAO,EAFA,CADf,CAKIhb,IAAAA,EALJ,CAMI,QAAQ,EACR,CAEI,MAAO,EAFX,CAPJ,CAaAgN,EAAA,CAAAgO,CAAA,CAAkB,KAAlB,CAA0B,IAA1B,CAAgChb,IAAAA,EAAhC,CAA2CA,IAAAA,EAA3C,CAAsD,QAAQ,EAC9D,EADA,CAMAgN,EAAA,CAAAgO,CAAA,CAAkB,KAAlB,CAA0B,IAA1B,CAAgChb,IAAAA,EAAhC,CAA2C,QAAQ,CAAC/N,CAAD,CACnD,CAGI,IAAAwvD,GAAA,CAAoBxvD,CAHxB,CADA,CAKG+N,IAAAA,EALH,CAOAuM,EAAA,CAAAyO,CAAA,CAAiB,KAAjB,CAAyB,IAAzB,CAA+Bhb,IAAAA,EAA/B,CAA0C,QAAQ,EAClD,CAGI,MAAO,KAAA0hD,GAHX,CADA,CAKG1hD,IAAAA,EALH,CAOAuM,EAAA,CAAAyO,CAAA,CAAiB,KAAjB,CAAyB,IAAzB,CAA+Bhb,IAAAA,EAA/B,CAA0CA,IAAAA,EAA1C,CAAqD,QAAQ,EAC7D,CAII,MAAyB,EAAzB;AAAG,IAAAyhD,GAAH,CAEW,IAAAE,GAFX,CAOW,CAXf,CADA,CAgBA30C,EAAA,CAAAgO,CAAA,CAAkB,KAAlB,CAA0B,IAA1B,CAAgChb,IAAAA,EAAhC,CAA2CA,IAAAA,EAA3C,CAAsD,QAAQ,CAAC/N,CAAD,CAC9D,CAGI,IAAA0vD,GAAA,CAAqB1vD,CAHzB,CADA,CAOA+a,EAAA,CAAAgO,CAAA,CAAkB,KAAlB,CAA0B,IAA1B,CAAgC,QAAQ,CAAC/oB,CAAD,CACxC,CAGgB,CAAZ,GAAGA,CAAH,EAGI,IAAAoe,MAAA,EAeJ,KAAAuxC,GAAA,CAAqB3vD,CArBzB,CADA,CAyBAsa,EAAA,CAAAyO,CAAA,CAAiB,KAAjB,CAAyB,IAAzB,CAA+B,QAAQ,EACvC,CAEI,MAAO,KAAA4mC,GAFX,CADA,CAMAr1C,EAAA,CAAAyO,CAAA,CAAiB,KAAjB,CAAyB,IAAzB,CAA+B,QAAQ,EACvC,CAII,IAAIwqB,EAAM,IAAAA,GACV,KAAAA,GAAA,CAAW,CACX,KAAArnB,GAAA2I,GAAA,CAAmB,IAAApM,GAAnB,CACA,OAAO8qB,EAPX,CADA,CAWAx4B,EAAA,CAAAgO,CAAA,CAAkB,KAAlB,CAA0B,IAA1B,CAAgChb,IAAAA,EAAhC,CAA2C,QAAQ,EACnD,CAOI,IAAI6hD,GADc,IAAAF,GACdE,EADoC,EACpCA,EAA2B,EAA3BA,CAAgC,IAAAH,GAApC,CACII,EAAkBD,CAAlBC,CAA+B,CAI/B5wD,EAAAA,CAAM,IAAAmV,EAAAmE,GAAA,CAAgBq3C,CAAhB,CAA6B,CAA7B,CAKV,KAAIpnB,EAAO,IAAAinB,GAAPjnB,CAAyB,CAG7B,KAFAvpC,CAEA,EAFOupC,CAEP,CAAM,IAAAsnB,GAAN,GAAwB7wD,CAAxB,CAAA,CACA,CACI,IAAI8wD,EAAW,IAAA37C,EAAAmE,GAAA,CAAgBs3C,CAAhB,CAAkD,CAAlD,CAAkC,IAAAC,GAAlC,CACfE,GAAA,CAAAA,IAAA,CAAuBD,CAAvB,CAEA,KAAAD,GAAA,CAAgB,IAAAA,GAAhB,CAAgC,CAAhC,CAAoCtnB,CAJxC,CArBJ,CADA,CA+BA,KAAAp0B,EAAA,CAAWA,CAGX,KAAA8X,GAAA,CAAW9X,CAAA4I,EAAAkP,GAGX,KAAAjwB,EAAA,CAAWA,CAOX,KAAA6zD,GAAA,CAHA,IAAAvc,GAGA,CAJA,IAAAoc,GAIA;AALA,IAAAH,GAKA,CALoB,CAMpB,KAAAC,GAAA,CAAkB,EAGlB,KAAI,IAAIxvD,EAFR,IAAAyvD,GAEQzvD,CAFa,CAErB,CAAmB,GAAnB,CAAeA,CAAf,CAAwBA,CAAA,EAAxB,CAEIqa,CAAA,CAAAyO,CAAA,CAAiB,KAAjB,CAA0B9oB,CAA1B,CAA6B,IAA7B,CAAmC,QAAQ,CAACs0B,CAAD,CAC3C,CAGI,MAAGA,EAAH,CAAU,IAAAxb,GAAAxc,EAAAuC,OAAV,CAEW,IAAAia,GAAAxc,EAAA,CAAwBg4B,CAAxB,CAFX,CAMW,CATf,CADmC/0B,KAAA,CAY5B,IAZ4B,CAYtBS,CAZsB,CAAnC,CAYiB8N,IAAAA,EAZjB,CAY4BA,IAAAA,EAZ5B,CAcA,CAAAgN,CAAA,CAAAgO,CAAA,CAAkB,KAAlB,CAA2B9oB,CAA3B,CAA8B,IAA9B,CAAoC,QAAQ,EAC5C,EADoCT,KAAA,CAG7B,IAH6B,CAGvBS,CAHuB,CAApC,CAGiB8N,IAAAA,EAHjB,CAG4BA,IAAAA,EAH5B,CAOJ,KAAAgL,GAAA,CAAc,IAAIhd,EAAJ,CAAaC,CAAb,CAAyBC,CAAzB,CACd,KAAA8c,GAAA5c,GAAA,CAAwB,IAAA8zD,EAAAzwD,KAAA,CAAuB,IAAvB,CAExBysB,GAAA,CAAA7X,CAAA4I,EAAAkP,GAAA,CAAgC,IAAhC,CA/LJ,CAkMAqjC,EAAAxyD,UAAAC,GAAA,CAA6BkzD,QAAQ,EACrC,CACI,IAAIhzD,EAAQ,CAED,CAFC,CAGZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAsyD,GACXtyD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAyyD,GACXzyD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAq2C,GACXr2C,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA4yD,GACX5yD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAuyD,GACXvyD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAwyD,GACXxyD,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA6b,GAEX,OAAO7b,EAZX,CAeAqyD;EAAAxyD,UAAAS,GAAA,CAA6B2yD,QAAQ,CAACjzD,CAAD,CACrC,CACI,IAAAsyD,GAAA,CAAoBtyD,CAAA,CAAM,CAAN,CACpB,KAAAyyD,GAAA,CAAqBzyD,CAAA,CAAM,CAAN,CACrB,KAAAq2C,GAAA,CAAWr2C,CAAA,CAAM,CAAN,CACX,KAAA4yD,GAAA,CAAgB5yD,CAAA,CAAM,CAAN,CAChB,KAAAuyD,GAAA,CAAkBvyD,CAAA,CAAM,CAAN,CAClB,KAAAwyD,GAAA,CAAqBxyD,CAAA,CAAM,CAAN,CAErB,KAAA6b,GAAA,CAAc7b,CAAA,CAAM,CAAN,CACd,KAAA6b,GAAA5c,GAAA,CAAwB,IAAA8zD,EAAAzwD,KAAA,CAAuB,IAAvB,CAT5B,CAYA+vD,GAAAxyD,UAAAqhB,MAAA,CAAyBgyC,QAAQ,EACjC,CAKI,IAAAN,GAAA,CAFA,IAAAvc,GAEA,CAHA,IAAAoc,GAGA,CAJA,IAAAH,GAIA,CAJoB,CAKpB,KAAAC,GAAA,CAAkB,EAClB,KAAAC,GAAA,CAAqB,CAPzB,CAUqCW;QAAA,GAAQ,CAARA,CAAQ,CAACpxD,CAAD,CAC7C,CACI,IAAI6+C,EAAO7+C,CAAX,CACIqxD,EAAa,CAAAZ,GAAbY,EAAmC,EADvC,CAGIC,EAAa,CAHjB,CAIInV,EAAU,EAEd,GACA,CACI,IAAI//B,EAAOi1C,CAAPj1C,CAA2B,EAA3BA,CAAoByiC,CAAxB,CACI14B,EAAQ,CAAAhR,EAAAmE,GAAA,CAAgB8C,CAAhB,CAAuB,EAAvB,CAEZ,IAAG+J,CAAH,CCvOqBorC,CDuOrB,CAEI,KAOJ,KAAIC,EAAWhhC,EAAA,CAAA,CAAArb,EAAA,CAAiBiH,CAAjB,CACXq1C,EAAAA,CAAYjhC,EAAA,CAAA,CAAArb,EAAA,CAAiBiH,CAAjB,CAAwB,CAAxB,CAChB,KAAI8D,EAAMsQ,EAAA,CAAA,CAAArb,EAAA,CAAiBiH,CAAjB,CAAwB,CAAxB,CAAN8D,GAAqC,CAEzCi8B,EAAA93C,KAAA,CAAa,CACTmtD,GAAUA,CADD,CAETC,GAAWA,CAFF,CAGTvxC,GAAKA,CAHI,CAAb,CASA,IAAGiG,CAAH,CC/PqBurC,CD+PrB,CAEI7S,CAAA,CAAO,CAAA1pC,EAAAmE,GAAA,CAAgB8C,CAAhB,CAAuB,EAAvB,CAFX,KAMA,CACIyiC,CAAA,CAAQ,EACR,MAFJ,CAhCJ,CADA,MAsCM,CAtCN,CAwCA,KAAI8S,EAAc,EAAlB,CACIC,EAAU,CAOdC,GAAA,CAAA,CAAA/3C,GAAA,CALY1L,CACRxC,MAAO5L,CADCoO,CAERywC,KAAMA,CAFEzwC,CAKZ,CAAkC,QAAQ,EAC1C,CAGI,GAAGwjD,CAAH,EAAcD,CAAd,CACA,CACI,GAAGL,CAAH,GAAkBnV,CAAAt8C,OAAlB,CAGI,MAAO,EAGX,KAAI48C,EAAMN,CAAA,CAAQmV,CAAA,EAAR,CAEVE,EAAA,CAAW/U,CAAA+U,GACXG,EAAA,CAAalV,CAAAv8B,GACb0xC,EAAA,CAAU,CAXd,CAcA,MAAO,KAAAz8C,EAAAiE,GAAA,CAAeo4C,CAAf,CAA0BI,CAAA,EAA1B,CAlBX,CADkCrxD,KAAA,CAoB3B,CApB2B,CAAlC,CAvDJ;AA8EA+vD,EAAAxyD,UAAAkzD,EAAA,CAAgCc,QAAQ,CAACC,CAAD,CAAW3jD,CAAX,CACxC,CACI,GAAmB,EAAnB,GAAGA,CAAAywC,KAAH,CAAA,CAMA,IAAItV,EAAO,IAAAinB,GAAPjnB,CAAyB,CACzByoB,EAAAA,CAAgB,IAAAl4C,GAAAlc,GAEpB,KAAIihD,EAAOzwC,CAAAywC,KAAX,CACIwS,EAAa,IAAAZ,GAAbY,EAAmC,EADvC,CAGIC,EAAa,CAHjB,CAIInV,EAAU,EAEd,GACA,CACQ//B,CAAAA,CAAOi1C,CAAPj1C,CAA2B,EAA3BA,CAAoByiC,CACxB,KAAI14B,EAAQ,IAAAhR,EAAAmE,GAAA,CAAgB8C,CAAhB,CAAuB,EAAvB,CAEZ,IAAoC,CAApC,IAAI+J,CAAJ,CC/TqBorC,CD+TrB,EAGI,KAGJ,KAAIC,EAAWhhC,EAAA,CAAA,IAAArb,EAAA,CAAiBiH,CAAjB,CAAf,CACIq1C,EAAYjhC,EAAA,CAAA,IAAArb,EAAA,CAAiBiH,CAAjB,CAAwB,CAAxB,CADhB,CAEI8D,EAAMsQ,EAAA,CAAA,IAAArb,EAAA,CAAiBiH,CAAjB,CAAwB,CAAxB,CAAN8D,GAAqC,CAEzCi8B,EAAA93C,KAAA,CAAa,CACTmtD,GAAUA,CADD,CAETC,GAAWA,CAFF,CAGTvxC,GAAKA,CAHI,CAAb,CASA,IAAGiG,CAAH,CCpVqBurC,CDoVrB,CAEI7S,CAAA,CAAO,IAAA1pC,EAAAmE,GAAA,CAAgB8C,CAAhB,CAAuB,EAAvB,CAFX,KAOI,MA9BR,CADA,MAkCM,CAlCN,CAoCIu1C,EAAAA,CAAc,EAGlB,KAAQ3wD,CAAR,CAFI4wD,CAEJ,CAFc,CAEd,CAAe5wD,CAAf,CAAmBgxD,CAAnB,CAAkChxD,CAAA,EAAlC,CACA,CACQD,CAAAA,CAAO,IAAA+Y,GAAAnc,GAAA,CAAwBqD,CAAxB,CAEX,IAAG4wD,CAAH,EAAcD,CAAd,CACA,CACI,GAAGL,CAAH,GAAkBnV,CAAAt8C,OAAlB,CAGI,MAAO,EAGP48C,EAAAA,CAAMN,CAAA,CAAQmV,CAAA,EAAR,CAEVE,EAAA,CAAW/U,CAAA+U,GACXG,EAAA,CAAalV,CAAAv8B,GACb0xC,EAAA,CAAU,CAXd,CAcA,IAAAz8C,EAAAuE,GAAA,CAAgB83C,CAAhB,CAA2BI,CAAA,EAA3B,CAAsC7wD,CAAtC,CAlBJ,CAqBIkxD,CAAAA,EAAmB,IAAAxB,GAAnBwB,EAAyC,EAAzCA,EAA+C,EAA/CA,CAAoD,IAAAzB,GAApDyB,CAAsE,CAAtEA,CAA0E,CAA1EA,CAA8E,IAAAzB,GAClFyB,EAAA,CAAkBA,CAAlB,CAAoC,IAApC,CAA2C,KAE/B,KAAA98C,EAAAmE,GAAA,CAAgB24C,CAAhB,CACRC,EAAAA,CAAW,IAAA/8C,EAAAmE,GAAA,CAAgB24C,CAAhB,CAAkC,CAAlC,CACf,KAAA98C,EAAAyE,GAAA,CAAiBq4C,CAAjB;AAAmC,CAAnC,CAAsCC,CAAtC,CAAiD,CAAjD,CAKIC,EAAAA,CAAmBF,CAAnBE,CAAqC,CAArCA,CAAoD,CAApDA,EADJD,CACIC,CADQ5oB,CACR4oB,CACJ,KAAAh9C,EAAA0E,GAAA,CAAiBs4C,CAAjB,CAAmC/jD,CAAAxC,MAAnC,CACA,KAAAuJ,EAAA0E,GAAA,CAAiBs4C,CAAjB,CAAoC,CAApC,CAAuCH,CAAvC,CAEA,KAAA1d,GAAA,EAAY,CACZ,KAAArnB,GAAAyI,GAAA,CAAmB,IAAAlM,GAAnB,CA3FA,CADJ,C,CE/TA4oC,QAASA,GAAY,EACrB,CACI,IAAAC,GAAA,CAAiB,EACjB,KAAAC,EAAA,CAAYxjD,IAAAA,EAFhB,CAUAsjD,EAAAt0D,UAAAyK,SAAA,CAAkCgqD,QAAQ,CAAC9xD,CAAD,CAAO4b,CAAP,CAAWgiB,CAAX,CAC1C,CACI,IAAIg0B,EAAY,IAAAA,GAAA,CAAe5xD,CAAf,CAECqO,KAAAA,EAAjB,GAAGujD,CAAH,GAEIA,CAFJ,CAEgB,IAAAA,GAAA,CAAe5xD,CAAf,CAFhB,CAEuC,EAFvC,CAKA4xD,EAAAhuD,KAAA,CAAe,CACXgY,GAAIA,CADO,CAEXgiB,GAAYA,CAFD,CAAf,CARJ,CAoBA+zB,GAAAt0D,UAAA00D,WAAA,CAAoCC,QAAQ,CAAChyD,CAAD,CAAO4b,CAAP,CAC5C,CACI,IAAIg2C,EAAY,IAAAA,GAAA,CAAe5xD,CAAf,CAECqO,KAAAA,EAAjB,GAAGujD,CAAH,GAKA,IAAAA,GAAA,CAAe5xD,CAAf,CALA,CAKuB4xD,CAAAK,OAAA,CAAiB,QAAQ,CAACC,CAAD,CAChD,CACI,MAAOA,EAAAt2C,GAAP,GAAgBA,CADpB,CADuB,CALvB,CAHJ,CAqBA+1C,GAAAt0D,UAAAwF,KAAA,CAA8BsvD,QAAQ,CAACnyD,CAAD,CAAOoQ,CAAP,CACtC,CACI,GAAI,IAAAyhD,EAAJ,GAKID,CAED,CAFa,IAAAC,EAAAD,GAAA,CAAoB5xD,CAApB,CAEb,CAAcqO,IAAAA,EAAd,GAAAujD,CAPH,EAYA,IAAI,IAAIrxD,EAAI,CAAZ,CAAeA,CAAf,CAAmBqxD,CAAAxyD,OAAnB,CAAqCmB,CAAA,EAArC,CACA,CACI,IAAI6xD,EAAWR,CAAA,CAAUrxD,CAAV,CACf6xD,EAAAx2C,GAAAhF,KAAA,CAAiBw7C,CAAAx0B,GAAjB,CAAsCxtB,CAAtC,CAFJ,CAdJ,CAiCaiiD,SAAA,GAAQ,EACrB,CACI,IAAIC,EAAK,IAAIX,EAAb,CACIY,EAAK,IAAIZ,EAEbW,EAAAT,EAAA,CAAUU,CACVA,EAAAV,EAAA,CAAUS,CAEV,OAAO,CAACA,CAAD,CAAKC,CAAL,CAPX,C,CpBlEA11C,QAASA,EAAG,CAACtgB,CAAD,CACZ,CAEI,IAAA4R,GAAA,CAAmB,CAInB,KAAAqkD,EAAA,CAAmB,CAAA,CAInB,KAAA79C,GAAA,CAAY,IAAI7X,UAAJ,CAAe,CAAf,CACZ,KAAAk9B,GAAA,CAAa,IAAI3yB,WAAJ,CAAgB,IAAAsN,GAAA9J,OAAhB,CACb,KAAA+vB,GAAA,CAAc,IAAIxwB,UAAJ,CAAe,IAAAuK,GAAA9J,OAAf,CAEd,KAAA4nD,GAAA,CAAuB,IAAI31D,UAAJ,CAAe,CAAf,CACvB,KAAA41D,GAAA,CAAsB,IAAI5xB,WAAJ,CAAgB,CAAhB,CAEtB,KAAA6xB,GAAA,CAAuB,IAAIvoD,UAAJ,CAAe,CAAf,CAMvB,KAAAwoD,EAAA,CAAgB,IAAIxoD,UAAJ,CAAe,OAAf,CAWhB,KAAAyoD,GAAA,CAAgB,IAAI/1D,UAAJ,CAAe,OAAf,CAMhB,KAAAg2D,GAAA,CAAuB,IAAIh2D,UAAJ,CAAe,OAAf,CAMvB,KAAAi2D,GAAA,CAAsB,CAAA,CAgBtB,KAAAC,GAAA,CAFA,IAAAC,GAEA,CARA,IAAAC,GAQA,CAVA,IAAAC,GAUA,CAViB,CAiBjB,KAAAC,EAAA,CALA,IAAAC,GAKA,CALmB,CAAA,CAOnB,KAAAxV,EAAA,CAAU,IAAIzzC,UAAJ,CAAe,CAAf,CAGV,KAAAyzC,EAAA,CAAQ,CAAR,CAAA,CAAa,CAEb,KAAAA,EAAA,CAAQ,CAAR,CAAA,CAAa,CAEb,KAAAA,EAAA,CAAQ,CAAR,CAAA,CAAa,CAUb,KAAAyV,GAAA,CAJA,IAAAC,EAIA,CARA,IAAA1V,EAAA,CAAQ,CAAR,CAQA,CARa,CAqBb,KAAA1gC,GAAA,CANA,IAAAq2C,GAMA,CATA,IAAAC,EASA,CATa,CAAA,CA4Db,KAAAC,EAAA,CAHA,IAAAC,EAGA;AANA,IAAAC,EAMA,CARA,IAAAC,GAQA,CAVA,IAAAC,GAUA,CAhBA,IAAAruC,EAgBA,CAvBA,IAAAC,MAuBA,CA1BA,IAAAquC,EA0BA,CA7BA,IAAAC,GA6BA,CAhCA,IAAAC,GAgCA,CAnCA,IAAAC,GAmCA,CAvCA,IAAAC,GAuCA,CA1CA,IAAAC,GA0CA,CA7CA,IAAAC,EA6CA,CAhDA,IAAAC,GAgDA,CAhDqB,CAkDrB,KAAAC,EAAA,CAAoB,IAAInxC,YAAJ,CAAiB,CAAjB,CAWpB,KAAAoxC,EAAA,CAHA,IAAAC,EAGA,CANA,IAAAC,EAMA,CATA,IAAAC,GASA,CATkB,CAYlB,KAAAr3C,EAAA,CAAe,EAEf,KAAAs+B,GAAA,CAAa,EAIb,KAAAgZ,EAAA,CAAc,CAAA,CAMd,KAAAC,GAAA,CAHA,IAAAC,EAGA,CAH2B,CAK3B,KAAAC,GAAA,CAAoB,CAAA,CAKpB,KAAAC,EAAA,CAAyB,CAGzB,KAAAC,EAAA,CAAc,IAAI7qD,UAAJ,CAAe,CAAf,CACd,KAAA8qD,GAAA,CAAa,IAAIp0B,WAAJ,CAAgB,IAAAm0B,EAAApqD,OAAhB,CACb,KAAAsqD,GAAA,CAAc,IAAItZ,UAAJ,CAAe,IAAAoZ,EAAApqD,OAAf,CACd,KAAAuqD,EAAA,CAAa,IAAI/tD,WAAJ,CAAgB,IAAA4tD,EAAApqD,OAAhB,CACb,KAAAwqD,GAAA,CAAa,IAAIlrD,SAAJ,CAAc,IAAA8qD,EAAApqD,OAAd,CACb,KAAAyqD,EAAA,CAAY,IAAIx4D,UAAJ,CAAe,IAAAm4D,EAAApqD,OAAf,CAGZ,KAAA0qD,EAAA,CAAgB,IAAInrD,UAAJ,CAAe,EAAf,CACD,KAAI02B,WAAJ,CAAgB,IAAAy0B,EAAA1qD,OAAhB,CACf;IAAA2qD,GAAA,CAAiB,IAAIrrD,SAAJ,CAAc,IAAAorD,EAAA1qD,OAAd,CACjB,KAAA4qD,GAAA,CAAgB,IAAI34D,UAAJ,CAAe,IAAAy4D,EAAA1qD,OAAf,CAEhB,KAAA6qD,GAAA,CAAkB,IAAItrD,UAAJ,CAAe,EAAf,CAClB,KAAAurD,GAAA,CAAa,IAGb,KAAAC,EAAA,CAAY,IAAIvuD,WAAJ,CAAgB,CAAhB,CAGZ,KAAAwuD,GAAA,CAAY,IAAIzrD,UAAJ,CAAe,CAAf,CAIE,KAAAiO,GAAA,CAAwB,EACxB,KAAAC,GAAA,CAAyB,EACzB,KAAAC,GAAA,CAAyB,EACzB,KAAAC,GAAA,CAA0B,EAMxC,KAAAjI,GAAA,CAAY,CACRulD,GAAM,IADE,CAERC,GAAK,IAFG,CAMZ,KAAAC,GAAA,CAAgB,CAGhB,KAAAC,EAAA,CADA,IAAA5sC,EACA,CADUhb,IAAAA,EAGV,KAAA9R,EAAA,CAAWA,CAKX25D,GAAA,CAAAA,IAAA,CAEA,KAAAvB,GAAA,CAAkBv3C,EAAA,EAElB+4C,GAAA,CAAAA,IAAA,CAnPJ;AA0PAt5C,CAAAxf,UAAAC,GAAA,CAA0B84D,QAAQ,EAClC,CACI,IAAI54D,EAAQ,EAEZA,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA2Q,GACX3Q,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAi1D,GACXj1D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAm1D,GACXn1D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAk1D,GACXl1D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAu1D,GACXv1D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA01D,GACX11D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA21D,GACX31D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAw1D,GACXx1D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAAy1D,GACXz1D,EAAA,CAAM,CAAN,CAAA,CAAW,IAAA41D,EACX51D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAqgD,EACZrgD,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+1D,EACZ/1D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA81D,GACZ91D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAi2D,EAEZj2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAg2D,GACZh2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA2f,GACZ3f,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA82D,GACZ92D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA62D,EACZ72D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA42D,GACZ52D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA22D,GACZ32D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA02D,GACZ12D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAw2D,GACZx2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAy2D,GACZz2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAu2D,EACZv2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAkoB,MACZloB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAioB,EACZjoB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAs2D,GACZt2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAq2D,GACZr2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAo2D,EACZp2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAm2D,EACZn2D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAk3D,EAEZl3D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAo3D,EACZp3D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAs3D,EACZt3D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAq3D,GACZr3D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAy3D,EACZz3D;CAAA,CAAM,EAAN,CAAA,CAAY,IAAAo4D,EACZp4D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAq4D,GACZr4D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAmX,GACZnX,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAy4D,EAEZz4D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAA+4C,GACZ74D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAg5C,GACZ94D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAE,GACZhgB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAkP,GACZhvB,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAiY,GACZ/3B,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAi5C,GACZ/4D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAk5C,GACZh5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAy4C,GACZv4D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAm5C,GACZj5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAo5C,GACZl5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAq5C,GACZn5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAtP,GACZxQ,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAArP,GACZzQ,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAC,GACZ/f,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAs5C,GACZp5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAu5C,GACZr5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAw5C,GAEZt5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAg1D,EACZh1D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAAw4D,GAEZx4D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAAy5C,GAEZv5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA61D,GAEZ71D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA+3D,EAEZ/3D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAA05C,GACZx5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAA25C,GACZz5D,EAAA,CAAM,EAAN,CAAA,CAAY,IAAA8f,EAAA45C,GAEZ,OAAO15D,EA5EX,CA+EAqf;CAAAxf,UAAAS,GAAA,CAA0Bq5D,QAAQ,CAAC35D,CAAD,CAClC,CACI,IAAA2Q,GAAA,CAAmB3Q,CAAA,CAAM,CAAN,CACnB,KAAAi1D,GAAA,CAAuBj1D,CAAA,CAAM,CAAN,CACvB,KAAAm1D,GAAA,CAAuBn1D,CAAA,CAAM,CAAN,CACvB,KAAAk1D,GAAA,CAAsBl1D,CAAA,CAAM,CAAN,CACtB,KAAAu1D,GAAA,CAAsBv1D,CAAA,CAAM,CAAN,CACtB,KAAA01D,GAAA,CAAmB11D,CAAA,CAAM,CAAN,CACnB,KAAA21D,GAAA,CAAiB31D,CAAA,CAAM,CAAN,CACjB,KAAAw1D,GAAA,CAAmBx1D,CAAA,CAAM,CAAN,CACnB,KAAAy1D,GAAA,CAAiBz1D,CAAA,CAAM,CAAN,CACjB,KAAA41D,EAAA,CAAkB51D,CAAA,CAAM,CAAN,CAClB,KAAAqgD,EAAA,CAAUrgD,CAAA,CAAM,EAAN,CACV,KAAA+1D,EAAA,CAAW/1D,CAAA,CAAM,EAAN,CACX,KAAA81D,GAAA,CAA4B91D,CAAA,CAAM,EAAN,CAC5B,KAAAi2D,EAAA,CAAaj2D,CAAA,CAAM,EAAN,CAEb,KAAAg2D,GAAA,CAAqBh2D,CAAA,CAAM,EAAN,CAErB,KAAA2f,GAAA,CAAc3f,CAAA,CAAM,EAAN,CACd,KAAA82D,GAAA,CAAqB92D,CAAA,CAAM,EAAN,CACrB,KAAA62D,EAAA,CAAgB72D,CAAA,CAAM,EAAN,CAChB,KAAA42D,GAAA,CAAqB52D,CAAA,CAAM,EAAN,CACrB,KAAA22D,GAAA,CAAgB32D,CAAA,CAAM,EAAN,CAChB,KAAA02D,GAAA,CAAmB12D,CAAA,CAAM,EAAN,CACnB,KAAAw2D,GAAA,CAAoBx2D,CAAA,CAAM,EAAN,CACpB,KAAAy2D,GAAA,CAAoBz2D,CAAA,CAAM,EAAN,CACpB,KAAAu2D,EAAA,CAAgBv2D,CAAA,CAAM,EAAN,CAEhB,KAAAkoB,MAAA,CAAaloB,CAAA,CAAM,EAAN,CACb,KAAAioB,EAAA,CAAqBjoB,CAAA,CAAM,EAAN,CACrB,KAAAs2D,GAAA,CAAgBt2D,CAAA,CAAM,EAAN,CAChB,KAAAq2D,GAAA,CAAgBr2D,CAAA,CAAM,EAAN,CAChB,KAAAo2D,EAAA,CAAoBp2D,CAAA,CAAM,EAAN,CACpB,KAAAm2D,EAAA,CAAuBn2D,CAAA,CAAM,EAAN,CACvB,KAAAk3D,EAAA,CAAkBl3D,CAAA,CAAM,EAAN,CAElB,KAAAo3D,EAAA,CAAcp3D,CAAA,CAAM,EAAN,CACd,KAAAs3D,EAAA,CAA2Bt3D,CAAA,CAAM,EAAN,CAC3B,KAAAq3D,GAAA,CAAmBr3D,CAAA,CAAM,EAAN,CACnB,KAAAy3D,EAAA,CAAcz3D,CAAA,CAAM,EAAN,CACd,KAAAo4D,EAAA;AAAYp4D,CAAA,CAAM,EAAN,CACZ,KAAAq4D,GAAA,CAAYr4D,CAAA,CAAM,EAAN,CACZ,KAAAmX,GAAA,CAAYnX,CAAA,CAAM,EAAN,CACZ,KAAAy4D,EAAA,CAAWz4D,CAAA,CAAM,EAAN,CAEX,KAAA8f,EAAA+4C,GAAA,CAAsB74D,CAAA,CAAM,EAAN,CACtB,KAAA8f,EAAAg5C,GAAA,CAAoB94D,CAAA,CAAM,EAAN,CACpB,KAAA8f,EAAAE,GAAA,CAAmBhgB,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAkP,GAAA,CAAmBhvB,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAiY,GAAA,CAAmB/3B,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAi5C,GAAA,CAAoB/4D,CAAA,CAAM,EAAN,CACpB,KAAA8f,EAAAk5C,GAAA,CAAoBh5D,CAAA,CAAM,EAAN,CACpB,KAAA8f,EAAAy4C,GAAA,CAAmBv4D,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAm5C,GAAA,CAAmBj5D,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAo5C,GAAA,CAAqBl5D,CAAA,CAAM,EAAN,CACrB,KAAA8f,EAAAq5C,GAAA,CAAmBn5D,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAtP,GAAA,CAAqBxQ,CAAA,CAAM,EAAN,CACrB,KAAA8f,EAAArP,GAAA,CAAmBzQ,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAC,GAAA,CAAmB/f,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAs5C,GAAA,CAAmBp5D,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAu5C,GAAA,CAAmBr5D,CAAA,CAAM,EAAN,CACnB,KAAA8f,EAAAw5C,GAAA,CAAoBt5D,CAAA,CAAM,EAAN,CAEpB,KAAAg1D,EAAA,CAAmBh1D,CAAA,CAAM,EAAN,CACnB,KAAAw4D,GAAA,CAAgBx4D,CAAA,CAAM,EAAN,CAEhB,KAAA8f,EAAAy5C,GAAA,CAAsBv5D,CAAA,CAAM,EAAN,CAEtB,KAAA61D,GAAA,CAAmB71D,CAAA,CAAM,EAAN,CAEnB,KAAA+3D,EAAA,CAAgB/3D,CAAA,CAAM,EAAN,CAEhB,KAAA8f,EAAA05C,GAAA,CAAqBx5D,CAAA,CAAM,EAAN,CACrB,KAAA8f,EAAA25C,GAAA,CAAqBz5D,CAAA,CAAM,EAAN,CACrB,KAAA8f,EAAA45C,GAAA,CAAqB15D,CAAA,CAAM,EAAN,CAErB,KAAAw8B,GAAA,CAAa,IAAI3yB,WAAJ,CAAgB,IAAAsN,GAAA9J,OAAhB,CAAkC,IAAA8J,GAAA2mC,WAAlC,CAAwD,IAAA3mC,GAAAvV,OAAxD;AAA4E,CAA5E,CACb,KAAAw7B,GAAA,CAAc,IAAIxwB,UAAJ,CAAe,IAAAuK,GAAA9J,OAAf,CAAiC,IAAA8J,GAAA2mC,WAAjC,CAAuD,IAAA3mC,GAAAvV,OAAvD,EAA2E,CAA3E,CAGdg4D,GAAA,CAAAA,IAAA,CAGA,KAAAlC,GAAA,CAAa,IAAIp0B,WAAJ,CAAgB,IAAAm0B,EAAApqD,OAAhB,CACb,KAAAsqD,GAAA,CAAc,IAAItZ,UAAJ,CAAe,IAAAoZ,EAAApqD,OAAf,CACd,KAAAuqD,EAAA,CAAa,IAAI/tD,WAAJ,CAAgB,IAAA4tD,EAAApqD,OAAhB,CACb,KAAAwqD,GAAA,CAAa,IAAIlrD,SAAJ,CAAc,IAAA8qD,EAAApqD,OAAd,CACb,KAAAyqD,EAAA,CAAY,IAAIx4D,UAAJ,CAAe,IAAAm4D,EAAApqD,OAAf,CAEG,KAAIi2B,WAAJ,CAAgB,IAAAy0B,EAAA1qD,OAAhB,CACf,KAAA2qD,GAAA,CAAiB,IAAIrrD,SAAJ,CAAc,IAAAorD,EAAA1qD,OAAd,CACjB,KAAA4qD,GAAA,CAAgB,IAAI34D,UAAJ,CAAe,IAAAy4D,EAAA1qD,OAAf,CAChBqrD,GAAA,CAAAA,IAAA,CA5FJ,CA4HkCmB,SAAA,GAAQ,CAARA,CAAQ,CAACvuD,CAAD,CAC1C,CACI,GF9SsB2qC,SE8StB,GAAG3qC,CAAH,CAMI,CAAAsqD,EA2xBJ,CA3xBsB,CAAA,CA2xBtB,CAxxBIkE,CAwxBJvD,EAAA,CAAgB,CAjyBhB,KAiBI,MAJA/tD,QAAA8O,IAAA,CAAYhM,CAAZ,CAIMA,CAHN9C,OAAA8O,IAAA,CAAYhM,CAAAiM,MAAZ,CAGMjM,CAAAA,CAAN,CAlBR;AA8BA+T,CAAAxf,UAAAqhB,MAAA,CAAsB64C,QAAQ,EAC9B,CACI,IAAA/E,EAAA,CAAmB,CAAA,CAEnB,KAAI,IAAIjyD,EAAI,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEI,IAAAkyD,GAAA,CAAqBlyD,CAArB,CAGA,CAH0B,CAG1B,CAFA,IAAAmyD,GAAA,CAAoBnyD,CAApB,CAEA,CAFyB,CAEzB,CAAA,IAAAoyD,GAAA,CAAqBpyD,CAArB,CAAA,CAA0B,CAG9B62D,GAAA,CAAAA,IAAA,CAEA,KAAQ72D,CAAR,CAAY,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEI,IAAA00D,EAAA,CAAY10D,CAAZ,CAGA,CAHiB,CAGjB,CAFA,IAAAq1D,EAAA,CAAUr1D,CAAV,CAEA,CAFe,CAEf,CADA,IAAAs9C,EAAA,CAAQt9C,CAAR,CACA,CADa,CACb,CAAA,IAAAs1D,GAAA,CAAUt1D,CAAV,CAAA,CAAe,CAGnB,KAAQA,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB,IAAAg1D,EAAAn2D,OAAnB,CAAyCmB,CAAA,EAAzC,CAEI,IAAAg1D,EAAA,CAAch1D,CAAd,CAAA,CAAmB,CAGvB,KAAQA,CAAR,CAAY,CAAZ,CAAeA,CAAf,CAAmB,IAAAm1D,GAAAt2D,OAAnB,CAA2CmB,CAAA,EAA3C,CAEI,IAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAA,CAAqB,CAEzB,KAAAo1D,GAAA,CAAa,IAEb,KAAA5C,GAAA,CAAsB,CAAA,CAOtB,KAAAC,GAAA,CADA,IAAAC,GACA,CAHA,IAAAC,GAGA,CAJA,IAAAC,GAIA,CAJiB,CAMjB,KAAAC,EAAA,CAAkB,CAAA,CAClB,KAAAvV,EAAA,CAAQ,CAAR,CAAA,CAAa,UACb,KAAAA,EAAA,CAAQ,CAAR,CAAA,CAAa,CACb,KAAAA,EAAA,CAAQ,CAAR,CAAA,CAAa,CACb,KAAAA,EAAA,CAAQ,CAAR,CAAA,CAAa,CACb,KAAAgY,GAAA,CAAU,CAAV,CAAA,CAAe,MACf,KAAAA,GAAA,CAAU,CAAV,CAAA,CAAe,IACf,KAAAtC,EAAA,CAAW,CACX,KAAAqB,EAAA,CAAc,CAAA,CACd,KAAAtB,GAAA,CAA4B,CAE5B,KAAAE,GAAA,CADA,IAAAC,EACA,CADa,CAAA,CAEb,KAAAM,EAAA,CAAgB,CAGhB,KAAAK,GAAA,CADA,IAAAE,GACA,CADsB,EAGtB4B,GAAA,CAAAA,IAAA,CAGA,KAAArB,GAAA;AADA,IAAAG,EACA,CADyB,CAEzB,KAAA73C,GAAA,CAAc,CAAA,CAId,KAAA62C,GAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAFmB,CAInB,KAAAxuC,MAAA,CFzeY8xC,CEgfZ,KAAA5D,EAAA,CADA,IAAAC,GACA,CAFA,IAAAC,GAEA,CAHA,IAAAH,EAGA,CAJA,IAAAD,EAIA,CANA,IAAAjuC,EAMA,CANqB,CAQrB,KAAAkvC,GAAA,CAAkBv3C,EAAA,EAElB,KAAA03C,EAAA,CAA2B,OAC3B2C,GAAA,CAAAA,IAAA,CAAyB,KAAzB,CAEAC,GAAA,CAAAA,IAAA,CFxbmBC,CEwbnB,CAAwB,EAAxB,CACA,KAAAvC,EAAA,CF1cmBwC,CE0cnB,CAAA,CAAqB,GAElB,KAAAt6C,EAAA+4C,GAAH,EAEI,IAAA/4C,EAAA+4C,GAAA33C,MAAA,EAGJ,KAAAs3C,GAAA,CAAgB,CA1FpB,CA8FAn5C,EAAAxf,UAAAw6D,GAAA,CAA8BC,QAAQ,CAACv5D,CAAD,CACtC,CACc,OAAV,CAAGA,CAAH,CAEIA,CAFJ,CAEW,OAFX,CAIqB,CAJrB,EAISA,CAJT,CAIgB,CAJhB,IAMIA,CANJ,CAMWS,IAAA+oB,IAAA,CAAS,CAAT,CAAY,EAAZ,CANX,CFpbkBvM,MEoblB,CAaA,KAAArN,GAAA,CAJA5P,CAIA,EAJSA,CAIT,CAJgB,CAIhB,CAJsB,MAItB,EAJ8C,CAI9C,CAJkD,CAM9CsM,EAAAA,CAAS,IAAI4xC,WAAJ,CAAgBl+C,CAAhB,CAEb,KAAAoW,GAAA,CAAY,IAAI7X,UAAJ,CAAe+N,CAAf,CACZ,KAAAmvB,GAAA,CAAa,IAAI3yB,WAAJ,CAAgBwD,CAAhB,CACb,KAAA+vB,GAAA,CAAc,IAAIxwB,UAAJ,CAAeS,CAAf,CApBlB,CADA,EAAAktD,U5BkjDE,cAAA,C4BljDF,CAAA,UAAAA,GAwBAl7C;CAAAxf,UAAAkL,GAAA,CAAqByvD,QAAQ,CAACnqD,CAAD,CAAWoqD,CAAX,CAC7B,CACI,IAAAJ,GAAA,CAAmD,QAAhC,GAAA,MAAOhqD,EAAAM,GAAP,CACfN,CAAAM,GADe,CACQ,QAD3B,CAGA,KAAAuQ,MAAA,EAEA,KAAI2K,EAAK,IAAIpR,EAAJ,CAAO,IAAP,CACT,KAAAoR,EAAA,CAAUA,CAEV,KAAA9Y,GAAAulD,GAAA,CAAiBjoD,CAAA0C,GACjB,KAAAA,GAAAwlD,GAAA,CAAgBloD,CAAA4C,GAEhBkO,GAAA,CAAAA,IAAA,CAEA,KAAIu5C,EAAW,CAEft9C,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,QAAQ,EACrC,CAGI,MAAO,EAHX,CADA,CAOAzO,EAAA,CAAAyO,CAAA,CAAiB,GAAjB,CAAuB,IAAvB,CAA6B,QAAQ,EACrC,CACI,MAAO6uC,EADX,CADA,CAKA78C,EAAA,CAAAgO,CAAA,CAAkB,GAAlB,CAAwB,IAAxB,CAA8B,QAAQ,CAACuK,CAAD,CACtC,CACIskC,CAAA,CAAWtkC,CADf,CADA,CAKAhZ,EAAA,CAAAyO,CAAA,CAAiB,IAAjB,CAAwB,IAAxB,CAA8B,QAAQ,EACtC,CAEI,IAAIhc,EAAS,IAAA2oD,GAAT3oD,CAAyB,GAC7B,KAAA2oD,GAAA,IAAmB,CACnB,OAAO3oD,EAJX,CADA,CAOAgO,EAAA,CAAAgO,CAAA,CAAkB,IAAlB,CAAyB,IAAzB,CAA+Bhb,IAAAA,EAA/B,CAA0C,QAAQ,CAAC+B,CAAD,CAClD,CFlWiC+nD,CEqW7B,GAAG/nD,CAAH,CAII,IAAA4lD,GAJJ,CAIoB,SAJpB,CFpW4BoC,CE0WvB,GAAGhoD,CAAH,CAED,IAAA4lD,GAFC,CAEe,IAAA7nD,GAFf,CAMD,IAAA6nD,GANC,CFzWsBqC,CE6WtB,GAAGjoD,CAAH,CAEe,CAFf,CAOe,CApBxB,CADA,CAkCA,KAAAkN,EAAA,CAAe,EAGZzP,EAAAyqD,GAAH,GAEI,IAAAh7C,EAAAu5C,GA2EI,CA3Ee,IAAInjB,EAAJ,CAAQ,IAAR,CA2Ef,CA1EJ,IAAAp2B,EAAAkP,GA0EI,CA1Ee,IAAI4F,EAAJ,CAAQ,IAAR,CA0Ef,CAjEJ,IAAA9U,EAAAE,GAiEI;AAjEe,IAAI64B,EAAJ,CAAQ,IAAR,CAiEf,CAhEJkiB,EAAA,CAAAA,IAAA,CAAe,IAAAj7C,EAAAE,GAAf,CAAiC3P,CAAjC,CAgEI,CA9DJ,IAAAyP,EAAAiY,GA8DI,CA9De,IAAIsF,EAAJ,CAAQ,IAAR,CA8Df,CAvDJ,IAAAvd,EAAAy4C,GAuDI,CAvDe,IAAI/0B,EAAJ,CAAc,IAAd,CAAoBi3B,CAApB,CACXpqD,CAAAO,GADW,EACiB,OADjB,CAuDf,CApDJ,IAAA6nD,EAoDI,CApDO,IAAI/yC,EAAJ,CAAQ,IAAR,CAoDP,CAlDJ,IAAA5F,EAAAm5C,GAkDI,CAlDe,IAAI3mB,EAAJ,CAAQ,IAAR,CAAcmoB,CAAd,CAkDf,CAhDJ,IAAA36C,EAAAo5C,GAgDI,CAhDiB,IAAI9d,EAAJ,CAAS,IAAT,CAAe,IAAf,CAAsBqf,CAAtB,CAgDjB,CA9CDpqD,CAAAmpD,GA8CC,GA5CA,IAAA15C,EAAA05C,GA4CA,CA5CqB,IAAIpe,EAAJ,CAAS,IAAT,CAAe,GAAf,CAAsBqf,CAAtB,CA4CrB,EA1CDpqD,CAAAopD,GA0CC,GAxCA,IAAA35C,EAAA25C,GAwCA,CAxCqB,IAAIre,EAAJ,CAAS,IAAT,CAAe,GAAf,CAAsBqf,CAAtB,CAwCrB,EAtCDpqD,CAAAqpD,GAsCC,GApCA,IAAA55C,EAAA45C,GAoCA,CApCqB,IAAIte,EAAJ,CAAS,IAAT,CAAe,GAAf,CAAsBqf,CAAtB,CAoCrB,EAjCJ,IAAA36C,EAAAq5C,GAiCI,CAjCe,IAAIthC,EAAJ,CAAqB,IAArB,CAA2BxnB,CAAAE,GAA3B,CAiCf,CA/BAyqD,CA+BA,CA/BmB,CA+BnB,CA7BD3qD,CAAAI,GA6BC,GA3BA,IAAAqP,EAAArP,GA2BA,CA3BmB,IAAIqa,EAAJ,CAAc,IAAd,CAAoBza,CAAAI,GAApB,CAAkC,CAAA,CAAlC,CAAyCuqD,CAAA,EAAzC,CAA6DP,CAA7D,CA2BnB,EAxBDpqD,CAAAG,GAwBC,GAtBA,IAAAsP,EAAAtP,GAsBA,CAtBqB,IAAIsa,EAAJ,CAAc,IAAd,CAAoBza,CAAAG,GAApB,CAAoC,CAAA,CAApC,CAA0CwqD,CAAA,EAA1C,CAA8DP,CAA9D,CAsBrB,EAnBDpqD,CAAA0G,GAmBC,GAjBA,IAAA+I,EAAA/I,GAiBA,CAjBmB,IAAI+T,EAAJ,CAAc,IAAd,CAAoBza,CAAA0G,GAApB,CAAkC,CAAA,CAAlC,CAAyCikD,CAAA,EAAzC,CAA6DP,CAA7D,CAiBnB,EAdJ,IAAA36C,EAAAC,GAcI,CAde,IAAIshB,EAAJ,CAAQ,IAAR,CAAco5B,CAAd,CAcf,CAZDpqD,CAAA4qD,GAYC,GAVA,IAAAn7C,EAAAs5C,GAUA,CAVmB,IAAIjZ,EAAJ,CAAS,IAAT;AAAesa,CAAf,CAUnB,EAPDpqD,CAAA6qD,GAOC,GALA,IAAAp7C,EAAA+4C,GAKA,CALsB,IAAIxG,EAAJ,CAAW,IAAX,CAAiBoI,CAAjB,CAA6BpqD,CAAA6qD,GAA7B,CAKtB,EAAA,IAAAp7C,EAAAw5C,GAAA,CAAoB,IAAIjU,EAAJ,CAAS,IAAT,CAAeoV,CAAf,CA7E5B,CAiFGpqD,EAAAK,GAAH,EAGIyqD,EAAA,CAAAA,IAAA,CAAoB9qD,CAAAK,GAAArD,OAApB,CAjKR,CA0K+B+tD;QAAA,GAAQ,CAARA,CAAQ,CAAC/tD,CAAD,CACvC,CAUI,GAF+BguD,IAE/B,CAAGhuD,CAAAqV,WAAH,CACA,CACI,IAAI44C,EAAQ,IAAI1uD,UAAJ,CAAe,IAAf,CACZkW,EAAA,IAAIxjB,UAAJ,CAAeg8D,CAAAjuD,OAAf,CAAAyV,KAAA,CAAiC,IAAIxjB,UAAJ,CAAe+N,CAAf,CAAjC,CAFJ,CADA,IAOQiuD,EAAJ,CAAY,IAAI1uD,UAAJ,CAAeS,CAAf,CAAuB,CAAvB,CAA0B,IAA1B,CAGhB,KAAI,IAAIrI,EAAS,CAAjB,CAZ+Bq2D,IAY/B,CAAoBr2D,CAApB,CAAqDA,CAArD,EAA+D,CAA/D,CAEI,GAjBUu2D,SAiBV,GAAGD,CAAA,CAAMt2D,CAAN,EAAgB,CAAhB,CAAH,CACA,CACI,IAAIkjB,EAAQozC,CAAA,CAAMt2D,CAAN,CAAe,CAAf,EAAoB,CAApB,CAIZ,IAFYwO,EArBN+nD,SAqBM/nD,CAAQ0U,CAAR1U,CADG8nD,CAAAE,CAAMx2D,CAANw2D,CAAe,CAAfA,EAAoB,CAApBA,CACHhoD,CAA2B,CAA3BA,CAEZ,CAAA,CAcJ,CAAAikD,EAAA,CFhtBgBgE,CEgtBhB,CAAA,CAAuB,SAGvB,EAAAhE,EAAA,CFhtBgBiE,CEgtBhB,CAAA,CAD0BC,KAE1B,EAAA//C,GAAA,CAF0B+/C,KAE1B,CAAkC,CAAlC,CAEA,EAAAtb,EAAA,CAAQ,CAAR,CAAA,CAAa,CACb,EAAAkV,GAAA,CAAsB,CAAA,CACtB,EAAArtC,MAAA,CFzvBQ8xC,CE0vBR4B,GAAA,CAAAA,CAAA,CAAoB,CAAA,CAApB,CACA,EAAA5F,GAAA,CAAqB,CAAA,CAErB,KAAI,IAAIjzD,EAAI,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEI,CAAAkyD,GAAA,CAAqBlyD,CAArB,CAMA,CAN0B,CAM1B,CALA,CAAAoyD,GAAA,CAAqBpyD,CAArB,CAKA,CAL0B,CAK1B,CAJA,CAAAmyD,GAAA,CAAoBnyD,CAApB,CAIA,CAJyB,UAIzB,CAAA,CAAAq1D,EAAA,CAAUr1D,CAAV,CAAA,CAAe,KAGnB,IAAGmlB,CAAH,CA1D6B2zC,KA0D7B,CACA,CAIQC,CAAAA,CAAYR,CAAA,CAAMt2D,CAAN,CAAe,EAAf,EAAqB,CAArB,CAChB,KAAI+2D,EAAgBT,CAAA,CAAMt2D,CAAN,CAAe,EAAf,EAAqB,CAArB,CAEhBg3D,EAAAA,CAAaV,CAAA,CAAMt2D,CAAN,CAAe,EAAf,EAAqB,CAArB,CAsBb+f,EAAAA,CAAO,IAAIzlB,UAAJ,CAAe+N,CAAf,CAZMrI,CAYN,EA1BOs2D,CAAAW,CAAMj3D,CAANi3D,CAAe,EAAfA,EAAqB,CAArBA,CA0BP,CAZ8BH,CAY9B,EAVU,CAArBl6D,GAAGm6D,CAAHn6D,CAEiBiP,IAAAA,EAFjBjP;AAOiBm6D,CAPjBn6D,CAOiCk6D,CAGtB,CACXI,EOzmBR/kD,GAAA2L,IAAA,CPymBwBiC,COzmBxB,CPymB8B+2C,COzmB9B,CP2mBQ,EAAAxE,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CF3uBhBC,CE2uBgB,CAA3B,CAAkDJ,CAAlD,CAA+D,CAhCnE,CADA,IAmCK,IA9FSK,UA8FT,GAAGf,CAAA,CAAM,CAAN,CAAH,CAQD,IAJIgB,CAIJ,CAJUC,EAAA,CAASlvD,CAAT,CAIV,CAFA,CAAAiqD,EAEA,CAF2B6E,CAAA,CAAAA,CAAA,CFnvBhBC,CEmvBgB,CAE3B,CAFkDE,CAAAl7D,GAAA0d,GAElD,CAFqE,CAErE,CAAA,CAAA,CAAAtgB,EAAA,CAAmB89D,CAAAE,GAAnB,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAQC,CAEJ,CAFJ,CAAA,MAEI,CAAoB,CAApB,GAAGA,CAAAr8D,KAAH,EAIyB,CAJzB,GAIQq8D,CAAAr8D,KAJR,GAaQ2kB,COpoBpB,CPooB2B,IAAIzlB,UAAJ,CAAe+N,CAAf,CAAuBovD,CAAAz3D,OAAvB,CAAuCy3D,CAAAC,GAAvC,COpoB3B,CPqoBgBR,COroBhB/kD,GAAA2L,IAAA,CPqoBgCiC,COroBhC,CPqoBsC03C,CAAAE,GOroBtC,CPunBY,CAkCR,EAAA9wC,EAAAxO,GAAA,CAAmC,GAAnC,CAAyC,CAAzC,CACI,QAAQ,CAACzK,CAAD,CACR,CACIpK,OAAA8O,IAAA,CAAY,wBAAZ,CAAuC4K,EAAA,CAAEtP,CAAF,CAAS,CAAT,CAAvC,CACA,MAAM,MAAN,CAFJ,CAFJ,CAMI,QAAQ,EAAG,EANf,CAOI,QAAQ,EAAG,EAPf,CAQI,QAAQ,EAAG,EARf,CAWA,KAAA,CAAA,CAAA,CAAQ7P,GAAI,EAAZ,CAAA,CAAsB,EAAtB,EAAiBA,CAAAA,GAAjB,CAAA,CAAA,CAAA,CAAA,GAAQA,CAAAA,GAAR,CAAA,CAA2BA,CAAAA,GAAA,EAA3B,CAEI8a,CAAA,CAAA,CAAAgO,EAAA,CAAuB,IAAvB,CAAgC9oB,CAAAA,GAAhC,CAAmC,CAAnC,CACI,QAAA,CAAA,CAAA,CAAA,CAAA,MAAA,SAAQ,CAAC6P,CAAD,CACR,CAEOA,CAAH,CAEI,IAAAqd,GAAA,CAAsBltB,CAAAA,GAAtB,CAFJ,CAMI+oB,EAAA,CAAAA,IAAA,CAAsB/oB,CAAAA,GAAtB,CARR,CADA,CAAA,CAAA,CAAA,CADJ,CAmBJ,MApJI,CALJ,CAvBR;AAoL0B65D,QAAA,GAAQ,CAARA,CAAQ,CAAC58C,CAAD,CAAM3P,CAAN,CAClC,CACI,IAAIS,EAAaT,CAAAS,GAAbA,EAAoC,GAUxCkP,EM/sBA0Q,GAAA,CArPoCmsC,EAqPpC,CAAA,CN+sBqC,CM/sBrC,CN+sByC/rD,CM/sBzC,EN+sBuD,CM/sBvD,CN+sB2D,GAG3DkP,EMltBA0Q,GAAA,CAnPoCosC,EAmPpC,CAAA,CNktBoChsD,CMltBpC,CNktBiD,GAGjDkP,EMrtBA0Q,GAAA,CAlQkCqsC,EAkQlC,CAAA,CNqtBkCnqD,GAClCoN,EMttBA0Q,GAAA,CAjQmCssC,EAiQnC,CAAA,CNstBmCpqD,CAE/BqqD,EAAAA,CAAkB,CACC,QAAvB,EAAG,CAAAtsD,GAAH,GAEIssD,CACA,CADmB,CAAAtsD,GACnB,CADsC,OACtC,EADsD,EACtD,CAAAssD,CAAA,CAAkBz7D,IAAAqM,IAAA,CAASovD,CAAT,CAA0B,KAA1B,CAHtB,CAMAj9C,EM/tBA0Q,GAAA,CAhQqCwsC,EAgQrC,CAAA,CN+tBqCD,CM/tBrC,CN+tBuD,GACvDj9C,EMhuBA0Q,GAAA,CA/PsCysC,EA+PtC,CAAA,CNguBsCF,CMhuBtC,ENguByD,CMhuBzD,CNguB6D,GAC7Dj9C,EMjuBA0Q,GAAA,CA1PoC0sC,EA0PpC,CAAA,CNiuBoCH,CMjuBpC,CNiuBsD,GACtDj9C,EMluBA0Q,GAAA,CAzPqC2sC,EAyPrC,CAAA,CNkuBqCJ,CMluBrC,ENkuBwD,CMluBxD,CNkuB4D,GAExDK,EAAAA,CAAmB,CACA,SAAvB,EAAG,CAAA3sD,GAAH,GAEI2sD,CACA,CADoB,CAAA3sD,GACpB,CADuC,QACvC,EAD4D,EAC5D,CAAA2sD,CAAA,CAAmB97D,IAAAqM,IAAA,CAASyvD,CAAT,CAA2B,KAA3B,CAHvB,CAKAt9C,EM1uBA0Q,GAAA,CAvPqC6sC,EAuPrC,CAAA,CN0uBqCD,CM1uBrC,CN0uBwD,GACxDt9C,EM3uBA0Q,GAAA,CAtPsC8sC,EAsPtC,CAAA,CN2uBsCF,CM3uBtC,EN2uB0D,CM3uB1D,CN2uB8D,GAG9Dt9C,EM9uBA0Q,GAAA,CAlPqC+sC,EAkPrC,CAAA,CN8uBqC7qD,CACrCoN,EM/uBA0Q,GAAA,CAjPqCgtC,EAiPrC,CAAA,CN+uBqC9qD,CACrCoN,EMhvBA0Q,GAAA,CAhPsCitC,EAgPtC,CAAA,CNgvBsC/qD,CAEtCoN,EMlvBA0Q,GAAA,CAnQoCktC,EAmQpC,CAAA,CNkvBoChrD,EAEpCoN,EMpvBA0Q,GAAA,CA/OoCmtC,EA+OpC,CAAA,CNovBoCjrD,CAGhCvC,EAAAytD,GAAJ,GAAuB99C,CMvvBvB0Q,GAAA,CNuvBsCxvB,EMvvBtC,CNuvBA,CAA4C0R,CAA5C,CAnDJ;AAsD0BmrD,QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,IAAIhrD,EAAO,CAAAA,GAAAulD,GAAX,CACIrlD,EAAW,CAAAF,GAAAwlD,GAEf,IAAIxlD,CAAJ,CAAA,CAJJ,IAWQjQ,EAAO,IAAIxD,UAAJ,CAAeyT,CAAf,CAGXmpD,EOnwBA/kD,GAAA2L,IAAA,CPmwBgBhgB,COnwBhB,CPiwBY,OOjwBZ,CPiwBuBiQ,CAAA2P,WOjwBvB,CPqwBA,IAAGzP,CAAH,CACA,CAEI,IAAI+qD,EAAY,IAAI1+D,UAAJ,CAAe2T,CAAf,CAGhBipD,EO3wBJ/kD,GAAA2L,IAAA,CP2wBoBk7C,CO3wBpB,CP2wB+Bh5D,MO3wB/B,CP8wBIiW,GAAA,CAAA,CAAA4Q,EAAA,CAAsB,UAAtB,CAAkC,OAAlC,CACI,QAAQ,CAAC1N,CAAD,CACR,CACIA,CAAA,CAAQA,CAAR,CAAe,UAAf,CAA6B,CAC7B,OAAGA,EAAH,CAAU6/C,CAAAp8D,OAAV,CAEWo8D,CAAA,CAAU7/C,CAAV,CAFX,CAMW,CARf,CAFJ,CAaI,QAAQ,EACR,EAdJ,CARJ,CAgCAlD,EAAA,CAAA,CAAA4Q,EAAA,CAAsB,UAAtB,CAAkC,OAAlC,CACI,QAAQ,CAAC1N,CAAD,CACR,CAEI,MAAO,KAAAhH,GAAA,CADPgH,CACO,CADC,OACD,CAFX,CADA7b,KAAA,CAIO,CAJP,CADJ,CAMI,QAAQ,CAAC6b,CAAD,CAAOvL,CAAP,CACR,CAEI,IAAAuE,GAAA,CADAgH,CACA,CADQ,OACR,CAAA,CAAkBvL,CAFtB,CADAtQ,KAAA,CAIO,CAJP,CANJ,CA7CA,CAJJ,CA8I+B27D,QAAA,GAAQ,CAARA,CAAQ,CACvC,CACI,CAAA5G,GAAA,CAAmB,CAAAC,EAEnB,EAAAE,EAAA,EAOA,KAAI0G,EAAS,CAAAC,GAAA,EASb,EAAA/f,GAAA,CAAW8f,CAAX,CAAA,CAAmB,CAAnB,CAnBJ,CAoCA7+C,CAAAxf,UAAAu+D,GAAA,CAAsBC,QAAQ,EAC9B,CACI,GACA,CACI39C,EAAA,CAAAA,IAAA,CADJ,CAGA,MAAMpV,CAAN,CACA,CACIqV,EAAA,CAAAA,IAAA,CAAuBrV,CAAvB,CADJ,CANJ,CADA,EAAAivD,U5B+8BE,MAAA,C4B/8BF,CAAA,UAAAA,GAYkC+D;QAAA,GAAQ,CAARA,CAAQ,CAAClG,CAAD,CAC1C,CAEI,CAAA7B,EAAA,EAAiB6B,CAAjB,CAAwB,CACxBmG,GAAA,CAAAA,CAAA,CACA,EAAAhI,EAAA,CAAgB,CAJpB,CAOuCiI,QAAA,GAAQ,CAARA,CAAQ,CAC/C,CACI,GAAGj2C,EAAA,CAAAA,CAAA,CAAH,CAEI,CAAAk2C,GAAA,CAAa,CAAAN,GAAA,EAAb,CAAA,CAA+B,CAA/B,CAFJ,KAMI,EAAAO,GAAA,CAAa,CAAAP,GAAA,EAAb,CAAA,CAA+B,CAA/B,CAPR,CAgDwBQ,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAChC,CAGI,GFzjCSC,WEyjCT,IAAID,CAAJ,CAAW,WAAX,EAGI,KAAM,EAAAE,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,CAAA1e,EAAA,CAAQ,CAAR,CAAA,CAAaue,CAET,EAAAnG,EAAJ,GAGI,CAAApY,EAAA,CAAQ,CAAR,CAHJ,EF7kCS2e,CE6kCT,CAKA,EAAA3e,EAAA,CAAQ,CAAR,CAAA,EF9kCS4e,EEglCLC,EAAAA,CFxkCKL,WEwkCLK,IAAc,CAAA7e,EAAA,CAAQ,CAAR,CAAd6e,CFxkCKL,WEwkCLK,CAGDA,EAAH,GAAkB,CAAA9H,EAAlB,GAEI,CAAAA,EACA,CADc8H,CACd,CAAAtF,EAAA,CAAAA,CAAA,CAHJ,CAMA,EAAArE,GAAA,CFjmCS4J,CEimCT,IAAuB,CAAA9e,EAAA,CAAQ,CAAR,CAAvB,CFjmCS8e,CEimCT,CA3BJ,CAqE4BC,QAAA,GAAQ,CAARA,CAAQ,CACpC,CACI,CAAAtI,GAAA,CAAsB,EACtB,EAAAF,GAAA,CAAsB,EAF1B,CAKA,CAAA,CAAA,CAAA,UAAA16B,EAAAiiC,GAAA,CAA0BkB,QAAQ,EAClC,CACQ,IAAA/H,EAAJ,CAA+B,KAA/B,CAAyC,IAAAR,GAAzC,GAEI,IAAAD,EACA,CADgByI,EAAA,CAAAA,IAAA,CAA4B,IAAAhI,EAA5B,CAChB,CADwE,IAAAA,EACxE,CAAA,IAAAR,GAAA,CAAqB,IAAAQ,EAArB,CAAgD,KAHpD,CAMA,KAAIiI,EAAQ,IAAApkD,GAAA,CAAW,IAAA07C,EAAX,CAA2B,IAAAS,EAA3B,CACZ,KAAAA,EAAA,CAA2B,IAAAA,EAA3B,CAAsD,CAAtD,CAA0D,CAE1D,OAAOiI,EAVX,CAaArjC;CAAAsjC,GAAA,CAA2BC,QAAQ,EACnC,CACI,MAAO,KAAAtB,GAAA,EAAP,EAA2B,EAA3B,EAAiC,EADrC,CAIAjiC,EAAAwjC,GAAA,CAA2BC,QAAQ,EACnC,CAII,GAA6D,IAA7D,EAAK,IAAArI,EAAL,CAAgC,IAAAR,GAAhC,IAAwD,CAAxD,CAEI,MAAO,KAAAqH,GAAA,EAAP,CAA0B,IAAAA,GAAA,EAA1B,EAA8C,CAGlD,KAAIhtC,EAAS,IAAA9V,GAAA,CAAY,IAAAw7C,EAAZ,CAA4B,IAAAS,EAA5B,CACb,KAAAA,EAAA,CAA2B,IAAAA,EAA3B,CAAsD,CAAtD,CAA0D,CAE1D,OAAOnmC,EAZX,CAeA+K,EAAA0jC,GAAA,CAA4BC,QAAQ,EACpC,CAEI,GAA6D,IAA7D,EAAK,IAAAvI,EAAL,CAAgC,IAAAR,GAAhC,IAAwD,CAAxD,CAEI,MAAO,KAAA4I,GAAA,EAAP,CAA2B,IAAAA,GAAA,EAA3B,EAAgD,EAGpD,KAAItuC,EAASmB,EAAA,CAAAA,IAAA,CAAa,IAAAskC,EAAb,CAA6B,IAAAS,EAA7B,CACb,KAAAA,EAAA,CAA2B,IAAAA,EAA3B,CAAsD,CAAtD,CAA0D,CAE1D,OAAOlmC,EAVX,CAgB+B0uC,SAAA,GAAQ,CAAC31C,CAAD,CAAMC,CAAN,CACvC,CACI,IAAItnB,EAAO,IAAI8J,UAAJ,CAAe,CAAf,CACX9J,EAAA,CAAK,CAAL,CAAA,CAAUqnB,CACVrnB,EAAA,CAAK,CAAL,CAAA,CAAUsnB,CACV,OAAOtnB,EAJX,CAOgCi9D,QAAA,GAAQ,CAACC,CAAD,CAAKC,CAAL,CAASC,CAAT,CAAaC,CAAb,CACxC,CACI,IAAIr9D,EAAO,IAAI8J,UAAJ,CAAe,CAAf,CACX9J,EAAA,CAAK,CAAL,CAAA,CAAUk9D,CACVl9D,EAAA,CAAK,CAAL,CAAA,CAAUm9D,CACVn9D,EAAA,CAAK,CAAL,CAAA,CAAUo9D,CACVp9D,EAAA,CAAK,CAAL,CAAA,CAAUq9D,CACV,OAAOr9D,EANX,CASgCs9D,QAAA,EAAQ,CAARA,CAAQ,CACxC,CACI,CAAAlJ,EAAA,CAAkB,CAAAiH,GAAA,EADtB,CAIAjiC,CAAAmkC,GAAA,CAA0BhhD,CAAAxf,UAAAs+D,GAC1BjiC;CAAAokC,GAAA,CAAyBjhD,CAAAxf,UAAAs+D,GACzBjiC,EAAAqkC,EAAA,CAAyBlhD,CAAAxf,UAAAs+D,GACzBjiC,EAAAskC,GAAA,CAA0BnhD,CAAAxf,UAAA2/D,GAC1BtjC,EAAAukC,EAAA,CAA0BphD,CAAAxf,UAAA6/D,GAC1BxjC,EAAAwkC,GAAA,CAA2BrhD,CAAAxf,UAAA+/D,GAC3B1jC,EAAAykC,GAAA,CAA2BthD,CAAAxf,UAAAs+D,GAC3BjiC,EAAA0kC,GAAA,CAA4BvhD,CAAAxf,UAAA2/D,GAC5BtjC,EAAA2kC,GAAA,CAA4BxhD,CAAAxf,UAAA6/D,GAC5BxjC,EAAA4kC,EAAA,CAA6BzhD,CAAAxf,UAAA+/D,GAOCmB,SAAA,EAAQ,CAARA,CAAQ,CAAC7J,CAAD,CACtC,CAGI,MAAO,CAAC8J,EAAA,CAAAA,CAAA,CAAA,CAAqB,CAAAC,EAArB,CAA0C,CAAAC,EAA3C,EAA+DhK,CAA/D,CAAA,CAA2E,CAA3E,CAHX,CAM4BiK,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACpC,CACI,MAAO,EAAAC,EAAA,CAAe,CAAAf,GAAA,EAAf,CAAA,CAAgC,CAAhC,CAAsCc,CAAtC,CADX,CAsDsCE,QAAA,GAAQ,CAARA,CAAQ,CAACn3C,CAAD,CAAMC,CAAN,CAAYxX,CAAZ,CAC9C,CAII,CAAA6I,GAAA,CAAY0O,CAAZ,CAAiBvX,CAAjB,CACA,EAAA6I,GAAA,CAAY2O,CAAZ,CAAkBxX,CAAlB,EAA2B,EAA3B,CAEGuX,EAAH,CAAS,CAAT,CAEOA,CAAH,CAAS,CAAT,EAGI,CAAA1O,GAAA,CAAY2O,CAAZ,CAAmB,CAAnB,CAAsBxX,CAAtB,EAA+B,CAA/B,CACA,CAAA,CAAA6I,GAAA,CAAY2O,CAAZ,CAAmB,CAAnB,CAAsBxX,CAAtB,EAA+B,EAA/B,CAJJ,GASI,CAAA6I,GAAA,CAAY0O,CAAZ,CAAkB,CAAlB,CAAsB,CAAtB,CAAyBvX,CAAzB,EAAkC,CAAlC,CACA,CAAA,CAAA6I,GAAA,CAAY0O,CAAZ,CAAkB,CAAlB,CAAsB,CAAtB,CAAyBvX,CAAzB,EAAkC,EAAlC,CAVJ,CAFJ,EAkBI,CAAA6I,GAAA,CAAY0O,CAAZ,CAAkB,CAAlB,CAAsB,CAAtB,CAAyBvX,CAAzB,EAAkC,CAAlC,CACA,CAAA,CAAA6I,GAAA,CAAY2O,CAAZ,CAAmB,CAAnB,CAAsBxX,CAAtB,EAA+B,EAA/B,CAnBJ,CAPJ,CAkC2B2uD,QAAA,GAAQ,CAARA,CAAQ,CAACpjD,CAAD,CACnC,CAEI,MAAO,EAAAhD,GAAA,CAAWmkD,EAAA,CAAAA,CAAA,CAA4BnhD,CAA5B,CAAX,CAFX;AAK4BqjD,QAAA,EAAQ,CAARA,CAAQ,CAACrjD,CAAD,CACpC,CACI,MAAG,EAAAi5C,EAAH,EAAqC,IAArC,IAAmBj5C,CAAnB,CAA0B,IAA1B,EAEWsjD,EAAA,CAAAA,CAAA,CAAgBtjD,CAAhB,CAFX,CAEmCsjD,EAAA,CAAAA,CAAA,CAAgBtjD,CAAhB,CAAuB,CAAvB,CAA2B,CAA3B,CAFnC,EAEoE,CAFpE,CAMW,CAAA9C,GAAA,CAAYikD,EAAA,CAAAA,CAAA,CAA4BnhD,CAA5B,CAAZ,CAPf,CAW6BujD,QAAA,EAAQ,CAARA,CAAQ,CAACvjD,CAAD,CACrC,CACI,MAAG,EAAAi5C,EAAH,EAAoC,IAApC,GAAmBj5C,CAAnB,CAA0B,IAA1B,EAEW8K,CAAA,CAAAA,CAAA,CAAiB9K,CAAjB,CAFX,CAEoC8K,CAAA,CAAAA,CAAA,CAAiB9K,CAAjB,CAAwB,CAAxB,CAA4B,CAA5B,CAFpC,EAEsE,EAFtE,CAMWoU,EAAA,CAAAA,CAAA,CAAa+sC,EAAA,CAAAA,CAAA,CAA4BnhD,CAA5B,CAAb,CAPf,CAW6BwjD,QAAA,GAAQ,CAARA,CAAQ,CAACxjD,CAAD,CACrC,CACI,IAAIrb,EAAO8+D,EAAA,CAAoB,CAApB,CAAuB,CAAvB,CACR,EAAAxK,EAAH,EAAoC,IAApC,GAAmBj5C,CAAnB,CAA0B,IAA1B,GAEIrb,CAAA,CAAK,CAAL,CACA,CADUumB,CAAA,CAAAA,CAAA,CAAkBlL,CAAlB,CACV,CAAArb,CAAA,CAAK,CAAL,CAAA,CAAUumB,CAAA,CAAAA,CAAA,CAAkBlL,CAAlB,CAAyB,CAAzB,CAA6B,CAA7B,CAHd,GAOIrb,CAAA,CAAK,CAAL,CACA,CADUyvB,EAAA,CAAAA,CAAA,CAAa+sC,EAAA,CAAAA,CAAA,CAA4BnhD,CAA5B,CAAb,CACV,CAAArb,CAAA,CAAK,CAAL,CAAA,CAAUyvB,EAAA,CAAAA,CAAA,CAAa+sC,EAAA,CAAAA,CAAA,CAA4BnhD,CAA5B,CAAmC,CAAnC,CAAuC,CAAvC,CAAb,CARd,CAUA,OAAOrb,EAZX,CAqC4B++D,QAAA,GAAQ,CAARA,CAAQ,CAAC1jD,CAAD,CAAOvL,CAAP,CACpC,CAEI,CAAA6I,GAAA,CAAYqmD,EAAA,CAAAA,CAAA,CAA6B3jD,CAA7B,CAAZ,CAAgDvL,CAAhD,CAFJ,CAK6BmvD,QAAA,GAAQ,CAARA,CAAQ,CAAC5jD,CAAD,CAAOvL,CAAP,CACrC,CACI,IAAIovD,EAAWF,EAAA,CAAAA,CAAA,CAA6B3jD,CAA7B,CAEO,KAAtB,IAAIA,CAAJ,CAAW,IAAX,GAEyC,CAtHzC,CAsHyC2jD,EAAA,CAAAA,CAAA,CAA6B3jD,CAA7B,CAAoC,CAApC,CAAwC,CAAxC,CAtHzC,CAsHI8jD,CAvHJxmD,GAAA,CAuH+BumD,CAvH/B,CAuHqFpvD,CAvHrF,CACA,CAsHIqvD,CAtHJxmD,GAAA,CAAY2O,CAAZ,CAsHqFxX,CAtHrF,EAA2B,CAA3B,CAoHA,EAMI,CAAA+I,GAAA,CAAaqmD,CAAb,CAAuBpvD,CAAvB,CATR;AAa6BsvD,QAAA,EAAQ,CAARA,CAAQ,CAAC/jD,CAAD,CAAOvL,CAAP,CACrC,CACI,IAAIovD,EAAWF,EAAA,CAAAA,CAAA,CAA6B3jD,CAA7B,CAEM,KAArB,GAAIA,CAAJ,CAAW,IAAX,EAGIgkD,EAAA,CAAAA,CAAA,CAA2BH,CAA3B,CAAqCF,EAAA,CAAAA,CAAA,CAA6B3jD,CAA7B,CAAoC,CAApC,CAAwC,EAAxC,CAArC,CAAoFA,CAApF,CAA2F,CAA3F,CAAgG,CAAhG,CAAmGvL,CAAnG,CAHJ,CAOI,CAAAgJ,GAAA,CAAaomD,CAAb,CAAuBpvD,CAAvB,CAVR,CAc6BwvD,QAAA,GAAQ,CAARA,CAAQ,CAACjkD,CAAD,CAAOgM,CAAP,CAAYC,CAAZ,CACrC,CACI5B,EAAA,CAAAA,CAAA,CAA2BrK,CAA3B,CAAiC,CAAjC,CACA2K,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAwBgM,CAAxB,CACArB,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAyB,CAAzB,CAA6B,CAA7B,CAAgCiM,CAAhC,CAHJ,CAM8Bi4C,QAAA,GAAQ,CAARA,CAAQ,CAAClkD,CAAD,CAAO6hD,CAAP,CAAWC,CAAX,CAAeC,CAAf,CAAmBC,CAAnB,CACtC,CACI33C,EAAA,CAAAA,CAAA,CAA2BrK,CAA3B,CAAiC,EAAjC,CACA2K,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAwB6hD,CAAxB,CACAl3C,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAyB,CAAzB,CAA6B,CAA7B,CAAgC8hD,CAAhC,CACAn3C,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAyB,CAAzB,CAA6B,CAA7B,CAAgC+hD,CAAhC,CACAp3C,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAyB,EAAzB,CAA8B,CAA9B,CAAiCgiD,CAAjC,CALJ,CAU2BmC,QAAA,GAAQ,CAARA,CAAQ,CACnC,CACI,MAAGtB,GAAA,CAAAA,CAAA,CAAH,CAEWuB,EAAA,CAAAA,CAAA,CFh/CQC,CEg/CR,CAFX,CAEyC,CAAA9B,GAAA,EAFzC,CAE6D,CAF7D,CAMW6B,EAAA,CAAAA,CAAA,CFp/CQC,CEo/CR,CANX,CAMyC,CAAA/B,EAAA,EANzC,CAM4D,CAPhE,CAWwBgC,QAAA,GAAQ,CAARA,CAAQ,CAChC,CACI,MAAO,EAAAv6C,MAAP,EAAqB,EAArB,CAA0B,CAD9B,CAI0Bw6C,QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,MAAO,CAAC,EAAE,CAAAx6C,MAAF,CFzkDYy6C,MEykDZ,CADZ,CAI2BC,QAAA,GAAQ,CAARA,CAAQ,CACnC,CACI,MAAQ,EAAA16C,MAAR,CAAqB,KAArB,CAAmC,CAAC,CAAC,CAAA26C,GAAA,EAArC,CAAoD,CAAC,CAAC,CAAAC,GAAA,EAAtD,EAAsE,CAAtE,CAA0E,CAAC,CAACC,EAAA,CAAAA,CAAA,CAA5E,EAA4F,CAA5F,CAC8B,CAAC,CAAC,CAAAC,GAAA,EADhC,EACgD,CADhD,CACoD,CAAC,CAAC,CAAAC,GAAA,EADtD,EACsE,CADtE,CAC0E,CAAC,CAAC,CAAAC,GAAA,EAD5E,EAC4F,EAFhG;AAQ8BC,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACtC,CAAA,IACQC,EAAc,OADtB,CAEQn/C,EAAQ,OAET,EAAAgE,MAAH,CF1lDoBy6C,ME0lDpB,EAKIU,CAGA,EFrmDkBC,KEqmDlB,CAAAp/C,CAAA,EAAS,OARb,EAcO,CAAA6xC,EAdP,GAkBQsN,CAEA,EFjnDcC,KEinDd,CAAG,CAAAvN,EAAH,CAAcwN,EAAA,CAAAA,CAAA,CAAd,GAIIF,CAJJ,EFpnDmBG,GEonDnB,CApBR,CA6BA,EAAAt7C,MAAA,EAAck7C,CAAd,EAA4B,CAAAl7C,MAA5B,CAAyCk7C,CAAzC,EAAsDC,CAAtD,EAAsEn/C,CAAtE,CF7mDY81C,CE+mDZ,EAAA/xC,EAAA,CAAqB,CAnCzB,CAsC8Bw7C,QAAA,GAAQ,CAARA,CAAQ,CACtC,CACI,MAAG,EAAAzN,GAAH,CAEW,CAAAyB,EAAA,CFjlDSiM,CEilDT,CAFX,CAMW,CAAA9L,EAAA,CF5kDQwC,CE4kDR,CAPf,CAW8BuJ,QAAA,GAAQ,CAARA,CAAQ,CAAC/wD,CAAD,CACtC,CACO,CAAAojD,GAAH,CAEI,CAAAyB,EAAA,CF7lDgBiM,CE6lDhB,CAFJ,CAE2B9wD,CAF3B,CAMI,CAAAglD,EAAA,CFxlDewC,CEwlDf,CANJ,CAMyBxnD,CAP7B,CAWiCgxD,QAAA,GAAQ,CAARA,CAAQ,CAAChxD,CAAD,CACzC,CACO,CAAAojD,GAAH,CAEI,CAAAyB,EAAA,CFzmDgBiM,CEymDhB,CAFJ,EAE4B9wD,CAF5B,CAMI,CAAAglD,EAAA,CFpmDewC,CEomDf,CANJ,EAM0BxnD,CAP9B,CAWkCixD,QAAA,EAAQ,CAARA,CAAQ,CAACzC,CAAD,CAC1C,CACI,MAAG,EAAApL,GAAH,CAEWmG,CAAA,CAAAA,CAAA,CF3lDQhC,CE2lDR,CAFX,CAEkC,CAAA1C,EAAA,CFrnDdiM,CEqnDc,CAFlC,CAEyDtC,CAFzD,CAE+D,CAF/D,CAMWjF,CAAA,CAAAA,CAAA,CF/lDQhC,CE+lDR,CANX,EAMmC,CAAAvC,EAAA,CFhnDhBwC,CEgnDgB,CANnC,CAMwDgH,CANxD,CAM8D,KAN9D,EAMwE,CAP5E,CAe6B0C,QAAA,GAAQ,CAARA,CAAQ,CACrC,CACI,MAAO,EAAAxM,EAAP,CAAkC6E,CAAA,CAAAA,CAAA,CF1mDfC,CE0mDe,CAAlC,CAAyD,CAD7D;AAIsC2H,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAeC,CAAf,CAAgCC,CAAhC,CAC9C,CAaI,CAAAvkD,GAAA,CAAc,CAAA,CAEd,IAAG,CAAA41C,GAAH,CACA,CACI,GAAG4O,EAAA,CAAAA,CAAA,CAAH,EAAwB,CAAA9jB,EAAA,CAAQ,CAAR,CAAxB,CFnkDM+jB,CEmkDN,CAEI,KAAM,EAAAtF,MAAAC,EAAA,CAAkB,KAAlB,CAAN,CAGDoF,EAAA,CAAAA,CAAA,CAAH,EAAuBF,CAAvB,EAA2D,CAA3D,CAA0CV,EAAA,CAAAA,CAAA,CAA1C,EAIIc,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGJ,KAAIL,CAAJ,EAAoB,CAApB,CAAwB,CAAxB,EAA6B,CAAArO,GAA7B,CAII,KAAM,EAAAmJ,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,IAAI5gD,EAAO,CAAAu3C,GAAPv3C,EAA2B6lD,CAA3B7lD,EAA2C,CAA3CA,EAAgD,CAGjD,EAAAi5C,EAAH,GAEIj5C,CAFJ,CAEWmmD,EAAA,CAAAA,CAAA,CAAmCnmD,CAAnC,CAFX,CAKA,KAAI8/B,EAAO,CAAA5iC,GAAA,CAAY8C,CAAZ,CAAP8/B,CAA2B,CAAA5iC,GAAA,CAAY8C,CAAZ,CAAmB,CAAnB,CAAuB,CAAvB,CAA3B8/B,EAAwD,EAA5D,CACIsmB,EAAW,CAAAlpD,GAAA,CAAY8C,CAAZ,CAAmB,CAAnB,CAAuB,CAAvB,CADf,CAEIqmD,EAAS,CAAArpD,GAAA,CAAWgD,CAAX,CAAkB,CAAlB,CAAsB,CAAtB,CAFb,CAGIsmD,EAAMD,CAANC,EAAgB,CAAhBA,CAAoB,CACpBrkE,EAAAA,CAAOokE,CAAPpkE,CAAgB,EAEpB,IAAuB,CAAvB,IAAIokE,CAAJ,CAAa,GAAb,EAGI,KAAM,EAAA1F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGDkF,CAAH,EAAsBQ,CAAtB,CAA4B,CAAA1O,EAA5B,EAIIsO,CAAA,CAAAA,CAAA,CAAgBL,CAAhB,EAAgC,CAAhC,CAAoC,CAApC,CAGJ,IAAY,CAAZ,GAAG5jE,CAAH,CACA,CA2iCAskE,CAAAA,CAAaC,EAAA,CAtiCTC,CAsiCS,CAtiCWL,CAsiCX,CAGbM,EAAAA,CAA+B,CAA/BA,EAAYH,CAAAtkE,KACZ0kE,EAAAA,CAAwC,CAAxCA,IAAeJ,CAAAtkE,KAAf0kE,CAAiC,CAAjCA,CAEJ,IAAG,CAACJ,CAAAK,GAAJ,EAA2BL,CAAAM,GAA3B,EAAiD,CAACN,CAAAO,GAAlD,CAEI,KA9iCIL,EA8iCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAgC,EAAhC,IAAI2F,CAAAF,GAAJ,CAAwB,EAAxB,EAGI,KApjCII,EAojCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAG,CAAC2F,CAAAQ,GAAJ,CAEI,KAzjCIN,EAyjCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN;AAGJ,GAAgC,GAAhC,CAAG2F,CAAAS,GAAH,CAEI,KA9jCIP,EA8jCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAIAqG,CAAAA,CAlkCIR,CAkkCSzP,GAAA,CF9uFEkQ,CE8uFF,CAEbC,EAAAA,CAAaC,EAAA,CApkCTX,CAokCS,CAEdE,EAAH,GAEIQ,CAFJ,EAEkB,MAFlB,CAKA98C,GAAA,CA3kCQo8C,CA2kCR,CAA2BQ,CAA3B,CAAuC,GAAvC,CAKAt8C,EAAA,CAhlCQ87C,CAglCR,CAAkBQ,CAAlB,CFnnFwBI,EEmnFxB,CAAwCC,EAAA,CAhlChCb,CAglCgC,CAAxC,CACA97C,EAAA,CAjlCQ87C,CAilCR,CAAkBQ,CAAlB,CFnnF2BM,EEmnF3B,CAA2CJ,CAA3C,CAEAx8C,EAAA,CAnlCQ87C,CAmlCR,CAAkBQ,CAAlB,CFnnFwBO,EEmnFxB,CAnlCQf,CAmlCgCnN,EAAA,CFnyFpBgE,CEmyFoB,CAAxC,CACA3yC,EAAA,CAplCQ87C,CAolCR,CAAkBQ,CAAlB,CFnnFwBQ,EEmnFxB,CAplCQhB,CAolCgCnN,EAAA,CFnyFpBoO,CEmyFoB,CAAxC,CACA/8C,EAAA,CArlCQ87C,CAqlCR,CAAkBQ,CAAlB,CFnnFwBU,EEmnFxB,CArlCQlB,CAqlCgCnN,EAAA,CFnyFpBsO,CEmyFoB,CAAxC,CACAj9C,EAAA,CAtlCQ87C,CAslCR,CAAkBQ,CAAlB,CFnnFwBY,EEmnFxB,CAtlCQpB,CAslCgCnN,EAAA,CFnyFpBiE,CEmyFoB,CAAxC,CAEA5yC,EAAA,CAxlCQ87C,CAwlCR,CAAkBQ,CAAlB,CFpnFwBa,EEonFxB,CAxlCQrB,CAwlCgCnN,EAAA,CFpyFpBiM,CEoyFoB,CAAxC,CACA56C,EAAA,CAzlCQ87C,CAylCR,CAAkBQ,CAAlB,CFpnFwBc,EEonFxB,CAzlCQtB,CAylCgCnN,EAAA,CFpyFpB0O,CEoyFoB,CAAxC,CACAr9C,EAAA,CA1lCQ87C,CA0lCR,CAAkBQ,CAAlB,CFpnFwBgB,EEonFxB,CA1lCQxB,CA0lCgCnN,EAAA,CFpyFpB4O,CEoyFoB,CAAxC,CACAv9C,EAAA,CA3lCQ87C,CA2lCR,CAAkBQ,CAAlB,CFpnFwBkB,EEonFxB,CA3lCQ1B,CA2lCgCnN,EAAA,CFpyFpB8O,CEoyFoB,CAAxC,CAEAz9C,EAAA,CA7lCQ87C,CA6lCR,CAAkBQ,CAAlB,CFpnFuBoB,EEonFvB,CA7lCQ5B,CA6lC+BxM,EAAA,CFjxFpBqO,CEixFoB,CAAvC,CACA39C,EAAA,CA9lCQ87C,CA8lCR,CAAkBQ,CAAlB,CFpnFuBsB,EEonFvB,CA9lCQ9B,CA8lC+BxM,EAAA,CFjxFpBgE,CEixFoB,CAAvC,CACAtzC,EAAA,CA/lCQ87C,CA+lCR,CAAkBQ,CAAlB,CFpnFuBuB,EEonFvB,CA/lCQ/B,CA+lC+BxM,EAAA,CFjxFpB+B,CEixFoB,CAAvC,CACArxC,EAAA,CAhmCQ87C,CAgmCR,CAAkBQ,CAAlB,CFpnFuBwB,EEonFvB,CAhmCQhC,CAgmC+BxM,EAAA,CFjxFpBoK,CEixFoB,CAAvC,CACA15C,EAAA,CAjmCQ87C,CAimCR,CAAkBQ,CAAlB,CFpnFuByB,EEonFvB,CAjmCQjC,CAimC+BxM,EAAA,CFjxFpB0O,CEixFoB,CAAvC,CACAh+C,EAAA,CAlmCQ87C,CAkmCR,CAAkBQ,CAAlB,CFpnFuB2B,EEonFvB,CAlmCQnC,CAkmC+BxM,EAAA,CFjxFpB4O,CEixFoB,CAAvC,CAlmCQpC,EAymCJnpD,GAAA,CAAYipD,CAAAuC,GAAZ,CAAsC,CAAtC,CAA0C,CAA1C,CAzmCIrC,CAymCyCzpD,GAAA,CAAWupD,CAAAuC,GAAX,CAAqC,CAArC,CAAyC,CAAzC,CAA7C,CAA2F,CAA3F,CAIAC,EAAAA,CAAiBxC,CAAAzmB,GAMjBx1B,GAAA,CAnnCIm8C,CAmnCJ,CAAkBsC,CAAlB,CFxpFyBC,CEwpFzB,CAnnCIvC,CAmnC6CxM,EAAA,CF/xFlCiN,CE+xFkC,CAAjD,CAGA+B,EAAAA,CAAU/9C,CAAA,CAtnCNu7C,CAsnCM,CAAkBsC,CAAlB,CF1pFUG,EE0pFV,CAtnCNzC,EAwnCR18C,MAAA,EAAc,OAEVo/C,EAAAA,CAAUj+C,CAAA,CA1nCNu7C,CA0nCM,CAAkBsC,CAAlB,CF7pFU1B,EE6pFV,CACd,KAAI+B,EAASt+C,CAAA,CA3nCL27C,CA2nCK,CAAiBsC,CAAjB,CFjpFUR,EEipFV,CAAb,CACIpoB,EAAOqmB,EAAA,CA5nCHC,CA4nCG,CAA6B2C,CAA7B,CAEX,IAAGjpB,CAAA0mB,GAAH,CAGI,KAjoCIJ,EAioCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN;AAGJ,GAAG,CAACzgB,CAAAymB,GAAJ,CAGI,KAvoCIH,EAuoCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAGzgB,CAAAkpB,GAAH,CAEI,KA5oCI5C,EA4oCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAG,CAACzgB,CAAAmpB,GAAJ,CAEI,KAjpCI7C,EAipCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAGzgB,CAAAopB,GAAH,EAAkBppB,CAAAmmB,GAAlB,CAA6BnmB,CAAAqpB,GAA7B,CAGI,KAvpCI/C,EAupCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAG,CAACzgB,CAAAopB,GAAJ,EAAmBppB,CAAAmmB,GAAnB,GAAgCnmB,CAAAqpB,GAAhC,CAGI,KA7pCI/C,EA6pCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAG,CAACzgB,CAAA4mB,GAAJ,CAGI,KAnqCIN,EAmqCE9F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAnqCI6F,CAsqCR3P,GAAA,CFz1FmBmH,CEy1FnB,CAAA,CAA+B,CAtqCvBwI,EAuqCR1P,GAAA,CF11FmBkH,CE01FnB,CAAA,CAA8B9d,CAAA6mB,GAvqCtBP,EAwqCRzP,GAAA,CF31FmBiH,CE21FnB,CAAA,CAA+B9d,CAAAL,GAxqCvB2mB,EAyqCRxM,EAAA,CF51FmBgE,CE41FnB,CAAA,CAAoBmL,CAzqCZ3C,EA2qCR7O,EAAA,CAAWzX,CAAAmmB,GACXmD,GAAA,CA5qCQhD,CA4qCR,CAKAhJ,GAAA,CAjrCQgJ,CAirCR,CAAoBtmB,CAAAv9C,KAApB,CAEI8mE,EAAAA,CAAax+C,CAAA,CAnrCTu7C,CAmrCS,CAAkBsC,CAAlB,CFrtFUxB,EEqtFV,CAIb58C,EAAA,CAvrCI87C,CAurCJ,CAAkBQ,CAAlB,CF5tFyB+B,CE4tFzB,CAvrCwB5C,CAurCxB,CACAsD,EAAA,EFr7FgBC,KEw7FpB,IAAGD,CAAH,CFt7FoBlF,MEs7FpB,CAEI,KA7rCIiC,EA6rCE9F,MAAAC,EAAA,CAAkB,wBAAlB,CAAN,CAGJgJ,EAAA,CAhsCQnD,CAgsCR,CAAmBiD,CAAnB,CAhsCQjD,EAosCJ18C,MAAA,EFj8FgB4/C,KEo8FhBE,EAAAA,CAAU/+C,CAAA,CAvsCN27C,CAusCM,CAAiBsC,CAAjB,CFxtFUe,EEwtFV,CACdC,GAAA,CAxsCQtD,CAwsCR,CAAcoD,CAAd,CAxsCQpD,EA0sCRnN,EAAA,CF15FoBgE,CE05FpB,CAAA,CAAuBpyC,CAAA,CA1sCfu7C,CA0sCe,CAAkBsC,CAAlB,CF1uFCvB,EE0uFD,CA1sCff,EA2sCRnN,EAAA,CF15FoBoO,CE05FpB,CAAA,CAAuBx8C,CAAA,CA3sCfu7C,CA2sCe,CAAkBsC,CAAlB,CF1uFCtB,EE0uFD,CA3sCfhB,EA4sCRnN,EAAA,CF15FoBsO,CE05FpB,CAAA;AAAuB18C,CAAA,CA5sCfu7C,CA4sCe,CAAkBsC,CAAlB,CF1uFCpB,EE0uFD,CA5sCflB,EA6sCRnN,EAAA,CF15FoBiE,CE05FpB,CAAA,CAAuBryC,CAAA,CA7sCfu7C,CA6sCe,CAAkBsC,CAAlB,CF1uFClB,EE0uFD,CA7sCfpB,EA+sCRnN,EAAA,CF35FoBiM,CE25FpB,CAAA,CAAuBr6C,CAAA,CA/sCfu7C,CA+sCe,CAAkBsC,CAAlB,CF3uFCjB,EE2uFD,CA/sCfrB,EAgtCRnN,EAAA,CF35FoB0O,CE25FpB,CAAA,CAAuB98C,CAAA,CAhtCfu7C,CAgtCe,CAAkBsC,CAAlB,CF3uFChB,EE2uFD,CAhtCftB,EAitCRnN,EAAA,CF35FoB4O,CE25FpB,CAAA,CAAuBh9C,CAAA,CAjtCfu7C,CAitCe,CAAkBsC,CAAlB,CF3uFCd,EE2uFD,CAjtCfxB,EAktCRnN,EAAA,CF35FoB8O,CE25FpB,CAAA,CAAuBl9C,CAAA,CAltCfu7C,CAktCe,CAAkBsC,CAAlB,CF3uFCZ,EE2uFD,CAEvBpM,GAAA,CAptCQ0K,CAotCR,CFx4FmB6B,CEw4FnB,CAAwBx9C,CAAA,CAptChB27C,CAotCgB,CAAiBsC,CAAjB,CF3uFDV,EE2uFC,CAAxB,CACAtM,GAAA,CArtCQ0K,CAqtCR,CFv4FmBzK,CEu4FnB,CAAwBlxC,CAAA,CArtChB27C,CAqtCgB,CAAiBsC,CAAjB,CF1uFDP,EE0uFC,CAAxB,CACAzM,GAAA,CAttCQ0K,CAstCR,CFv4FmBpC,CEu4FnB,CAAwBv5C,CAAA,CAttChB27C,CAstCgB,CAAiBsC,CAAjB,CF1uFDN,EE0uFC,CAAxB,CACA1M,GAAA,CAvtCQ0K,CAutCR,CFv4FmBkC,CEu4FnB,CAAwB79C,CAAA,CAvtChB27C,CAutCgB,CAAiBsC,CAAjB,CF1uFDL,EE0uFC,CAAxB,CACA3M,GAAA,CAxtCQ0K,CAwtCR,CFv4FmBoC,CEu4FnB,CAAwB/9C,CAAA,CAxtChB27C,CAwtCgB,CAAiBsC,CAAjB,CF1uFDH,EE0uFC,CAAxB,CAxtCQnC,EA0tCRtN,EAAA,CAA2B6E,CAAA,CA1tCnByI,CA0tCmB,CF74FRxI,CE64FQ,CAA3B,CAAkDkL,CAAlD,CAA4D,CA1tCpD1C,EA4tCRzP,GAAA,CFx4FmBkQ,CEw4FnB,CAAA,CAA+BX,CAAAzmB,GA5tCvB2mB,EA6tCR1P,GAAA,CFz4FmBmQ,CEy4FnB,CAAA,CAA8BX,CAAAS,GA7tCtBP,EA8tCRxM,EAAA,CF14FmBiN,CE04FnB,CAAA,CA9tC4Bd,CAApBK,EAguCRvkB,EAAA,CAAQ,CAAR,CAAA,CAAa+mB,CAEbe,GAAA,CAluCQvD,CAkuCR,CAluCQA,EAouCRvkB,EAAA,CAAQ,CAAR,CAAA,EFz2FS+nB,CE22FS,EAAA,CAAlB,GAtuCsClE,CAsuCtC,GAEOW,CAAH,CAEIwD,CAAA,CA1uCAzD,CA0uCA,CA1uC8BV,CA0uC9B,CAAyB,KAAzB,CAFJ,CAMIoE,CAAA,CA9uCA1D,CA8uCA,CA9uC8BV,CA8uC9B,CARR,CA3uCI,CADA,IAAA,CAWA,GAAwB,CAAxB,IAAI9jE,CAAJ,CAAgB,GAAhB,EAMI,KAAM,EAAA0+D,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGAwJ,CAAAA,CAAyB,CAAzBA,IAAWnoE,CAAXmoE,CAAkB,CAAlBA,CACAC,EAAAA,CAAuB,CAAvBA,IAASpoE,CAATooE,CAAgB,CAAhBA,CAEAlqB,EAAAA,CAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CAKX,IAAGjmB,CAAA0mB,GAAH,CAGI,KAAM,EAAAlG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAG,CAACzgB,CAAAmpB,GAAJ,EAA0BnpB,CAAAmmB,GAA1B,CAAqC,CAAA1O,EAArC,CAGI,KAAM,EAAA+I,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEAzgB,CAAA4mB,GAAJ,EAIIuD,EAAA,CAAAA,CAAA,CAAgBzE,CAAhB,EAAgC,CAAhC,CAAoC,CAApC,CAGA0E,EAAAA,CAAYnD,EAAA,CAAAA,CAAA,CAIhB,IAAG,CAACjnB,CAAAopB,GAAJ;AAAmBppB,CAAAmmB,GAAnB,CAA8B,CAAA1O,EAA9B,CACA,CAMQ4S,CAAAA,CAAiBC,EAAA,CAAAA,CAAA,CAAwBtqB,CAAAmmB,GAAxB,CAElB,EAAA5O,GAAH,EAEQgT,CACAC,CADUv2C,EAAA,CAAAA,CAAA,CAAao2C,CAAb,CACVG,CAAAA,CAAAA,CAAS,CAAAztD,GAAA,CAAYstD,CAAZ,CAA6B,CAA7B,CAAiC,CAAjC,CAHjB,GAOQE,CACJ,CADc,CAAAxtD,GAAA,CAAYstD,CAAZ,CACd,CAAIG,CAAJ,CAAa,CAAAztD,GAAA,CAAYstD,CAAZ,CAA6B,CAA7B,CAAiC,CAAjC,CARjB,CAUII,EAAAA,CAAUpE,EAAA,CAAAA,CAAA,CAA6BmE,CAA7B,CASd,IAAGC,CAAA/D,GAAH,CAEI,KAAM,EAAAlG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAGgK,CAAApB,GAAH,GAAmBrpB,CAAAmmB,GAAnB,CAEI,KAAM,EAAA3F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAGgK,CAAAtE,GAAH,GAAmBnmB,CAAAmmB,GAAnB,EAA+B,CAACsE,CAAAC,GAAhC,CAEI,KAAM,EAAAlK,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAG,CAACgK,CAAA7D,GAAJ,CAEI,KAAM,EAAApG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,IAAIkK,EAAU,CAAAxR,EAAA,CFpyDFiM,CEoyDE,CAAd,CACIwF,EAAS,CAAA9Q,EAAA,CF3wDF+B,CE2wDE,CADb,CAUIgP,GAAeX,CAAA,CAAQ,CAAR,CAAY,CAA3BW,GAAiC,CAAjCA,EAAqD,CAAA,CAArDA,GAAsCjF,CAAtCiF,EAA8D,CAA9DA,EF71DQxG,ME61DRwG,IAAoET,CAApES,CF71DQxG,ME61DRwG,GAIJC,GAAA,CAAAA,CAAA,CAHwBL,CAAA9qB,GAGxB,EAHwC8qB,CAAAhoE,KAAA,CAAe8nE,CAAf,CAAyBM,CAAzB,CAAwCN,CAAxC,CAAkDM,CAAlD,CAAgE,KAGxG,EACAC,GAAA,CAAAA,CAAA,CAAoCL,CAAA9qB,GAApC,CAAmD4qB,CAAnD,CAA6D,CAA7D,CAIA,EAAA9S,EAAA,CAAWzX,CAAAmmB,GACXmD,GAAA,CAAAA,CAAA,CAEAhM,GAAA,CAAAA,CAAA,CAAoBtd,CAAAv9C,KAApB,CAEA,EAAAmnB,MAAA,EAAc,OAEdgyC,GAAA,CAAAA,CAAA,CFpyDWC,CEoyDX,CAAwB2O,CAAxB,CACAO,GAAA,CAAAA,CAAA,CAAmBR,CAAnB,CAEGH,EAAH,CFh3DY/F,MEg3DZ,EAEO6F,CAAAA,CAFP,GAQQF,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CF5yDT4O,CE4yDS,CAAZ,CAGA,CAFAsB,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CF9yDT0O,CE8yDS,CAAZ,CAEA,CADAwB,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CFhzDToK,CEgzDS,CAAZ,CACA,CAAA8F,CAAA,CAAAA,CAAA;AAAY,CAAAlQ,EAAA,CFpzDTqO,CEozDS,CAAZ,CAXR,CAeG+B,EAAH,EAEIH,CAAA,CAAAA,CAAA,CAAYa,CAAZ,CACA,CAAAb,CAAA,CAAAA,CAAA,CAAYY,CAAZ,CAHJ,GAOIX,CAAA,CAAAA,CAAA,CAAYY,CAAZ,CACA,CAAAZ,CAAA,CAAAA,CAAA,CAAYW,CAAZ,CARJ,CAxFJ,CADA,IAoGK,IAAG3qB,CAAAopB,GAAH,EAAkBppB,CAAAmmB,GAAlB,GAA+B,CAAA1O,EAA/B,CASE,CAAA7tC,MASH,CF55DYy6C,ME45DZ,EANI0B,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAMJ,CAHI4E,CAGJ,EAHmBX,CAAA,CAAQ,CAAR,CAAY,CAG/B,GAHqC,CAGrC,EAHyD,CAAA,CAGzD,GAH0CtE,CAG1C,GAAA17C,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAuB,CAACH,CAAxB,CAA3B,CAAiEA,CAAjE,CAlBC,KAwBD,MAAM,EAAArK,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGDyJ,CAAH,EAEIH,CAAA,CAAAA,CAAA,CAAYK,CAAZ,CASA,CARAL,CAAA,CAAAA,CAAA,CAAY,CAAAjQ,EAAA,CFh2DDgE,CEg2DC,CAAZ,CAQA,CAPAiM,CAAA,CAAAA,CAAA,CAAY5C,EAAA,CAAAA,CAAA,CAAZ,CAOA,CALkB,CAAA,CAKlB,GALGvB,CAKH,EAHImE,CAAA,CAAAA,CAAA,CAAYnE,CAAZ,CAGJ,CAAAjmB,CAAA,EAAQ,KAXZ,GAeIqqB,CAAA,CAAAA,CAAA,CAAYI,CAAZ,CAIA,CAHAJ,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CF72DDgE,CE62DC,CAAZ,CAGA,CAFAkM,CAAA,CAAAA,CAAA,CAAY7C,EAAA,CAAAA,CAAA,CAAZ,CAEA,CAAkB,CAAA,CAAlB,GAAGvB,CAAH,EAEIoE,CAAA,CAAAA,CAAA,CAAYpE,CAAZ,CArBR,CAyBGwE,EAAH,CF97DgB/F,ME87DhB,GAEIzI,EAAA,CAAAA,CAAA,CFp3DW8M,CEo3DX,CAAwB,CAAxB,CAGA,CAFA9M,EAAA,CAAAA,CAAA,CFt3DW4M,CEs3DX,CAAwB,CAAxB,CAEA,CADA5M,EAAA,CAAAA,CAAA,CFx3DWsI,CEw3DX,CAAwB,CAAxB,CACA,CAAAtI,EAAA,CAAAA,CAAA,CF53DWuM,CE43DX,CAAwB,CAAxB,CALJ,CAQA,EAAArO,EAAA,CF93DegE,CE83Df,CAAA,CAAoBmI,CAApB,CAA+B,EAA/B,CAAoC,CAAAxO,EAGpC6F,GAAA,CAAAA,CAAA,CAAoBtd,CAAAv9C,KAApB,CAEA,EAAAm0D,GAAA,CFn4DekH,CEm4Df,CAAA,CAA8B9d,CAAA6mB,GAC9B,EAAAhQ,GAAA,CFp4DeiH,CEo4Df,CAAA,CAA+B9d,CAAAL,GAE/B,EAAAqZ,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CFt4DZC,CEs4DY,CAA3B,CAAkDne,CAAlD,CAAyD,CAEzD,EAAA/1B,MAAA,EAAc,OAEVqgD,EAAJ,CAOQ,CAAArgD,MAPR,CFx9DuBs7C,GEw9DvB,EAOwC,EAAEkF,CAAF,CF/9DjBlF,GE+9DiB,CAPxC,GASY,CAAA5N,EAAA,CAAgB,CAAhB,CATZ,EAWY31C,EAAA,CAAAA,CAAA,CAXZ,EAGI,CAAAiI,MAHJ,EAGkB,IAhOlB,CA/CJ,CADA,IAiSQhnB,EAYJ,CAZY8iE,CAYZ,EAZ4B,CAY5B,CAXIuF,CAWJ,CAXa,CAAAluD,GAAA,CAAYna,CAAZ,CAWb,CAVIqmE,CAUJ,CAVa,CAAAlsD,GAAA,CAAYna,CAAZ,CAAoB,CAApB;AAAwB,CAAxB,CAUb,CAPAmnE,CAAA,CAAAA,CAAA,CAAY9C,EAAA,CAAAA,CAAA,CAAZ,CAOA,CANA8C,CAAA,CAAAA,CAAA,CAAY,CAAAjQ,EAAA,CFp6DGgE,CEo6DH,CAAZ,CAMA,CALAiM,CAAA,CAAAA,CAAA,CAAY5C,EAAA,CAAAA,CAAA,CAAZ,CAKA,CAHA,CAAAv9C,MAGA,EAHc,IAGd,CADA+xC,EAAA,CAAAA,CAAA,CAAyBsN,CAAzB,CACA,CAAA,CAAAjQ,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CF16DZC,CE06DY,CAA3B,CAAkDmN,CAAlD,CAA2D,CA5TnE;AA6UqBC,QAAA,GAAQ,CAARA,CAAQ,CAAChB,CAAD,CAC7B,CAKOrE,EAAA,CAAAA,CAAA,CAAH,EAAwC,CAAxC,CAAuBZ,EAAA,CAAAA,CAAA,CAAvB,EAIIc,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGJ,IAAGmE,CAAH,CAEI,IAAIlB,EAAUr+C,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAjB,CAAd,CACI/B,EAASt+C,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAjB,CADb,CAEIlG,EAAYn6C,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAjB,CAJpB,KAQQhC,EAEJ,CAFcj+C,CAAA,CAAAA,CAAA,CAAkBigD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAlB,CAEd,CADI/B,CACJ,CADat+C,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAjB,CACb,CAAIlG,CAAJ,CAAgB/5C,CAAA,CAAAA,CAAA,CAAkBigD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAlB,CAGpB,IAAG,CAAC,CAAA/T,GAAJ,EAA4B4O,EAAA,CAAAA,CAAA,CAA5B,EAAmE,CAAnE,GAAgDZ,EAAA,CAAAA,CAAA,CAAhD,CACA,CACI,GAAG+D,CAAH,CAAa,UAAb,CAEI,KAAM,EAAAxI,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ9E,EAAA,CAAAA,CAAA,CAAyBsN,CAAzB,CACA,EAAAjQ,EAAA,CAA2BgQ,CAA3B,CAAqCnL,CAAA,CAAAA,CAAA,CF79DtBC,CE69DsB,CAArC,CAA4D,CAEzDoM,EAAH,EAEIT,EAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CAA+B,CAAAl7C,MAA/B,CAA4C,MAA5C,CACA,CAAAuhD,EAAA,CAAAA,CAAA,CAAsB,CAAtB,CAHJ,GAOI1B,EAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CACA,CAAAqG,EAAA,CAAAA,CAAA,CAAsB,EAAtB,CARJ,CATJ,CADA,IAAA,CA8BG,CAAAvhD,MAAH,CF7jEoB4/C,KE6jEpB,EAGIzD,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGJ,IAAGjB,CAAH,CFjkEoBT,MEikEpB,CACA,CACI,GAAgB,CAAhB,GAAG,CAAA5M,EAAH,CACA,CAaI,IAAI2T,EAAWrgD,CAAA,CAAAA,CAAA,CAAkBigD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAlB,CAAf,CACIK,EAAU1gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAjB,CAEVM,EAAAA,CAAS3gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAjB,CACb,KAAIO,EAAS5gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAjB,CAAb,CACIQ,EAAS7gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAjB,CADb,CAEIS,EAAS9gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAjB,CAIbvB,GAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CACA,EAAAl7C,MAAA,EF5lEYy6C,ME8lEZ1I,GAAA,CAAAA,CAAA,CAAyBsN,CAAzB,CACA,EAAAjQ,EAAA,EAA4BgQ,CAA5B,CAAsC,KAAtC,EAAgDnL,CAAA,CAAAA,CAAA,CFvhErCC,CEuhEqC,CAAhD,CAAuE,CAEvElC,GAAA,CAAAA,CAAA,CF1hEWuM,CE0hEX;AAAwBmD,CAAxB,CACA1P,GAAA,CAAAA,CAAA,CFxhEWsI,CEwhEX,CAAwBqH,CAAxB,CACA3P,GAAA,CAAAA,CAAA,CFxhEW4M,CEwhEX,CAAwBgD,CAAxB,CACA5P,GAAA,CAAAA,CAAA,CFxhEW8M,CEwhEX,CAAwB+C,CAAxB,CAEAN,GAAA,CAAAA,CAAA,CAAsB,EAAtB,CAEA,EAAAhS,EAAA,CFzjEYiM,CEyjEZ,CAAA,CAAuBgG,CACvBxP,GAAA,CAAAA,CAAA,CFhiEWC,CEgiEX,CAAwBwP,CAAxB,CAEA,EAAA5T,EAAA,CAAW,CACX6R,GAAA,CAAAA,CAAA,CAEAhM,GAAA,CAAAA,CAAA,CAAoB,CAAA,CAApB,CAMA,OAhDJ,CAqDIwH,CAAA,EAAa,OAvDrB,CA6DI9kB,CAAAA,CAAOqmB,EAAA,CAAAA,CAAA,CAA6B4C,CAA7B,CAKX,IAAGjpB,CAAA0mB,GAAH,CAEI,KAAM,EAAAlG,MAAAC,EAAA,CAAkB,SAAlB,CAAN,CAEJ,GAAG,CAACzgB,CAAA4mB,GAAJ,CAEI,KAAM,EAAApG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAG,CAACzgB,CAAAmpB,GAAJ,CAEI,KAAM,EAAA3I,MAAAC,EAAA,CAAkB,UAAlB,CAAN,CAEJ,GAAGzgB,CAAAqpB,GAAH,CAAc,CAAA5R,EAAd,CAEI,KAAM,EAAA+I,MAAAC,EAAA,CAAkB,WAAlB,CAAN,CAEJ,GAAGzgB,CAAAopB,GAAH,EAAkBppB,CAAAmmB,GAAlB,CAA6BnmB,CAAAqpB,GAA7B,CAEI,KAAM,EAAA7I,MAAAC,EAAA,CAAkB,0BAAlB,CAAN,CAGAzgB,CAAAopB,GAAJ,EAAmBppB,CAAAqpB,GAAnB,GAAgCrpB,CAAAmmB,GAAhC,EAGIJ,CAAA,CAAAA,CAAA,CAAgBkD,CAAhB,CAAyB,EAAzB,CAGJ,IAAGjpB,CAAAqpB,GAAH,CAAc,CAAA5R,EAAd,CACA,CAEOyS,CAAH,EAEQkB,CACJ,CADezgD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAjB,CACf,CAAIK,CAAJ,CAAc1gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAAjB,CAHlB,GAOQI,CACJ,CADergD,CAAA,CAAAA,CAAA,CAAkBigD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAlB,CACf,CAAIK,CAAJ,CAAc1gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuB,EAAvB,CAAjB,CARlB,CAWIP,EAAAA,CAAUpE,EAAA,CAAAA,CAAA,CAA6BgF,CAA7B,CACVK,EAAAA,CAAU1rB,CAAAqpB,GAEXoB,EAAA/D,GAAH,EAIIX,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGA0E,EAAAhE,GAAJ,EACGyC,CAAAuB,CAAAvB,GADH,EAEGuB,CAAApB,GAFH,GAEmBqC,CAFnB,EAGIjB,CAAAkB,GAHJ,EAIGlB,CAAAtE,GAJH,GAImBuF,CAJnB;AAQI3F,CAAA,CAAAA,CAAA,CAAgBsF,CAAhB,CAA0B,EAA1B,CAGJ,IAAG,CAACZ,CAAA7D,GAAJ,CA22BJ,KAv2BQgF,EAg5BR5S,EFn/FsBrhB,CEmmEdi0B,CAg5BmB7S,GFn/FLphB,CEy8FtBk0B,EAAA,CAt2BQD,CAs2BR,CA2C+BlG,EA3C/B,CAAyC,CAAA,CAAzC,CAt2BwB2F,CAs2BxB,CAt2BkC,EAs2BlC,CFz8FsB1zB,CAAAA,SE08FtB,CAl2BOuyB,CAAH,CAEIT,EAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CAA+B,CAAAl7C,MAA/B,CAA4C,MAA5C,CAFJ,CAMI6/C,EAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CAGJ,EAAArN,EAAA,CAAWzX,CAAAqpB,GACXC,GAAA,CAAAA,CAAA,CAIA1N,GAAA,CAAAA,CAAA,CFhpEeC,CEgpEf,CAAwBwP,CAAxB,CAEAN,GAAA,CAAAA,CAAA,CAAmBK,CAAnB,CAEgB,EAAhB,GAAG,CAAA3T,EAAH,GAEI,CAAA7tC,MAFJ,CAEiB,CAAAA,MAFjB,CAE0C,QAF1C,CAEuDk7C,CAFvD,CAEoE,OAFpE,CA7DJ,CADA,IA0EQ9kB,EAAAqpB,GAAH,GAAgB,CAAA5R,EAAhB,GAIEyS,CAAH,EAEIiB,EAAA,CAAAA,CAAA,CAAsB,CAAtB,CACA,CAAA1B,EAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CAA+B,CAAAl7C,MAA/B,CAA4C,MAA5C,CAHJ,GAOIuhD,EAAA,CAAAA,CAAA,CAAsB,EAAtB,CACA,CAAA1B,EAAA,CAAAA,CAAA,CAAmB3E,CAAnB,CARJ,CAYA,CAAgB,CAAhB,GAAG,CAAArN,EAAH,GAEI,CAAA7tC,MAFJ,CAEiB,CAAAA,MAFjB,CAE0C,QAF1C,CAEuDk7C,CAFvD,CAEoE,OAFpE,CAhBC,CA0BL,EAAAhL,EAAA,CF3rEmBgE,CE2rEnB,CAAA,CAAoBmL,CAGpB3L,GAAA,CAAAA,CAAA,CAAoBtd,CAAAv9C,KAApB,CAEA,EAAAm0D,GAAA,CFhsEmBkH,CEgsEnB,CAAA,CAA8B9d,CAAA6mB,GAC9B,EAAAhQ,GAAA,CFjsEmBiH,CEisEnB,CAAA,CAA+B9d,CAAAL,GAE/B,EAAAqZ,EAAA,CAA2BgQ,CAA3B,CAAqCnL,CAAA,CAAAA,CAAA,CFnsElBC,CEmsEkB,CAArC,CAA4D,CA9O5D,CAwBIn8C,EAAA,CAAAA,CAAA,CAjDR,CA8QoCmqD,QAAA,GAAQ,CAARA,CAAQ,CAAC7F,CAAD,CAC5C,CAGI,CAAAnM,EAAA,CF9sEmBgE,CE8sEnB,CAAA,CAAoBmI,CACpB,EAAAtP,GAAA,CF/sEmBmH,CE+sEnB,CAAA,CAA+B,CAC/B,EAAAjH,GAAA,CFhtEmBiH,CEgtEnB,CAAA,CAA+BmI,CAA/B,EAA2C,CAL/C;AAQ2B8F,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAM/F,CAAN,CAAgBgG,CAAhB,CACnC,CAYI,GAAG,CAAC,CAAAhV,GAAJ,EAA2B4O,EAAA,CAAAA,CAAA,CAA3B,CAEIlK,EAAA,CAAAA,CAAA,CAAyBsK,CAAzB,CAEA,CADA,CAAAjN,EACA,CAD2B6E,CAAA,CAAAA,CAAA,CFnuEZC,CEmuEY,CAC3B,CADkDkO,CAClD,CADwD,CACxD,CAAAb,EAAA,CAAAA,CAAA,CAAsB,CAAtB,EAA2BlhD,EAAA,CAAAA,CAAA,CAAA,CAAqB,CAArB,CAAyB,CAApD,EAAyDgiD,CAAzD,CAJJ,KAAA,CAQA,IAAIjsB,EAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CAERjmB,EAAA0mB,GAAH,EAGIX,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGA/lB,EAAAymB,GAAJ,EAGIV,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGDjmB,EAAAkpB,GAAH,EAGInD,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGAjmB,EAAAmpB,GAAJ,EAGIpD,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGDjmB,EAAAqpB,GAAH,CAAc,CAAA5R,EAAd,EAGIsO,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGDjmB,EAAAopB,GAAH,EAAkBppB,CAAAmmB,GAAlB,CAA6BnmB,CAAAqpB,GAA7B,EAGItD,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGAjmB,EAAAopB,GAAJ,EAAmBppB,CAAAmmB,GAAnB,GAAgCnmB,CAAAqpB,GAAhC,EAGItD,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGAjmB,EAAA4mB,GAAJ,EAIIuD,EAAA,CAAAA,CAAA,CAAgBlE,CAAhB,CAA2B,EAA3B,CAGJ,IAAGjmB,CAAAqpB,GAAH,CAAc,CAAA5R,EAAd,CACA,CAGI,GAAGxtC,EAAA,CAAAA,CAAA,CAAH,CAGI,IAAImhD,EAAWrgD,CAAA,CAAAA,CAAA,CAAkBigD,CAAA,CAAAA,CAAA,CAAuBiB,CAAvB,CAAsC,CAAtC,CAAlB,CAAf,CAEIZ,EAAU1gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuBiB,CAAvB,CAAsC,EAAtC,CAAjB,CALlB,KAUQb,EAEJ,CAFezgD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuBiB,CAAvB,CAAsC,CAAtC,CAAjB,CAEf,CAAIZ,CAAJ,CAAc1gD,CAAA,CAAAA,CAAA,CAAiBqgD,CAAA,CAAAA,CAAA,CAAuBiB,CAAvB,CAAsC,CAAtC,CAAjB,CAGlB,EAAAxU,EAAA,CAAWzX,CAAAqpB,GACXC,GAAA,CAAAA,CAAA,CAGA1N,GAAA,CAAAA,CAAA,CFjzEeC,CEizEf,CAAwBwP,CAAxB,CACAN,GAAA,CAAAA,CAAA,CAAmBK,CAAnB,CAA8Ba,CAA9B,CAvBJ,CADA,IAyCOhiD,GAAA,CAAAA,CAAA,CAAH,CAEIkhD,EAAA,CAAAA,CAAA,CAAsB,CAAtB,CAA8Bc,CAA9B,CAFJ,CAMId,EAAA,CAAAA,CAAA,CAAsB,CAAtB,CAA8Bc,CAA9B,CAMR3O,GAAA,CAAAA,CAAA,CAAoBtd,CAAAv9C,KAApB,CAEA,EAAAk0D,GAAA,CFl1EmBmH,CEk1EnB,CAAA,CAA+B,CAC/B,EAAAlH,GAAA,CFn1EmBkH,CEm1EnB,CAAA,CAA8B9d,CAAA6mB,GAG9B,EAAAhQ,GAAA,CFt1EmBiH,CEs1EnB,CAAA,CAA+B9d,CAAAL,GAC/B,EAAAma,EAAA,CFv1EmBgE,CEu1EnB,CAAA,CAAoBmI,CAIpB,EAAAjN,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CF31ERC,CE21EQ,CAA3B,CAAkDkO,CAAlD,CAAwD,CA3HxD,CAZJ;AA6IyBE,QAAA,GAAQ,CAARA,CAAQ,CAACF,CAAD,CAAM/F,CAAN,CAAgBkG,CAAhB,CACjC,CAMI,GAAG,CAAC,CAAAlV,GAAJ,EAA2B4O,EAAA,CAAAA,CAAA,CAA3B,CAEOsG,CAgBH,GAdOliD,EAAA,CAAAA,CAAA,CAAH,EAEIC,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAA3B,CAAuD,CAAvD,CAEA,CADAhB,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CF/2ELgE,CE+2EK,CAAZ,CACA,CAAAkM,CAAA,CAAAA,CAAA,CAAY7C,EAAA,CAAAA,CAAA,CAAZ,CAJJ,GAQIj9C,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAA3B,CAAuD,CAAvD,CAEA,CADAjB,CAAA,CAAAA,CAAA,CAAY,CAAAjQ,EAAA,CFr3ELgE,CEq3EK,CAAZ,CACA,CAAAiM,CAAA,CAAAA,CAAA,CAAY5C,EAAA,CAAAA,CAAA,CAAZ,CAVJ,CAcJ,EADAxL,EAAA,CAAAA,CAAA,CAAyBsK,CAAzB,CACA,CAAA,CAAAjN,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CF13EZC,CE03EY,CAA3B,CAAkDkO,CAAlD,CAAwD,CAlB5D,KAAA,CAsBA,IAAIhsB,EAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CAERjmB,EAAA0mB,GAAH,EAGIX,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGA/lB,EAAAymB,GAAJ,EAGIV,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGJ,IAAGjmB,CAAAkpB,GAAH,CAMI,GAAiB,EAAjB,GAAGlpB,CAAAl+C,KAAH,EAAsC,CAAtC,GAAwBk+C,CAAAl+C,KAAxB,CACA,CAEQooE,CAAAA,CAAsB,CAAtBA,GAAQlqB,CAAAl+C,KAEZ,EAAGk+C,CAAAmmB,GAAH,CAAc,CAAA1O,EAAd,EAA0BzX,CAAAmmB,GAA1B,CAAqCnmB,CAAAqpB,GAArC,GAGItD,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGAjmB,EAAA4mB,GAAJ,EAGIuD,EAAA,CAAAA,CAAA,CAAgBlE,CAAhB,CAA2B,EAA3B,CAGAmG,EAAAA,CAAcpsB,CAAAqsB,GAAdD,GAA4B,EAChC,KAAIE,EAAUjG,EAAA,CAAAA,CAAA,CAA6B+F,CAA7B,CAEXE,EAAA5F,GAAH,EAGIX,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGAuG,EAAA7F,GAAJ,EAGIV,CAAA,CAAAA,CAAA,CAAgBqG,CAAhB,CAA8B,EAA9B,CAGAE,EAAAnD,GAAJ,EAGIpD,CAAA,CAAAA,CAAA,CAAgBqG,CAAhB,CAA8B,EAA9B,CAGDE,EAAAnG,GAAH,CAAiB,CAAA1O,EAAjB,EAGIsO,CAAA,CAAAA,CAAA,CAAgBqG,CAAhB,CAA8B,EAA9B,CAGAE,EAAA1F,GAAJ,EAGIuD,EAAA,CAAAA,CAAA,CAAgBiC,CAAhB,CAA8B,EAA9B,CAGJ,IAAG,CAACE,CAAAlD,GAAJ,EAAsBkD,CAAAnG,GAAtB,CAAoC,CAAA1O,EAApC,CACA,CAEI,IAAI4S,EAAiBC,EAAA,CAAAA,CAAA,CAAwBgC,CAAAnG,GAAxB,CAErB,IAAG,CAAA5O,GAAH,CACA,CACI,IAAIgT,EAAUt2C,EAAA,CAAAA,CAAA,CAAao2C,CAAb,CACVG,EAAAA,CAAS,CAAAztD,GAAA,CAAYstD,CAAZ,CAA6B,CAA7B,CAAiC,CAAjC,CAFjB,CADA,IAOQE,EACJ,CADc,CAAAxtD,GAAA,CAAYstD,CAAZ,CACd,CAAIG,CAAJ,CAAa,CAAAztD,GAAA,CAAYstD,CAAZ;AAA6B,CAA7B,CAAiC,CAAjC,CAEjB,KAAII,EAAUpE,EAAA,CAAAA,CAAA,CAA6BmE,CAA7B,CASd,IAAGC,CAAA/D,GAAH,CAEI,KAAM,EAAAlG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAGgK,CAAApB,GAAH,GAAmBiD,CAAAnG,GAAnB,CAEI,KAAM,EAAA3F,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAGgK,CAAAtE,GAAH,GAAmBmG,CAAAnG,GAAnB,EAAkC,CAACsE,CAAAC,GAAnC,CAEI,KAAM,EAAAlK,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAEJ,GAAG,CAACgK,CAAA7D,GAAJ,CAEI,KAAM,EAAApG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,IAAI8L,EAAkBvsB,CAAAwsB,GAAlBD,CAA8B,EAAlC,CACI1B,EAAcX,CAAA,CAAQ,CAAR,CAAY,CAC3BiC,EAAH,GAEItB,CAFJ,EAEmBX,CAAA,CAAQ,CAAR,CAAY,CAAZ,CAAgBqC,CAAhB,CAAkC,CAAlC,CAAsC,CAAtC,CAA0CA,CAF7D,CAIG9B,EAAAhoE,KAAH,CAGIynB,EAAA,CAAAA,CAAA,CAA2BugD,CAAA9qB,GAA3B,CAA0C4qB,CAA1C,CAAoDM,CAApD,CAAkE,CAAlE,CAAqEA,CAArE,CAHJ,CASI3gD,EAAA,CAAAA,CAAA,CAA2BugD,CAAA9qB,GAA3B,EAA2C4qB,CAA3C,CAAqDM,CAArD,CAAmE,KAAnE,EAA6E,CAA7E,CAAgFA,CAAhF,CAIAF,EAAAA,CAAU,CAAAxR,EAAA,CFzhFNiM,CEyhFM,CACd,KAAIwF,EAAS,CAAA9Q,EAAA,CFhgFN+B,CEggFM,CACT4Q,EAAAA,CAAoBzB,CAAA,CAAAA,CAAA,CAAuB,CAAvB,CAIxB,EAAAvT,EAAA,CAAW6U,CAAAnG,GACXmD,GAAA,CAAAA,CAAA,CAEAhM,GAAA,CAAAA,CAAA,CAAoBgP,CAAA7pE,KAApB,CAEAm5D,GAAA,CAAAA,CAAA,CF1gFOC,CE0gFP,CAAwB2O,CAAxB,CACAO,GAAA,CAAAA,CAAA,CAAmBR,CAAnB,CAKGL,EAAH,EAEIH,CAAA,CAAAA,CAAA,CAAYa,CAAZ,CACA,CAAAb,CAAA,CAAAA,CAAA,CAAYY,CAAZ,CAHJ,GAQIX,CAAA,CAAAA,CAAA,CAAYY,CAAZ,CACA,CAAAZ,CAAA,CAAAA,CAAA,CAAYW,CAAZ,CATJ,CAaA,IAAGwB,CAAH,CAEI,GAAGjC,CAAH,CACA,CACI,IAAQzlE,CAAR,CAAY8nE,CAAZ,CAA8B,CAA9B,CAAsC,CAAtC,EAAiC9nE,CAAjC,CAAyCA,CAAA,EAAzC,CAEQioE,CACJ,CADgB/hD,CAAA,CAAAA,CAAA,CAAiB8hD,CAAjB,CAAqC,CAArC,CAAyChoE,CAAzC,CAChB,CAAAslE,CAAA,CAAAA,CAAA,CAAY2C,CAAZ,CAIJ3C,EAAA,CAAAA,CAAA,CAAY,CAAAjQ,EAAA,CFziFbgE,CEyiFa,CAAZ,CACAiM,EAAA,CAAAA,CAAA,CAAY5C,EAAA,CAAAA,CAAA,CAAZ,CATJ,CADA,IAaA,CACI,IAAQ1iE,CAAR,CAAY8nE,CAAZ,CAA8B,CAA9B,CAAsC,CAAtC,EAAiC9nE,CAAjC,CAAyCA,CAAA,EAAzC,CAEQioE,CACJ;AADgB3hD,CAAA,CAAAA,CAAA,CAAkB0hD,CAAlB,CAAsC,CAAtC,CAA0ChoE,CAA1C,CAChB,CAAAulE,CAAA,CAAAA,CAAA,CAAY0C,CAAZ,CAIJ1C,EAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CFrjFbgE,CEqjFa,CAAZ,CACAkM,EAAA,CAAAA,CAAA,CAAY7C,EAAA,CAAAA,CAAA,CAAZ,CATJ,CAxGR,CADA,IA2HOgF,EAAH,GAEOjC,CAAH,EAEIhgD,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAA3B,CAAuD,CAAvD,CAEA,CADAjB,CAAA,CAAAA,CAAA,CAAY,CAAAjQ,EAAA,CFpkFbgE,CEokFa,CAAZ,CACA,CAAAiM,CAAA,CAAAA,CAAA,CAAY5C,EAAA,CAAAA,CAAA,CAAZ,CAJJ,GAQIj9C,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAA3B,CAAuD,CAAvD,CAEA,CADAhB,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CF1kFbgE,CE0kFa,CAAZ,CACA,CAAAkM,CAAA,CAAAA,CAAA,CAAY7C,EAAA,CAAAA,CAAA,CAAZ,CAVJ,CAFJ,CAkBA6B,EAAAA,CAAUhpB,CAAAqsB,GAAVrD,CAAsB,KACtBkB,EAAJ,GAEIlB,CAFJ,EAEehpB,CAAAwsB,GAFf,CAE2B,UAF3B,CAQAlP,GAAA,CAAAA,CAAA,CAAoBgP,CAAA7pE,KAApB,CAEA,EAAAk0D,GAAA,CF5lFWmH,CE4lFX,CAAA,CAA+B,CAC/B,EAAAlH,GAAA,CF7lFWkH,CE6lFX,CAAA,CAA8BwO,CAAAzF,GAE9B,EAAAhQ,GAAA,CF/lFWiH,CE+lFX,CAAA,CAA+BwO,CAAA3sB,GAC/B,EAAAma,EAAA,CFhmFWgE,CEgmFX,CAAA,CAAoBsO,CAApB,CAAkC,EAAlC,CAAuC,CAAA3U,EAGvC,EAAAuB,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CFnmFhBC,CEmmFgB,CAA3B,CAAkDkL,CAAlD,CAA4D,CAhNhE,CADA,IAsNI,MAAM,EAAAxI,MAAAC,EAAA,CAAkB,yCAAlB,EAA+DzgB,CAAAkmB,GAA/D,CAA6E,EAA7E,EAAmF,IAAnF,CADMyG,CAAE,EAAG,mBAALA,CAA0B,GAAK,cAA/BA,CAA+C,EAAG,eAAlDA,CAAmE,GAAK,eAAxEA,CACoF,CAAM3sB,CAAAkmB,GAAN,CAAoB,EAApB,CAA1F,CAAoH,GAApH,CAAN,CA5NR,IAiOQlmB,EAAAmpB,GA4DJ,EAzDIpD,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAyDJ,CAtDGjmB,CAAAopB,GAAH,CAGOppB,CAAAmmB,GAHP,CAGkB,CAAA1O,EAHlB,EAMQsO,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CANR,EAaOjmB,CAAAqpB,GAbP,CAakB,CAAA5R,EAblB,EAa8BzX,CAAAmmB,GAb9B,GAa2C,CAAA1O,EAb3C,GAgBQsO,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAsCR;AAlCIjmB,CAAA4mB,GAkCJ,EA9BIuD,EAAA,CAAAA,CAAA,CAAgBlE,CAAhB,CAA2B,EAA3B,CA8BJ,CA3BGkG,CA2BH,GAzBOliD,EAAA,CAAAA,CAAA,CAAH,EAEIC,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAA3B,CAAuD,CAAvD,CAEA,CADAhB,CAAA,CAAAA,CAAA,CAAY,CAAAlQ,EAAA,CFnpFLgE,CEmpFK,CAAZ,CACA,CAAAkM,CAAA,CAAAA,CAAA,CAAY7C,EAAA,CAAAA,CAAA,CAAZ,CAJJ,GAQIj9C,EAAA,CAAAA,CAAA,CAA2B8gD,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAA3B,CAAuD,CAAvD,CAEA,CADAjB,CAAA,CAAAA,CAAA,CAAY,CAAAjQ,EAAA,CFzpFLgE,CEypFK,CAAZ,CACA,CAAAiM,CAAA,CAAAA,CAAA,CAAY5C,EAAA,CAAAA,CAAA,CAAZ,CAVJ,CAyBJ,EATA7J,EAAA,CAAAA,CAAA,CAAoBtd,CAAAv9C,KAApB,CASA,CAPA,CAAAk0D,GAAA,CFlqFemH,CEkqFf,CAOA,CAP+B,CAO/B,CANA,CAAAlH,GAAA,CFnqFekH,CEmqFf,CAMA,CAN8B9d,CAAA6mB,GAM9B,CAHA,CAAAhQ,GAAA,CFtqFeiH,CEsqFf,CAGA,CAH+B9d,CAAAL,GAG/B,CAFA,CAAAma,EAAA,CFvqFegE,CEuqFf,CAEA,CAFoBmI,CAEpB,CAF+B,EAE/B,CAFoC,CAAAxO,EAEpC,CAAA,CAAAuB,EAAA,CAA2B6E,CAAA,CAAAA,CAAA,CFzqFZC,CEyqFY,CAA3B,CAAkDkO,CAAlD,CAAwD,CAjU5D,CANJ,CA8UmCY,QAAA,GAAQ,CAARA,CAAQ,CAACzG,CAAD,CAC3C,CAGYkE,CAAAA,CAFL,CAAA9S,GAAH,EAE0B4O,CAF1B,EAEiC,CAFjC,EAEsC,CAFtC,CAE0C,CAF1C,EAe0BA,CAf1B,EAeiC,CAfjC,EAesC,CAftC,CAe0C,CAXtC,KAAIkE,CAAJ,CAAqB,CAArB,CAAyB,CAAzB,EAA8B,CAAAzT,GAAA,CF/qFfmQ,CE+qFe,CAA9B,CAEI,KAAM,EAAAvG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ4J,CAAA,CAAiBA,CAAjB,CAAkC,CAAAxT,GAAA,CFprFnBkQ,CEorFmB,CAAlC,CAAiE,CAiBlE,EAAAjO,EAAH,GAEIuR,CAFJ,CAEqBrE,EAAA,CAAAA,CAAA,CAAmCqE,CAAnC,CAFrB,CAKA,OAAOA,EAhCX,CAuT2BwC,QAAA,GAAQ,CAARA,CAAQ,CACnC,CACI,CAAA7T,EAAA,CAA2B,CAAAD,GArB3B8S,GAAA,CAsBAiB,CAtBA,CAsBqBpH,CAtBrB,CAAyC,CAAA,CAAzC,CAAgD,CAAA,CAAhD,CACA,MF37FsB/tB,UE27FtB,CAmBJ,CAK2Bo1B,QAAA,EAAQ,CAARA,CAAQ,CACnC,CACI,CAAA/T,EAAA,CAA2B,CAAAD,GA3B3B8S,GAAA,CA4BAiB,CA5BA,CA4BqBpH,CA5BrB,CAAyC,CAAA,CAAzC,CAAgD,CAAA,CAAhD,CACA,MF37FsB/tB,UE27FtB,CAyBJ,CAK2Bq1B,QAAA,GAAQ,CAARA,CAAQ,CACnC,CACI,CAAAhU,EAAA,CAA2B,CAAAD,GAjC3B8S,GAAA,CAkCAiB,CAlCA,CAkCqBpH,CAlCrB,CAAyC,CAAA,CAAzC,CAAgD,CAAA,CAAhD,CACA,MF37FsB/tB,UE27FtB,CA+BJ;AAW2Bs1B,QAAA,EAAQ,CAARA,CAAQ,CAAC13B,CAAD,CACnC,CACI,CAAAyjB,EAAA,CAA2B,CAAAD,GA9B3B8S,GAAA,CA+BAqB,CA/BA,CA+B+BxH,EA/B/B,CAAyC,CAAA,CAAzC,CA+BmCnwB,CA/BnC,CACA,MF18FsBoC,UE08FtB,CA4BJ,CAK2Bw1B,QAAA,GAAQ,CAARA,CAAQ,CAAC53B,CAAD,CACnC,CACI,CAAAyjB,EAAA,CAA2B,CAAAD,GApC3B8S,GAAA,CAqCAqB,CArCA,CAqC+BxH,EArC/B,CAAyC,CAAA,CAAzC,CAqCmCnwB,CArCnC,CACA,MF18FsBoC,UE08FtB,CAkCJ,CAYiCy1B,QAAA,GAAQ,CAARA,CAAQ,CACzC,CACO,CAAArrB,EAAA,CAAQ,CAAR,CAAH,CAAiB,EAAjB,EAEIsrB,EAAA,CAAAA,CAAA,CAHR,CAQqCC,QAAA,EAAQ,CAARA,CAAQ,CAC7C,CACO,CAAAvrB,EAAA,CAAQ,CAAR,CAAH,CAAiB,EAAjB,GAEO,CAAAA,EAAA,CAAQ,CAAR,CAAH,CFl/FK+nB,CEk/FL,CAEIuD,EAAA,CAAAA,CAAA,CAFJ,CAMIpkD,CAAA,CAAAA,CAAA,CARR,CADJ,CAuCkCskD,QAAA,EAAQ,CAARA,CAAQ,CAC1C,CACI,MAAOtJ,GAAA,CAAAA,CAAA,CFpkGYC,CEokGZ,CADX,CAIkCsJ,QAAA,EAAQ,CAARA,CAAQ,CAC1C,CACI,MAAOvJ,GAAA,CAAAA,CAAA,CF1kGYpI,CE0kGZ,CADX,CAa+B4R,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACvC,CACI,IAAIC,EAAS,CAAA1V,EAAT0V,CFv6FkBC,CEy6FtB,OAAGD,EAAH,CFrgGkBE,CEugGd,GAAGF,CAAH,CAEW,CAFX,CAMW9P,CAAA,CAAAA,CAAA,CAAa8P,CAAb,CAAsB,CAAtB,CARf,CAaW9P,CAAA,CAAAA,CAAA,CAAa6P,CAAb,CAhBf,CAwBwBI,QAAA,EAAQ,CAARA,CAAQ,CAACC,CAAD,CAChC,CAGO,CAAA9W,GAAH,EAEO,CAAAN,GAAA,CAAqBoX,CAArB,CAFP,EAQQhI,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAQR,OAAO,EAAAlP,GAAA,CAAqBkX,CAArB,CAnBX,CAsBwBC,QAAA,GAAQ,CAARA,CAAQ,CAChC,CACI,MAAqB,IAArB,CAAG,CAAApV,EAAH,CACWuK,EAAA,CAAAA,CAAA,CAAgB8K,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAhB,CADX,CAGW,CAAAY,EAAA,CAAU,CAAAZ,EAAV,EAA6B,CAA7B,CAAiC,EAAjC,CAAuC,CAAAA,EAAvC,EAA0D,CAA1D,CAA8D,CAA9D,CAJf,CAayBsV,QAAA,GAAQ,CAARA,CAAQ,CACjC,CACI,MAAqB,IAArB,CAAG,CAAAtV,EAAH,CACWjuC,CAAA,CAAAA,CAAA,CAAiBsjD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAjB,CADX,CAGW,CAAAU,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAJf;AAa0BuV,QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,MAAqB,IAArB,CAAG,CAAAvV,EAAH,CACW7tC,CAAA,CAAAA,CAAA,CAAkBkjD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAlB,CADX,CAGW,CAAAO,EAAA,CAAY,CAAAP,EAAZ,CAA8B,CAA9B,CAJf,CAagCwV,QAAA,GAAQ,CAARA,CAAQ,CACxC,CACI,MAAqB,IAArB,CAAG,CAAAxV,EAAH,CACW7tC,CAAA,CAAAA,CAAA,CAAkBkjD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAlB,CADX,CAIW,CAAAa,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,CAAqC,CAArC,EALf,CASgCyV,QAAA,GAAQ,CAARA,CAAQ,CACxC,CACI,MAAqB,IAArB,CAAG,CAAAzV,EAAH,CACW0V,EAAA,CAAAA,CAAA,CAAkBL,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAlB,CADX,CAGW0K,EAAA,CACH,CAAA7J,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,CAAqC,CAArC,EADG,CAEH,CAAAa,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,CAAqC,CAArC,EAA0C,CAA1C,CAFG,CAJf,CAWgC2V,QAAA,GAAQ,CAARA,CAAQ,CACxC,CACI,GAAqB,GAArB,CAAG,CAAA3V,EAAH,CACI,MAAO0V,GAAA,CAAAA,CAAA,CAAkBL,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAlB,CAEP,KAAIn0D,GAAK,CAAAm0D,EAALn0D,CAAuB,CAAvBA,GAA6B,CACjC,OAAO6+D,GAAA,CACH,CAAA1J,GAAA,CAAgBn1D,CAAhB,CADG,CAEH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAFG,CALf,CAYiC+pE,QAAA,GAAQ,CAARA,CAAQ,CACzC,CACI,GAAqB,GAArB,CAAG,CAAA5V,EAAH,CAA2B,CACW,IAAA,EAAAqV,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAjzDlC6V,EAAAA,CAAOzN,EAAA,CAizDA0N,CAjzDA,CAA4B7uD,CAA5B,CAizDP,OAhzDG8uD,GAAA,CACH16C,EAAA,CA+yDOy6C,CA/yDP,CAAaD,CAAb,CADG,CAEHx6C,EAAA,CA8yDOy6C,CA9yDP,CAAaD,CAAb,CAAoB,CAApB,CAAwB,CAAxB,CAFG,CAGHx6C,EAAA,CA6yDOy6C,CA7yDP,CAAaD,CAAb,CAAoB,CAApB,CAAwB,CAAxB,CAHG,CAIHx6C,EAAA,CA4yDOy6C,CA5yDP,CAAaD,CAAb,CAAoB,EAApB,CAAyB,CAAzB,CAJG,CA+yDoB,CAGnBhqE,CAAAA,EAAK,CAAAm0D,EAALn0D,CAAuB,CAAvBA,GAA6B,CACjC,OAAOkqE,GAAA,CACH,CAAA/U,GAAA,CAAgBn1D,CAAhB,CADG,CAEH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAFG,CAGH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAHG,CAIH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAJG,CALf;AA6BuBmqE,QAAA,GAAQ,CAARA,CAAQ,CAACt6D,CAAD,CAC/B,CACI,GAAqB,GAArB,CAAG,CAAAskD,EAAH,CAA2B,CACvB,IAAI/4C,EAAOouD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CACXiW,GAAA,CAAAA,CAAA,CAAiBhvD,CAAjB,CAAuBvL,CAAvB,CAFuB,CAA3B,IAII,EAAAklD,EAAA,CAAU,CAAAZ,EAAV,EAA6B,CAA7B,CAAiC,EAAjC,CAAuC,CAAAA,EAAvC,EAA0D,CAA1D,CAA8D,CAA9D,CAAA,CAAmEtkD,CAL3E,CASwBw6D,QAAA,GAAQ,CAARA,CAAQ,CAACx6D,CAAD,CAChC,CACI,GAAqB,GAArB,CAAG,CAAAskD,EAAH,CAA2B,CACvB,IAAI/4C,EAAOouD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CACXzuC,GAAA,CAAAA,CAAA,CAAkBtK,CAAlB,CAAwBvL,CAAxB,CAFuB,CAA3B,IAII,EAAAglD,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAAA,CAAwCtkD,CALhD,CASwBy6D,QAAA,GAAQ,CAARA,CAAQ,CAACz6D,CAAD,CAChC,CACI,GAAqB,GAArB,CAAG,CAAAskD,EAAH,CAA2B,CACvB,IAAI/4C,EAAOouD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CACXpuC,EAAA,CAAAA,CAAA,CAAkB3K,CAAlB,CAAwBvL,CAAxB,CAFuB,CAA3B,IAII,EAAA6kD,EAAA,CAAY,CAAAP,EAAZ,CAA8B,CAA9B,CAAA,CAAmCtkD,CAL3C,CAoB8B06D,QAAA,GAAQ,CAARA,CAAQ,CACtC,CACI,GAAqB,GAArB,CAAG,CAAApW,EAAH,CAA2B,CACvB,IAAIqW,EAAYhB,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAChB,EAAAD,EAAA,CAAiB6K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,CACjB,OAAO,EAAApyD,GAAA,CAAW,CAAA87C,EAAX,CAHgB,CAKvB,MAAO,EAAAa,EAAA,CAAU,CAAAZ,EAAV,EAA6B,CAA7B,CAAiC,EAAjC,CAAuC,CAAAA,EAAvC,EAA0D,CAA1D,CAA8D,CAA9D,CANf,CAUyBsW,QAAA,GAAQ,CAARA,CAAQ,CAAC56D,CAAD,CACjC,CACyB,GAArB,CAAG,CAAAskD,EAAH,CACI,CAAAz7C,GAAA,CAAY,CAAAw7C,EAAZ,CAA4BrkD,CAA5B,CADJ,CAII,CAAAklD,EAAA,CAAU,CAAAZ,EAAV,EAA6B,CAA7B,CAAiC,EAAjC,CAAuC,CAAAA,EAAvC,EAA0D,CAA1D,CAA8D,CAA9D,CAJJ,CAIuEtkD,CAL3E;AAS+B66D,QAAA,GAAQ,CAARA,CAAQ,CACvC,CACI,GAAqB,GAArB,CAAG,CAAAvW,EAAH,CAA2B,CACvB,IAAIqW,EAAYhB,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAChB,EAAAD,EAAA,CAAiB6K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,CACjB,IAAG,CAAAnW,EAAH,EAA0C,IAA1C,IAAmBmW,CAAnB,CAA+B,IAA/B,EAGI,MAFA,EAAAvW,EA9gED,CA8gEuB8K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,CAAyC,CAAzC,CAA6C,CAA7C,CA9gEvB,CAghEkDvW,CAhhElD,CAghEkDA,CAAAA,EAhhElD,CAghEQ0W,CAhhERvyD,GAAA,CAghEkC,CAAA87C,EAhhElC,CAAA,CAghEQyW,CAhhEUvyD,GAAA,CAAWiP,CAAX,CAAlB,EAAsC,CAkhErC,EAAA4sC,EAAA,CAAsB,CACtB,OAAO,EAAA37C,GAAA,CAAY,CAAA47C,EAAZ,CATY,CAYvB,MAAO,EAAAW,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAbf,CAiB0ByW,QAAA,GAAQ,CAARA,CAAQ,CAAC/6D,CAAD,CAClC,CACI,GAAqB,GAArB,CAAG,CAAAskD,EAAH,CACI,GAAG,CAAAF,EAAH,CAAA,CAC+CA,IAAAA,EAAAA,CAAAA,EAA3CiL,EAx/DRxmD,GAAA,CAw/DmCw7C,CAAAA,EAx/DnC,CAw/DwErkD,CAx/DxE,CAw/DQqvD,EAv/DRxmD,GAAA,CAAY2O,CAAZ,CAu/DwExX,CAv/DxE,EAA2B,CAA3B,CAs/DI,CAAA,IAGI,EAAA+I,GAAA,CAAa,CAAAs7C,EAAb,CAA6BrkD,CAA7B,CAJR,KAOI,EAAAglD,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAAA,CAAwCtkD,CARhD;AAY+Bg7D,QAAA,GAAQ,CAARA,CAAQ,CACvC,CACI,GAAqB,GAArB,CAAG,CAAA1W,EAAH,CAA2B,CACvB,IAAIqW,EAAYhB,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAChB,EAAAD,EAAA,CAAiB6K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,CACjB,IAAG,CAAAnW,EAAH,EAAyC,IAAzC,GAAmBmW,CAAnB,CAA+B,IAA/B,EAAgD,CAE5C,CAAAvW,EAAA,CAAsB8K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,CAAyC,CAAzC,CAA6C,EAA7C,CAAtB,CAA0EA,CAA1E,CAAsF,CAAtF,CAA2F,CAEzDtW,EAAAA,CAAAA,CAAAA,EAAgBD,KAAAA,EAAAA,CAAAA,EAriE1D,IAAG7sC,CAAH,CAAS,CAAT,CAEI,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAFJ,KAgBU,EA3BV,CA2BU,CA3BV,CA2BU,CA3BV,CA2BU,CA3BV,CAAA,CAAA,CA2BU,CA3BHhP,GAAA,CA2BG,CA3BH,CA2BG,CA3BH,CA2BG,CA3BH,CAAP,CA2BU,CA3BeA,GAAA,CAAWiP,CAAX,CAAzB,EAA6C,CAgjErC,OAAOyjD,EAlhER1yD,GAAA,CAAWgP,CAAX,CAkhEC,CAlhEiB2jD,CAkhEjB,EAlhEwB,CAkhExB,CAAOD,CAlhEqB1yD,GAAA,CAAWiP,CAAX,CAkhE5B,EAlhEgD,EA8gEJ,CAM5C,CAAA4sC,EAAA,CAAsB,CACtB,OAAOzkC,GAAA,CAAAA,CAAA,CAAa,CAAA0kC,EAAb,CAVY,CAavB,MAAO,EAAAQ,EAAA,CAAY,CAAAP,EAAZ,CAA8B,CAA9B,CAdf,CAkB0B6W,QAAA,GAAQ,CAARA,CAAQ,CAACn7D,CAAD,CAClC,CACyB,GAArB,CAAG,CAAAskD,EAAH,CACO,CAAAF,EAAH,CACImL,EAAA,CAAAA,CAAA,CAA2B,CAAAlL,EAA3B,CAA2C,CAAAD,EAA3C,CAAgEpkD,CAAhE,CADJ,CAGI,CAAAgJ,GAAA,CAAa,CAAAq7C,EAAb,CAA6BrkD,CAA7B,CAJR,CAOI,CAAA6kD,EAAA,CAAY,CAAAP,EAAZ,CAA8B,CAA9B,CAPJ,CAOuCtkD,CAR3C,CAY6Bo7D,QAAA,GAAQ,CAARA,CAAQ,CACrC,CACI,MAAO,EAAApW,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CADX,CAI8B+W,QAAA,GAAQ,CAARA,CAAQ,CAACr7D,CAAD,CACtC,CACI,CAAAglD,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAAA,CAAwCtkD,CAD5C,CAI8Bs7D,QAAA,GAAQ,CAARA,CAAQ,CACtC,CACI,MAAO,EAAAzW,EAAA,CAAY,CAAAP,EAAZ,CAA8B,CAA9B,CADX,CAI8BiX,QAAA,GAAQ,CAARA,CAAQ,CAACv7D,CAAD,CACtC,CACI,CAAA6kD,EAAA,CAAY,CAAAP,EAAZ,CAA8B,CAA9B,CAAA,CAAmCtkD,CADvC;AAIwBw7D,QAAA,GAAQ,CAARA,CAAQ,CAChC,CACI,MAAO,EAAAtW,EAAA,CAAU,CAAAZ,EAAV,EAA6B,CAA7B,CAAiC,EAAjC,CAAuC,CAAAA,EAAvC,EAA0D,CAA1D,CAA8D,CAA9D,CADX,CAIyBmX,QAAA,GAAQ,CAARA,CAAQ,CAACz7D,CAAD,CACjC,CACI,CAAAklD,EAAA,CAAU,CAAAZ,EAAV,EAA6B,CAA7B,CAAiC,EAAjC,CAAuC,CAAAA,EAAvC,EAA0D,CAA1D,CAA8D,CAA9D,CAAA,CAAmEtkD,CADvE,CAIyB07D,QAAA,GAAQ,CAARA,CAAQ,CACjC,CACI,MAAO,EAAA1W,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CADX,CAI0BqX,QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,MAAO,EAAA5W,GAAA,CAAY,CAAAT,EAAZ,EAA+B,CAA/B,CAAmC,EAAnC,CADX,CAI0BsX,QAAA,GAAQ,CAARA,CAAQ,CAAC57D,CAAD,CAClC,CACI,CAAAglD,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAAA,CAAwCtkD,CAD5C,CAI0B67D,QAAA,GAAQ,CAARA,CAAQ,CAClC,CACI,MAAO,EAAAhX,EAAA,CAAY,CAAAP,EAAZ,EAA+B,CAA/B,CAAmC,CAAnC,CADX,CAI0BwX,QAAA,GAAQ,CAARA,CAAQ,CAAC97D,CAAD,CAClC,CACI,CAAA8kD,GAAA,CAAW,CAAAR,EAAX,EAA8B,CAA9B,CAAkC,CAAlC,CAAA,CAAuCtkD,CAD3C,CAI4B+7D,QAAA,GAAQ,CAARA,CAAQ,CACpC,CACI,MAAO/M,GAAA,CACH,CAAA1J,GAAA,EAAiB,CAAAhB,EAAjB,EAAoC,CAApC,CAAwC,CAAxC,GAA8C,CAA9C,CADG,CAEH,CAAAgB,GAAA,EAAiB,CAAAhB,EAAjB,EAAoC,CAApC,CAAwC,CAAxC,GAA8C,CAA9C,CAAkD,CAAlD,CAFG,CADX,CAO6B0X,QAAA,GAAQ,CAARA,CAAQ,CACrC,CACI,IAAI7rE,GAAK,CAAAm0D,EAALn0D,EAAwB,CAAxBA,CAA4B,CAA5BA,GAAkC,CACtC,OAAOkqE,GAAA,CACH,CAAA/U,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CADG,CAEH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAFG,CAGH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAHG,CAIH,CAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAJG,CAFX,CAU4B8rE,QAAA,GAAQ,CAARA,CAAQ,CACpC,CACI,MAAOjN,GAAA,CACH,CAAA7J,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,EAAsC,CAAtC,CAA0C,CAA1C,EADG,CAEH,CAAAa,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,EAAsC,CAAtC,CAA0C,CAA1C,EAA+C,CAA/C,CAFG,CADX;AAO6B4X,QAAA,EAAQ,CAARA,CAAQ,CAAC3kD,CAAD,CAAMC,CAAN,CACrC,CACI,CAAA2tC,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,EAAsC,CAAtC,CAA0C,CAA1C,EAAA,CAAgD/sC,CAChD,EAAA4tC,EAAA,CAAc,CAAd,EAAmB,CAAAb,EAAnB,EAAsC,CAAtC,CAA0C,CAA1C,EAA+C,CAA/C,CAAA,CAAoD9sC,CAFxD,CAK4B2kD,QAAA,GAAQ,CAARA,CAAQ,CAAC5kD,CAAD,CAAMC,CAAN,CACpC,CACI,IAAIrnB,GAAK,CAAAm0D,EAALn0D,EAAwB,CAAxBA,CAA4B,CAA5BA,GAAkC,CACtC,EAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAA,CAAqBonB,CACrB,EAAA+tC,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAAA,CAAyBqnB,CAH7B,CAM8B4kD,QAAA,GAAQ,CAARA,CAAQ,CAAChP,CAAD,CAAKC,CAAL,CAASC,CAAT,CAAaC,CAAb,CACtC,CACI,IAAIp9D,GAAK,CAAAm0D,EAALn0D,EAAwB,CAAxBA,CAA4B,CAA5BA,GAAkC,CACtC,EAAAm1D,GAAA,CAAgBn1D,CAAhB,CAAA,CAAqBi9D,CACrB,EAAA9H,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAAA,CAAyBk9D,CACzB,EAAA/H,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAAA,CAAyBm9D,CACzB,EAAAhI,GAAA,CAAgBn1D,CAAhB,CAAoB,CAApB,CAAA,CAAyBo9D,CAL7B,CAQ6B8O,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACrC,CACI,GACA,CACI,CAAA7X,GACA,CADmB,CAAAC,EACnB,CAAA6S,EAAA,CAAAA,CAAA,CAA2B+E,CAA3B,CAAgC,CAAA,CAAhC,CAAuC,CAAA,CAAvC,CAFJ,CAIA,MAAM5jE,CAAN,CACA,CACIqV,EAAA,CAAAA,CAAA,CAAuBrV,CAAvB,CADJ,CAPJ,CAY4B6jE,QAAA,GAAQ,CAARA,CAAQ,CACpC,CAKQ,CAAAjnD,MAAJ,CFxjH2Bs7C,GEwjH3B,EAAoC,CAAC,CAAA5N,EAArC,GAEO,CAAA91C,EAAAu5C,GAKH,EAHI,CAAAv5C,EAAAu5C,GAAAjiB,GAAA,EAGJ,CAAG,CAAAt3B,EAAAg5C,GAAH,EAEI,CAAAh5C,EAAAg5C,GAAA1hB,GAAA,EATR,CALJ,CAmBAlb,CAAAjM,GAAA,CAAiCm/C,QAAQ,CAACrsE,CAAD,CACzC,CAEO,IAAA+c,EAAAu5C,GAAH,EAEI,IAAAv5C,EAAAu5C,GAAA9hB,GAAA,CAAyBx0C,CAAzB,CAGD,KAAA+c,EAAAy5C,GAAH,EAEI,IAAAz5C,EAAAy5C,GAAAhiB,GAAA,CAA4Bx0C,CAA5B,CATR,CAaiCssE,SAAA,GAAQ,CAARA,CAAQ,CAACtsE,CAAD,CACzC,CACO,CAAA+c,EAAAu5C,GAAH,EAEI,CAAAv5C,EAAAu5C,GAAAphB,GAAA,CAA2Bl1C,CAA3B,CAGD,EAAA+c,EAAAy5C,GAAH,EAEI,CAAAz5C,EAAAy5C,GAAAthB,GAAA,CAA8Bl1C,CAA9B,CARR;AAYuCusE,QAAA,GAAQ,CAARA,CAAQ,CAACj4C,CAAD,CAAOt2B,CAAP,CAC/C,CACI,GAAG,CAAAw0D,GAAH,GAA2B,CAAAQ,EAA3B,CAAsCwN,EAAA,CAAAA,CAAA,CAAtC,EAAyD,CAAAr7C,MAAzD,CF7lHoBy6C,ME6lHpB,EACA,CACQ,CAAA9M,GAAJ,EAIIwO,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGJ,KAAIkL,EAAW,CAAAra,GAAA,CFvhHAmQ,CEuhHA,CAAf,CACID,EAAa,CAAAjQ,GAAA,CFxhHFkQ,CEwhHE,CAEjB,IAAe,GAAf,EAAGkK,CAAH,CACA,CAAA,IAGQC,EAAa,CAAAn0D,GAAA,CAAYipD,EAAA,CAAAA,CAAA,CAAmCc,CAAnC,CAAgD,GAAhD,CAAuD,CAAvD,CAA2D,CAA3D,CAAZ,CAGjB,IAAGmK,CAAH,GAAgBC,CAAhB,GAFgBn4C,CAEhB,CAFuBt2B,CAEvB,CAF8B,CAE9B,CAFkC,CAElC,GAA2C,CAA3C,EAAgD,CAAhD,IAEQuqC,CAOD,EAPU,CAOV,EAPevqC,CAOf,EAPuB,CAOvB,GAP8Bs2B,CAO9B,CAPqC,CAOrC,EANClZ,CAMD,CANQmmD,EAAA,CAAAA,CAAA,CAAmCc,CAAnC,CAAgDoK,CAAhD,EAA8Dn4C,CAA9D,EAAsE,CAAtE,EAA2E,CAA3E,CAMR,CAAA,GALciU,CAADmkC,CAAQ,KAARA,CACR,CAAAp0D,GAAA,CAAY8C,CAAZ,CADQsxD,CACY,CAAAt0D,GAAA,CAAWgD,CAAX,CAIzB,EAAcmtB,CAAd,CATP,EAWQ,MAjBZ,CAwBA+4B,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CApCJ,CAFJ,CAkK+BqL,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CACvC,CAGO,CAAA1Z,EAAH,GAAkB0Z,CAAlB,GAGI,CAAA1Z,EACA,CADa0Z,CACb,CAAAjX,EAAA,CAAAA,CAAA,CAJJ,CAHJ,CAWoCkX,QAAA,GAAQ,CAARA,CAAQ,CAC5C,CAGQ,CAAAxxB,GAAA,CAFD,CAAA6X,EAAH,CAEiB,CAAAwI,GAFjB,CAMiB,CAAAC,GAPrB;AAcwCmR,QAAA,GAAQ,CAARA,CAAQ,CAACtL,CAAD,CAChD,CAAA,IAGQuL,EAA4B,CAA5BA,IAAUvL,CAAVuL,CAAqB,CAArBA,CAHR,CAIQC,EAAkBxL,CAAlBwL,CAA6B,EAKjC,KAAAzxB,EAAO,CACHqpB,GAAKpD,CAALoD,CAAgB,CADb,CAEH1C,GAAU6K,CAFP,CAGH9K,GAAS,CAAA,CAHN,CAIHD,GAAU,CAAA,CAJP,CAMH9mB,GAAM,CANH,CAOHumB,GAAQ,CAPL,CAQHt8C,MAAO,CARJ,CASH9nB,KAAM,CATH,CAUHqkE,GAAK,CAVF,CAWH+C,GAAW,CAAA,CAXR,CAYHtC,GAAY,CAAA,CAZT,CAaHuC,GAAe,CAAA,CAbZ,CAcHuB,GAAQ,CAAA,CAdL,CAeHtB,GAAQ,CAAA,CAfL,CAgBH3mE,KAAM,CAAA,CAhBH,CAkBHivE,GAA0B,CAAA,CAlBvB,CAqBH7K,GAAiB,CArBd,CAuBH8E,GAAa,CAAA,CAvBV,CAwBHgG,GAAa,CAAA,CAxBV,CAyBHhJ,GAAc,CAzBX,CA2BH0D,GAAM,CA3BH,CA4BHG,GAAM,CA5BH,CA+BP,IAAGgF,CAAH,CACA,CACI,IAAA7I,EAAe,CAAAzR,GACf,KAAA0a,EAAc,CAAAza,GAFlB,CADA,IAOIwR,EACA,CADe,CAAA9R,GAAA,CFzvHEgb,CEyvHF,CACf,CAAAD,CAAA,CAAc,CAAAhb,GAAA,CF1vHGib,CE0vHH,CAGlB,IAAGL,CAAH,EAAiC,CAAjC,GAAaC,CAAb,CAGI,MADAzxB,EAAA0mB,GACO1mB,CADQ,CAAA,CACRA,CAAAA,CAIX,KAAIimB,CAAJ,CAAe,CAAf,EAAoB2L,CAApB,CAKI,MADA5xB,EAAAymB,GACOzmB,CADS,CAAA,CACTA,CAAAA,CAGX2oB,EAAA,CAAeA,CAAf,CAA8B8I,CAA9B,CAAgD,CAE7C,EAAA3Y,EAAH,GAEI6P,CAFJ,CAEmB3C,EAAA,CAAAA,CAAA,CAAmC2C,CAAnC,CAFnB,CAIA3oB,EAAA2oB,GAAA,CAAoBA,CAEpB3oB,EAAAL,GAAA,CAAY,CAAA5iC,GAAA,CAAY4rD,CAAZ,CAA2B,CAA3B,CAA+B,CAA/B,CAAZ,CAAgD,CAAA9rD,GAAA,CAAW8rD,CAAX,CAA0B,CAA1B,CAA8B,CAA9B,CAAhD,EAAoF,EAApF,CACY,CAAA9rD,GAAA,CAAW8rD,CAAX,CAA0B,CAA1B,CAA8B,CAA9B,CADZ,EACgD,EAChD3oB,EAAAkmB,GAAA,CAAc,CAAArpD,GAAA,CAAW8rD,CAAX,CAA0B,CAA1B,CAA8B,CAA9B,CACd3oB,EAAAp2B,MAAA,CAAa,CAAA/M,GAAA,CAAW8rD,CAAX,CAA0B,CAA1B,CAA8B,CAA9B,CAAb,EAAiD,CAEjD3oB,EAAAqsB,GAAA,CAAYp4C,EAAA,CAAAA,CAAA,CAAa00C,CAAb,CAAgC,CAAhC,CACZ3oB,EAAAwsB,GAAA,CAAYv4C,EAAA,CAAAA,CAAA,CAAa00C,CAAb,CAA4B,CAA5B,CAAgC,CAAhC,CAKZ3oB,EAAAl+C,KAAA,CAAYk+C,CAAAkmB,GAAZ,CAA0B,EAE1BlmB,EAAAmmB,GAAA,CAAWnmB,CAAAkmB,GAAX,EAA0B,CAA1B,CAA8B,CAE9BlmB,EAAAkpB,GAAA,CAA0C,CAA1C,IAAkBlpB,CAAAkmB,GAAlB,CAAgC,EAAhC,CACAlmB,EAAA4mB,GAAA,CAA2C,GAA3C;CAAmB5mB,CAAAkmB,GAAnB,CAAiC,GAAjC,CACAlmB,EAAAmpB,GAAA,CAA2C,CAA3C,IAAsBnpB,CAAAkmB,GAAtB,CAAoC,CAApC,CAEAlmB,EAAA0qB,GAAA,CAAoC,CAApC,IAAe1qB,CAAAkmB,GAAf,CAA6B,CAA7B,CACAlmB,EAAAopB,GAAA,CAAoC,CAApC,IAAeppB,CAAAkmB,GAAf,CAA6B,CAA7B,CAEAlmB,EAAA0xB,GAAA,CAAgC1xB,CAAAopB,GAAhC,EAA+CppB,CAAAmpB,GAE/CnpB,EAAAv9C,KAAA,CAAiC,CAAjC,IAAau9C,CAAAp2B,MAAb,CAA0B,CAA1B,CAEIkoD,EAAAA,CAAQ,CAAA/0D,GAAA,CAAY4rD,CAAZ,CAARmJ,EACS,CAAAj1D,GAAA,CAAW8rD,CAAX,CAA0B,CAA1B,CAA8B,CAA9B,CADTmJ,CAC4C,EAD5CA,GACoD,EAKpD9xB,EAAA6mB,GAAA,CAHD7mB,CAAAp2B,MAAH,CAAgB,CAAhB,EAG4BkoD,CAH5B,EAGqC,EAHrC,CAG0C,IAH1C,IAGqD,CAHrD,CAO2BA,CAG3B9xB,EAAA2rB,GAAA,CAAmB3rB,CAAA0qB,GAAnB,EAAkC,CAAC1qB,CAAAmpB,GACnCnpB,EAAA2xB,GAAA,CAAmB3xB,CAAA0qB,GAAnB,EAAkC,CAAC1qB,CAAAmpB,GAEnC,OAAOnpB,EApHX;AA2H2B+xB,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAM/L,CAAN,CACnC,CAII,GAAG,CAAC,CAAAhP,GAAJ,EAA2B4O,EAAA,CAAAA,CAAA,CAA3B,CAEI,CAAA/L,EAAA,CAAUkY,CAAV,CAIA,CAJiB/L,CAIjB,CAHA,CAAAtP,GAAA,CAAqBqb,CAArB,CAGA,CAH4B,CAG5B,CAFA,CAAAnb,GAAA,CAAqBmb,CAArB,CAEA,CAF4B/L,CAE5B,EAFwC,CAExC,CFv1HepK,CEu1Hf,GAAGmW,CAAH,GAEI,CAAAta,GAFJ,CAEyB,CAAA,CAFzB,CANJ,KAAA,CAaA,IAAI1X,EAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CAEX,IFh2HmBpK,CEg2HnB,GAAGmW,CAAH,CACA,CACOhyB,CAAA0mB,GAAH,EAIIX,CAAA,CAAAA,CAAA,CAAgB,CAAhB,CAGA/lB,EAAAymB,GAAJ,EACGyC,CAAAlpB,CAAAkpB,GADH,EAEGlpB,CAAAqpB,GAFH,GAEgB,CAAA5R,EAFhB,EAGIzX,CAAA2rB,GAHJ,EAIG3rB,CAAAmmB,GAJH,GAIgB,CAAA1O,EAJhB,EAQIsO,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGJ,IAAG,CAACjmB,CAAA4mB,GAAJ,CAh5BJ,KAo5BQgF,EA32BR5S,EFn/FsBrhB,CE81Hdi0B,CA32BmB7S,GFn/FLphB,CEy8FtBk0B,EAAA,CAq5BQD,CAr5BR,CA2C+BlG,EA3C/B,CAAyC,CAAA,CAAzC,CAq5BwBO,CAr5BxB,CAq5BmC,EAr5BnC,CFz8FsBtuB,CAAAA,SE08FtB,CAu5BI,CAAA+f,GAAA,CAAqB1X,CAAAv9C,KA1BzB,CADA,IA6BK,IF93Hcq7D,CE83Hd,GAAGkU,CAAH,CAML,CAEI,GAAGhyB,CAAA0mB,GAAH,CACA,CAGI,CAAA5M,EAAA,CAAUkY,CAAV,CAAA,CAAiB/L,CACjB,EAAAtP,GAAA,CAAqBqb,CAArB,CAAA,CAA4B,CAC5B,OALJ,CAQA,CAAG,CAAChyB,CAAAymB,GAAJ,EACGzmB,CAAAkpB,GADH,EAEG,CAAClpB,CAAA2xB,GAFJ,EAGI,CAAC3xB,CAAA0xB,GAHL,GAIK1xB,CAAAqpB,GAJL,CAIgBrpB,CAAAmmB,GAJhB,EAI4B,CAAA1O,EAJ5B,CAIuCzX,CAAAmmB,GAJvC,IAUIJ,CAAA,CAAAA,CAAA,CAAgBE,CAAhB,CAA2B,EAA3B,CAGAjmB,EAAA4mB,GAAJ,EAIIuD,EAAA,CAAAA,CAAA,CAAgBlE,CAAhB,CAA2B,EAA3B,CA5BR,CAgCA,CAAAtP,GAAA,CAAqBqb,CAArB,CAAA,CAA4B,CAC5B,EAAApb,GAAA,CAAoBob,CAApB,CAAA,CAA2BhyB,CAAA6mB,GAG3B,EAAAhQ,GAAA,CAAqBmb,CAArB,CAAA,CAA4BhyB,CAAAL,GAC5B,EAAAma,EAAA,CAAUkY,CAAV,CAAA,CAAiB/L,CAvFjB,CAJJ;AAiJyBgM,QAAA,GAAQ,CAARA,CAAQ,CAAChM,CAAD,CACjC,CACI,IAAIjmB,EAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CAEX,IAAGjmB,CAAA0mB,GAAH,CAGI,CAAA7P,GAAA,CF99HiBgb,CE89HjB,CACA,CADiC,CACjC,CAAA,CAAAjb,GAAA,CF/9HiBib,CE+9HjB,CAAA,CAAgC,CAJpC,KAAA,CAUA,GAAG,CAAC7xB,CAAA2mB,GAAJ,CAEI,KAAM,EAAAnG,MAAAC,EAAA,CAAkB,kCAAlB,CAAN,CAGJ,GAAG,CAACzgB,CAAA4mB,GAAJ,CAGI,KAAM,EAAApG,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAG,CAACzgB,CAAAkpB,GAAJ,CAGI,KAAM,EAAA1I,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,GAAiB,CAAjB,GAAGzgB,CAAAl+C,KAAH,CAGI,KAAM,EAAA0+D,MAAAC,EAAA,CAAkB,aAAlB,CAAN,CAGJ,CAAA5J,GAAA,CF5/HqBgb,CE4/HrB,CAAA,CAAiC7xB,CAAAL,GACjC,EAAAiX,GAAA,CF7/HqBib,CE6/HrB,CAAA,CAAgC7xB,CAAA6mB,GAChC,EAAA/M,EAAA,CF9/HqB+X,CE8/HrB,CAAA,CAAsB5L,CAnCtB,CAHJ,CA2DoBiM,QAAA,GAAQ,CAARA,CAAQ,CAACjM,CAAD,CAAWkM,CAAX,CAC5B,CAOQnyB,CAAAA,CAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CACX,EAAAt8C,EAAA,EAAsB,GAEtB,KAAIyoD,EAAUpyB,CAAAmmB,GAAViM,CAAqB,CAAA3a,EAArB2a,EAAiCpyB,CAAAmmB,GAAjCiM,CAA4CpyB,CAAAqpB,GAEhD,IAAGrpB,CAAA0mB,GAAH,EAAmB,CAAC1mB,CAAAymB,GAApB,GACIzmB,CAAAkpB,GAAA,CATmBmJ,KASnB,EAAsCryB,CAAAl+C,KAAtC,CAAkD,CAAlD,EAAwDswE,CAAxD,CACiB,CAACpyB,CAAA0xB,GADlB,EACmDU,CAFvD,EAMI,MAFA,EAAAxoD,MAEOuoD,EAFO,GAEPA,CAAAA,CAIP,EAAAvoD,MAAA,EFnoIkBC,EEooIlB,OAAOm2B,EAAAwsB,GAAP,CAAmB,QAvB3B;AA2BoB8F,QAAA,GAAQ,CAARA,CAAQ,CAACrM,CAAD,CAAWkM,CAAX,CAC5B,CAOQnyB,CAAAA,CAAOqmB,EAAA,CAAAA,CAAA,CAA6BJ,CAA7B,CACX,EAAAt8C,EAAA,EAAsB,GAEtB,KAAIyoD,EAAUpyB,CAAAmmB,GAAViM,CAAqB,CAAA3a,EAArB2a,EAAiCpyB,CAAAmmB,GAAjCiM,CAA4CpyB,CAAAqpB,GAEhD,IAAGrpB,CAAA0mB,GAAH,EAAmB,CAAC1mB,CAAAymB,GAApB,GACIzmB,CAAAkpB,GAAA,CATmBqJ,KASnB,EAAsCvyB,CAAAl+C,KAAtC,CAAkD,CAAlD,EAAwDswE,CAAxD,CACiB,CAACpyB,CAAA0xB,GADlB,EACmDU,CAFvD,EAMI,MAFA,EAAAxoD,MAEOuoD,EAFO,GAEPA,CAAAA,CAIP,EAAAvoD,MAAA,EF/pIkBC,EEgqIlB,OAAOm2B,EAAA6mB,GAAP,CAA8B,CAvBtC,CAkE0B2L,QAAA,GAAQ,CAARA,CAAQ,CAClC,CAEI,CAAAha,GAAA,CAAsB,EACtB,EAAAF,GAAA,CAAsB,EAEtB,EAAAvB,GAAAvyC,IAAA,CAAkB,CAAAwyC,GAAlB,CALJ,CAU+Byb,QAAA,GAAQ,CAARA,CAAQ,CACvC,CAKI,IADA,IAAIzV,EAAQ,IAAI1uD,UAAJ,CAAe,CAAA0oD,GAAAjoD,OAAf,CAAZ,CACQtK,EAAI,CAAZ,CAAoB,MAApB,CAAeA,CAAf,CAAA,CAEIu4D,CAAA,CAAMv4D,CAAA,EAAN,CAAA,CAAau4D,CAAA,CAAMv4D,CAAA,EAAN,CAAb,CAA0Bu4D,CAAA,CAAMv4D,CAAA,EAAN,CAA1B,CAAuCu4D,CAAA,CAAMv4D,CAAA,EAAN,CAAvC,CAAoD,CAGxDolE,GAAA,CAAAA,CAAA,CAVJ,CAyBuC6I,QAAA,GAAQ,CAARA,CAAQ,CAAC7yD,CAAD,CAC/C,CACI,GAAI,CAAAi5C,EAAJ,CAKA,GAAA,CAAA,GAAA,CAAA,EAAA,CAgDA,GAhDA,CAgDIA,EAAJ,CAAA,CAKA,IAAInZ,EArDJ9/B,CAqDI8/B,GAAgB,EAEpB,EAAA,CAvDA,CAuDGoX,GAAA,CAAcpX,CAAd,CAAH,CFxzI0BgzB,CEwzI1B,CAvDA,CAyDW7b,EAAA,CAAcnX,CAAd,CAFX,CAvDA9/B,CAuDA,CAMW+yD,EAAA,CA7DXA,CA6DW,CA7DX/yD,CA6DW,CAA+B,CAA/B,CAAkC,CAAlC,CANX,CAvDAA,CAuDA,CAMyD,IAbzD,CAAA,IAEI,EAAA,CAlDJA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CALA,KAEWA,EAAAA,CAAAA,CAFX,OAAA,EADJ;AAgBwCgzD,QAAA,GAAQ,CAARA,CAAQ,CAAChzD,CAAD,CAChD,CACI,GAAI,CAAAi5C,EAAJ,CAKA,GAAA,CAAA,GAAA,CAAA,EAAA,CAYA,GAZA,CAYIA,EAAJ,CAAA,CAKA,IAAInZ,EAjBJ9/B,CAiBI8/B,GAAgB,EAEpB,EAAA,CAnBA,CAmBGoX,GAAA,CAAcpX,CAAd,CAAH,CFpyI2BmzB,CEoyI3B,CAnBA,CAqBWhc,EAAA,CAAcnX,CAAd,CAFX,CAnBA9/B,CAmBA,CAMW+yD,EAAA,CAzBXA,CAyBW,CAzBX/yD,CAyBW,CAA+B,CAA/B,CAAkC,CAAlC,CANX,CAnBAA,CAmBA,CAMyD,IAbzD,CAAA,IAEI,EAAA,CAdJA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CALA,KAEWA,EAAAA,CAAAA,CAFX,OAAA,EADJ,CAsD+CkzD,QAAA,GAAQ,CAARA,CAAQ,CAAClzD,CAAD,CACvD,CACI,GAAG,CAAC,CAAAi5C,EAAJ,CAEI,MAAOj5C,EAGX,KAAI8/B,EAAO9/B,CAAP8/B,GAAgB,EAEpB,OAAG,EAAAoX,GAAA,CAAcpX,CAAd,CAAH,CF50I6BqzB,CE40I7B,CAEW,CAAAlc,EAAA,CAAcnX,CAAd,CAFX,CAEiC9/B,CAFjC,CAMW+yD,EAAA,CAAAA,CAAA,CAAyB/yD,CAAzB,CAA+B,CAA/B,CAAkC,CAAlC,CANX,CAMkDA,CANlD,CAMyD,IAd7D,CAkB8CozD,QAAA,GAAQ,CAARA,CAAQ,CAACpzD,CAAD,CACtD,CACI,GAAG,CAAC,CAAAi5C,EAAJ,CAEI,MAAOj5C,EAGX,KAAI8/B,EAAO9/B,CAAP8/B,GAAgB,EAEpB,OAAG,EAAAoX,GAAA,CAAcpX,CAAd,CAAH,CFh2I4BuzB,CEg2I5B,CAEW,CAAApc,EAAA,CAAcnX,CAAd,CAFX,CAEiC9/B,CAFjC,CAMW+yD,EAAA,CAAAA,CAAA,CAAyB/yD,CAAzB,CAA+B,CAA/B,CAAkC,CAAlC,CANX,CAMkDA,CANlD,CAMyD,IAd7D;AAqBoCszD,QAAA,GAAQ,CAARA,CAAQ,CAACtzD,CAAD,CAAOuzD,CAAP,CAAoBC,CAApB,CAC5C,CAAA,IACQC,EAAOzzD,CAAPyzD,GAAgB,EADxB,CAEQC,GAAiB,CAAAxxB,EAAA,CAAQ,CAAR,CAAjBwxB,GAAgC,CAAhCA,GAAsCD,CAAtCC,EAA8C,EAA9CA,EAAoD,CAF5D,CAGQC,EAAiB,CAAA10C,GAAA,CAAYy0C,CAAZ,CAHzB,CAKQE,EAAY,CAAA,CALpB,CAQQC,EAAa,CAAA,CAIZF,EAAL,CAAsB,CAAtB,GASI,CAAAzxB,EAAA,CAAQ,CAAR,CACA,CADaliC,CACb,CAAA8zD,EAAA,CAAAA,CAAA,CAAuBP,CAAvB,CAAoCC,CAApC,CAA0C,CAA1C,CAVJ,CAgB4B,EAA5B,IAAIG,CAAJ,CAAqB,CAArB,IAEIC,CAEA,CAFY,CAAA,CAEZ,CAAGL,CAAH,GAAmBC,CAAnB,EAA4B,CAAAtxB,EAAA,CAAQ,CAAR,CAA5B,CF/vIK6xB,KE+vIL,IAEI,CAAA7xB,EAAA,CAAQ,CAAR,CACA,CADaliC,CACb,CAAA8zD,EAAA,CAAAA,CAAA,CAAuBP,CAAvB,CAAoCC,CAApC,CAA0C,CAA1C,CAHJ,CAJJ,CAY4B,EAA5B,IAAIG,CAAJ,CAAqB,CAArB,IAEIE,CAEA,CAFa,CAAA,CAEb,CAAGL,CAAH,GAII,CAAAtxB,EAAA,CAAQ,CAAR,CACA,CADaliC,CACb,CAAA8zD,EAAA,CAAAA,CAAA,CAAuBP,CAAvB,CAAoCC,CAApC,CAA0C,CAA1C,CALJ,CAJJ,CAcA,IAAGG,CAAH,CAAoB,CAAAhc,GAApB,CAKI,CAAA14B,GAAA,CAAYy0C,CAAZ,CAGS,CAHoBC,CAGpB,CAHqC,EAGrC,CAH4CJ,CAG5C,EAH2D,CAG3D,CADTtnD,CACS,CADD0nD,CACC,CADgB,UAChB,CAD+B3zD,CAC/B,CADsC,OACtC,CAAA2zD,CAAA,EAAiB,GAR9B,KAWA,CAAA,IACQK,IAAoBL,CAApBK,CAAqC,UAArCA,IAAqD,CAArDA,GAA2DP,CAA3DO,CAAkE,IAAlEA,EAA2E,CADnF,CAEQC,EAAmB,CAAAh1C,GAAA,CAAY+0C,CAAZ,CAEO,EAA9B,IAAIC,CAAJ,CAAuB,CAAvB,IAGI,CAAA/xB,EAAA,CAAQ,CAAR,CACA,CADaliC,CACb,CAAA8zD,EAAA,CAAAA,CAAA,CAAuBP,CAAvB,CAAoCC,CAApC,CAA0C,CAA1C,CAJJ,CAQ8B,EAA9B,IAAIS,CAAJ,CAAuB,CAAvB,IAEIL,CAEA,CAFY,CAAA,CAEZ,CAAGL,CAAH,GAAmBC,CAAnB,EAA4B,CAAAtxB,EAAA,CAAQ,CAAR,CAA5B,CFhzIC6xB,KEgzID,IAGI,CAAA7xB,EAAA,CAAQ,CAAR,CACA,CADaliC,CACb,CAAA8zD,EAAA,CAAAA,CAAA,CAAuBP,CAAvB,CAAoCC,CAApC,CAA0C,CAA1C,CAJJ,CAJJ,CAa8B,EAA9B,IAAIS,CAAJ,CAAuB,CAAvB,IAEIJ,CAEA,CAFa,CAAA,CAEb,CAAGL,CAAH,GAGI,CAAAtxB,EAAA,CAAQ,CAAR,CACA,CADaliC,CACb,CAAA8zD,EAAA,CAAAA,CAAA,CAAuBP,CAAvB,CAAoCC,CAApC,CAA0C,CAA1C,CAJJ,CAJJ,CAcAU,GAAA,CAAAA,CAAA,CAAqBR,CAArB,CAAoCC,CAApC,CAAqD,EAArD,CACAO,GAAA,CAAAA,CAAA,CAAqBF,CAArB,CAAsCC,CAAtC,CAAyD,EAAzD,CAAgEV,CAAhE,EAA+E,CAA/E,CAEAtnD,EAAA;AAAOgoD,CAAP,CAA0B,UAC1BE,EAAA,CAASF,CAAT,CAA4B,GA3ChC,CA8CA,CAAAhd,EAAA,CAAcwc,CAAd,CAAA,CAAsBxnD,CAAtB,CAA6BwnD,CAA7B,EAAqC,EAQ7BW,EAAA,CAJLP,CAAH,CAEOD,CAAH,CAEmB,EAFnB,CAOmB,CATvB,CAcOA,CAAH,CAEmB,CAFnB,CF/+IwBP,CEy/I5B,EAAAnc,GAAA,CAAcuc,CAAd,CAAA,CAAsBW,CAEnBD,EAAH,EAAc,CAAAjyB,EAAA,CAAQ,CAAR,CAAd,CFt1IUmyB,GEs1IV,GAEI,CAAAld,GAAA,CAAqBsc,CAArB,CAFJ,CAEiCW,CAFjC,CAKA,OAAOnoD,EAlJX,CAqJsCqoD,QAAA,GAAQ,CAARA,CAAQ,CAACt0D,CAAD,CAAOpd,CAAP,CAC9C,CAII,GAAI,CAAAq2D,EAAJ,CAAA,CAJJ,IASQua,EAAoB,CAAb,GAAA,CAAA5b,EAAA,CAAiB,CAAjB,CAAqB,CATpC,CAUQzqB,EAAOqmC,CAAA,CF3gJgBP,CE2gJhB,CF7gJkBE,CEmgJjC,CAWQM,EAAOzzD,CAAPyzD,GAAgB,EAEgB,EAApC,IAAI,CAAAvc,GAAA,CAAcuc,CAAd,CAAJ,CAA0BtmC,CAA1B,GAEI4lC,EAAA,CAAAA,CAAA,CAAyB/yD,CAAzB,CAA+B,CAA/B,CAAkCwzD,CAAlC,CAG4B,KAAhC,GAAIxzD,CAAJ,CAAW,IAAX,EAAoBpd,CAApB,CAA2B,CAA3B,EAEgD,CAFhD,IAEQ,CAAAs0D,GAAA,CAAcuc,CAAd,CAAqB,CAArB,CAAyB,CAAzB,CAFR,CAEsCtmC,CAFtC,GAIQ4lC,EAAA,CAAAA,CAAA,CAAyB/yD,CAAzB,CAAgCpd,CAAhC,CAAuC,CAAvC,CAA2C,CAA3C,CAA8C,CAA9C,CAAiD4wE,CAAjD,CAlBR,CAJJ,CA2BkCe,QAAA,GAAQ,CAARA,CAAQ,CAACl8D,CAAD,CAAQm7D,CAAR,CAAcgB,CAAd,CAC1C,CASI,GAAG,CAAA/c,EAAH,CAGI,KAAM,EAAAkJ,MAAAC,EAAA,CAAkB,cAAlB,CAAN,CAIJ,IAAI6S,EAAO,CAAAvxB,EAAA,CAAQ,CAAR,CAAPuxB,GAAsB,EAC1B,EAAAvc,GAAA,CAAcuc,CAAd,CAAA,CAAsB,CACtB,EAAAtc,GAAA,CAAqBsc,CAArB,CAAA,CAA6B,CAE7B,EAAAta,EAAA,CAA2B,CAAAD,GAC3B,EAAAzB,EAAA,CAAkB,CAAA,CAClBuU,GAAA,CAAAA,CAAA,CAA2B,EAA3B,CAA+B,CAAA,CAA/B,CAAsCwH,CAAtC,EAA8C,CAA9C,CAAkDn7D,CAAlD,EAA2D,CAA3D,CAA+Dm8D,CAA/D,CAEA,MFh8IsB18B,UEg8ItB,CAxBJ,CA2B4B28B,QAAA,GAAQ,CAARA,CAAQ,CACpC,CACI,MAAO,EAAA3c,EAAP,IF3yIqB4c,EE2yIrB,IAAwB,CAAAtc,EAAxB,CF3yIqBsc,EE2yIrB,EADJ,CAI4BC,QAAA,GAAQ,CAARA,CAAQ,CACpC,CACI,MAAO,EAAA7c,EAAP,IF9yIuB8c,EE8yIvB,IAAwB,CAAAxc,EAAxB,CF9yIuBwc,EE8yIvB,EADJ;AAI8BC,QAAA,EAAQ,CAARA,CAAQ,CAAC1C,CAAD,CACtC,CAEQ2C,CAAAA,CAAI,CAAAxb,EAAA,CAAY6Y,CAAZ,CAER,OAAGtP,GAAA,CAAAA,CAAA,CAAH,CAEWiS,CAFX,CAMWA,CANX,CAMe,KAVnB,CAc8BC,QAAA,GAAQ,CAARA,CAAQ,CAACtgE,CAAD,CACtC,CACOouD,EAAA,CAAAA,CAAA,CAAH,CAEI,CAAAvJ,EAAA,CFvhJgBoO,CEuhJhB,CAFJ,CAE2BjzD,CAF3B,CAMI,CAAAglD,EAAA,CFlhJeub,CEkhJf,CANJ,CAMyBvgE,CAP7B,CAW8BwgE,QAAA,EAAQ,CAARA,CAAQ,CAAC9C,CAAD,CAAM19D,CAAN,CACtC,CAEOouD,EAAA,CAAAA,CAAA,CAAH,CAEI,CAAAvJ,EAAA,CAAY6Y,CAAZ,CAFJ,EAEwB19D,CAFxB,CAMI,CAAAglD,EAAA,CAAW0Y,CAAX,EAAkB,CAAlB,CANJ,EAM4B19D,CARhC,CAY+BygE,QAAA,GAAQ,CAARA,CAAQ,CACvC,CACI,MAAOrS,GAAA,CAAAA,CAAA,CAAA,CAAqB,EAAE,CAAAvJ,EAAA,CF9iJVoO,CE8iJU,CAAvB,CAA8C,EAAE,CAAAjO,EAAA,CFriJpCub,CEqiJoC,CAD3D,CAIAj3C,CAAA1U,GAAA,CAAmC8rD,QAAQ,EAC3C,CACI,IAAAnb,GAAA,EA3pJWob,CA0pJf,CAI0BC,SAAA,GAAQ,CAAC5gE,CAAD,CAClC,CAKI,MAAoB,IAApB,IAJgBA,CAIhB,GAJ0B,EAI1B,CAJgC,GAIhC,GAAiD,CAAjD,IAHwBA,CAGxB,GAHkC,EAGlC,CAHwC,CAGxC,GAAyE,CAAzE,EAFwBA,CAExB,GAFkC,CAElC,CAFuC,OAEvC,CALJ,CASqB,WAArB,GAAG,MAAOjM,OAAV,CAEIA,MAAA,IAFJ,CAEoB0Y,CAFpB,CAI0B,WAArB,GAAG,MAAOo0D,OAAV,EAA8D,WAA9D,GAAoC,MAAOA,OAAAC,QAA3C,CAEDD,MAAAC,QAAA,IAFC,CAEuBr0D,CAFvB,CAI4B,UAJ5B,GAIG,MAAOs0D,cAJV,GAMDC,IAAA,IANC,CAMav0D,CANb,C,CqB5rJJ,SAAQ,EACT,CACIA,CAAAxf,UAAAqhE,EAAA,CAA8B95D,KAAA,CAAM,GAAN,CAC9BiY,EAAAxf,UAAAohE,EAAA,CAA8B75D,KAAA,CAAM,GAAN,CAC9BiY,EAAAxf,UAAAwhE,EAAA,CAA0Bj6D,KAAA,CAAM,GAAN,CAC1BiY,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB4HpBkc,CuB5HoB,CAAnC,CAAuD58D,CAAA0gD,EAAA,CvB+HxCmc,EuB/HwC,CAAvD,CAA4E,KAA5E,EAAsF,CAD1F,CAGA10D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBwHpBkc,CuBxHoB,CAAnC,CAAuD58D,CAAA0gD,EAAA,CvB2HxCmc,EuB3HwC,CAAvD,CAA4E78D,CAAA0pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBoHpBkc,CuBpHoB,CAAnC,CAAuD58D,CAAA0gD,EAAA,CvBuHxCmc,EuBvHwC,CAAvD,CAA4E78D,CAAA2pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBgHpBkc,CuBhHoB,CAAnC,CAAuD58D,CAAA0gD,EAAA,CvBoHxCoc,EuBpHwC,CAAvD,CAA4E,KAA5E,EAAsF,CAD1F,CAGA30D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB4GpBkc,CuB5GoB,CAAnC,CAAuD58D,CAAA0gD,EAAA,CvBgHxCoc,EuBhHwC,CAAvD,CAA4E98D,CAAA0pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBwGpBkc,CuBxGoB,CAAnC,CAAuD58D,CAAA0gD,EAAA,CvB4GxCoc,EuB5GwC,CAAvD;AAA4E98D,CAAA2pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBsGpBsc,EuBtGoB,CAAnC,CAAuDh9D,CAAA0gD,EAAA,CvBuGxCmc,EuBvGwC,CAAvD,CAA4E,KAA5E,EAAsF,CAD1F,CAGA10D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBkGpBsc,EuBlGoB,CAAnC,CAAuDh9D,CAAA0gD,EAAA,CvBmGxCmc,EuBnGwC,CAAvD,CAA4E78D,CAAA0pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB8FpBsc,EuB9FoB,CAAnC,CAAuDh9D,CAAA0gD,EAAA,CvB+FxCmc,EuB/FwC,CAAvD,CAA4E78D,CAAA2pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB0FpBsc,EuB1FoB,CAAnC,CAAuDh9D,CAAA0gD,EAAA,CvB4FxCoc,EuB5FwC,CAAvD,CAA4E,KAA5E,EAAsF,CAD1F,CAGA30D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBsFpBsc,EuBtFoB,CAAnC,CAAuDh9D,CAAA0gD,EAAA,CvBwFxCoc,EuBxFwC,CAAvD,CAA4E98D,CAAA0pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBkFpBsc,EuBlFoB,CAAnC,CAAuDh9D,CAAA0gD,EAAA,CvBoFxCoc,EuBpFwC,CAAvD,CAA4E98D,CAAA2pD,GAAA,EAA5E,CAAgG,KAAhG,EAA0G,CAD9G,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB+EpBmc,EuB/EoB,CAAnC;AAAwD,KAAxD,EAAkE,CADtE,CAGA10D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB2EpBmc,EuB3EoB,CAAnC,CAAwD78D,CAAA0pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBuEpBmc,EuBvEoB,CAAnC,CAAwD78D,CAAA2pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBoEpBoc,EuBpEoB,CAAnC,CAAwD,KAAxD,EAAkE,CADtE,CAGA30D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBgEpBoc,EuBhEoB,CAAnC,CAAwD98D,CAAA0pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvB4DpBoc,EuB5DoB,CAAnC,CAAwD98D,CAAA2pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBsDpBsc,EuBtDoB,CAAnC,CAAwD,KAAxD,EAAkE,CADtE,CAGA70D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBkDpBsc,EuBlDoB,CAAnC,CAAwDh9D,CAAA0pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP;CAAmCA,CAAA0gD,EAAA,CvB8CpBsc,EuB9CoB,CAAnC,CAAwDh9D,CAAA2pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAxhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBwCpBkc,CuBxCoB,CAAnC,CAAwD,KAAxD,EAAkE,CADtE,CAGAz0D,EAAAxf,UAAAqhE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBoCpBkc,CuBpCoB,CAAnC,CAAwD58D,CAAA0pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAvhD,EAAAxf,UAAAqhE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,EAAmCA,CAAA0gD,EAAA,CvBgCpBkc,CuBhCoB,CAAnC,CAAwD58D,CAAA2pD,GAAA,EAAxD,CAA4E,KAA5E,EAAsF,CAD1F,CAGAxhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBgBjBgE,CuBhBiB,CAAjC,CAAwD,CAD5D,CAGAp8C,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBYjBgE,CuBZiB,CAAjC,CAAwDvkD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBQjBgE,CuBRiB,CAAjC,CAAwDvkD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBKjBoO,CuBLiB,CAAjC,CAAwD,CAD5D,CAGAxmD,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBCjBoO,CuBDiB,CAAjC,CAAwD3uD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA;AAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBHjBoO,CuBGiB,CAAjC,CAAwD3uD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBNjBsO,CuBMiB,CAAjC,CAAwD,CAD5D,CAGA1mD,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBVjBsO,CuBUiB,CAAjC,CAAwD7uD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBdjBsO,CuBciB,CAAjC,CAAwD7uD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBjBjBiE,CuBiBiB,CAAjC,CAAwD,CAD5D,CAGAr8C,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBrBjBiE,CuBqBiB,CAAjC,CAAwDxkD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBzBjBiE,CuByBiB,CAAjC,CAAwDxkD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB3BjB0O,CuB2BiB,CAAjC,CAAwD,CAD5D,CAGA9mD,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB/BjB0O,CuB+BiB,CAAjC,CAAwDjvD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA;AAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBnCjB0O,CuBmCiB,CAAjC,CAAwDjvD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBtCjB4O,CuBsCiB,CAAjC,CAAwD,CAD5D,CAGAhnD,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB1CjB4O,CuB0CiB,CAAjC,CAAwDnvD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB9CjB4O,CuB8CiB,CAAjC,CAAwDnvD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBjDjB8O,CuBiDiB,CAAjC,CAAwD,CAD5D,CAGAlnD,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBrDjB8O,CuBqDiB,CAAjC,CAAwDrvD,CAAA0pD,GAAA,EAAxD,CAA4E,CADhF,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBzDjB8O,CuByDiB,CAAjC,CAAwDrvD,CAAA4pD,EAAA,EAAxD,CAA6E,CADjF,CAIAzhD,EAAAxf,UAAAqhE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAChqD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAA2pD,GAAA,EAAjC,CAAqD,CADzD,CAGAxhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAA4pD,EAAA,EAAjC,CAAsD,CAD1D,CAGAzhD,EAAAxf,UAAAohE,EAAA,CAA4B,CAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAOi9D,GAAA,CAAAj9D,CAAA;AAAgB,CAAA,CAAhB,CAAP,CAAgC,CADpC,CAGAmI,EAAAxf,UAAAohE,EAAA,CAA4B,EAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAOi9D,GAAA,CAAAj9D,CAAA,CAAgB,CAAA,CAAhB,CAAP,CAA+BA,CAAA0pD,GAAA,EAA/B,CAAmD,CADvD,CAGAvhD,EAAAxf,UAAAohE,EAAA,CAA4B,GAA5B,CAAA,CAAwC,QAAQ,CAAC/pD,CAAD,CAChD,CACI,MAAOi9D,GAAA,CAAAj9D,CAAA,CAAgB,CAAA,CAAhB,CAAP,CAA+BA,CAAA4pD,EAAA,EAA/B,CAAoD,CADxD,CAGA,KAAI,IAAI32C,EAAM,CAAd,CAAuB,CAAvB,CAAiBA,CAAjB,CAA0BA,CAAA,EAA1B,CAEI,IAAI,IAAIC,EAAO,CAAf,CAAyB,CAAzB,CAAkBA,CAAlB,CAA4BA,CAAA,EAA5B,CAGI,IADA,IAAIhH,EAAI+G,CAAJ/G,CAAUgH,CAAVhH,EAAkB,CAAtB,CACQrgB,EAAI,CAAZ,CAAmB,CAAnB,CAAeA,CAAf,CAAsBA,CAAA,EAAtB,CAEIsc,CAAAxf,UAAAohE,EAAA,CAA4B79C,CAA5B,CAAgCrgB,CAAhC,EAAqC,CAArC,CACA,CAD0Csc,CAAAxf,UAAAohE,EAAA,CAA4B79C,CAA5B,CAC1C,CAAA/D,CAAAxf,UAAAqhE,EAAA,CAA4B99C,CAA5B,CAAgCrgB,CAAhC,EAAqC,CAArC,CAAA,CAA0Csc,CAAAxf,UAAAqhE,EAAA,CAA4B99C,CAA5B,CAKtD/D,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBtGSgE,CuBsGT,CAAP,CAA8BoY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBtGxCgE,CuBsGwC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB1GSgE,CuB0GT,CAAP,CAA8BoY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBzGxCoO,CuByGwC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB9GSgE,CuB8GT,CAAP,CAA8BoY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB5GxCsO,CuB4GwC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBlHSgE,CuBkHT,CAAP,CAA8BoY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/GxCiE,CuB+GwC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBtHSgE,CuBsHT,CAAP,CAA8BwY,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBlHxCiM,CuBkHwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvB1HSgE,CuB0HT,CAAP,EAA+B2F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrH/C0O,CuBqH+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB9HSgE,CuB8HT,CAAP,CAA8BoY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBxHxC4O,CuBwHwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBlISgE,CuBkIT,CAAP,CAA8BoY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB3HxC8O,CuB2HwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBtISgE,CuBsIT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtI7CgE,CuBsI6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB1ISgE,CuB0IT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzI7CoO,CuByI6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB9ISgE,CuB8IT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5I7CsO,CuB4I6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBlJSgE,CuBkJT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/I7CiE,CuB+I6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBtJSgE,CuBsJT,CAAP,EAA8B,CAA9B,EAAmCwY,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlJ7CiM,CuBkJ6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvB1JSgE,CuB0JT,CAAP,EAA8B,CAA9B,GAAoC2F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrJpD0O,CuBqJoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB9JSgE,CuB8JT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxJ7C4O,CuBwJ6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBlKSgE,CuBkKT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3J7C8O,CuB2J6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBtKSgE,CuBsKT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtK7CgE,CuBsK6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB1KSgE,CuB0KT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzK7CoO,CuByK6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB9KSgE,CuB8KT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5K7CsO,CuB4K6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBlLSgE,CuBkLT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/K7CiE,CuB+K6C,CAA7D;AAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBtLSgE,CuBsLT,CAAP,EAA8B,CAA9B,EAAmCwY,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlL7CiM,CuBkL6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvB1LSgE,CuB0LT,CAAP,EAA8B,CAA9B,GAAoC2F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrLpD0O,CuBqLoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB9LSgE,CuB8LT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxL7C4O,CuBwL6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBlMSgE,CuBkMT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3L7C8O,CuB2L6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBtMSgE,CuBsMT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtM7CgE,CuBsM6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB1MSgE,CuB0MT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzM7CoO,CuByM6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB9MSgE,CuB8MT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5M7CsO,CuB4M6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBlNSgE,CuBkNT,CAAP;AAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/M7CiE,CuB+M6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBtNSgE,CuBsNT,CAAP,EAA8B,CAA9B,EAAmCwY,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlN7CiM,CuBkN6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvB1NSgE,CuB0NT,CAAP,EAA8B,CAA9B,GAAoC2F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrNpD0O,CuBqNoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB9NSgE,CuB8NT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxN7C4O,CuBwN6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBlOSgE,CuBkOT,CAAP,EAA8B,CAA9B,EAAmCoY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3N7C8O,CuB2N6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBrOSoO,CuBqOT,CAAP,CAA8BgO,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBtOxCgE,CuBsOwC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,CAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBzOSoO,CuByOT,CAAP,CAA8BgO,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBzOxCoO,CuByOwC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB7OSoO,CuB6OT,CAAP,CAA8BgO,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB5OxCsO,CuB4OwC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBjPSoO,CuBiPT,CAAP;AAA8BgO,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/OxCiE,CuB+OwC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBrPSoO,CuBqPT,CAAP,CAA8BoO,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBlPxCiM,CuBkPwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvBzPSoO,CuByPT,CAAP,EAA+BzE,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrP/C0O,CuBqP+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB7PSoO,CuB6PT,CAAP,CAA8BgO,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBxPxC4O,CuBwPwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBjQSoO,CuBiQT,CAAP,CAA8BgO,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB3PxC8O,CuB2PwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrQSoO,CuBqQT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtQ7CgE,CuBsQ6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzQSoO,CuByQT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzQ7CoO,CuByQ6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7QSoO,CuB6QT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5Q7CsO,CuB4Q6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjRSoO,CuBiRT,CAAP;AAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/Q7CiE,CuB+Q6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrRSoO,CuBqRT,CAAP,EAA8B,CAA9B,EAAmCoO,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlR7CiM,CuBkR6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBzRSoO,CuByRT,CAAP,EAA8B,CAA9B,GAAoCzE,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrRpD0O,CuBqRoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7RSoO,CuB6RT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxR7C4O,CuBwR6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjSSoO,CuBiST,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3R7C8O,CuB2R6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrSSoO,CuBqST,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtS7CgE,CuBsS6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzSSoO,CuByST,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzS7CoO,CuByS6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7SSoO,CuB6ST,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5S7CsO,CuB4S6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjTSoO,CuBiTT,CAAP;AAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/S7CiE,CuB+S6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrTSoO,CuBqTT,CAAP,EAA8B,CAA9B,EAAmCoO,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlT7CiM,CuBkT6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBzTSoO,CuByTT,CAAP,EAA8B,CAA9B,GAAoCzE,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrTpD0O,CuBqToD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7TSoO,CuB6TT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxT7C4O,CuBwT6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjUSoO,CuBiUT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3T7C8O,CuB2T6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrUSoO,CuBqUT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtU7CgE,CuBsU6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzUSoO,CuByUT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzU7CoO,CuByU6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7USoO,CuB6UT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5U7CsO,CuB4U6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjVSoO,CuBiVT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/U7CiE,CuB+U6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrVSoO,CuBqVT,CAAP,EAA8B,CAA9B,EAAmCoO,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlV7CiM,CuBkV6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBzVSoO,CuByVT,CAAP,EAA8B,CAA9B,GAAoCzE,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrVpD0O,CuBqVoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7VSoO,CuB6VT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxV7C4O,CuBwV6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjWSoO,CuBiWT,CAAP,EAA8B,CAA9B,EAAmCgO,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3V7C8O,CuB2V6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBpWSsO,CuBoWT,CAAP,CAA8B8N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBtWxCgE,CuBsWwC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBxWSsO,CuBwWT,CAAP,CAA8B8N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBzWxCoO,CuByWwC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB5WSsO,CuB4WT,CAAP,CAA8B8N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB5WxCsO,CuB4WwC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBhXSsO,CuBgXT,CAAP,CAA8B8N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/WxCiE,CuB+WwC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBpXSsO,CuBoXT,CAAP,CAA8BkO,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBlXxCiM,CuBkXwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvBxXSsO,CuBwXT,CAAP,EAA+B3E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrX/C0O,CuBqX+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB5XSsO,CuB4XT,CAAP,CAA8B8N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBxXxC4O,CuBwXwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBhYSsO,CuBgYT,CAAP,CAA8B8N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB3XxC8O,CuB2XwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBpYSsO,CuBoYT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtY7CgE,CuBsY6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBxYSsO,CuBwYT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzY7CoO,CuByY6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB5YSsO,CuB4YT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5Y7CsO,CuB4Y6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBhZSsO,CuBgZT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/Y7CiE,CuB+Y6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBpZSsO,CuBoZT,CAAP,EAA8B,CAA9B,EAAmCkO,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlZ7CiM,CuBkZ6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBxZSsO,CuBwZT,CAAP,EAA8B,CAA9B,GAAoC3E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrZpD0O,CuBqZoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB5ZSsO,CuB4ZT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxZ7C4O,CuBwZ6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBhaSsO,CuBgaT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3Z7C8O,CuB2Z6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBpaSsO,CuBoaT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBta7CgE,CuBsa6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBxaSsO,CuBwaT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBza7CoO,CuBya6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB5aSsO,CuB4aT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5a7CsO,CuB4a6C,CAA7D;AAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBhbSsO,CuBgbT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/a7CiE,CuB+a6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBpbSsO,CuBobT,CAAP,EAA8B,CAA9B,EAAmCkO,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlb7CiM,CuBkb6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBxbSsO,CuBwbT,CAAP,EAA8B,CAA9B,GAAoC3E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrbpD0O,CuBqboD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB5bSsO,CuB4bT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxb7C4O,CuBwb6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBhcSsO,CuBgcT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3b7C8O,CuB2b6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBpcSsO,CuBocT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtc7CgE,CuBsc6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBxcSsO,CuBwcT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzc7CoO,CuByc6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB5cSsO,CuB4cT,CAAP;AAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5c7CsO,CuB4c6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBhdSsO,CuBgdT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/c7CiE,CuB+c6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBpdSsO,CuBodT,CAAP,EAA8B,CAA9B,EAAmCkO,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBld7CiM,CuBkd6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBxdSsO,CuBwdT,CAAP,EAA8B,CAA9B,GAAoC3E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrdpD0O,CuBqdoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB5dSsO,CuB4dT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxd7C4O,CuBwd6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBheSsO,CuBgeT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3d7C8O,CuB2d6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBneSiE,CuBmeT,CAAP,CAA8BmY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBtexCgE,CuBsewC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBveSiE,CuBueT,CAAP,CAA8BmY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBzexCoO,CuByewC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB3eSiE,CuB2eT,CAAP;AAA8BmY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB5exCsO,CuB4ewC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB/eSiE,CuB+eT,CAAP,CAA8BmY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/exCiE,CuB+ewC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBnfSiE,CuBmfT,CAAP,CAA8BuY,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBlfxCiM,CuBkfwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvBvfSiE,CuBufT,CAAP,EAA+B0F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrf/C0O,CuBqf+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB3fSiE,CuB2fT,CAAP,CAA8BmY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBxfxC4O,CuBwfwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB/fSiE,CuB+fT,CAAP,CAA8BmY,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB3fxC8O,CuB2fwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBngBSiE,CuBmgBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtgB7CgE,CuBsgB6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvgBSiE,CuBugBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzgB7CoO,CuBygB6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3gBSiE,CuB2gBT,CAAP,EAA8B,CAA9B;AAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5gB7CsO,CuB4gB6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/gBSiE,CuB+gBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/gB7CiE,CuB+gB6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBnhBSiE,CuBmhBT,CAAP,EAA8B,CAA9B,EAAmCuY,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlhB7CiM,CuBkhB6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBvhBSiE,CuBuhBT,CAAP,EAA8B,CAA9B,GAAoC0F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrhBpD0O,CuBqhBoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3hBSiE,CuB2hBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxhB7C4O,CuBwhB6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/hBSiE,CuB+hBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3hB7C8O,CuB2hB6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBniBSiE,CuBmiBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtiB7CgE,CuBsiB6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBviBSiE,CuBuiBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBziB7CoO,CuByiB6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3iBSiE,CuB2iBT,CAAP;AAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5iB7CsO,CuB4iB6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/iBSiE,CuB+iBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/iB7CiE,CuB+iB6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBnjBSiE,CuBmjBT,CAAP,EAA8B,CAA9B,EAAmCuY,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBljB7CiM,CuBkjB6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBvjBSiE,CuBujBT,CAAP,EAA8B,CAA9B,GAAoC0F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrjBpD0O,CuBqjBoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3jBSiE,CuB2jBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxjB7C4O,CuBwjB6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/jBSiE,CuB+jBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3jB7C8O,CuB2jB6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBnkBSiE,CuBmkBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtkB7CgE,CuBskB6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvkBSiE,CuBukBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzkB7CoO,CuBykB6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3kBSiE,CuB2kBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5kB7CsO,CuB4kB6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/kBSiE,CuB+kBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/kB7CiE,CuB+kB6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBnlBSiE,CuBmlBT,CAAP,EAA8B,CAA9B,EAAmCuY,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBllB7CiM,CuBklB6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBvlBSiE,CuBulBT,CAAP,EAA8B,CAA9B,GAAoC0F,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrlBpD0O,CuBqlBoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3lBSiE,CuB2lBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxlB7C4O,CuBwlB6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/lBSiE,CuB+lBT,CAAP,EAA8B,CAA9B,EAAmCmY,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3lB7C8O,CuB2lB6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBtmBjBgE,CuBsmBiB,CAAjC,CAAuD,CAD3D,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBzmBjBoO,CuBymBiB,CAAjC,CAAuD,CAD3D,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB5mBjBsO,CuB4mBiB,CAAjC,CAAuD,CAD3D,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB/mBjBiE,CuB+mBiB,CAAjC,CAAuD,CAD3D,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBlnBjBiM,CuBknBiB,CAAjC,CAAuD,CAD3D,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAQA,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrnBxB0O,CuBqnBwB,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAAxF,EAA8G,CADlH,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBxnBjB4O,CuBwnBiB,CAAjC,CAAuD,CAD3D,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB3nBjB8O,CuB2nBiB,CAAjC,CAAuD,CAD3D,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBtoBjBgE,CuBsoBiB,CAAjC,CAAuD,CAD3D,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBzoBjBoO,CuByoBiB,CAAjC,CAAuD,CAD3D,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB5oBjBsO,CuB4oBiB,CAAjC,CAAuD,CAD3D,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP;AAAiCA,CAAAugD,EAAA,CvB/oBjBiE,CuB+oBiB,CAAjC,CAAuD,CAD3D,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBlpBjBiM,CuBkpBiB,CAAjC,CAAuD,CAD3D,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAQA,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrpBxB0O,CuBqpBwB,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAAxF,EAA8G,CADlH,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBxpBjB4O,CuBwpBiB,CAAjC,CAAuD,CAD3D,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB3pBjB8O,CuB2pBiB,CAAjC,CAAuD,CAD3D,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBtqBjBgE,CuBsqBiB,CAAjC,CAAuD,CAD3D,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBzqBjBoO,CuByqBiB,CAAjC,CAAuD,CAD3D,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB5qBjBsO,CuB4qBiB,CAAjC,CAAuD,CAD3D,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB/qBjBiE,CuB+qBiB,CAAjC,CAAuD,CAD3D,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBlrBjBiM,CuBkrBiB,CAAjC,CAAuD,CAD3D,CAGArkD;CAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAQA,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrrBxB0O,CuBqrBwB,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAAxF,EAA8G,CADlH,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBxrBjB4O,CuBwrBiB,CAAjC,CAAuD,CAD3D,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB3rBjB8O,CuB2rBiB,CAAjC,CAAuD,CAD3D,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBtsBjBgE,CuBssBiB,CAAjC,CAAuD,CAD3D,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBzsBjBoO,CuBysBiB,CAAjC,CAAuD,CAD3D,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB5sBjBsO,CuB4sBiB,CAAjC,CAAuD,CAD3D,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB/sBjBiE,CuB+sBiB,CAAjC,CAAuD,CAD3D,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO+8D,EAAA,CAAA/8D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBltBjBiM,CuBktBiB,CAAjC,CAAuD,CAD3D,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAQA,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrtBxB0O,CuBqtBwB,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAAxF;AAA8G,CADlH,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvBxtBjB4O,CuBwtBiB,CAAjC,CAAuD,CAD3D,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAO28D,EAAA,CAAA38D,CAAA,CAAP,CAAiCA,CAAAugD,EAAA,CvB3tBjB8O,CuB2tBiB,CAAjC,CAAuD,CAD3D,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBjuBS0O,CuBiuBT,CAAP,CAA8B0N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBtuBxCgE,CuBsuBwC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBruBS0O,CuBquBT,CAAP,CAA8B0N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBzuBxCoO,CuByuBwC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBzuBS0O,CuByuBT,CAAP,CAA8B0N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB5uBxCsO,CuB4uBwC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB7uBS0O,CuB6uBT,CAAP,CAA8B0N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/uBxCiE,CuB+uBwC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBjvBS0O,CuBivBT,CAAP,CAA8B8N,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBlvBxCiM,CuBkvBwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvBrvBS0O,CuBqvBT,CAAP,EAA+B/E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrvB/C0O,CuBqvB+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBzvBS0O,CuByvBT,CAAP;AAA8B0N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBxvBxC4O,CuBwvBwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB7vBS0O,CuB6vBT,CAAP,CAA8B0N,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB3vBxC8O,CuB2vBwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjwBS0O,CuBiwBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtwB7CgE,CuBswB6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBrwBS0O,CuBqwBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzwB7CoO,CuBywB6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzwBS0O,CuBywBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5wB7CsO,CuB4wB6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7wBS0O,CuB6wBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/wB7CiE,CuB+wB6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjxBS0O,CuBixBT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlxB7CiM,CuBkxB6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBrxBS0O,CuBqxBT,CAAP,EAA8B,CAA9B,GAAoC/E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrxBpD0O,CuBqxBoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzxBS0O,CuByxBT,CAAP;AAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxxB7C4O,CuBwxB6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7xBS0O,CuB6xBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3xB7C8O,CuB2xB6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjyBS0O,CuBiyBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtyB7CgE,CuBsyB6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBryBS0O,CuBqyBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzyB7CoO,CuByyB6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzyBS0O,CuByyBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5yB7CsO,CuB4yB6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7yBS0O,CuB6yBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/yB7CiE,CuB+yB6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBjzBS0O,CuBizBT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlzB7CiM,CuBkzB6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBrzBS0O,CuBqzBT,CAAP,EAA8B,CAA9B,GAAoC/E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrzBpD0O,CuBqzBoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBzzBS0O,CuByzBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxzB7C4O,CuBwzB6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB7zBS0O,CuB6zBT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3zB7C8O,CuB2zB6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBj0BS0O,CuBi0BT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBt0B7CgE,CuBs0B6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBr0BS0O,CuBq0BT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBz0B7CoO,CuBy0B6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBz0BS0O,CuBy0BT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB50B7CsO,CuB40B6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB70BS0O,CuB60BT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/0B7CiE,CuB+0B6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBj1BS0O,CuBi1BT,CAAP,EAA8B,CAA9B,EAAmC8N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBl1B7CiM,CuBk1B6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBr1BS0O,CuBq1BT,CAAP,EAA8B,CAA9B,GAAoC/E,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBr1BpD0O,CuBq1BoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH;AAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBz1BS0O,CuBy1BT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBx1B7C4O,CuBw1B6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB71BS0O,CuB61BT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB31B7C8O,CuB21B6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBh2BS4O,CuBg2BT,CAAP,CAA8BwN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBt2BxCgE,CuBs2BwC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBp2BS4O,CuBo2BT,CAAP,CAA8BwN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBz2BxCoO,CuBy2BwC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBx2BS4O,CuBw2BT,CAAP,CAA8BwN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB52BxCsO,CuB42BwC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB52BS4O,CuB42BT,CAAP,CAA8BwN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/2BxCiE,CuB+2BwC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBh3BS4O,CuBg3BT,CAAP,CAA8B4N,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBl3BxCiM,CuBk3BwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvBp3BS4O,CuBo3BT,CAAP,EAA+BjF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBr3B/C0O,CuBq3B+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD;CAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBx3BS4O,CuBw3BT,CAAP,CAA8BwN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBx3BxC4O,CuBw3BwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB53BS4O,CuB43BT,CAAP,CAA8BwN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB33BxC8O,CuB23BwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBh4BS4O,CuBg4BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBt4B7CgE,CuBs4B6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBp4BS4O,CuBo4BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBz4B7CoO,CuBy4B6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBx4BS4O,CuBw4BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB54B7CsO,CuB44B6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB54BS4O,CuB44BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/4B7CiE,CuB+4B6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBh5BS4O,CuBg5BT,CAAP,EAA8B,CAA9B,EAAmC4N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBl5B7CiM,CuBk5B6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBp5BS4O,CuBo5BT,CAAP,EAA8B,CAA9B,GAAoCjF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBr5BpD0O,CuBq5BoD,CAAhC;AAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBx5BS4O,CuBw5BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBx5B7C4O,CuBw5B6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB55BS4O,CuB45BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB35B7C8O,CuB25B6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBh6BS4O,CuBg6BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBt6B7CgE,CuBs6B6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBp6BS4O,CuBo6BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBz6B7CoO,CuBy6B6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBx6BS4O,CuBw6BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB56B7CsO,CuB46B6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB56BS4O,CuB46BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/6B7CiE,CuB+6B6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBh7BS4O,CuBg7BT,CAAP,EAA8B,CAA9B,EAAmC4N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBl7B7CiM,CuBk7B6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBp7BS4O,CuBo7BT,CAAP;AAA8B,CAA9B,GAAoCjF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBr7BpD0O,CuBq7BoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBx7BS4O,CuBw7BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBx7B7C4O,CuBw7B6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB57BS4O,CuB47BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB37B7C8O,CuB27B6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBh8BS4O,CuBg8BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBt8B7CgE,CuBs8B6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBp8BS4O,CuBo8BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBz8B7CoO,CuBy8B6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBx8BS4O,CuBw8BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB58B7CsO,CuB48B6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB58BS4O,CuB48BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/8B7CiE,CuB+8B6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBh9BS4O,CuBg9BT,CAAP,EAA8B,CAA9B,EAAmC4N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBl9B7CiM,CuBk9B6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD;AAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBp9BS4O,CuBo9BT,CAAP,EAA8B,CAA9B,GAAoCjF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBr9BpD0O,CuBq9BoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBx9BS4O,CuBw9BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBx9B7C4O,CuBw9B6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB59BS4O,CuB49BT,CAAP,EAA8B,CAA9B,EAAmCwN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB39B7C8O,CuB29B6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB/9BS8O,CuB+9BT,CAAP,CAA8BsN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBt+BxCgE,CuBs+BwC,CAAxD,CAA8E,CADlF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBn+BS8O,CuBm+BT,CAAP,CAA8BsN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBz+BxCoO,CuBy+BwC,CAAxD,CAA8E,CADlF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBv+BS8O,CuBu+BT,CAAP,CAA8BsN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB5+BxCsO,CuB4+BwC,CAAxD,CAA8E,CADlF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB3+BS8O,CuB2+BT,CAAP,CAA8BsN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB/+BxCiE,CuB++BwC,CAAxD,CAA8E,CADlF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB/+BS8O,CuB++BT,CAAP,CAA8B0N,CAAA,CAAA/8D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBl/BxCiM,CuBk/BwC,CAAxD,CAA8E,CADlF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD;AAAMkqD,CAAN,CACrD,CACI,MAAOlqD,EAAAugD,EAAA,CvBn/BS8O,CuBm/BT,CAAP,EAA+BnF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBr/B/C0O,CuBq/B+C,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAA/G,EAAqI,CADzI,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvBv/BS8O,CuBu/BT,CAAP,CAA8BsN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvBx/BxC4O,CuBw/BwC,CAAxD,CAA8E,CADlF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,EAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,MAAOA,EAAAugD,EAAA,CvB3/BS8O,CuB2/BT,CAAP,CAA8BsN,CAAA,CAAA38D,CAAA,CAA9B,CAAwDA,CAAAugD,EAAA,CvB3/BxC8O,CuB2/BwC,CAAxD,CAA8E,CADlF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB//BS8O,CuB+/BT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtgC7CgE,CuBsgC6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBngCS8O,CuBmgCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzgC7CoO,CuBygC6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvgCS8O,CuBugCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5gC7CsO,CuB4gC6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3gCS8O,CuB2gCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/gC7CiE,CuB+gC6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/gCS8O,CuB+gCT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBlhC7CiM,CuBkhC6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA;AAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBnhCS8O,CuBmhCT,CAAP,EAA8B,CAA9B,GAAoCnF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrhCpD0O,CuBqhCoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvhCS8O,CuBuhCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxhC7C4O,CuBwhC6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3hCS8O,CuB2hCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3hC7C8O,CuB2hC6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/hCS8O,CuB+hCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtiC7CgE,CuBsiC6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBniCS8O,CuBmiCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBziC7CoO,CuByiC6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBviCS8O,CuBuiCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5iC7CsO,CuB4iC6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3iCS8O,CuB2iCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/iC7CiE,CuB+iC6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/iCS8O,CuB+iCT,CAAP,EAA8B,CAA9B,EAAmC0N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBljC7CiM,CuBkjC6C,CAA7D;AAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBnjCS8O,CuBmjCT,CAAP,EAA8B,CAA9B,GAAoCnF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrjCpD0O,CuBqjCoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvjCS8O,CuBujCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxjC7C4O,CuBwjC6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3jCS8O,CuB2jCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3jC7C8O,CuB2jC6C,CAA7D,CAAmF,CADvF,CAGAlnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/jCS8O,CuB+jCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBtkC7CgE,CuBskC6C,CAA7D,CAAmF,CADvF,CAGAp8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBnkCS8O,CuBmkCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBzkC7CoO,CuBykC6C,CAA7D,CAAmF,CADvF,CAGAxmD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvkCS8O,CuBukCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB5kC7CsO,CuB4kC6C,CAA7D,CAAmF,CADvF,CAGA1mD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3kCS8O,CuB2kCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB/kC7CiE,CuB+kC6C,CAA7D,CAAmF,CADvF,CAGAr8C,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB/kCS8O,CuB+kCT,CAAP;AAA8B,CAA9B,EAAmC0N,CAAA,CAAA/8D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBllC7CiM,CuBklC6C,CAA7D,CAAmF,CADvF,CAGArkD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CAAMkqD,CAAN,CACrD,CACI,OAAOlqD,CAAAugD,EAAA,CvBnlCS8O,CuBmlCT,CAAP,EAA8B,CAA9B,GAAoCnF,CAAA,CAAM6S,CAAA,CAAA/8D,CAAA,CAAN,CAAgCA,CAAAugD,EAAA,CvBrlCpD0O,CuBqlCoD,CAAhC,CAAsD0N,CAAA,CAAA38D,CAAA,CAAtD,CAAgFA,CAAA4pD,EAAA,EAApH,EAA0I,CAD9I,CAGAzhD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvBvlCS8O,CuBulCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvBxlC7C4O,CuBwlC6C,CAA7D,CAAmF,CADvF,CAGAhnD,EAAAxf,UAAAwhE,EAAA,CAAwB,GAAxB,CAAA,CAA6C,QAAQ,CAACnqD,CAAD,CACrD,CACI,OAAOA,CAAAugD,EAAA,CvB3lCS8O,CuB2lCT,CAAP,EAA8B,CAA9B,EAAmCsN,CAAA,CAAA38D,CAAA,CAAnC,CAA6DA,CAAAugD,EAAA,CvB3lC7C8O,CuB2lC6C,CAA7D,CAAmF,CADvF,CAvtCJ,CADC,CAAD,E,CCUA6N,QAASA,GAAsB,CAACrzE,CAAD,CAAO00B,CAAP,CAC/B,CAGI,MAAU,EAAV,CAAG10B,CAAH,EAEY00B,CAFZ,CAEsB,IAFtB,IAEiC,CAAC10B,CAFlC,EAE0C,CAF1C,GAMY,CAAC00B,CANb,CAMuB,IANvB,GAMiC10B,CATrC,CAaAszE,QAASA,GAAuB,CAACtzE,CAAD,CAAOuzE,CAAP,CAAcC,CAAd,CAChC,CAGI,MAAO/yE,KAAAqM,IAAA,CACCumE,EAAA,CAAuBrzE,CAAvB,CAA6BuzE,CAA7B,CADD,CAECF,EAAA,CAAuBrzE,CAAvB,CAA6BwzE,CAA7B,CAFD,CAHX,C,CCXqBC,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAC,IAAA,CAASF,CAAT,CAAeC,CAAf,CzBgGvCE,CyBhGuC,CAAT,CACnBC,QAAA,GAAQ,CAARA,CAAQ,CAACJ,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAC,IAAA,CAASF,CAAT,CAAeC,CAAf,CzBiGvCI,EyBjGuC,CAAT,CACpBC,QAAA,GAAQ,CAARA,CAAQ,CAACN,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAC,IAAA,CAASF,CAAT,CAAeC,CAAf,CzBkGvCM,EyBlGuC,CAAT,CAErBC,QAAA,GAAQ,CAARA,CAAQ,CAACR,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAOQ,GAAA,CAAAA,CAAA,CAAST,CAAT,CAAeC,CAAf,CzB4FvCE,CyB5FuC,CAAT,CACnBO,QAAA,GAAQ,CAARA,CAAQ,CAACV,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAOQ,GAAA,CAAAA,CAAA,CAAST,CAAT,CAAeC,CAAf,CzB6FvCI,EyB7FuC,CAAT,CACpBM,QAAA,GAAQ,CAARA,CAAQ,CAACX,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAOQ,GAAA,CAAAA,CAAA,CAAST,CAAT,CAAeC,CAAf,CzB8FvCM,EyB9FuC,CAAT,CAErBK,QAAA,GAAQ,CAARA,CAAQ,CAACZ,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAY,IAAA,CAASb,CAAT,CAAeC,CAAf,CzBwFvCE,CyBxFuC,CAAT,CACnBW,QAAA,GAAQ,CAARA,CAAQ,CAACd,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAY,IAAA,CAASb,CAAT,CAAeC,CAAf,CzByFvCI,EyBzFuC,CAAT,CACpBU,QAAA,GAAQ,CAARA,CAAQ,CAACf,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAY,IAAA,CAASb,CAAT,CAAeC,CAAf,CzB0FvCM,EyB1FuC,CAAT,CAMrBS,QAAA,GAAQ,CAARA,CAAQ,CAAChB,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAOgB,GAAA,CAAAA,CAAA,CAASjB,CAAT,CAAeC,CAAf,CzBgFvCE,CyBhFuC,CAAT,CACnBe,QAAA,GAAQ,CAARA,CAAQ,CAAClB,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAOgB,GAAA,CAAAA,CAAA,CAASjB,CAAT,CAAeC,CAAf,CzBiFvCI,EyBjFuC,CAAT,CACpBc,QAAA,GAAQ,CAARA,CAAQ,CAACnB,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAOgB,GAAA,CAAAA,CAAA,CAASjB,CAAT,CAAeC,CAAf,CzBkFvCM,EyBlFuC,CAAT,CAE1C,CAAA,CAAA,CAAA,UAAA94C;CAAAy4C,IAAA,CAAoBkB,QAAQ,CAACC,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC5B,CAGI,IAAA1f,GAAA,CAAgBwf,CAChB,KAAAzf,GAAA,CAAgB0f,CAChB,KAAA5f,EAAA,CAAuB,IAAAD,EAAvB,CAA0C4f,CAA1C,CAAyDC,CAAzD,CAA0E,CAE1E,KAAA3f,EAAA,CAAoB4f,CACpB,KAAA/tD,EAAA,CzB2DQguD,IyBzDR,OAAO,KAAA/f,EAVX,CAaoBggB,SAAA,GAAQ,CAARA,CAAQ,CAACJ,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC5B,CACI,IAAIG,EAAK,CAAAtT,GAAA,EACT,EAAAvM,GAAA,CAAgBwf,CAChB,EAAAzf,GAAA,CAAgB0f,CAChB,EAAA5f,EAAA,CAAuB,CAAAD,EAAvB,EAA2C4f,CAA3C,CAA0DC,CAA1D,CAA2E,CAA3E,EAAgFI,CAAhF,CAAqF,CAErF,EAAA/f,EAAA,CAAoB4f,CACpB,EAAA/tD,EAAA,CzB8CQguD,IyB5CR,OAAO,EAAA/f,EATX,CAYAh6B,CAAAo5C,IAAA,CAAoBc,QAAQ,CAACN,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC5B,CACI,IAAA7f,EAAA,CAAuB2f,CACvB,KAAAzf,GAAA,CAAgB0f,CAChB,KAAAzf,GAAA,CAAgB,IAAAJ,EAAhB,CAAmC4f,CAAnC,CAAkDC,CAAlD,CAAmE,CAEnE,KAAA3f,EAAA,CAAoB4f,CACpB,KAAA/tD,EAAA,CzBkCQguD,IyBhCR,OAAO,KAAA/f,EARX,CAWoBmgB,SAAA,GAAQ,CAARA,CAAQ,CAACP,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC5B,CACI,IAAIG,EAAK,CAAAtT,GAAA,EACT,EAAA1M,EAAA,CAAuB2f,CACvB,EAAAzf,GAAA,CAAgB0f,CAChB,EAAAzf,GAAA,CAAgB,CAAAJ,EAAhB,CAAmC4f,CAAnC,CAAkDC,CAAlD,CAAmEI,CAAnE,CAAwE,CACxE,EAAA/f,EAAA,CAAoB4f,CAEpB,EAAA/tD,EAAA,CzBqBQguD,IyBnBR,OAAO,EAAA/f,EATX,CAwBoBogB,QAAA,GAAQ,CAARA,CAAQ,CAACR,CAAD,CAAeE,CAAf,CAC5B,CACI,CAAA9tD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAiC,CAAA26C,GAAA,EACjC,EAAAvM,GAAA,CAAgBwf,CAChB,EAAAzf,GAAA,CAAgB,CAChB,EAAAF,EAAA,CAAuB,CAAAD,EAAvB,CAA0C4f,CAA1C,CAAyD,CAAzD,CAA6D,CAC7D,EAAA1f,EAAA,CAAoB4f,CAEpB,EAAA/tD,EAAA,CAAqB,IAErB,OAAO,EAAAiuC,EATX;AAYoBqgB,QAAA,GAAQ,CAARA,CAAQ,CAACT,CAAD,CAAeE,CAAf,CAC5B,CACI,CAAA9tD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAiC,CAAA26C,GAAA,EACjC,EAAA1M,EAAA,CAAuB2f,CACvB,EAAAzf,GAAA,CAAgB,CAChB,EAAAC,GAAA,CAAgB,CAAAJ,EAAhB,CAAmC4f,CAAnC,CAAkD,CAAlD,CAAsD,CACtD,EAAA1f,EAAA,CAAoB4f,CAEpB,EAAA/tD,EAAA,CAAqB,IAErB,OAAO,EAAAiuC,EATX,CAoBoBsgB,QAAA,GAAQ,CAARA,CAAQ,CAACV,CAAD,CAAeE,CAAf,CAC5B,CACI,CAAA1f,GAAA,CAAgB,CAAAJ,EAAhB,CAAmC,CAAC4f,CAApC,CAAmD,CAEnD,EAAA7tD,EAAA,CzBlCQguD,IyBmCR,EAAA9f,EAAA,CAAuB,CACvB,EAAAE,GAAA,CAAgByf,CAChB,EAAA1f,EAAA,CAAoB4f,CAEpB,OAAO,EAAA9f,EARX,CAgH2BugB,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAWC,CAAX,CACnC,CAIiBD,CAAT7mE,EAAoB8mE,CAExB,EAAAzgB,EAAA,CAAmBrmD,CAAnB,CAA4B,KAC5B,EAAAumD,EAAA,CzB7IQ0e,EyBiJJ,EAAA5sD,MAAA,CAFQ,KAAZ,CAAGrY,CAAH,EAAgC,MAAhC,CAAsBA,CAAtB,CAEI,CAAAqY,MAFJ,CAEkB,IAFlB,CAMI,CAAAA,MANJ,CAMkB,KAElB,EAAAD,EAAA,CAAqB,GAErB,OAAOpY,EAnBX,CAmF2B+mE,QAAA,GAAQ,CAARA,CAAQ,CAACF,CAAD,CAAWC,CAAX,CACnC,CAII,IAAIE,EAAKrzD,EAAA,CAAiBkzD,CAAjB,CAA2BC,CAA3B,CACLG,EAAAA,CrB5GGt1E,IAAAC,MAAA,CqB4GoBi1E,CrB5GpB,CqB4G8BC,CrB5G9B,CAAmB,UAAnB,CqB4GHG,CrB5GqC,CqB8GzC,EAAA5gB,EAAA,CAAmB2gB,CACnB,EAAAzgB,EAAA,CzBhOQ4e,EyBoOJ,EAAA9sD,MAAA,CAFD4uD,CAAH,GAAWD,CAAX,EAAiB,EAAjB,CAEI,CAAA3uD,MAFJ,CAEkB,KAFlB,CAMI,CAAAA,MANJ,CAMkB,IAElB,EAAAD,EAAA,CAAqB,GAErB,OAAO4uD,EApBX;AA8HyBE,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAUC,CAAV,CAAoBC,CAApB,CACjC,CACI,CAAGD,CAAH,EAAeC,CAAf,EAAgC,CAAhC,GAAuBA,CAAvB,GAGIC,EAAA,CAAAA,CAAA,CAGJ,KAAItnE,EAAS,CAEb,IAAc,OAAd,CAAGonE,CAAH,CACA,CAII,IAFA,IAAIl0E,EAAI,EAAR,CACIq0E,EAAIF,CACR,CAAME,CAAN,CAAUH,CAAV,CAAA,CAEIG,CACA,IADO,CACP,CAAAr0E,CAAA,EAEJ,KAAA,CAAiB,OAAjB,CAAMk0E,CAAN,CAAA,CACA,CACI,GAAGA,CAAH,EAAeG,CAAf,CACA,CACIH,CAAA,EAAYG,CACZ,KAAI9B,EAAM4B,CAAN5B,EAAcvyE,CAAduyE,GAAoB,CACrBA,EAAH,CAAS0B,CAAT,EAEIC,CAAA,EAEJD,EAAA,CAAUA,CAAV,CAAoB1B,CAApB,GAA4B,CAC5BzlE,EAAA,EAAU,CAAV,EAAe9M,CARnB,CAUAA,CAAA,EACAq0E,EAAA,GAAM,CAbV,CAeAvnE,CAAA,IAAY,CAzBhB,CA4BUmnE,CAANK,EAA2B,UAA3BA,CAAgBJ,CAIpB,EAAAlgB,EAAA,CAAkB,CAAlB,CAAA,CAFAlnD,CAEA,EAFUwnE,CAEV,CAFgBH,CAEhB,CAFuB,CAEvB,CACA,EAAAngB,EAAA,CAAkB,CAAlB,CAAA,CAJUsgB,CAIV,CAJgBH,CAKhB,OAAO,EAAAngB,EA5CX,CAyTqBugB,QAAA,GAAQ,CAARA,CAAQ,CAAC7C,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAA6C,IAAA,CAAS9C,CAAT,CAAeC,CAAf,CzBppBvCE,CyBopBuC,CAAT,CACnB4C,QAAA,GAAQ,CAARA,CAAQ,CAAC/C,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAA6C,IAAA,CAAS9C,CAAT,CAAeC,CAAf,CzBnpBvCI,EyBmpBuC,CAAT,CACpB2C,QAAA,GAAQ,CAARA,CAAQ,CAAChD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAA6C,IAAA,CAAS9C,CAAT,CAAeC,CAAf,CzBlpBvCM,EyBkpBuC,CAAT,CAMtB0C,QAAA,GAAQ,CAARA,CAAQ,CAACjD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAiD,GAAA,CAAQlD,CAAR,CAAcC,CAAd,CzB5pBtCE,CyB4pBsC,CAAT,CACnBgD,QAAA,GAAQ,CAARA,CAAQ,CAACnD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAiD,GAAA,CAAQlD,CAAR,CAAcC,CAAd,CzB3pBtCI,EyB2pBsC,CAAT,CACpB+C,QAAA,GAAQ,CAARA,CAAQ,CAACpD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAiD,GAAA,CAAQlD,CAAR,CAAcC,CAAd,CzB1pBtCM,EyB0pBsC,CAAT;AAEpB8C,QAAA,GAAQ,CAARA,CAAQ,CAACrD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAqD,IAAA,CAAStD,CAAT,CAAeC,CAAf,CzBhqBvCE,CyBgqBuC,CAAT,CACnBoD,QAAA,GAAQ,CAARA,CAAQ,CAACvD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAqD,IAAA,CAAStD,CAAT,CAAeC,CAAf,CzB/pBvCI,EyB+pBuC,CAAT,CACpBmD,QAAA,GAAQ,CAARA,CAAQ,CAACxD,CAAD,CAAOC,CAAP,CAAY,CAAE,MAAO,EAAAqD,IAAA,CAAStD,CAAT,CAAeC,CAAf,CzB9pBvCM,EyB8pBuC,CAAT,CAE1C94C,CAAAq7C,IAAA,CAAoBW,QAAQ,CAACpC,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC5B,CACI,IAAA9f,EAAA,CAAmB4f,CAAnB,CAAkCC,CAElC,KAAA3f,EAAA,CAAoB4f,CACpB,KAAA9tD,MAAA,EAAc,KACd,KAAAD,EAAA,CAAqB,GAErB,OAAO,KAAAiuC,EAPX,CAUAh6B,EAAAy7C,GAAA,CAAmBQ,QAAQ,CAACrC,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC3B,CACI,IAAA9f,EAAA,CAAmB4f,CAAnB,CAAkCC,CAElC,KAAA3f,EAAA,CAAoB4f,CACpB,KAAA9tD,MAAA,EAAc,KACd,KAAAD,EAAA,CAAqB,GAErB,OAAO,KAAAiuC,EAPX,CAUAh6B,EAAA67C,IAAA,CAAoBK,QAAQ,CAACtC,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CAC5B,CACI,IAAA9f,EAAA,CAAmB4f,CAAnB,CAAkCC,CAElC,KAAA3f,EAAA,CAAoB4f,CACpB,KAAA9tD,MAAA,EAAc,KACd,KAAAD,EAAA,CAAqB,GAErB,OAAO,KAAAiuC,EAPX,CAeqBmiB,SAAA,GAAQ,CAARA,CAAQ,CAACvC,CAAD,CAAe7wE,CAAf,CAC7B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAEX7wE,EAAA,EAAS,CAEL4K,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiCimE,CAAjCjmE,EAAkD,CAAlDA,CAAsD5K,CAE1D,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,CACwB,CADxB,EAEeA,CAFf,EAEyB,EAFzB,CAE8BA,CAF9B,EAEwC,CAFxC,EzB3vB0ByoE,IyB+vB1B,OAAOzoE,EAdX;AAiBsB0oE,QAAA,GAAQ,CAARA,CAAQ,CAACzC,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAEX7wE,EAAA,EAAS,EAEL4K,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiCimE,CAAjCjmE,EAAkD,EAAlDA,CAAuD5K,CAE3D,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,CACwB,CADxB,EAEeA,CAFf,EAEyB,EAFzB,CAE8BA,CAF9B,EAEwC,CAFxC,EzB7wB0ByoE,IyBixB1B,OAAOzoE,EAdX,CAiBsB2oE,QAAA,GAAQ,CAARA,CAAQ,CAAC1C,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGPjmE,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiCimE,CAAjCjmE,GAAmD,EAAnDA,CAAwD5K,CAE5D,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,CACwB,CADxB,EAEeA,CAFf,EAEyB,EAFzB,CAE8BA,CAF9B,EAEwC,EAFxC,EzB9xB0ByoE,IyBkyB1B,OAAOzoE,EAbX,CAgBqB4oE,QAAA,GAAQ,CAARA,CAAQ,CAAC3C,CAAD,CAAe7wE,CAAf,CAC7B,CACIA,CAAA,EAAS,CACT,IAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGPjmE,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiC,CAAAgzD,GAAA,EAAjChzD,EAAkD5K,CAAlD4K,CAA0D,CAA1DA,CAA+DimE,CAA/DjmE,EAAgF,CAAhFA,CAAoF5K,CAExF,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,CADzB,CAC6B,CAD7B,EAEeA,CAFf,EAEyB,CAFzB,CAE6BA,CAF7B,EAEuC,CAFvC,EzBhzB0ByoE,IyBozB1B,OAAOzoE,EAdX,CAiBsB6oE,QAAA,GAAQ,CAARA,CAAQ,CAAC5C,CAAD,CAAe7wE,CAAf,CAC9B,CACIA,CAAA,EAAS,EACT,IAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGPjmE,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiC,CAAAgzD,GAAA,EAAjChzD,EAAkD5K,CAAlD4K,CAA0D,CAA1DA,CAA+DimE,CAA/DjmE,EAAgF,EAAhFA,CAAqF5K,CAEzF,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,EADzB,CAC8B,CAD9B,EAEeA,CAFf,EAEyB,CAFzB,CAE6BA,CAF7B,EAEuC,CAFvC,EzBl0B0ByoE,IyBs0B1B,OAAOzoE,EAdX;AAiBsB8oE,QAAA,GAAQ,CAARA,CAAQ,CAAC7C,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGX,KAAIjmE,EAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiC,CAAAgzD,GAAA,EAAjChzD,EAAkD5K,CAAlD4K,CAA0D,CAEnD,EAAX,CAAG5K,CAAH,GAEI4K,CAFJ,EAEcimE,CAFd,GAEgC,EAFhC,CAEqC7wE,CAFrC,CAKA,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD4tD,CAAnD,GAAqE,EAArE,CAA0E7wE,CAA1E,CAAmF,CACnF,EAAAijB,MAAA,GAAe,CAAAA,MAAf,EAA6B,EAA7B,CAAkCrY,CAAlC,EAA4C,EAA5C,EzBz1B0ByoE,IyB21B1B,OAAOzoE,EAjBX,CAoBqB+oE,QAAA,GAAQ,CAARA,CAAQ,CAAC9C,CAAD,CAAe7wE,CAAf,CAC7B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGX7wE,EAAA,EAAS,CACL4K,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiCimE,CAAjCjmE,EAAkD,CAAlDA,CAAsD5K,CAE1D,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,CADzB,CAC6B,CAD7B,EAEeA,CAFf,EAEyB,CAFzB,CAE6BA,CAF7B,EAEuC,CAFvC,EzBz2B0ByoE,IyB62B1B,OAAOzoE,EAdX,CAiBsBgpE,QAAA,GAAQ,CAARA,CAAQ,CAAC/C,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGX7wE,EAAA,EAAS,EACL4K,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiCimE,CAAjCjmE,EAAkD,EAAlDA,CAAuD5K,CAE3D,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,EADzB,CAC8B,CAD9B,EAEeA,CAFf,EAEyB,CAFzB,CAE6BA,CAF7B,EAEuC,CAFvC,EzB33B0ByoE,IyB+3B1B,OAAOzoE,EAdX;AAiBsBipE,QAAA,GAAQ,CAARA,CAAQ,CAAChD,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGPjmE,EAAAA,CAASimE,CAATjmE,GAA0B5K,CAA1B4K,CAAkCimE,CAAlCjmE,EAAmD,EAAnDA,CAAwD5K,CAE5D,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,EADzB,CAC8B,CAD9B,EAEeA,CAFf,EAEyB,EAFzB,CAE8BA,CAF9B,EAEwC,EAFxC,EzB54B0ByoE,IyBg5B1B,OAAOzoE,EAbX,CAgBqBkpE,QAAA,GAAQ,CAARA,CAAQ,CAACjD,CAAD,CAAe7wE,CAAf,CAC7B,CACIA,CAAA,EAAS,CACT,IAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGPjmE,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiC,CAAAgzD,GAAA,EAAjChzD,EAAkD,CAAlDA,CAAsD5K,CAAtD4K,CAA+DimE,CAA/DjmE,EAAgF,CAAhFA,CAAoF5K,CAExF,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,CADzB,CAC6B,CAD7B,EAEeA,CAFf,EAEyB,CAFzB,CAE6BA,CAF7B,EAEuC,CAFvC,EzB95B0ByoE,IyBk6B1B,OAAOzoE,EAdX,CAiBsBmpE,QAAA,GAAQ,CAARA,CAAQ,CAAClD,CAAD,CAAe7wE,CAAf,CAC9B,CACIA,CAAA,EAAS,EACT,IAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGPjmE,EAAAA,CAASimE,CAATjmE,EAAyB5K,CAAzB4K,CAAiC,CAAAgzD,GAAA,EAAjChzD,EAAkD,EAAlDA,CAAuD5K,CAAvD4K,CAAgEimE,CAAhEjmE,EAAiF,EAAjFA,CAAsF5K,CAE1F,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACerY,CADf,EACyB,EADzB,CAC8B,CAD9B,EAEeA,CAFf,EAEyB,CAFzB,CAE6BA,CAF7B,EAEuC,CAFvC,EzBh7B0ByoE,IyBo7B1B,OAAOzoE,EAdX;AAiBsBopE,QAAA,GAAQ,CAARA,CAAQ,CAACnD,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAG,CAACA,CAAJ,CAEI,MAAO6wE,EAGX,KAAIjmE,EAASimE,CAATjmE,GAA0B5K,CAA1B4K,CAAkC,CAAAgzD,GAAA,EAAlChzD,EAAmD,EAAnDA,CAAwD5K,CAEjD,EAAX,CAAGA,CAAH,GAEI4K,CAFJ,EAEcimE,CAFd,EAE+B,EAF/B,CAEoC7wE,CAFpC,CAKA,EAAAgjB,EAAA,EAAsB,KACtB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACe4tD,CADf,EACgC7wE,CADhC,CACwC,CADxC,CAC6C,CAD7C,EAEe4K,CAFf,EAEyB,EAFzB,CAE8BA,CAF9B,EAEwC,EAFxC,EzBt8B0ByoE,IyB08B1B,OAAOzoE,EAlBX,CAqBqBqpE,QAAA,GAAQ,CAARA,CAAQ,CAACpD,CAAD,CAAe7wE,CAAf,CAC7B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAEnC,EAAAmxD,EAAA,CzBh7BOwe,CyBi7BP,EAAA3sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACe,CAAAguC,EADf,EACmC,CADnC,CACuC,CADvC,EAEe,CAAAA,EAFf,EAEmC,CAFnC,CAEuC,CAAAA,EAFvC,EAE2D,CAF3D,EzBx9B0BoiB,IyB49B1B,OAAO,EAAApiB,EAdX,CAiBsBijB,QAAA,GAAQ,CAARA,CAAQ,CAACrD,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAEnC,EAAAmxD,EAAA,CzBh8BQ0e,EyBi8BR,EAAA7sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACe,CAAAguC,EADf,EACmC,EADnC,CACwC,CADxC,EAEe,CAAAA,EAFf,EAEmC,CAFnC,CAEuC,CAAAA,EAFvC,EAE2D,CAF3D,EzB1+B0BoiB,IyB8+B1B,OAAO,EAAApiB,EAdX;AAiBsBkjB,QAAA,GAAQ,CAARA,CAAQ,CAACtD,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAEnC,EAAAmxD,EAAA,CzBh9BQ4e,EyBi9BR,EAAA/sD,EAAA,CAAqB,GAErB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD4tD,CAAnD,GAAqE,EAArE,CAA0E7wE,CAA1E,CAAmF,CACnF,EAAAijB,MAAA,GAAgB,CAAAA,MAAhB,CAA6B,CAA7B,CAAmC,CAAAguC,EAAnC,EAAuD,EAAvD,CAA4D,CAA5D,GAAmE,EAAnE,CzB9/B0BoiB,IyBggC1B,OAAO,EAAApiB,EAdX,CAiBqBmjB,QAAA,GAAQ,CAARA,CAAQ,CAACvD,CAAD,CAAe7wE,CAAf,CAC7B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAEnC,EAAAmxD,EAAA,CzBt+BOwe,CyBu+BP,EAAA3sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACe4tD,CADf,EACgC7wE,CADhC,CACwC,CADxC,CAC6C,CAD7C,EAEe6wE,CAFf,EAE+B,CAF/B,CAEmC,CAFnC,GAEyC,EAFzC,CzB9gC0BwC,IyBkhC1B,OAAO,EAAApiB,EAdX,CAiBsBojB,QAAA,GAAQ,CAARA,CAAQ,CAACxD,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAEnC,EAAAmxD,EAAA,CzBt/BQ0e,EyBu/BR,EAAA7sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACe4tD,CADf,EACgC7wE,CADhC,CACwC,CADxC,CAC6C,CAD7C,CAEe6wE,CAFf,EAE+B,CAF/B,CzBhiC0BwC,IyBoiC1B,OAAO,EAAApiB,EAdX,CAiBsBqjB,QAAA,GAAQ,CAARA,CAAQ,CAACzD,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,GAAoC7wE,CAEpC,EAAAmxD,EAAA,CzBtgCQ4e,EyBugCR,EAAA/sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CACe4tD,CADf,GACiC7wE,CADjC,CACyC,CADzC,CAC8C,CAD9C,CAEe6wE,CAFf,EAE+B,EAF/B,CzBljC0BwC,IyBsjC1B,OAAO,EAAApiB,EAdX;AAiBqBsjB,QAAA,GAAQ,CAARA,CAAQ,CAAC1D,CAAD,CAAe7wE,CAAf,CAC7B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGA,EAAX,CAAG7wE,CAAH,EAEI,CAAAixD,EAEA,CAFmB4f,CAEnB,EAFmC,EAEnC,EAFyC7wE,CAEzC,CAFiD,EAEjD,CAAA,CAAAijB,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD4tD,CAAnD,EAAoE7wE,CAApE,CAA4E,CAA5E,CAAiF,CAJrF,GAQI,CAAAixD,EACA,CADmB4f,CACnB,EADmC,EACnC,EADyC,EACzC,CAAA,CAAA5tD,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD,CAAAguC,EAAnD,CAAsE,CAT1E,CAYA,EAAAE,EAAA,CzBtiCOwe,CyBuiCP,EAAA3sD,EAAA,CAAqB,GAErB,OAAO,EAAAiuC,EArBX,CAwBsBujB,QAAA,GAAQ,CAARA,CAAQ,CAAC3D,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGA,GAAX,CAAG7wE,CAAH,EAEI,CAAAixD,EACA,CADmB4f,CACnB,EADmC,EACnC,EADyC7wE,CACzC,CADiD,EACjD,CAAA,CAAAijB,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD4tD,CAAnD,EAAoE7wE,CAApE,CAA4E,CAA5E,CAAiF,CAHrF,GAOI,CAAAixD,EACA,CADmB4f,CACnB,EADmC,EACnC,EADyC,EACzC,CAAA,CAAA5tD,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD,CAAAguC,EAAnD,CAAsE,CAR1E,CAWA,EAAAE,EAAA,CzB5jCQ0e,EyB6jCR,EAAA7sD,EAAA,CAAqB,GAErB,OAAO,EAAAiuC,EApBX,CAuBsBwjB,QAAA,GAAQ,CAARA,CAAQ,CAAC5D,CAAD,CAAe7wE,CAAf,CAC9B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAEnC,EAAAmxD,EAAA,CzBzkCQ4e,EyB0kCR,EAAA/sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAAgC,KAAhC,CAAmD4tD,CAAnD,GAAqE7wE,CAArE,CAA6E,CAA7E,CAAkF,CAElF,OAAO,EAAAixD,EAZX;AAgBuByjB,QAAA,GAAQ,CAARA,CAAQ,CAAC7D,CAAD,CAAeC,CAAf,CAA+B9wE,CAA/B,CAC/B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGC,GAAZ,EAAG7wE,CAAH,EAEI,CAAAixD,EACA,CADmB4f,CACnB,EADmC7wE,CACnC,CAD2C8wE,CAC3C,EAD8D,EAC9D,CADmE9wE,CACnE,CAAA,CAAAijB,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC4tD,CAAlC,EAAmD7wE,CAAnD,CAA2D,CAA3D,CAAgE,CAHpE,GAOI,CAAAixD,EACA,CADmB4f,CACnB,EADoC,EACpC,CADyC7wE,CACzC,CADkD8wE,CAClD,EADqE9wE,CACrE,CAD6E,EAC7E,CAAA,CAAAijB,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC6tD,CAAlC,EAAqD9wE,CAArD,CAA6D,EAA7D,CAAmE,CARvE,CAWA,EAAAmxD,EAAA,CzBrmCQ0e,EyBsmCR,EAAA7sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAA2B,KAA3B,EAA+C,CAAAguC,EAA/C,CAAkE4f,CAAlE,GAAmF,CAAnF,CzB/oC0BwC,IyBipC1B,OAAO,EAAApiB,EArBX,CAwBuB0jB,QAAA,GAAQ,CAARA,CAAQ,CAAC9D,CAAD,CAAeC,CAAf,CAA+B9wE,CAA/B,CAC/B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,GAAoC7wE,CAApC,CAA4C8wE,CAA5C,EAA+D,EAA/D,CAAoE9wE,CAEpE,EAAAmxD,EAAA,CzBnnCQ4e,EyBonCR,EAAA/sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC4tD,CAAlC,GAAoD7wE,CAApD,CAA4D,CAA5D,CAAiE,CACjE,EAAAijB,MAAA,CAAc,CAAAA,MAAd,CAA2B,KAA3B,EAA+C,CAAAguC,EAA/C,CAAkE4f,CAAlE,GAAmF,EAAnF,CzBhqC0BwC,IyBkqC1B,OAAO,EAAApiB,EAbX;AAgBuB2jB,QAAA,GAAQ,CAARA,CAAQ,CAAC/D,CAAD,CAAeC,CAAf,CAA+B9wE,CAA/B,CAC/B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGC,GAAZ,EAAG7wE,CAAH,EAEI,CAAAixD,EACA,CADmB4f,CACnB,EADmC7wE,CACnC,CAD2C8wE,CAC3C,GAD+D,EAC/D,CADoE9wE,CACpE,CAAA,CAAAijB,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC4tD,CAAlC,GAAoD,EAApD,CAAyD7wE,CAAzD,CAAkE,CAHtE,GAOI,CAAAixD,EACA,CADmB4f,CACnB,EADoC,EACpC,CADyC7wE,CACzC,CADkD8wE,CAClD,EADqE9wE,CACrE,CAD6E,EAC7E,CAAA,CAAAijB,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC6tD,CAAlC,GAAsD,EAAtD,CAA2D9wE,CAA3D,CAAoE,CARxE,CAWA,EAAAmxD,EAAA,CzB/oCQ0e,EyBgpCR,EAAA7sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAA2B,KAA3B,EAA+C,CAAAA,MAA/C,CAA4D,CAA5D,CAAkE,CAAAguC,EAAlE,EAAsF,EAAtF,CAA2F,CAA3F,GAAkG,EAElG,OAAO,EAAAA,EArBX,CAwBuB4jB,QAAA,GAAQ,CAARA,CAAQ,CAAChE,CAAD,CAAeC,CAAf,CAA+B9wE,CAA/B,CAC/B,CACI,GAAa,CAAb,GAAGA,CAAH,CAEI,MAAO6wE,EAGX,EAAA5f,EAAA,CAAmB4f,CAAnB,EAAmC7wE,CAAnC,CAA2C8wE,CAA3C,GAA+D,EAA/D,CAAoE9wE,CAEpE,EAAAmxD,EAAA,CzB7pCQ4e,EyB8pCR,EAAA/sD,EAAA,CAAqB,GACrB,EAAAC,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC4tD,CAAlC,GAAoD,EAApD,CAAyD7wE,CAAzD,CAAkE,CAI9D,EAAAijB,MAAA,CAFS,CAAb,GAAGjjB,CAAH,CAEkB,CAAAijB,MAFlB,CAE+B,KAF/B,EAEmD,CAAAA,MAFnD,CAEgE,CAFhE,CAEsE,CAAAguC,EAFtE,EAE0F,EAF1F,CAE+F,CAF/F,GAEsG,EAFtG,CAMI,CAAAhuC,MANJ,CAMkB,KAGlB,OAAO,EAAAguC,EArBX,CAyBuB6jB,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAWC,CAAX,CAC/B,CACI,CAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAF1B;AAKwBiyD,QAAA,GAAQ,CAARA,CAAQ,CAACF,CAAD,CAAWC,CAAX,CAChC,CACI,CAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAEtB,OAAO+xD,EAAP,CAAkB,CAAlB,EAAuBC,CAJ3B,CAOwBE,QAAA,GAAQ,CAARA,CAAQ,CAACH,CAAD,CAAWC,CAAX,CAChC,CACI,CAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAEtB,OAAO+xD,EAAP,CAAkB,CAAlB,EAAuBC,CAJ3B,CAOwBG,QAAA,GAAQ,CAARA,CAAQ,CAACJ,CAAD,CAAWC,CAAX,CAChC,CACI,CAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAEtB,OAAO+xD,EAAP,CAAkB,EAAE,CAAF,EAAOC,CAAP,CAJtB,CAOuBI,QAAA,GAAQ,CAARA,CAAQ,CAAC9M,CAAD,CAAY0M,CAAZ,CAC/B,CACQD,CAAAA,CAAWvY,EAAA,CAAAA,CAAA,CAAgB8L,CAAhB,EAA6B0M,CAA7B,EAA2C,CAA3C,EAAgD,CAAhD,CAGf,EAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,GAFAC,CAEA,CAFc,CAEd,EAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAL1B,CAQwBqyD,QAAA,GAAQ,CAARA,CAAQ,CAAC/M,CAAD,CAAY0M,CAAZ,CAChC,CACQhjB,CAAAA,CAAY6K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,EAA0C0M,CAA1C,EAAwD,CAAxD,EAA6D,CAA7D,CAChB,KAAID,EAAW,CAAA7+D,GAAA,CAAW87C,CAAX,CAEfgjB,EAAA,EAAc,CAEd,EAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAEtB,EAAAxM,GAAA,CAAYw7C,CAAZ,CAAuB+iB,CAAvB,CAAkC,CAAlC,EAAuCC,CAAvC,CATJ,CAYwBM,QAAA,GAAQ,CAARA,CAAQ,CAAChN,CAAD,CAAY0M,CAAZ,CAChC,CACQhjB,CAAAA,CAAY6K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,EAA0C0M,CAA1C,EAAwD,CAAxD,EAA6D,CAA7D,CAChB,KAAID,EAAW,CAAA7+D,GAAA,CAAW87C,CAAX,CAEfgjB,EAAA,EAAc,CAEd,EAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAEtB,EAAAxM,GAAA,CAAYw7C,CAAZ,CAAuB+iB,CAAvB,CAAkC,EAAE,CAAF,EAAOC,CAAP,CAAlC,CATJ;AAYwBO,QAAA,GAAQ,CAARA,CAAQ,CAACjN,CAAD,CAAY0M,CAAZ,CAChC,CACQhjB,CAAAA,CAAY6K,EAAA,CAAAA,CAAA,CAA6ByL,CAA7B,EAA0C0M,CAA1C,EAAwD,CAAxD,EAA6D,CAA7D,CAChB,KAAID,EAAW,CAAA7+D,GAAA,CAAW87C,CAAX,CAEfgjB,EAAA,EAAc,CAEd,EAAA/xD,MAAA,CAAc,CAAAA,MAAd,CAA2B,EAA3B,CAAkC8xD,CAAlC,EAA8CC,CAA9C,CAA2D,CAC3D,EAAAhyD,EAAA,EAAsB,EAEtB,EAAAxM,GAAA,CAAYw7C,CAAZ,CAAuB+iB,CAAvB,CAAkC,CAAlC,EAAuCC,CAAvC,CATJ,CA0FuBQ,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAC/B,CACI,CAAAzyD,EAAA,CAAqB,CACrB,EAAAC,MAAA,EAAc,KAEd,IAAGwyD,CAAH,CAKI,MAFIA,EAEG,EAFGA,CAEH,EAFQ,CAER,CAFa,UAEb,CADPA,CACO,EADFA,CACE,CADE,SACF,GADkBA,CAClB,EADuB,CACvB,CAD4B,SAC5B,EAA8B,QAA9B,EAAEA,CAAF,EAAOA,CAAP,EAAY,CAAZ,EAAiB,SAAjB,GAA4C,EAInD,EAAAxyD,MAAA,EzBv4CkBC,EyBw4ClB,OAAO,EAdf,CAkBkCwyD,QAAA,GAAQ,CAACD,CAAD,CAC1C,CAGcA,CAANx4E,IAAY,CACL,MAAX,EAAIA,CAAJ,CACIA,CADJ,CACU,CADV,CAGe,GAHf,CAGSA,CAHT,GAIIA,CAJJ,CAIU,GAJV,CAQA,OAAOA,EAZX,CAekC04E,QAAA,GAAQ,CAACF,CAAD,CAC1C,CAKc,KAAV,CAAIx4E,CAAJ,CACUA,CADV,EACgB,GADhB,CAGe,KAAV,CAAIA,CAAJ,CACDA,CADC,CACK,GADL,CAGU,GAHV,CAGIA,CAHJ,GAIDA,CAJC,CAIK,GAJL,CAQL,OAAOA,EAhBX,CAmBkC24E,QAAA,GAAQ,CAACH,CAAD,CAC1C,CACcA,CAANx4E,IAAY,CAEN,WAAV,CAAIA,CAAJ,CACUA,CADV,EACgB,KADhB,CAGe,UAAV,CAAIA,CAAJ,CACDA,CADC,CACK,KADL,CAGU,KAHV,CAGIA,CAHJ,GAIDA,CAJC,CAIK,KAJL,CAQL,OAAOA,EAdX;AAiBkC44E,QAAA,GAAQ,CAACJ,CAAD,CAC1C,CACcA,CAANx4E,IAAY,CAEN,WAAV,CAAIA,CAAJ,CACUA,CADV,EACgB,GADhB,CAGe,UAAV,CAAIA,CAAJ,CACDA,CADC,CACK,GADL,CAGU,GAHV,CAGIA,CAHJ,GAIDA,CAJC,CAIK,GAJL,CAQL,OAAOA,EAdX,CAiBkC64E,QAAA,GAAQ,CAACL,CAAD,CAC1C,CACcA,CAANx4E,EAAU,CAEJ,EAAV,CAAIA,CAAJ,GACIA,CADJ,CACU,CADV,CAKA,OAAOA,EARX,CAYkC84E,QAAA,GAAQ,CAACN,CAAD,CAC1C,CACcA,CAANx4E,IAAY,CAEN,IAAV,CAAIA,CAAJ,GACIA,CADJ,CACU,GADV,CAKA,OAAOA,EARX,CAW4B+4E,QAAA,GAAQ,CAACP,CAAD,CACpC,CAEI,MAAW,MAAJ,CAAAA,CAAA,CAAa,KAAb,CAAsBA,CAFjC,CAKAx+C,CAAA5S,GAAA,CAA8B4xD,QAAQ,CAACh7E,CAAD,CAAIi7E,CAAJ,CACtC,CACI,MAAU,EAAV,GAAGA,CAAH,EAGQC,CASGA,CATO55E,IAAA65E,MAAA,CAAWn7E,CAAX,CASPk7E,CAPY,EAOZA,GAPJA,CAOIA,CAPMl7E,CAONk7E,EAPoBA,CAOpBA,CAP8B,CAO9BA,EAHHA,CAAA,EAGGA,CAAAA,CAZX,EAee,CAAV,GAAGD,CAAH,EAAuB,CAAvB,GAAgBA,CAAhB,EAAgC,CAAhC,CAA4Bj7E,CAA5B,CAEMsB,IAAAC,MAAA,CAAWvB,CAAX,CAFN,CAMMsB,IAAAioB,KAAA,CAAUvpB,CAAV,CAtBf,C,CC/iDuBo7E,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAC/B,CACI,IAAIC,EAAO,CAAAhb,GAAA,EACR+a,EAAH,GAEI,CAAAjkB,EAFJ,CAE+B,CAAAA,EAF/B,CAE0DkkB,CAF1D,CAEiE,CAFjE,CAFJ,CAa0BC,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAClC,CACI,IAAIC,EAAaxf,CAAA,CAAAA,CAAA,C1B4HEC,C0B5HF,CAIjB,EAAA9E,EAAA,EAA4BqkB,CAC5B,EAAArkB,EAAA,CAA4B,CAAAA,EAA5B,CAAuDokB,CAAvD,CAAgE,KAChE,EAAApkB,EAAA,CAA2B,CAAAA,EAA3B,CAAsDqkB,CAAtD,CAAmE,CAPvE,CAUwBC,QAAA,GAAQ,CAARA,CAAQ,CAACL,CAAD,CAChC,CACI,IAAIM,EAAQ,CAAApb,EAAA,EACT8a,EAAH,EAEIO,EAAA,CAAAA,CAAA,CAAeD,CAAf,CAJR,CAcwBE,QAAA,GAAQ,CAARA,CAAQ,CAACR,CAAD,CAChC,CACI,IAAIS,EAAS,CAAAtb,GAAA,EACV6a,EAAH,GAKI,CAAAjkB,EALJ,CAK+B,CAAAA,EAL/B,CAK0D0kB,CAL1D,CAKmE,CALnE,CAFJ,CAgByBC,QAAA,GAAQ,CAARA,CAAQ,CAACV,CAAD,CACjC,CACI,IAAIz4E,EAAOo5E,EAAA,CAAAA,CAAA,CACRX,EAAH,EAEIY,EAAA,CAAAA,CAAA,CAAer5E,CAAf,CAJR,CAQyBs5E,QAAA,GAAQ,CAARA,CAAQ,CAACb,CAAD,CACjC,CACI,IAAIz4E,EAAOu5E,EAAA,CAAAA,CAAA,CACRd,EAAH,EAEIe,EAAA,CAAAA,CAAA,CAAex5E,CAAf,CAJR,CAQsBy5E,QAAA,GAAQ,CAARA,CAAQ,CAAChB,CAAD,CAC9B,CACIiB,EAAA,CAAAA,CAAA,CAAYjB,CAAA,CAAY,CAAZ,CAAgB,CAA5B,CADJ,CA8BA,CAAA,CAAA,CAAA,UAAAr/C,EAAAugD,KAAA,CAAqBC,QAAQ,CAACC,CAAD,CAC7B,CACOC,EAAA,CAAAA,IAAA,CAAH,GAEI,IAAAtlB,EAFJ,CAE+B,IAAAA,EAF/B,CAE0DqlB,CAF1D,CAEkE,CAFlE,CADJ,CA6BAzgD,EAAA2mC,GAAA,CAAsBga,QAAQ,EAC9B,CACI,MAAG,KAAA50D,EAAH,CAAwB,CAAxB,EAEY,IAAAquC,GAFZ,EAE6B,IAAAA,GAF7B,CAE6C,IAAAD,GAF7C,GAE+D,IAAAA,GAF/D,CAE+E,IAAAF,EAF/E,KAE0G,IAAAC,EAF1G,CAE8H,CAF9H,CAMW,IAAAluC,MANX,CAMwB,CAP5B,CAYAgU;CAAA4mC,GAAA,CAAsBga,QAAQ,EAC9B,CACI,MAAG,KAAA70D,EAAH,C1B9FwB80D,C0B8FxB,CAGW,MAHX,IAG4B,IAAA7mB,EAH5B,CAG+C,IAAAA,EAH/C,EAGmE,CAHnE,EAGwE,EAHxE,E1B9FwB6mB,C0B8FxB,CAOW,IAAA70D,MAPX,C1B9FwB60D,C0B6F5B,CAasBC,SAAA,GAAQ,CAARA,CAAQ,CAC9B,CACI,MAAG,EAAA/0D,EAAH,C1B3GwBg1D,E0B2GxB,EAEY,CAAA3mB,GAFZ,CAE4B,CAAAD,GAF5B,CAE4C,CAAAF,EAF5C,E1B3GwB8mB,E0B2GxB,CAMW,CAAA/0D,MANX,C1B3GwB+0D,E0B0G5B,CAYA/gD,CAAA8mC,GAAA,CAAsBka,QAAQ,EAC9B,CACI,MAAG,KAAAj1D,EAAH,C1BvHsBE,E0BuHtB,EAEY,CAAC,IAAA+tC,EAFb,CAEgC,IAAAA,EAFhC,CAEmD,CAFnD,IAE0D,IAAAE,EAF1D,CAE8E,CAF9E,CAMW,IAAAluC,MANX,C1BvHsBC,E0BsH1B,CAYA+T,EAAA+mC,GAAA,CAAsBka,QAAQ,EAC9B,CACI,MAAG,KAAAl1D,EAAH,C1BnIsBm1D,G0BmItB,CAEW,IAAAlnB,EAFX,GAEgC,IAAAE,EAFhC,CAEoD,CAFpD,CAMW,IAAAluC,MANX,C1BnIsBk1D,G0BkI1B,CAYAlhD,EAAAgnC,GAAA,CAAsBma,QAAQ,EAC9B,CACI,MAAG,KAAAp1D,EAAH,C1B5I0BqwD,I0B4I1B,GAEa,IAAAhiB,GAFb,CAE6B,IAAAH,EAF7B,GAEsD,IAAAE,GAFtD,CAEsE,IAAAF,EAFtE,KAEiG,IAAAC,EAFjG,CAEqH,CAFrH,CAMW,IAAAluC,MANX,C1B5I0BowD,I0B2I9B,CAWAp8C,EAAAohD,GAAA,CAAuBj+D,CAAAxf,UAAAqjE,GACvBhnC,EAAAqhD,GAAA,CAAuBl+D,CAAAxf,UAAAgjE,GACvB3mC,EAAAshD,GAAA,CAAuBn+D,CAAAxf,UAAAmjE,GACvB9mC,EAAAuhD,GAAA,CAAuBp+D,CAAAxf,UAAAojE,GACvB/mC,EAAAwhD,GAAA,CAAuBr+D,CAAAxf,UAAAijE,GAEC6a;QAAA,GAAQ,CAARA,CAAQ,CAChC,CAGI,MAAO,EAAA9a,GAAA,EAAP,EAAuB,CAAAG,GAAA,EAH3B,CAMuB4a,QAAA,GAAQ,CAARA,CAAQ,CAC/B,CAGI,MAAO,CAAC,CAAA3a,GAAA,EAAR,GAAyB,CAAC,CAAAC,GAAA,EAH9B,CAMwB2a,QAAA,GAAQ,CAARA,CAAQ,CAChC,CAGI,MAAO,EAAA7a,GAAA,EAAP,EAAuB,CAAC,CAAAC,GAAA,EAAxB,GAAyC,CAAC,CAAAC,GAAA,EAH9C,CAQuB4a,QAAA,EAAQ,CAARA,CAAQ,CAACjC,CAAD,CAC/B,CACI,IAAIkC,EAAKzU,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAET7gD,GAAA,CAAAA,CAAA,CAAkBs1D,CAAlB,CAAsBlC,CAAtB,CACApS,GAAA,CAAAA,CAAA,CAAuB,EAAvB,CAJJ,CAOuBuU,QAAA,EAAQ,CAARA,CAAQ,CAACC,CAAD,CAC/B,CACI,IAAIF,EAAKzU,CAAA,CAAAA,CAAA,CAAwB,EAAxB,CAETxgD,EAAA,CAAAA,CAAA,CAAkBi1D,CAAlB,CAAsBE,CAAtB,CACAxU,GAAA,CAAAA,CAAA,CAAuB,EAAvB,CAJJ,CAOsByU,QAAA,GAAQ,CAARA,CAAQ,CAC9B,CAAA,IACQH,EAAK5hB,CAAA,CAAAA,CAAA,C1BxHUhC,C0BwHV,CAAL4jB,CAA4BI,EAAA,CAAAA,CAAA,CAA5BJ,CAAmD,CACnDluE,EAAAA,CAASoZ,CAAA,CAAAA,CAAA,CAAiB80D,CAAjB,CAEbtU,GAAA,CAAAA,CAAA,CAAsB,CAAtB,CACA,OAAO55D,EALX,CAQuBuuE,QAAA,GAAQ,CAARA,CAAQ,CAC/B,CAAA,IACQL,EAAK5hB,CAAA,CAAAA,CAAA,C1BjIUhC,C0BiIV,CAAL4jB,CAA4BI,EAAA,CAAAA,CAAA,CAA5BJ,CAAmD,CACnDluE,EAAAA,CAASwZ,CAAA,CAAAA,CAAA,CAAkB00D,CAAlB,CAEbtU,GAAA,CAAAA,CAAA,CAAsB,CAAtB,CACA,OAAO55D,EALX,CA4FwBwuE,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAChC,CACI,IAAIC,EAAO,CAAA3mB,EAAA,C1BnPQ4mB,C0BmPR,CACX,EAAA5mB,EAAA,C1BpPmB4mB,C0BoPnB,CAAA,CAAqB,CAAA5mB,EAAA,CAAW0mB,CAAX,CACrB,EAAA1mB,EAAA,CAAW0mB,CAAX,CAAA,CAAsBC,CAH1B,CAgBwBE,QAAA,GAAQ,CAARA,CAAQ,CAACH,CAAD,CAChC,CACI,IAAIC,EAAO,CAAA9mB,EAAA,C1B7QSgE,C0B6QT,CACX,EAAAhE,EAAA,C1B9QoBgE,C0B8QpB,CAAA,CAAuB,CAAAhE,EAAA,CAAY6mB,CAAZ,CACvB,EAAA7mB,EAAA,CAAY6mB,CAAZ,CAAA,CAAuBC,CAH3B;AAMsBG,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAC9B,CAC0B,GAAtB,EAAG,CAAAznB,EAAH,EAGI3vC,CAAA,CAAAA,CAAA,CAGJ,KAAIpJ,EAAOouD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAX,CAEI0nB,EAAU31D,CAAA,CAAAA,CAAA,CAAiB9K,CAAjB,CACV0gE,EAAAA,CAAU51D,CAAA,CAAAA,CAAA,CAAiB9K,CAAjB,CAAwB,CAAxB,CAA4B,CAA5B,CAEd+7C,GAAA,CAAAA,CAAA,CAAgBykB,CAAhB,CAAqBE,CAArB,CAEA,EAAAjnB,EAAA,CAAW,CAAAV,EAAX,EAA8B,CAA9B,CAAkC,EAAlC,CAAA,CAAwC0nB,CAd5C,CAiBsBE,QAAA,GAAQ,CAARA,CAAQ,CAACH,CAAD,CAC9B,CAC0B,GAAtB,EAAG,CAAAznB,EAAH,EAEI3vC,CAAA,CAAAA,CAAA,CAGJ,KAAIpJ,EAAOouD,CAAA,CAAAA,CAAA,CAAmB,CAAArV,EAAnB,CAAX,CAEI0nB,EAAUv1D,CAAA,CAAAA,CAAA,CAAkBlL,CAAlB,CACV0gE,EAAAA,CAAU51D,CAAA,CAAAA,CAAA,CAAiB9K,CAAjB,CAAwB,CAAxB,CAA4B,CAA5B,CAEd+7C,GAAA,CAAAA,CAAA,CAAgBykB,CAAhB,CAAqBE,CAArB,CAEA,EAAApnB,EAAA,CAAY,CAAAP,EAAZ,EAA+B,CAA/B,CAAmC,CAAnC,CAAA,CAAwC0nB,CAb5C,CA4DsBG,QAAA,GAAQ,CAARA,CAAQ,CAACzO,CAAD,CAC9B,CACI,IAAIiO,EAAO,CAAA9mB,EAAA,CAAY6Y,CAAZ,CAEX,EAAA7Y,EAAA,CAAY6Y,CAAZ,CAAA,CAAmBiO,CAAnB,GAA4B,EAA5B,CAAiCA,CAAjC,EAAyC,EAAzC,CAA+CA,CAA/C,EAAuD,CAAvD,CAA2D,KAA3D,CAAsEA,CAAtE,EAA8E,CAA9E,CAAkF,QAHtF,C,CCheA,IAAIr+D,EAAI,EAAR,CACI8+D,EAAM,EADV,CAEIC,EAAM,EAEV/+D,EAAA,CAAE,CAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAakoE,EAAA,CAAAloE,CAAA,CAASmoE,EAAA,CAAAnoE,CAAA,CAAT,CAA8BooE,EAAA,CAAApoE,CAAA,CAA9B,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAcsoE,EAAA,CAAAtoE,CAAA,CAAUuoE,EAAA,CAAAvoE,CAAA,CAAV,CAAgCwoE,EAAA,CAAAxoE,CAAA,CAAhC,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAc0oE,EAAA,CAAA1oE,CAAA,CAAU2oE,EAAA,CAAA3oE,CAAA,CAAV,CAAgC4oE,EAAA,CAAA5oE,CAAA,CAAhC,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,CAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAakoE,EAAA,CAAAloE,CAAA,CAASooE,EAAA,CAAApoE,CAAA,CAAT,CAAwB8oE,EAAA,CAAA9oE,CAAA,CAAxB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAcsoE,EAAA,CAAAtoE,CAAA,CAAUwoE,EAAA,CAAAxoE,CAAA,CAAV,CAA0BglE,EAAA,CAAAhlE,CAAA,CAA1B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAc0oE,EAAA,CAAA1oE,CAAA,CAAU4oE,EAAA,CAAA5oE,CAAA,CAAV,CAA2BmlE,EAAA,CAAAnlE,CAAA,CAA3B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,CAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3BsIImoB,C2BtIJ,CAAA,CAAmBb,EAAA,CAAAloE,CAAA,CAASA,CAAA4gD,EAAA,C3BsIxBmoB,C2BtIwB,CAAT,CAA2B/oE,CAAAqpD,EAAA,EAA3B,CAArB,CACjBye,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3B4HE4mB,C2B5HF,CAAA,CAAoBgB,EAAA,CAAAtoE,CAAA,CAAUA,CAAA0gD,EAAA,C3B4H5B4mB,C2B5H4B,CAAV,CAA6BtnE,CAAAupD,EAAA,EAA7B,CAAtB,CACnBwe,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BkHGgE,C2BlHH,CAAA,CAAsBmkB,EAAA,CAAA1oE,CAAA,CAAUA,CAAAugD,EAAA,C3BkH7BgE,C2BlH6B,CAAV,CAA+BvkD,CAAAwpD,GAAA,EAA/B,CAAxB,CAEnBse,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAAkhD,EAAA,C3B4ITqO,C2B5IS,CAAX,CAAF,CACnBwY,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAkhD,EAAA,C3B2ITqO,C2B3IS,CAAX,CAAF,CACnBuY;CAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CACfgjD,EAAA,CAAAhjD,CAAA,C3ByImBuvD,C2BzInB,CAAuBx9C,CAAA,CAAA/R,CAAA,CAAgBoyD,CAAA,CAAApyD,CAAA,CAAsB,CAAtB,CAAhB,CAAvB,CACAuyD,GAAA,CAAAvyD,CAAA,CAAqB,CAArB,CAFe,CAInB+nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CACfgjD,EAAA,CAAAhjD,CAAA,C3BqImBuvD,C2BrInB,CAAuBp9C,CAAA,CAAAnS,CAAA,CAAiBoyD,CAAA,CAAApyD,CAAA,CAAsB,CAAtB,CAAjB,CAAvB,CAAoE,KAApE,CACAuyD,GAAA,CAAAvyD,CAAA,CAAqB,CAArB,CAFe,CAKnBgJ,EAAA,CAAE,CAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAagpE,EAAA,CAAAhpE,CAAA,CAAQmoE,EAAA,CAAAnoE,CAAA,CAAR,CAA6BooE,EAAA,CAAApoE,CAAA,CAA7B,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAcipE,EAAA,CAAAjpE,CAAA,CAASuoE,EAAA,CAAAvoE,CAAA,CAAT,CAA+BwoE,EAAA,CAAAxoE,CAAA,CAA/B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,CAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAckpE,EAAA,CAAAlpE,CAAA,CAAS2oE,EAAA,CAAA3oE,CAAA,CAAT,CAA+B4oE,EAAA,CAAA5oE,CAAA,CAA/B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAagpE,EAAA,CAAAhpE,CAAA,CAAQooE,EAAA,CAAApoE,CAAA,CAAR,CAAuB8oE,EAAA,CAAA9oE,CAAA,CAAvB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAcipE,EAAA,CAAAjpE,CAAA,CAASwoE,EAAA,CAAAxoE,CAAA,CAAT,CAAyBglE,EAAA,CAAAhlE,CAAA,CAAzB,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAckpE,EAAA,CAAAlpE,CAAA,CAAS4oE,EAAA,CAAA5oE,CAAA,CAAT,CAA0BmlE,EAAA,CAAAnlE,CAAA,CAA1B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3BiHImoB,C2BjHJ,CAAA,CAAmBC,EAAA,CAAAhpE,CAAA,CAAQA,CAAA4gD,EAAA,C3BiHvBmoB,C2BjHuB,CAAR,CAA0B/oE,CAAAqpD,EAAA,EAA1B,CAArB,CACjBye,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BuGE4mB,C2BvGF,CAAA,CAAoB2B,EAAA,CAAAjpE,CAAA,CAASA,CAAA0gD,EAAA,C3BuG3B4mB,C2BvG2B,CAAT,CAA4BtnE,CAAAupD,EAAA,EAA5B,CAAtB,CACnBwe;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B6FGgE,C2B7FH,CAAA,CAAsB2kB,EAAA,CAAAlpE,CAAA,CAASA,CAAAugD,EAAA,C3B6F5BgE,C2B7F4B,CAAT,CAA8BvkD,CAAAwpD,GAAA,EAA9B,CAAxB,CAGnBse,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAAkhD,EAAA,C3BuHTgE,C2BvHS,CAAX,CAAF,CACnB6iB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAkhD,EAAA,C3BsHTgE,C2BtHS,CAAX,CAAF,CACnB4iB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CACfA,CAAAmpE,GAAA,CAAenpE,CAAAmpD,GAAA,EAAf,CAAA,CAAgCnpD,CAAhC,CADe,CAGnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CACfA,CAAAopE,GAAA,CAAeppE,CAAAmpD,GAAA,EAAf,CAAA,CAAgCnpD,CAAhC,CADe,CAInBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAaqpE,EAAA,CAAArpE,CAAA,CAASmoE,EAAA,CAAAnoE,CAAA,CAAT,CAA8BooE,EAAA,CAAApoE,CAAA,CAA9B,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAcspE,EAAA,CAAAtpE,CAAA,CAAUuoE,EAAA,CAAAvoE,CAAA,CAAV,CAAgCwoE,EAAA,CAAAxoE,CAAA,CAAhC,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAcupE,EAAA,CAAAvpE,CAAA,CAAU2oE,EAAA,CAAA3oE,CAAA,CAAV,CAAgC4oE,EAAA,CAAA5oE,CAAA,CAAhC,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAaqpE,EAAA,CAAArpE,CAAA,CAASooE,EAAA,CAAApoE,CAAA,CAAT,CAAwB8oE,EAAA,CAAA9oE,CAAA,CAAxB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAcspE,EAAA,CAAAtpE,CAAA,CAAUwoE,EAAA,CAAAxoE,CAAA,CAAV,CAA0BglE,EAAA,CAAAhlE,CAAA,CAA1B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAcupE,EAAA,CAAAvpE,CAAA,CAAU4oE,EAAA,CAAA5oE,CAAA,CAAV,CAA2BmlE,EAAA,CAAAnlE,CAAA,CAA3B,CAAd,CAAzB,CACnBgJ;CAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3B6FImoB,C2B7FJ,CAAA,CAAmBM,EAAA,CAAArpE,CAAA,CAASA,CAAA4gD,EAAA,C3B6FxBmoB,C2B7FwB,CAAT,CAA2B/oE,CAAAqpD,EAAA,EAA3B,CAArB,CACjBye,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BmFE4mB,C2BnFF,CAAA,CAAoBgC,EAAA,CAAAtpE,CAAA,CAAUA,CAAA0gD,EAAA,C3BmF5B4mB,C2BnF4B,CAAV,CAA6BtnE,CAAAupD,EAAA,EAA7B,CAAtB,CACnBwe,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3ByEGgE,C2BzEH,CAAA,CAAsBglB,EAAA,CAAAvpE,CAAA,CAAUA,CAAAugD,EAAA,C3ByE7BgE,C2BzE6B,CAAV,CAA+BvkD,CAAAwpD,GAAA,EAA/B,CAAxB,CAEnBse,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAAkhD,EAAA,C3BqGT+B,C2BrGS,CAAX,CAAF,CACnB8kB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAkhD,EAAA,C3BoGT+B,C2BpGS,CAAX,CAAF,CACnB6kB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CACfgjD,EAAA,CAAAhjD,CAAA,C3BkGmBijD,C2BlGnB,CAAuBlxC,CAAA,CAAA/R,CAAA,CAAgBoyD,CAAA,CAAApyD,CAAA,CAAsB,CAAtB,CAAhB,CAAvB,CACAuyD,GAAA,CAAAvyD,CAAA,CAAqB,CAArB,CACAA,EzBysCAq/C,EAAA,CAAgB,CyBxsChB71C,GAAA,CAAAxJ,CAAA,CAJe,CAMnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CACfgjD,EAAA,CAAAhjD,CAAA,C3B4FmBijD,C2B5FnB,CAAuB9wC,CAAA,CAAAnS,CAAA,CAAiBoyD,CAAA,CAAApyD,CAAA,CAAsB,CAAtB,CAAjB,CAAvB,CAAoE,KAApE,CACAuyD,GAAA,CAAAvyD,CAAA,CAAqB,CAArB,CACAA,EzBmsCAq/C,EAAA,CAAgB,CyBlsChB71C,GAAA,CAAAxJ,CAAA,CAJe,CAOnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAawpE,EAAA,CAAAxpE,CAAA,CAASmoE,EAAA,CAAAnoE,CAAA,CAAT,CAA8BooE,EAAA,CAAApoE,CAAA,CAA9B,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAcypE,EAAA,CAAAzpE,CAAA,CAAUuoE,EAAA,CAAAvoE,CAAA,CAAV,CAAgCwoE,EAAA,CAAAxoE,CAAA,CAAhC,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAc0pE,EAAA,CAAA1pE,CAAA,CAAU2oE,EAAA,CAAA3oE,CAAA,CAAV,CAAgC4oE,EAAA,CAAA5oE,CAAA,CAAhC,CAAd,CAAzB,CACnBgJ;CAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAawpE,EAAA,CAAAxpE,CAAA,CAASooE,EAAA,CAAApoE,CAAA,CAAT,CAAwB8oE,EAAA,CAAA9oE,CAAA,CAAxB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAcypE,EAAA,CAAAzpE,CAAA,CAAUwoE,EAAA,CAAAxoE,CAAA,CAAV,CAA0BglE,EAAA,CAAAhlE,CAAA,CAA1B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAc0pE,EAAA,CAAA1pE,CAAA,CAAU4oE,EAAA,CAAA5oE,CAAA,CAAV,CAA2BmlE,EAAA,CAAAnlE,CAAA,CAA3B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3BoEImoB,C2BpEJ,CAAA,CAAmBS,EAAA,CAAAxpE,CAAA,CAASA,CAAA4gD,EAAA,C3BoExBmoB,C2BpEwB,CAAT,CAA2B/oE,CAAAqpD,EAAA,EAA3B,CAArB,CACjBye,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3B0DE4mB,C2B1DF,CAAA,CAAoBmC,EAAA,CAAAzpE,CAAA,CAAUA,CAAA0gD,EAAA,C3B0D5B4mB,C2B1D4B,CAAV,CAA6BtnE,CAAAupD,EAAA,EAA7B,CAAtB,CACnBwe,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BgDGgE,C2BhDH,CAAA,CAAsBmlB,EAAA,CAAA1pE,CAAA,CAAUA,CAAAugD,EAAA,C3BgD7BgE,C2BhD6B,CAAV,CAA+BvkD,CAAAwpD,GAAA,EAA/B,CAAxB,CAGnBse,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAAkhD,EAAA,C3B4EToK,C2B5ES,CAAX,CAAF,CACnByc,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAkhD,EAAA,C3B2EToK,C2B3ES,CAAX,CAAF,CACnBwc,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CACfgjD,EAAA,CAAAhjD,CAAA,C3ByEmBsrD,C2BzEnB,CAAuBv5C,CAAA,CAAA/R,CAAA,CAAgBoyD,CAAA,CAAApyD,CAAA,CAAsB,CAAtB,CAAhB,CAAvB,CACAuyD,GAAA,CAAAvyD,CAAA,CAAqB,CAArB,CAFe,CAInB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CACfgjD,EAAA,CAAAhjD,CAAA,C3BqEmBsrD,C2BrEnB,CAAuBn5C,CAAA,CAAAnS,CAAA,CAAiBoyD,CAAA,CAAApyD,CAAA,CAAsB,CAAtB,CAAjB,CAAvB,CAAoE,KAApE,CACAuyD,GAAA,CAAAvyD,CAAA,CAAqB,CAArB,CAFe,CAKnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAa2pE,EAAA,CAAA3pE,CAAA,CAASmoE,EAAA,CAAAnoE,CAAA,CAAT,CAA8BooE,EAAA,CAAApoE,CAAA,CAA9B,CAAb,CAAzB,CACjB8nE;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAc4pE,EAAA,CAAA5pE,CAAA,CAAUuoE,EAAA,CAAAvoE,CAAA,CAAV,CAAgCwoE,EAAA,CAAAxoE,CAAA,CAAhC,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAc6pE,EAAA,CAAA7pE,CAAA,CAAU2oE,EAAA,CAAA3oE,CAAA,CAAV,CAAgC4oE,EAAA,CAAA5oE,CAAA,CAAhC,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAa2pE,EAAA,CAAA3pE,CAAA,CAASooE,EAAA,CAAApoE,CAAA,CAAT,CAAwB8oE,EAAA,CAAA9oE,CAAA,CAAxB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAc4pE,EAAA,CAAA5pE,CAAA,CAAUwoE,EAAA,CAAAxoE,CAAA,CAAV,CAA0BglE,EAAA,CAAAhlE,CAAA,CAA1B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAc6pE,EAAA,CAAA7pE,CAAA,CAAU4oE,EAAA,CAAA5oE,CAAA,CAAV,CAA2BmlE,EAAA,CAAAnlE,CAAA,CAA3B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3B8CImoB,C2B9CJ,CAAA,CAAmBY,EAAA,CAAA3pE,CAAA,CAASA,CAAA4gD,EAAA,C3B8CxBmoB,C2B9CwB,CAAT,CAA2B/oE,CAAAqpD,EAAA,EAA3B,CAArB,CACjBye,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BoCE4mB,C2BpCF,CAAA,CAAoBsC,EAAA,CAAA5pE,CAAA,CAAUA,CAAA0gD,EAAA,C3BoC5B4mB,C2BpC4B,CAAV,CAA6BtnE,CAAAupD,EAAA,EAA7B,CAAtB,CACnBwe,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B0BGgE,C2B1BH,CAAA,CAAsBslB,EAAA,CAAA7pE,CAAA,CAAUA,CAAAugD,EAAA,C3B0B7BgE,C2B1B6B,CAAV,CAA+BvkD,CAAAwpD,GAAA,EAA/B,CAAxB,CAGnBxgD,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAE8pE,EAAA,CAAA9pE,CAAA,C3BmDIuvD,C2BnDJ,CAAF,CACjBvmD;CAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CF4gBjB,IAGQ+pE,EE/gBW/pE,CF+gBF4gD,EAAA,CzBveMmoB,CyBueN,CAHjB,CAIQiB,EEhhBWhqE,CFghBF2rD,GAAA,EAJjB,CAKQse,EAASpe,EAAA,CEjhBE7rD,CFihBF,CEjhBEA,EFmhBfgR,MAAA,EAAc,GAEd,IAAoB,CAApB,EAAI+4D,CAAJ,CAAa,EAAb,GAAyBE,CAAzB,CErhBejqE,CFuhBX4gD,EAAA,CzB/eemoB,CyB+ef,CACA,EADqB,CACrB,CExhBW/oE,CFwhBXgR,MAAA,EzBvjBoB+0D,EyByjBxB,IAAY,GAAZ,CAAGgE,CAAH,EAAoBC,CAApB,CE1hBehqE,CF4hBX4gD,EAAA,CzBpfemoB,CyBoff,CACA,EADqB,EACrB,CE7hBW/oE,CF6hBXgR,MAAA,EAAc,CE7hBHhR,EFgiBfg/C,EAAA,CEhiBeh/C,CFgiBI4gD,EAAA,CzBxfAmoB,CyBwfA,CEhiBJ/oE,EFiiBfk/C,EAAA,CzBphBOwe,C2BbQ19D,EFkiBfo/C,GAAA,CEliBep/C,CFkiBCm/C,GAAhB,CAAgC,CEliBjBn/C,EFmiBf+Q,EAAA,CAAqB,GEniBR,CAEjB/H,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAakqE,EAAA,CAAAlqE,CAAA,CAASmoE,EAAA,CAAAnoE,CAAA,CAAT,CAA8BooE,EAAA,CAAApoE,CAAA,CAA9B,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAcmqE,EAAA,CAAAnqE,CAAA,CAAUuoE,EAAA,CAAAvoE,CAAA,CAAV,CAAgCwoE,EAAA,CAAAxoE,CAAA,CAAhC,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAcoqE,EAAA,CAAApqE,CAAA,CAAU2oE,EAAA,CAAA3oE,CAAA,CAAV,CAAgC4oE,EAAA,CAAA5oE,CAAA,CAAhC,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAakqE,EAAA,CAAAlqE,CAAA,CAASooE,EAAA,CAAApoE,CAAA,CAAT,CAAwB8oE,EAAA,CAAA9oE,CAAA,CAAxB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAcmqE,EAAA,CAAAnqE,CAAA,CAAUwoE,EAAA,CAAAxoE,CAAA,CAAV,CAA0BglE,EAAA,CAAAhlE,CAAA,CAA1B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAcoqE,EAAA,CAAApqE,CAAA,CAAU4oE,EAAA,CAAA5oE,CAAA,CAAV,CAA2BmlE,EAAA,CAAAnlE,CAAA,CAA3B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3BgCImoB,C2BhCJ,CAAA,CAAmBmB,EAAA,CAAAlqE,CAAA,CAASA,CAAA4gD,EAAA,C3BgCxBmoB,C2BhCwB,CAAT,CAA2B/oE,CAAAqpD,EAAA,EAA3B,CAArB,CACjBye;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BsBE4mB,C2BtBF,CAAA,CAAoB6C,EAAA,CAAAnqE,CAAA,CAAUA,CAAA0gD,EAAA,C3BsB5B4mB,C2BtB4B,CAAV,CAA6BtnE,CAAAupD,EAAA,EAA7B,CAAtB,CACnBwe,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BYGgE,C2BZH,CAAA,CAAsB6lB,EAAA,CAAApqE,CAAA,CAAUA,CAAAugD,EAAA,C3BY7BgE,C2BZ6B,CAAV,CAA+BvkD,CAAAwpD,GAAA,EAA/B,CAAxB,CAEnBxgD,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAE8pE,EAAA,CAAA9pE,CAAA,C3BuCIklD,C2BvCJ,CAAF,CACjBl8C,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CF0hBjB,IAGQ+pE,EE7hBW/pE,CF6hBF4gD,EAAA,CzBlgBMmoB,CyBkgBN,CAHjB,CAIQiB,EE9hBWhqE,CF8hBF2rD,GAAA,EE9hBE3rD,EFgiBfgR,MAAA,EAAc,EAEM,EAApB,EAAI+4D,CAAJ,CAAa,EAAb,GAAyBle,EAAA,CEliBV7rD,CFkiBU,CAAzB,EEliBeA,CFoiBX4gD,EAAA,CzBzgBemoB,CyBygBf,CAEA,EAFqB,CAErB,CEtiBW/oE,CFqiBXgR,MACA,EzBllBoB+0D,EyBklBpB,CEtiBW/lE,CFsiBXgR,MAAA,CEtiBWhR,CFsiBEgR,MAAb,CAA0B,EAA1B,CAA+Bg5D,CAA/B,CAAkD,CAAlD,CAAyCD,CAJ7C,EEliBe/pE,CF0iBXgR,MARJ,EAQkB,GAGlB,IAAY,GAAZ,CAAG+4D,CAAH,EAAoBC,CAApB,CE7iBehqE,CF+iBX4gD,EAAA,CzBphBemoB,CyBohBf,CACA,EADqB,EACrB,CEhjBW/oE,CFgjBXgR,MAAA,EAAc,CEhjBHhR,EFmjBfg/C,EAAA,CEnjBeh/C,CFmjBI4gD,EAAA,CzBxhBAmoB,CyBwhBA,CEnjBJ/oE,EFojBfk/C,EAAA,CzBpjBOwe,C2BAQ19D,EFqjBfo/C,GAAA,CErjBep/C,CFqjBCm/C,GAAhB,CAAgC,CErjBjBn/C,EFsjBf+Q,EAAA,CAAqB,GEtjBR,CAEjB/H,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBioE,GAAA,CAAAjoE,CAAA,CAAaqqE,EAAA,CAAArqE,CAAA,CAASmoE,EAAA,CAAAnoE,CAAA,CAAT,CAA8BooE,EAAA,CAAApoE,CAAA,CAA9B,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBqoE,GAAA,CAAAroE,CAAA,CAAcsqE,EAAA,CAAAtqE,CAAA,CAAUuoE,EAAA,CAAAvoE,CAAA,CAAV,CAAgCwoE,EAAA,CAAAxoE,CAAA,CAAhC,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuByoE,GAAA,CAAAzoE,CAAA,CAAcuqE,EAAA,CAAAvqE,CAAA,CAAU2oE,EAAA,CAAA3oE,CAAA,CAAV,CAAgC4oE,EAAA,CAAA5oE,CAAA,CAAhC,CAAd,CAAzB,CACnBgJ;CAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuB6oE,GAAA,CAAA7oE,CAAA,CAAaqqE,EAAA,CAAArqE,CAAA,CAASooE,EAAA,CAAApoE,CAAA,CAAT,CAAwB8oE,EAAA,CAAA9oE,CAAA,CAAxB,CAAb,CAAzB,CACjB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBilE,GAAA,CAAAjlE,CAAA,CAAcsqE,EAAA,CAAAtqE,CAAA,CAAUwoE,EAAA,CAAAxoE,CAAA,CAAV,CAA0BglE,EAAA,CAAAhlE,CAAA,CAA1B,CAAd,CAAzB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAuBolE,GAAA,CAAAplE,CAAA,CAAcuqE,EAAA,CAAAvqE,CAAA,CAAU4oE,EAAA,CAAA5oE,CAAA,CAAV,CAA2BmlE,EAAA,CAAAnlE,CAAA,CAA3B,CAAd,CAAzB,CACnBgJ,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEA,CAAA4gD,EAAA,C3BmBImoB,C2BnBJ,CAAA,CAAmBsB,EAAA,CAAArqE,CAAA,CAASA,CAAA4gD,EAAA,C3BmBxBmoB,C2BnBwB,CAAT,CAA2B/oE,CAAAqpD,EAAA,EAA3B,CAArB,CACjBye,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BSE4mB,C2BTF,CAAA,CAAoBgD,EAAA,CAAAtqE,CAAA,CAAUA,CAAA0gD,EAAA,C3BS5B4mB,C2BT4B,CAAV,CAA6BtnE,CAAAupD,EAAA,EAA7B,CAAtB,CACnBwe,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BDGgE,C2BCH,CAAA,CAAsBgmB,EAAA,CAAAvqE,CAAA,CAAUA,CAAAugD,EAAA,C3BD7BgE,C2BC6B,CAAV,CAA+BvkD,CAAAwpD,GAAA,EAA/B,CAAxB,CAEnBxgD,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAE8pE,EAAA,CAAA9pE,CAAA,C3B2BIijD,C2B3BJ,CAAF,CACjBj6C,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CFwlBkB,CAA/B,EExlBeA,CFwlBX4gD,EAAA,CzB1kBemoB,CyB0kBf,CAAJ,CAAwB,EAAxB,GAAoCld,EAAA,CExlBrB7rD,CFwlBqB,CAApC,EExlBeA,CF0lBX0gD,EAAA,CzBrlBe4mB,CyBqlBf,CAEA,EAFsB,CAEtB,CE5lBWtnE,CF2lBX4gD,EAAA,CzBzkBe4pB,CyBykBf,CACA,EADqB,CACrB,CE5lBWxqE,CF4lBXgR,MAAA,EAAc,EAJlB,EExlBehR,CFgmBXgR,MARJ,EAQkB,GEhmBHhR,EFkmBf4gD,EAAA,CzBplBmBmoB,CyBolBnB,CAAA,EAAqB,EElmBN/oE,EFomBf+Q,EAAA,EAAsB,GEpmBT,CAEjB/H,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAgC,KAAA,EAAA8oE,EAAA,CAAA9oE,CAAA,CAATA,EFnGQo+D,IAAA,CAASb,CAAT,CEmGgB6K,EAAA5K,CAAAx9D,CAAAw9D,CFnGhB,CzBoFvCE,CyBpFuC,CEmGjC,CACjBoK;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAiC,KAAA,EAAAglE,EAAA,CAAAhlE,CAAA,CAAVA,EFnGOo+D,IAAA,CAASb,CAAT,CEmGmBiL,EAAAhL,CAAAx9D,CAAAw9D,CFnGnB,CzBqFvCI,EyBrFuC,CEmGhC,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAiC,KAAA,EAAAmlE,EAAA,CAAAnlE,CAAA,CAAVA,EFnGOo+D,IAAA,CAASb,CAAT,CEmGoBqL,EAAApL,CAAAx9D,CAAAw9D,CFnGpB,CzBsFvCM,EyBtFuC,CEmGhC,CACnB90D,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAA+C,KAAA,EAAA8oE,EAAA,CAAA9oE,CAAA,CAAxBA,EFtGQo+D,IAAA,CEsGCgK,EAAA7K,CAAAv9D,CAAAu9D,CFtGD,CAAeC,CAAf,CzBoFvCE,CyBpFuC,CEsGjC,CACjBoK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAiD,KAAA,EAAAglE,EAAA,CAAAhlE,CAAA,CAA1BA,EFtGOo+D,IAAA,CEsGGoK,EAAAjL,CAAAv9D,CAAAu9D,CFtGH,CAAeC,CAAf,CzBqFvCI,EyBrFuC,CEsGhC,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEgoE,CAAA,CAAAhoE,CAAA,CAAkD,KAAA,EAAAmlE,EAAA,CAAAnlE,CAAA,CAA3BA,EFtGOo+D,IAAA,CEsGGwK,EAAArL,CAAAv9D,CAAAu9D,CFtGH,CAAeC,CAAf,CzBsFvCM,EyBtFuC,CEsGhC,CACnB90D,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAA6B,IAAA,EAAAA,CAAAqpD,EAAA,EAA3BrpD,EFzG+Bo+D,IAAA,CEyGtBp+D,CAAA4gD,EAAA2c,C3BMLwL,C2BNKxL,CFzGsB,CAAeC,CAAf,CzBoFvCE,CyBpFuC,CEyGjC,CACjBoK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAA+B,IAAA,EAAAA,CAAAupD,EAAA,EAA7BvpD,EFzG8Bo+D,IAAA,CEyGpBp+D,CAAA0gD,EAAA6c,C3BJR+J,C2BIQ/J,CFzGoB,CAAeC,CAAf,CzBqFvCI,EyBrFuC,CEyGhC,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAiC,IAAA,EAAAA,CAAAwpD,GAAA,EAA/BxpD,EFzG8Bo+D,IAAA,CEyGpBp+D,CAAAugD,EAAAgd,C3BdPhZ,C2BcOgZ,CFzGoB,CAAeC,CAAf,CzBsFvCM,EyBtFuC,CEyGhC,CAEnB90D,EAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CAAE8pE,EAAA,CAAA9pE,CAAA,C3BeIsrD,C2BfJ,CAAF,CACjBtiD;CAAA,CAAE,EAAF,CAAA,CAAU,QAAA,CAAAhJ,CAAA,CAAO,CF8lBkB,CAA/B,EE9lBeA,CF8lBX4gD,EAAA,CzB7lBemoB,CyB6lBf,CAAJ,CAAwB,EAAxB,GAAoCld,EAAA,CE9lBrB7rD,CF8lBqB,CAApC,EE9lBeA,CFgmBX0gD,EAAA,CzBxmBe4mB,CyBwmBf,CAEA,EAFsB,CAEtB,CADA,EEjmBWtnE,CFimBX4gD,EAAA,CzB5lBe4pB,CyB4lBf,CACA,CElmBWxqE,CFkmBXgR,MAAA,EAAc,EAJlB,EE9lBehR,CFsmBXgR,MARJ,EAQkB,GEtmBHhR,EFwmBf4gD,EAAA,CzBvmBmBmoB,CyBumBnB,CAAA,EAAqB,EExmBN/oE,EF0mBf+Q,EAAA,EAAsB,GE1mBT,CAGjB+2D,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BXE4mB,C2BWF,CAAA,CFhDyBmD,EAAA,CEgDLzqE,CFhDK,CEgDKA,CAAA0gD,EAAA6c,C3BX5B+J,C2BW4B/J,CFhDL,CzBqBlCK,EyBrBkC,CEgD3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BrBGgE,C2BqBH,CAAA,CFhDyBkmB,EAAA,CEgDHzqE,CFhDG,CEgDOA,CAAAugD,EAAAgd,C3BrB7BhZ,C2BqB6BgZ,CFhDP,CzBsBlCO,EyBtBkC,CEgD3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BZEub,C2BYF,CAAA,CFlDyBwO,EAAA,CEkDLzqE,CFlDK,CEkDKA,CAAA0gD,EAAA6c,C3BZ5BtB,C2BY4BsB,CFlDL,CzBqBlCK,EyBrBkC,CEkD3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BtBGoO,C2BsBH,CAAA,CFlDyB8b,EAAA,CEkDHzqE,CFlDG,CEkDOA,CAAAugD,EAAAgd,C3BtB7B5O,C2BsB6B4O,CFlDP,CzBsBlCO,EyBtBkC,CEkD3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BbEgqB,C2BaF,CAAA,CFpDyBD,EAAA,CEoDLzqE,CFpDK,CEoDKA,CAAA0gD,EAAA6c,C3Bb5BmN,C2Ba4BnN,CFpDL,CzBqBlCK,EyBrBkC,CEoD3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BvBGsO,C2BuBH,CAAA,CFpDyB4b,EAAA,CEoDHzqE,CFpDG,CEoDOA,CAAAugD,EAAAgd,C3BvB7B1O,C2BuB6B0O,CFpDP,CzBsBlCO,EyBtBkC,CEoD3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BdEkc,C2BcF,CAAA,CFtDyB6N,EAAA,CEsDLzqE,CFtDK,CEsDKA,CAAA0gD,EAAA6c,C3Bd5BX,C2Bc4BW,CFtDL,CzBqBlCK,EyBrBkC,CEsD3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BxBGiE,C2BwBH,CAAA,CFtDyBimB,EAAA,CEsDHzqE,CFtDG,CEsDOA,CAAAugD,EAAAgd,C3BxB7B/Y,C2BwB6B+Y,CFtDP,CzBsBlCO,EyBtBkC,CEsD3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BfEwC,C2BeF,CAAA,CFxDyBunB,EAAA,CEwDLzqE,CFxDK,CEwDKA,CAAA0gD,EAAA6c,C3Bf5Bra,C2Be4Bqa,CFxDL,CzBqBlCK,EyBrBkC,CEwD3B,CACnBmK;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BzBGiM,C2ByBH,CAAA,CFxDyBie,EAAA,CEwDHzqE,CFxDG,CEwDOA,CAAAugD,EAAAgd,C3BzB7B/Q,C2ByB6B+Q,CFxDP,CzBsBlCO,EyBtBkC,CEwD3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BhBEsc,E2BgBF,CAAA,CF1DyByN,EAAA,CE0DLzqE,CF1DK,CE0DKA,CAAA0gD,EAAA6c,C3BhB5BP,E2BgB4BO,CF1DL,CzBqBlCK,EyBrBkC,CE0D3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B1BG0O,C2B0BH,CAAA,CF1DyBwb,EAAA,CE0DHzqE,CF1DG,CE0DOA,CAAAugD,EAAAgd,C3B1B7BtO,C2B0B6BsO,CF1DP,CzBsBlCO,EyBtBkC,CE0D3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BjBEmc,E2BiBF,CAAA,CF5DyB4N,EAAA,CE4DLzqE,CF5DK,CE4DKA,CAAA0gD,EAAA6c,C3BjB5BV,E2BiB4BU,CF5DL,CzBqBlCK,EyBrBkC,CE4D3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B3BG4O,C2B2BH,CAAA,CF5DyBsb,EAAA,CE4DHzqE,CF5DG,CE4DOA,CAAAugD,EAAAgd,C3B3B7BpO,C2B2B6BoO,CF5DP,CzBsBlCO,EyBtBkC,CE4D3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BlBEoc,E2BkBF,CAAA,CF9DyB2N,EAAA,CE8DLzqE,CF9DK,CE8DKA,CAAA0gD,EAAA6c,C3BlB5BT,E2BkB4BS,CF9DL,CzBqBlCK,EyBrBkC,CE8D3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B5BG8O,C2B4BH,CAAA,CF9DyBob,EAAA,CE8DHzqE,CF9DG,CE8DOA,CAAAugD,EAAAgd,C3B5B7BlO,C2B4B6BkO,CF9DP,CzBsBlCO,EyBtBkC,CE8D3B,CAGnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3B7BE4mB,C2B6BF,CAAA,CF9DyBqD,EAAA,CE8DL3qE,CF9DK,CE8DKA,CAAA0gD,EAAA6c,C3B7B5B+J,C2B6B4B/J,CF9DL,CzBiBlCK,EyBjBkC,CE8D3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BvCGgE,C2BuCH,CAAA,CF9DyBomB,EAAA,CE8DH3qE,CF9DG,CE8DOA,CAAAugD,EAAAgd,C3BvC7BhZ,C2BuC6BgZ,CF9DP,CzBkBlCO,EyBlBkC,CE8D3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3B9BEub,C2B8BF,CAAA,CFhEyB0O,EAAA,CEgEL3qE,CFhEK,CEgEKA,CAAA0gD,EAAA6c,C3B9B5BtB,C2B8B4BsB,CFhEL,CzBiBlCK,EyBjBkC,CEgE3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BxCGoO,C2BwCH,CAAA,CFhEyBgc,EAAA,CEgEH3qE,CFhEG,CEgEOA,CAAAugD,EAAAgd,C3BxC7B5O,C2BwC6B4O,CFhEP,CzBkBlCO,EyBlBkC,CEgE3B,CACnBgK;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3B/BEgqB,C2B+BF,CAAA,CFlEyBC,EAAA,CEkEL3qE,CFlEK,CEkEKA,CAAA0gD,EAAA6c,C3B/B5BmN,C2B+B4BnN,CFlEL,CzBiBlCK,EyBjBkC,CEkE3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BzCGsO,C2ByCH,CAAA,CFlEyB8b,EAAA,CEkEH3qE,CFlEG,CEkEOA,CAAAugD,EAAAgd,C3BzC7B1O,C2ByC6B0O,CFlEP,CzBkBlCO,EyBlBkC,CEkE3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BhCEkc,C2BgCF,CAAA,CFpEyB+N,EAAA,CEoEL3qE,CFpEK,CEoEKA,CAAA0gD,EAAA6c,C3BhC5BX,C2BgC4BW,CFpEL,CzBiBlCK,EyBjBkC,CEoE3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B1CGiE,C2B0CH,CAAA,CFpEyBmmB,EAAA,CEoEH3qE,CFpEG,CEoEOA,CAAAugD,EAAAgd,C3B1C7B/Y,C2B0C6B+Y,CFpEP,CzBkBlCO,EyBlBkC,CEoE3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BjCEwC,C2BiCF,CAAA,CFtEyBynB,EAAA,CEsEL3qE,CFtEK,CEsEKA,CAAA0gD,EAAA6c,C3BjC5Bra,C2BiC4Bqa,CFtEL,CzBiBlCK,EyBjBkC,CEsE3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B3CGiM,C2B2CH,CAAA,CFtEyBme,EAAA,CEsEH3qE,CFtEG,CEsEOA,CAAAugD,EAAAgd,C3B3C7B/Q,C2B2C6B+Q,CFtEP,CzBkBlCO,EyBlBkC,CEsE3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BlCEsc,E2BkCF,CAAA,CFxEyB2N,EAAA,CEwEL3qE,CFxEK,CEwEKA,CAAA0gD,EAAA6c,C3BlC5BP,E2BkC4BO,CFxEL,CzBiBlCK,EyBjBkC,CEwE3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B5CG0O,C2B4CH,CAAA,CFxEyB0b,EAAA,CEwEH3qE,CFxEG,CEwEOA,CAAAugD,EAAAgd,C3B5C7BtO,C2B4C6BsO,CFxEP,CzBkBlCO,EyBlBkC,CEwE3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BnCEmc,E2BmCF,CAAA,CF1EyB8N,EAAA,CE0EL3qE,CF1EK,CE0EKA,CAAA0gD,EAAA6c,C3BnC5BV,E2BmC4BU,CF1EL,CzBiBlCK,EyBjBkC,CE0E3B,CACnBmK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B7CG4O,C2B6CH,CAAA,CF1EyBwb,EAAA,CE0EH3qE,CF1EG,CE0EOA,CAAAugD,EAAAgd,C3B7C7BpO,C2B6C6BoO,CF1EP,CzBkBlCO,EyBlBkC,CE0E3B,CACnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BpCEoc,E2BoCF,CAAA,CF5EyB6N,EAAA,CE4EL3qE,CF5EK,CE4EKA,CAAA0gD,EAAA6c,C3BpC5BT,E2BoC4BS,CF5EL,CzBiBlCK,EyBjBkC,CE4E3B,CACnBmK;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B9CG8O,C2B8CH,CAAA,CF5EyBsb,EAAA,CE4EH3qE,CF5EG,CE4EOA,CAAAugD,EAAAgd,C3B9C7BlO,C2B8C6BkO,CF5EP,CzBkBlCO,EyBlBkC,CE4E3B,CAGnBgK,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3B/CT4mB,C2B+CS,CAAX,CAAF,CACnBS,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3BzDRgE,C2ByDQ,CAAX,CAAF,CACnBujB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BhDTub,C2BgDS,CAAX,CAAF,CACnB8L,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3B1DRoO,C2B0DQ,CAAX,CAAF,CACnBmZ,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BjDTgqB,C2BiDS,CAAX,CAAF,CACnB3C,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3B3DRsO,C2B2DQ,CAAX,CAAF,CACnBiZ,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BlDTkc,C2BkDS,CAAX,CAAF,CACnBmL,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3B5DRiE,C2B4DQ,CAAX,CAAF,CACnBsjB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BnDTwC,C2BmDS,CAAX,CAAF,CACnB6kB,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3B7DRiM,C2B6DQ,CAAX,CAAF,CACnBsb,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BpDTsc,E2BoDS,CAAX,CAAF,CACnB+K,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3B9DR0O,C2B8DQ,CAAX,CAAF,CACnB6Y,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BrDTmc,E2BqDS,CAAX,CAAF,CACnBkL,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3B/DR4O,C2B+DQ,CAAX,CAAF,CACnB2Y,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEmxD,CAAA,CAAAnxD,CAAA,CAAWA,CAAA0gD,EAAA,C3BtDToc,E2BsDS,CAAX,CAAF,CACnBiL;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEoxD,CAAA,CAAApxD,CAAA,CAAWA,CAAAugD,EAAA,C3BhER8O,C2BgEQ,CAAX,CAAF,CAEnByY,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BhEE4mB,C2BgEF,CAAA,CAAoBsD,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B1EGgE,C2B0EH,CAAA,CAAsBsmB,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BjEEub,C2BiEF,CAAA,CAAoB2O,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B3EGoO,C2B2EH,CAAA,CAAsBkc,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BlEEgqB,C2BkEF,CAAA,CAAoBE,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B5EGsO,C2B4EH,CAAA,CAAsBgc,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BnEEkc,C2BmEF,CAAA,CAAoBgO,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B7EGiE,C2B6EH,CAAA,CAAsBqmB,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BpEEwC,C2BoEF,CAAA,CAAoB0nB,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B9EGiM,C2B8EH,CAAA,CAAsBqe,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BrEEsc,E2BqEF,CAAA,CAAoB4N,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3B/EG0O,C2B+EH,CAAA,CAAsB4b,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BtEEmc,E2BsEF,CAAA,CAAoB+N,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BhFG4O,C2BgFH,CAAA,CAAsB0b,EAAA,CAAA7qE,CAAA,CAAxB,CACnB8nE;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CAAEA,CAAA0gD,EAAA,C3BvEEoc,E2BuEF,CAAA,CAAoB8N,EAAA,CAAA5qE,CAAA,CAAtB,CACnB+nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CAAEA,CAAAugD,EAAA,C3BjFG8O,C2BiFH,CAAA,CAAsBwb,EAAA,CAAA7qE,CAAA,CAAxB,CAGnB8nE,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CD6Ef,IAAIqnE,EC7EarnE,CD6EN0gD,EAAA,C1B3JQwC,C0B2JR,CAIX5xC,GAAA,CCjFiBtR,CDiFjB,CAA2BoyD,CAAA,CCjFVpyD,CDiFU,CAAwB,GAAxB,CAA3B,CAAwD,EAAxD,CAEAmxD,EAAA,CCnFiBnxD,CDmFjB,CCnFiBA,CDmFL0gD,EAAA,C1BrKO4mB,C0BqKP,CAAZ,CACAnW,EAAA,CCpFiBnxD,CDoFjB,CCpFiBA,CDoFL0gD,EAAA,C1BrKOub,C0BqKP,CAAZ,CACA9K,EAAA,CCrFiBnxD,CDqFjB,CCrFiBA,CDqFL0gD,EAAA,C1BrKOgqB,C0BqKP,CAAZ,CACAvZ,EAAA,CCtFiBnxD,CDsFjB,CCtFiBA,CDsFL0gD,EAAA,C1BrKOkc,C0BqKP,CAAZ,CACAzL,EAAA,CCvFiBnxD,CDuFjB,CAAYqnE,CAAZ,CACAlW,EAAA,CCxFiBnxD,CDwFjB,CCxFiBA,CDwFL0gD,EAAA,C1BrKOsc,E0BqKP,CAAZ,CACA7L,EAAA,CCzFiBnxD,CDyFjB,CCzFiBA,CDyFL0gD,EAAA,C1BrKOmc,E0BqKP,CAAZ,CACA1L,EAAA,CC1FiBnxD,CD0FjB,CC1FiBA,CD0FL0gD,EAAA,C1BrKOoc,E0BqKP,CAAZ,CC1Fe,CACnBiL,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA/nE,CAAA,CAAO,CD8Ff,IAAIqnE,EC9FarnE,CD8FNugD,EAAA,C1BtLSiM,C0BsLT,CAEXl7C,GAAA,CChGiBtR,CDgGjB,CAA2BoyD,CAAA,CChGVpyD,CDgGU,CAAwB,GAAxB,CAA3B,CAAwD,EAAxD,CAEAoxD,EAAA,CClGiBpxD,CDkGjB,CClGiBA,CDkGLugD,EAAA,C1B9LQgE,C0B8LR,CAAZ,CACA6M,EAAA,CCnGiBpxD,CDmGjB,CCnGiBA,CDmGLugD,EAAA,C1B9LQoO,C0B8LR,CAAZ,CACAyC,EAAA,CCpGiBpxD,CDoGjB,CCpGiBA,CDoGLugD,EAAA,C1B9LQsO,C0B8LR,CAAZ,CACAuC,EAAA,CCrGiBpxD,CDqGjB,CCrGiBA,CDqGLugD,EAAA,C1B9LQiE,C0B8LR,CAAZ,CACA4M,EAAA,CCtGiBpxD,CDsGjB,CAAYqnE,CAAZ,CACAjW,EAAA,CCvGiBpxD,CDuGjB,CCvGiBA,CDuGLugD,EAAA,C1B9LQ0O,C0B8LR,CAAZ,CACAmC,EAAA,CCxGiBpxD,CDwGjB,CCxGiBA,CDwGLugD,EAAA,C1B9LQ4O,C0B8LR,CAAZ,CACAiC,EAAA,CCzGiBpxD,CDyGjB,CCzGiBA,CDyGLugD,EAAA,C1B9LQ8O,C0B8LR,CAAZ,CCzGe,CACnByY,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA9nE,CAAA,CAAO,CD6GfooD,EAAA,CC7GiBpoD,CD6GjB,CAA4BoyD,CAAA,CC7GXpyD,CD6GW,CAAuB,CAAvB,CAA5B,CACAooD,GAAA,CC9GiBpoD,CD8GjB,CAA4BoyD,CAAA,CC9GXpyD,CD8GW,CAAuB,EAAvB,CAA5B,CC9GiBA,EDgHjB0gD,EAAA,C1B7LmBoc,E0B6LnB,CAAA,CAAqB8N,EAAA,CChHJ5qE,CDgHI,CChHJA,EDiHjB0gD,EAAA,C1B/LmBmc,E0B+LnB,CAAA,CAAqB+N,EAAA,CCjHJ5qE,CDiHI,CCjHJA,EDkHjB0gD,EAAA,C1BjMmBsc,E0BiMnB,CAAA,CAAqB4N,EAAA,CClHJ5qE,CDkHI,CACrBuyD,GAAA,CCnHiBvyD,CDmHjB,CAAsB,CAAtB,CCnHiBA,EDoHjB0gD,EAAA,C1BrMmBkc,C0BqMnB,CAAA,CAAqBgO,EAAA,CCpHJ5qE,CDoHI,CCpHJA,EDqHjB0gD,EAAA,C1BvMmBgqB,C0BuMnB,CAAA,CAAqBE,EAAA,CCrHJ5qE,CDqHI,CCrHJA,EDsHjB0gD,EA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",
"sources":["lib/closure-base.js"," [synthetic:es6/util/arrayiterator] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:util/polyfill] "," [synthetic:es6/string/endswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/math/trunc] "," [synthetic:es6/symbol] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] "," [synthetic:util/owns] "," [synthetic:es6/weakmap] "," [synthetic:es6/map] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/construct] "," [synthetic:es6/reflect/construct] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/reflect/setprototypeof] ","lib/9p.js","lib/filesystem.js","src/browser/screen.js","src/browser/main.js","src/browser/starter.js","src/io.js","src/const.js","src/main.js","src/cpu.js","src/config.js","src/lib.js","src/sb16.js","src/fpu.js","src/ide.js","src/rtc.js","src/memory.js","src/pci.js","src/floppy.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/uart.js","src/state.js","src/ne2k.js","src/virtio.js","lib/jor1k.js","src/bus.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","lib/marshall.js","lib/utf8.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/dummy_screen.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (goog.global.CLOSURE_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n *\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {Object=} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) ||\n      !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error('Invalid module identifier');\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      // goog.require only return a value with-in goog.module files.\n      return name in goog.loadedModules_ ?\n          goog.loadedModules_[name] :\n          goog.getObjectByName(name);\n    } else {\n      return null;\n    }\n  }\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareTestMethods: boolean\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n\n\n/**\n * Indicate that a module's exports that are known test methods should\n * be copied to the global object.  This makes the test methods visible to\n * test runners that inspect the global object.\n *\n * TODO(johnlenz): Make the test framework aware of goog.module so\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\n * to minimize boiler plate.\n * @suppress {missingProvide}\n * @deprecated This approach does not translate to ES6 module syntax, instead\n *    use goog.testing.testSuite to declare the test methods.\n */\ngoog.module.declareTestMethods = function() {\n  if (!goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareTestMethods must be called from ' +\n        'within a goog.module');\n  }\n  goog.moduleLoaderState_.declareTestMethods = true;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw Error('Importing test-only code into non-debug environment' +\n                (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\n *     a module as declared by goog.module.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.pathIsModule[path] = !!opt_isModule;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the JSCompiler when the --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n\n  // If the object already exists we do not need do do anything.\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      } else {\n        return null;\n      }\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return null;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    goog.logToConsole_(errorMessage);\n\n    throw Error(errorMessage);\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to write out Closure's deps file. By default, the deps are written.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as an argument\n * because that would make it more difficult to obfuscate our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of {@code eval} is banned\n * so we provide an alternative.\n */\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * the module identifier to module exports map.\n * @private @const {!Object<string, ?>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * Object used to keep track of urls that have already been added. This record\n   * allows the prevention of circular dependencies.\n   * @private {!Object<string, boolean>}\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {{\n   *   pathIsModule: !Object<string, boolean>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    pathIsModule: {}, // 1 to 1\n\n    nameToPath: {}, // 1 to 1\n\n    requires: {}, // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n\n    written: {}, // Used to keep track of script files we have written.\n\n    deferred: {} // Used to track deferred module evaluations in old IEs\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('SCRIPT');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @const @private {boolean} */\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\n      goog.global.document.all;\n\n\n  /**\n   * Given a URL initiate retrieval and execution of the module.\n   * @param {string} src Script source URL.\n   * @private\n   */\n  goog.importModule_ = function(src) {\n    // In an attempt to keep browsers from timing out loading scripts using\n    // synchronous XHRs, put each load in its own script block.\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\n\n    if (goog.importScript_('', bootstrap)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @private {!Array<string>} */\n  goog.queuedModules_ = [];\n\n\n  /**\n   * Return an appropriate module text. Suitable to insert into\n   * a script tag (that is unescaped).\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   * @private\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' +\n          scriptText +\n          '\\n' + // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + srcUrl + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\n          ');';\n    }\n  };\n\n  // On IE9 and earlier, it is necessary to handle\n  // deferred module loads. In later browsers, the\n  // code to be evaluated is simply inserted as a script\n  // block in the correct order. To eval deferred\n  // code at the right time, we piggy back on goog.require to call\n  // goog.maybeProcessDeferredDep_.\n  //\n  // The goog.requires are used both to bootstrap\n  // the loading process (when no deps are available) and\n  // declare that they should be available.\n  //\n  // Here we eval the sources, if all the deps are available\n  // either already eval'd or goog.require'd.  This will\n  // be the case when all the dependencies have already\n  // been loaded, and the dependent module is loaded.\n  //\n  // But this alone isn't sufficient because it is also\n  // necessary to handle the case where there is no root\n  // that is not deferred.  For that there we register for an event\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\n  // evaluations.\n\n  /**\n   * Handle any remaining deferred goog.module evals.\n   * @private\n   */\n  goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n  };\n\n\n  /**\n   * Eval the named module if its dependencies are\n   * available.\n   * @param {string} name The module to load.\n   * @private\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) &&\n        goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose evaluation has been deferred.\n   * @private\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && goog.dependencies_.pathIsModule[path]) {\n      var abspath = goog.basePath + path;\n      return (abspath) in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose declared dependencies have all been loaded\n   *     (eval'd or a deferred module load)\n   * @private\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && (path in goog.dependencies_.requires)) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) &&\n            !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n\n  /**\n   * @param {string} abspath\n   * @private\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n\n\n  /**\n   * @param {function(?):?|string} moduleDef The module definition.\n   */\n  goog.loadModule = function(moduleDef) {\n    // NOTE: we allow function definitions to be either in the from\n    // of a string to eval (which keeps the original source intact) or\n    // in a eval forbidden environment (CSP) we allow a function definition\n    // which in its body must call {@code goog.module}, and return the exports\n    // of the module.\n    var previousState = goog.moduleLoaderState_;\n    try {\n      goog.moduleLoaderState_ = {\n        moduleName: undefined, declareTestMethods: false};\n      var exports;\n      if (goog.isFunction(moduleDef)) {\n        exports = moduleDef.call(goog.global, {});\n      } else if (goog.isString(moduleDef)) {\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\n      } else {\n        throw Error('Invalid module definition');\n      }\n\n      var moduleName = goog.moduleLoaderState_.moduleName;\n      if (!goog.isString(moduleName) || !moduleName) {\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\n      }\n\n      // Don't seal legacy namespaces as they may be uses as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        goog.constructNamespace_(moduleName, exports);\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\n        Object.seal(exports);\n      }\n\n      goog.loadedModules_[moduleName] = exports;\n      if (goog.moduleLoaderState_.declareTestMethods) {\n        for (var entry in exports) {\n          if (entry.indexOf('test', 0) === 0 ||\n              entry == 'tearDown' ||\n              entry == 'setUp' ||\n              entry == 'setUpPage' ||\n              entry == 'tearDownPage') {\n            goog.global[entry] = exports[entry];\n          }\n        }\n      }\n    } finally {\n      goog.moduleLoaderState_ = previousState;\n    }\n  };\n\n\n  /**\n   * @param {string} source\n   * @return {!Object}\n   * @private\n   */\n  goog.loadModuleFromSource_ = function(source) {\n    // NOTE: we avoid declaring parameters or local variables here to avoid\n    // masking globals or leaking values into the module definition.\n    'use strict';\n    var exports = {};\n    eval(arguments[0]);\n    return exports;\n  };\n\n\n  /**\n   * Writes a new script pointing to {@code src} directly into the DOM.\n   *\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\n   * the fallback mechanism.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write(\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\n  };\n\n\n  /**\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n   * method exists as a fallback for document.write (which is not allowed in a\n   * strict CSP context, e.g., Chrome apps).\n   *\n   * NOTE: This method is not analogous to using document.write to insert a\n   * <script> tag; specifically, the user agent will execute a script added by\n   * document.write immediately after the current script block finishes\n   * executing, whereas the DOM-appended script node will not be executed until\n   * the entire document is parsed and executed. That is to say, this script is\n   * added to the end of the script execution queue.\n   *\n   * The page must not attempt to call goog.required entities until after the\n   * document has loaded, e.g., in or after the window.onload callback.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    var doc = goog.global.document;\n    var scriptEl = doc.createElement('script');\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      var isOldIE = goog.IS_OLD_IE_;\n\n      if (opt_sourceText === undefined) {\n        if (!isOldIE) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\n          doc.write(\n              '<script type=\"text/javascript\" src=\"' +\n                  src + '\"' + state + '></' + 'script>');\n        }\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n            opt_sourceText +\n            '</' + 'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /** @private {number} */\n  goog.lastNonModuleScriptIndex_ = 0;\n\n\n  /**\n   * A readystatechange handler for legacy IE\n   * @param {!HTMLScriptElement} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   * @private\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    // for now load the modules when we reach the last script,\n    // later allow more inter-mingling.\n    if (script.readyState == 'complete' &&\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    /** @type {!Array<string>} The scripts we need to write this time. */\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    /** @param {string} path */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    // If a module is loaded synchronously then we need to\n    // clear the current inModuleLoader value, and restore it when we are\n    // done loading the current \"requires\".\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n\n    var loadingModule = false;\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        if (!deps.pathIsModule[path]) {\n          goog.importScript_(goog.basePath + path);\n        } else {\n          loadingModule = true;\n          goog.importModule_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error('Undefined script input');\n      }\n    }\n\n    // restore the current \"module loading state\"\n    goog.moduleLoaderState_ = moduleState;\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (i && components[i] == '..' &&\n        components[i - 1] && components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {string} File contents.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    var xhr = new goog.global['XMLHttpRequest']();\n    xhr.open('get', src, false);\n    xhr.send();\n    return xhr.responseText;\n  }\n};\n\n\n/**\n * Retrieve and execute a module.\n * @param {string} src Script source URL.\n * @private\n */\ngoog.retrieveAndExecModule_ = function(src) {\n  if (!COMPILED) {\n    // The full but non-canonicalized URL for later use.\n    var originalPath = src;\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\n    src = goog.normalizePath_(src);\n\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n\n    var scriptText = goog.loadFileSync_(src);\n\n    if (scriptText != null) {\n      var execModuleScript = goog.wrapModule_(src, scriptText);\n      var isOldIE = goog.IS_OLD_IE_;\n      if (isOldIE) {\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\n        goog.queuedModules_.push(originalPath);\n      } else {\n        importScript(src, execModuleScript);\n      }\n    } else {\n      throw new Error('load of ' + src + 'failed');\n    }\n  }\n};\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals tyepof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length == 'number' &&\n           typeof value.splice != 'undefined' &&\n           typeof value.propertyIsEnumerable != 'undefined' &&\n           !value.propertyIsEnumerable('splice')\n\n          )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n          typeof value.call != 'undefined' &&\n          typeof value.propertyIsEnumerable != 'undefined' &&\n          !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. As a special case, a function value is not array like, because its\n * length property is fixed to correspond to the number of expected arguments.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if ('removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  /** @preserveTry */\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\n *     deprecated because some people have declared a pure-JS version.\n *     Only the pure-JS version is truly deprecated.\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n  // Unary plus operator converts its operand to a number which in the case of\n  // a date is done by calling getTime().\n  return +new Date();\n});\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _et_ = 1;');\n      if (typeof goog.global['_et_'] != 'undefined') {\n        delete goog.global['_et_'];\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      var doc = goog.global.document;\n      var scriptElt = doc.createElement('SCRIPT');\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x= 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\n        getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  if (opt_modifier) {\n    return className + '-' + rename(opt_modifier);\n  } else {\n    return rename(className);\n  }\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --closure_pass flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {};\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass' method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\n                'with strict mode code. See ' +\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\n  }\n\n  if (caller.superClass_) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor;\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error('cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {\n *     !Object|\n *     {constructor:!Function}|\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\n * @suppress {missingProvide}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by\n * goog.defineClass should be sealed when possible.\n */\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\n      Object.seal instanceof Function) {\n    // Don't seal subclasses of unsealable-tagged legacy classes.\n    if (superClass && superClass.prototype &&\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\n      return ctr;\n    }\n    /**\n     * @this {Object}\n     * @return {?}\n     */\n    var wrappedCtr = function() {\n      // Don't seal an instance of a subclass when it calls the constructor of\n      // its super class as there is most likely still setup to do.\n      var instance = ctr.apply(this, arguments) || this;\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n      if (this.constructor === wrappedCtr) {\n        Object.seal(instance);\n      }\n      return instance;\n    };\n    return wrappedCtr;\n  }\n  return ctr;\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor.  As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \"broken\", instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility method for creating an iterator for Arrays.\n */\n'require base';\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {function():!IIterableResult<T>}\n * @template T\n */\n$jscomp.arrayIteratorImpl = function(array) {\n  var index = 0;\n  return function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  };\n};\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {!Iterator<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  return /** @type {!Iterator<T>} */ ({next: $jscomp.arrayIteratorImpl(array)});\n};\n\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/util/arrayiterator';\n\n/**\n * Creates an iterator for the given iterable.  This iterator should never\n * be exposed to user code.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n      (/** @type {?} */ (iterable)[Symbol.iterator]);\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  // This logic can be simplified to be made more optimizable.\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ?\n      /** @type {!Object} */ (global) :\n      maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\" now that the type\n// of \"Global\" has landed in the type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.endsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string ends with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.endsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');\n    searchString = searchString + '';\n    if (opt_position === void 0) opt_position = string.length;\n    var i = Math.max(0, Math.min(opt_position | 0, string.length));\n    var j = searchString.length;\n    while (j > 0 && i > 0) {\n      if (string[--i] != searchString[--j]) return false;\n    }\n    return j <= 0;\n  };\nreturn polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Throws if the argument is a RegExp, or if thisArg is undefined.\n * @param {?} thisArg The 'this' arg, which must be defined.\n * @param {*} arg The first argument of the function, which mustn't be a RegExp.\n * @param {string} func Name of the function, for reporting.\n * @return {string} The thisArg, coerced to a string.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkStringArgs = function(thisArg, arg, func) {\n  if (thisArg == null) {\n    throw new TypeError(\n        \"The 'this' value for String.prototype.\" + func +\n        ' must not be null or undefined');\n  }\n  if (arg instanceof RegExp) {\n    throw new TypeError(\n        'First argument to String.prototype.' + func +\n        ' must not be a regular expression');\n  }\n  return thisArg + '';\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Symbol polyfill.\n * @suppress {uselessCode}\n */\n\n'require es6/util/arrayiterator';\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * @struct @constructor\n * @param {string} id\n * @param {string=} opt_description\n */\n$jscomp.SymbolClass = function(id, opt_description) {\n  /** @private @const {string} */\n  this.$jscomp$symbol$id_ = id;\n\n  /** @const {string|undefined} */\n  this.description;\n\n  // description is read-only.\n  $jscomp.defineProperty(\n      this, 'description',\n      {configurable: true, writable: true, value: opt_description});\n};\n\n\n/** @override */\n$jscomp.SymbolClass.prototype.toString = function() {\n  return this.$jscomp$symbol$id_;\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    if (/** @type {?} */ (this) instanceof Symbol) {\n      throw new TypeError('Symbol is not a constructor');\n    }\n    return /** @type {?} */ (new $jscomp.SymbolClass(\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + '_' + (counter++),\n        opt_description));\n  }\n\n  return Symbol;\n})();\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('Symbol.iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.iteratorPrototype(\n                $jscomp.arrayIteratorImpl(this));\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Initializes Symbol.asyncIterator (if it's not already defined)\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolAsyncIterator = function() {\n  $jscomp.initSymbol();\n  var symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator;\n  if (!symbolAsyncIterator) {\n    symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator =\n        $jscomp.global['Symbol']('Symbol.asyncIterator');\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolAsyncIterator = function() {};\n};\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() {\n    return this;\n  };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Synonym for Object.prototype.hasOwnProperty.call(obj, prop).\n * @param {!Object} obj\n * @param {string} prop\n * @return {boolean}\n */\n$jscomp.owns = function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/util/makeiterator';\n'require util/defineproperty';\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('WeakMap',\n    /**\n     * @param {*} NativeWeakMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakMap) {\n  /**\n   * Checks conformance of the existing WeakMap.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakMap || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\n          NativeWeakMap)([[x, 2], [y, 3]]);\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\n      map.delete(x);\n      map.set(y, 4);\n      return !map.has(x) && map.get(y) == 4;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\n  } else {\n    if (isConformant()) return NativeWeakMap;\n  }\n\n  var prop = '$jscomp_hidden_' + Math.random();\n\n  /** @constructor */\n  function WeakMapMembership() {}\n\n  /**\n   * Inserts the hidden property into the target.\n   * @param {!Object} target\n   */\n  function insert(target) {\n    if (!$jscomp.owns(target, prop)) {\n      var obj = new WeakMapMembership();\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\n      // a problem, we could avoid it by copying an infrequently-used non-enum\n      // method (like toLocaleString) onto the object itself and encoding the\n      // property on the copy instead.  This codepath must be easily removable\n      // if IE8 support is not needed.\n      $jscomp.defineProperty(target, prop, {value: obj});\n    }\n  }\n\n  /**\n   * Monkey-patches the freezing methods to ensure that the hidden\n   * property is added before any freezing happens.\n   * @param {string} name\n   */\n  function patch(name) {\n    var prev = Object[name];\n    if (prev) {\n      Object[name] = function(target) {\n        if (target instanceof WeakMapMembership) {\n          return target;\n        } else {\n          insert(target);\n          return prev(target);\n        }\n      };\n    }\n  }\n  patch('freeze');\n  patch('preventExtensions');\n  patch('seal');\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\n  // then neither is WeakMap).\n\n  var index = 0;\n\n  /**\n   * Polyfill for WeakMap:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n   *\n   * This implementation is as non-leaky as possible, due to patching\n   * the freezing and sealing operations.  It does not include any logic\n   * to handle cases where a key was somehow made non-extensible without\n   * the special hidden property being added.  It takes some care to ensure\n   * the hidden property is not enumerated over nor discoverable, though\n   * it's not completely secure (particularly in IE8).\n   *\n   * @constructor\n   * @extends {WeakMap<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterator<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional initial data.\n   */\n  var PolyfillWeakMap = function(opt_iterable) {\n    /** @private @const {string} */\n    this.id_ = (index += (Math.random() + 1)).toString();\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.set = function(key, value) {\n    insert(key);\n    if (!$jscomp.owns(key, prop)) {\n      // NOTE: If the insert() call fails on the key, but the property\n      // has previously successfully been added higher up the prototype\n      // chain, then we'll silently misbehave.  Instead, throw immediately\n      // before doing something bad.  If this becomes a problem (e.g. due\n      // to some rogue frozen objects) then we may need to add a slow and\n      // leaky fallback array to each WeakMap instance, as well as extra\n      // logic in each accessor to use it (*only*) when necessary.\n      throw new Error('WeakMap key fail: ' + key);\n    }\n    key[prop][this.id_] = value;\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.get = function(key) {\n    return $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.has = function(key) {\n    return $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.delete = function(key) {\n    if (!$jscomp.owns(key, prop) ||\n        !$jscomp.owns(key[prop], this.id_)) {\n      return false;\n    }\n    return delete key[prop][this.id_];\n  };\n\n  return PolyfillWeakMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n\n/**\n * Internal record type for entries.\n * @record\n * @template KEY, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.MapEntry = function() {\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.previous;\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.next;\n  /** @type {?Object} */\n  this.head;\n  /** @type {KEY} */\n  this.key;\n  /** @type {VALUE} */\n  this.value;\n};\n\n\n$jscomp.polyfill('Map',\n    /**\n     * @param {*} NativeMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeMap) {\n\n  /**\n   * Checks conformance of the existing Map.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_MAP ||\n        !NativeMap ||\n        typeof NativeMap != \"function\" ||\n        !NativeMap.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeMap = /** @type {function(new: Map, !Iterator=)} */ (NativeMap);\n      var key = Object.seal({x: 4});\n      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));\n      if (map.get(key) != 's' || map.size != 1 || map.get({x: 4}) ||\n          map.set({x: 4}, 't') != map || map.size != 2) {\n        return false;\n      }\n      var /** !Iterator<!Array> */ iter = map.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != key || item.value[1] != 's') {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0].x != 4 ||\n          item.value[1] != 't' || !iter.next().done) {\n        return false;\n      }\n      return true;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeMap && $jscomp.ES6_CONFORMANCE) return NativeMap;\n  } else {\n    if (isConformant()) return NativeMap;\n  }\n\n  // We depend on Symbol.iterator, so ensure it's loaded.\n  $jscomp.initSymbolIterator();\n\n\n  /** @const {!WeakMap<!Object, string>} */\n  var idMap = new WeakMap();\n\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Map<KEY, VALUE>}\n   * @implements {Iterable<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   * @param {!Iterable<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional data to populate the map.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillMap = function(opt_iterable) {\n    /** @private {!Object<!Array<!$jscomp.MapEntry<KEY, VALUE>>>} */\n    this.data_ = {};\n\n    /** @private {!$jscomp.MapEntry<KEY, VALUE>} */\n    this.head_ = createHead();\n\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    /** @type {number} */\n    this.size = 0;\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item =\n            /** @type {!IIterableResult<!Array<KEY|VALUE>>} */ (entry).value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.set = function(key, value) {\n    // normalize -0/+0 to +0\n    key = key === 0 ? 0 : key;\n    var r = maybeGetEntry(this, key);\n    if (!r.list) {\n      r.list = (this.data_[r.id] = []);\n    }\n    if (!r.entry) {\n      r.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: key,\n        value: value,\n      };\n      r.list.push(r.entry);\n      this.head_.previous.next = r.entry;\n      this.head_.previous = r.entry;\n      this.size++;\n    } else {\n      r.entry.value = value;\n    }\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.delete = function(key) {\n    var r = maybeGetEntry(this, key);\n    if (r.entry && r.list) {\n      r.list.splice(r.index, 1);\n      if (!r.list.length) delete this.data_[r.id];\n      r.entry.previous.next = r.entry.next;\n      r.entry.next.previous = r.entry.previous;\n      r.entry.head = null;\n      this.size--;\n      return true;\n    }\n    return false;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.clear = function() {\n    this.data_ = {};\n    this.head_ = this.head_.previous = createHead();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.has = function(key) {\n    return !!(maybeGetEntry(this, key).entry);\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.get = function(key) {\n    var entry = maybeGetEntry(this, key).entry;\n    // NOTE: this cast is a lie, but so is the extern.\n    return /** @type {VALUE} */ (entry &&\n      /** @type {VALUE} */ (entry.value));\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.entries = function() {\n    return makeIterator(this, /** @return {!Array<(KEY|VALUE)>} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return ([entry.key, entry.value]);\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.keys = function() {\n    return makeIterator(this, /** @return {KEY} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.key;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.values = function() {\n    return makeIterator(this, /** @return {VALUE} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.value;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {\n    var iter = this.entries();\n    var item;\n    while (!(item = iter.next()).done) {\n      var entry = item.value;\n      callback.call(\n          /** @type {?} */ (opt_thisArg),\n          /** @type {VALUE} */ (entry[1]),\n          /** @type {KEY} */ (entry[0]),\n          this);\n    }\n  };\n\n\n  /** @type {?} */ (PolyfillMap.prototype)[Symbol.iterator] =\n      PolyfillMap.prototype.entries;\n\n\n  /**\n   * Returns an entry or undefined.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {KEY} key\n   * @return {{id: string,\n   *           list: (!Array<!$jscomp.MapEntry<KEY, VALUE>>|undefined),\n   *           index: number,\n   *           entry: (!$jscomp.MapEntry<KEY, VALUE>|undefined)}}\n   * @template KEY, VALUE\n   */\n  var maybeGetEntry = function(map, key) {\n    var id = getId(key);\n    var list = map.data_[id];\n    if (list && $jscomp.owns(map.data_, id)) {\n      for (var index = 0; index < list.length; index++) {\n        var entry = list[index];\n        if ((key !== key && entry.key !== entry.key) || key === entry.key) {\n          return {id: id, list: list, index: index, entry: entry};\n        }\n      }\n    }\n    return {id: id, list: list, index: -1, entry: undefined};\n  };\n\n\n  /**\n   * Maps over the entries with the given function.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {function(!$jscomp.MapEntry<KEY, VALUE>): T} func\n   * @return {!IteratorIterable<T>}\n   * @template KEY, VALUE, T\n   * @private\n   */\n  var makeIterator = function(map, func) {\n    var entry = map.head_;\n    return $jscomp.iteratorPrototype(function() {\n      if (entry) {\n        while (entry.head != map.head_) {\n          entry = entry.previous;\n        }\n        while (entry.next != entry.head) {\n          entry = entry.next;\n          return {done: false, value: func(entry)};\n        }\n        entry = null; // make sure depletion is permanent\n      }\n      return {done: true, value: void 0};\n    });\n  };\n\n\n  /**\n   * Makes a new \"head\" element.\n   * @return {!$jscomp.MapEntry<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @suppress {checkTypes} ignore missing key/value for head only\n   */\n  var createHead = function() {\n    var head = /** type {!$jscomp.MapEntry<KEY, VALUE>} */ ({});\n    head.previous = head.next = head.head = head;\n    return head;\n  };\n\n\n  /**\n   * Counter for generating IDs.\n   * @private {number}\n   */\n  var mapIndex = 0;\n\n\n  /**\n   * @param {*} obj An extensible object.\n   * @return {string} A unique ID.\n   */\n  var getId = function(obj) {\n    var type = obj && typeof obj;\n    if (type == 'object' || type == 'function') {\n      obj = /** @type {!Object} */ (obj);\n      if (!idMap.has(obj)) {\n        var id = '' + (++mapIndex);\n        idMap.set(obj, id);\n        return id;\n      }\n      return idMap.get(obj);\n    }\n    // Add a prefix since obj could be '__proto__';\n    return 'p_' + obj;\n  };\n\n\n  return PolyfillMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a partial internal polyfill for Object.create.\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.create() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n *\n * Does not implement the second argument.\n * @param {!Object} prototype\n * @return {!Object}\n */\n$jscomp.objectCreate =\n    ($jscomp.ASSUME_ES5 || typeof Object.create == 'function') ?\n    Object.create :\n    function(prototype) {\n      /** @constructor */\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor();\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/objectcreate';\n\n/**\n * Polyfill for Reflect.construct() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\n *\n * Calls a constructor as with the 'new' operator.\n * TODO(sdh): how to type 'target' with (new: TARGET) if opt_newTarget missing?\n *\n * @param {function(new: ?, ...?)} target The constructor to call.\n * @param {!Array} argList The arguments as a list.\n * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n * @return {TARGET} The result of the function call.\n * @template TARGET\n */\n$jscomp.construct = /** @type {function(): !Function} */ (function() {\n\n  // Check for https://github.com/Microsoft/ChakraCore/issues/3217\n  /** @return {boolean} */\n  function reflectConstructWorks() {\n    /** @constructor */ function Base() {}\n    /** @constructor */ function Derived() {}\n    new Base();\n    Reflect.construct(Base, [], Derived);\n    return new Base() instanceof Base;\n  }\n\n  if (typeof Reflect != 'undefined' && Reflect.construct) {\n    if (reflectConstructWorks()) return Reflect.construct;\n    var brokenConstruct = Reflect.construct;\n    /**\n     * @param {function(new: ?, ...?)} target The constructor to call.\n     * @param {!Array} argList The arguments as a list.\n     * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n     * @return {TARGET} The result of the function call.\n     * @template TARGET\n     * @suppress {reportUnknownTypes}\n     */\n    var patchedConstruct = function(target, argList, opt_newTarget) {\n      var out = brokenConstruct(target, argList);\n      if (opt_newTarget) Reflect.setPrototypeOf(out, opt_newTarget.prototype);\n      return out;\n    };\n    return patchedConstruct;\n  }\n\n  /**\n   * @param {function(new: ?, ...?)} target The constructor to call.\n   * @param {!Array} argList The arguments as a list.\n   * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n   * @return {TARGET} The result of the function call.\n   * @template TARGET\n   * @suppress {reportUnknownTypes}\n   */\n  function construct(target, argList, opt_newTarget) {\n    if (opt_newTarget === undefined) opt_newTarget = target;\n    var proto = opt_newTarget.prototype || Object.prototype;\n    var obj = $jscomp.objectCreate(proto);\n    var apply = Function.prototype.apply;\n    var out = apply.call(target, obj, argList);\n    return out || obj;\n  }\n  return construct;\n})();\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/util/construct';\n'require util/polyfill';\n\n$jscomp.polyfill('Reflect.construct', function(orig) {\n  // NOTE: This is just Reflect.construct if it's present and functional.\n  return $jscomp.construct;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n/**\n * @suppress {missingProperties,reportUnknownTypes}\n * @return {boolean}\n */\n$jscomp.underscoreProtoCanBeSet = function() {\n  var x = {a: true};\n  var y = {};\n  try {\n    y.__proto__ = x;\n    return y.a;\n  } catch (e) {\n    // __proto__ property is readonly (possibly IE 10?)\n  }\n  return false;\n};\n\n/**\n * If we can implement it, this will be a function that attempts to set the\n * prototype of an object, otherwise it will be `null`.\n *\n * It returns the first argument if successful. Throws a `TypeError` if the\n * object is not extensible.\n *\n * @type {null|function(!Object, ?Object): !Object}\n */\n$jscomp.setPrototypeOf = (typeof Object.setPrototypeOf == 'function') ?\n    Object.setPrototypeOf :\n    $jscomp.underscoreProtoCanBeSet() ?\n    function(target, proto) {\n      target.__proto__ = proto;\n      if (target.__proto__ !== proto) {\n        throw new TypeError(target + ' is not extensible');\n      }\n      return target;\n    } :\n    null;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill(\n    'Reflect.setPrototypeOf',\n    /**\n     * These annotations are intended to match the signature of\n     * $jscomp.polyfill(). Being more specific makes the compiler unhappy.\n     * @suppress {reportUnknownTypes}\n     * @param {?*} orig\n     * @return {*}\n     */\n    function(orig) {\n      if (orig) {\n        return orig;\n      } else if ($jscomp.setPrototypeOf) {\n        /** @const {!function(!Object,?Object):!Object} */\n        var setPrototypeOf = $jscomp.setPrototypeOf;\n        /**\n         * @param {!Object} target\n         * @param {?Object} proto\n         * @return {boolean}\n         */\n        var polyfill = function(target, proto) {\n          try {\n            setPrototypeOf(target, proto);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        };\n        return polyfill;\n      } else {\n        // it isn't possible to implement this method\n        return null;\n      }\n    },\n    'es6', 'es5');\n","// -------------------------------------------------\n// --------------------- 9P ------------------------\n// -------------------------------------------------\n// Implementation of the 9p filesystem device following the \n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\n\n\"use strict\";\n\n// TODO\n// flush\n// lock?\n// correct hard links\n\nvar EPERM = 1;       /* Operation not permitted */\nvar ENOENT = 2;      /* No such file or directory */\nvar EINVAL = 22;     /* Invalid argument */\nvar ENOTSUPP = 524;  /* Operation is not supported */\nvar ENOTEMPTY = 39;  /* Directory not empty */\nvar EPROTO    = 71   /* Protocol error */\n\nvar P9_SETATTR_MODE = 0x00000001;\nvar P9_SETATTR_UID = 0x00000002;\nvar P9_SETATTR_GID = 0x00000004;\nvar P9_SETATTR_SIZE = 0x00000008;\nvar P9_SETATTR_ATIME = 0x00000010;\nvar P9_SETATTR_MTIME = 0x00000020;\nvar P9_SETATTR_CTIME = 0x00000040;\nvar P9_SETATTR_ATIME_SET = 0x00000080;\nvar P9_SETATTR_MTIME_SET = 0x00000100;\n\nvar P9_STAT_MODE_DIR = 0x80000000;\nvar P9_STAT_MODE_APPEND = 0x40000000;\nvar P9_STAT_MODE_EXCL = 0x20000000;\nvar P9_STAT_MODE_MOUNT = 0x10000000;\nvar P9_STAT_MODE_AUTH = 0x08000000;\nvar P9_STAT_MODE_TMP = 0x04000000;\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\nvar P9_STAT_MODE_LINK = 0x01000000;\nvar P9_STAT_MODE_DEVICE = 0x00800000;\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\nvar P9_STAT_MODE_SOCKET = 0x00100000;\nvar P9_STAT_MODE_SETUID = 0x00080000;\nvar P9_STAT_MODE_SETGID = 0x00040000;\nvar P9_STAT_MODE_SETVTX = 0x00010000;\n\nvar FID_NONE = -1;\nvar FID_INODE = 1;\nvar FID_XATTR = 2;\n\n/** \n * @constructor \n *\n * @param {FS} filesystem\n */\nfunction Virtio9p(filesystem, bus) {\n    /** @const @type {FS} */\n    this.fs = filesystem;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.SendReply = function(x, y) {};\n    this.deviceid = 0x9; // 9p filesystem\n    this.hostfeature = 0x1; // mountpoint\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\n\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\n    this.VERSION = \"9P2000.L\";\n    this.BLOCKSIZE = 8192; // Let's define one page.\n    this.msize = 8192; // maximum message size\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\n    this.replybuffersize = 0;\n\n    this.fids = [];\n}\n\nVirtio9p.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.deviceid;\n    state[1] = this.hostfeature;\n    state[2] = this.configspace;\n    state[3] = this.VERSION;\n    state[4] = this.BLOCKSIZE;\n    state[5] = this.msize;\n    state[6] = this.replybuffer;\n    state[7] = this.replybuffersize;\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\n\n    return state;\n};\n\nVirtio9p.prototype.set_state = function(state)\n{\n    this.deviceid = state[0];\n    this.hostfeature = state[1];\n    this.configspace = state[2];\n    this.VERSION = state[3];\n    this.BLOCKSIZE = state[4];\n    this.msize = state[5];\n    this.replybuffer = state[6];\n    this.replybuffersize = state[7];\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\n};\n\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\n    return {inodeid: inode, type: type, uid: uid};\n}\n\nVirtio9p.prototype.Reset = function() {\n    this.fids = [];\n}\n\n\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\n    if ((payloadsize+7) >= this.replybuffer.length) {\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\n    }\n    //for(var i=0; i<payload.length; i++)\n    //    this.replybuffer[7+i] = payload[i];\n    this.replybuffersize = payloadsize+7;\n    return;\n}\n\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\n    this.BuildReply(6, tag, size);\n}\n\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\n    var size = header[0];\n    var id = header[1];\n    var tag = header[2];\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\n\n    switch(id)\n    {\n        case 8: // statfs\n            size = this.fs.GetTotalSize(); // size used by all files\n            var space = this.fs.GetSpace();\n            var req = [];\n            req[0] = 0x01021997;\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\n            req[2] = Math.floor(space/req[1]); // free blocks\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\n            req[5] = this.fs.inodes.length; // total number of inodes\n            req[6] = 1024*1024;\n            req[7] = 0; // file system id?\n            req[8] = 256; // maximum length of filenames\n\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 112: // topen\n        case 12: // tlopen\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var mode = req[1];\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\n            var idx = this.fids[fid].inodeid;\n            var inode = this.fs.GetInode(idx);\n            message.Debug(\"file open \" + inode.name);\n            //if (inode.status == STATUS_LOADING) return;\n            var ret = this.fs.OpenInode(idx, mode);\n\n            this.fs.AddEvent(this.fids[fid].inodeid,\n                function() {\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\n                    req[0] = inode.qid;\n                    req[1] = this.msize - 24;\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\n                    this.BuildReply(id, tag, 13+4);\n                    this.SendReply(0, index);\n                }.bind(this)\n            );\n            break;\n\n        case 70: // link (just copying)\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var dfid = req[0];\n            var fid = req[1];\n            var name = req[2];\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\n            var inode = this.fs.CreateInode();\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\n            //inode = inodetarget;\n            inode.mode = inodetarget.mode;\n            inode.size = inodetarget.size;\n            inode.symlink = inodetarget.symlink;\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\n            for(var i=0; i<inode.size; i++) {\n                data[i] = targetdata[i];\n            }\n            inode.name = name;\n            inode.parentid = this.fids[dfid].inodeid;\n            this.fs.PushInode(inode);\n            \n            //inode.uid = inodetarget.uid;\n            //inode.gid = inodetarget.gid;\n            //inode.mode = inodetarget.mode | S_IFLNK;\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);       \n            break;\n\n        case 16: // symlink\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var symgt = req[2];\n            var gid = req[3];\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 18: // mknod\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var major = req[3];\n            var minor = req[4];\n            var gid = req[5];\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n\n        case 22: // TREADLINK\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            var fid = req[0];\n            message.Debug(\"[readlink] fid=\" + fid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n\n        case 72: // tmkdir\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var gid = req[3];\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode | S_IFDIR;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 14: // tlcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var flags = req[2];\n            var mode = req[3];\n            var gid = req[4];\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\n            this.fids[fid].inodeid = idx;\n            this.fids[fid].type = FID_INODE;\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            inode.mode = mode;\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13+4);\n            this.SendReply(0, index);\n            break;\n\n        case 52: // lock always suceed\n            message.Debug(\"lock file\\n\");\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\n            this.BuildReply(id, tag, 1);\n            this.SendReply(0, index);\n            break;\n\n        /*\n        case 54: // getlock\n            break;        \n        */\n\n        case 24: // getattr\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"getattr: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            req[0] |= 0x1000; // P9_STATS_GEN\n\n            req[0] = req[1]; // request mask\n            req[1] = inode.qid;\n\n            req[2] = inode.mode; \n            req[3] = inode.uid; // user id\n            req[4] = inode.gid; // group id\n            \n            req[5] = inode.nlinks; // number of hard links\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\n            req[7] = inode.size; // size low\n            req[8] = this.BLOCKSIZE;\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\n            req[10] = inode.atime; // atime\n            req[11] = 0x0;\n            req[12] = inode.mtime; // mtime\n            req[13] = 0x0;\n            req[14] = inode.ctime; // ctime\n            req[15] = 0x0;\n            req[16] = 0x0; // btime\n            req[17] = 0x0; \n            req[18] = 0x0; // st_gen\n            req[19] = 0x0; // data_version\n            marshall.Marshall([\n            \"d\", \"Q\", \n            \"w\",  \n            \"w\", \"w\", \n            \"d\", \"d\", \n            \"d\", \"d\", \"d\",\n            \"d\", \"d\", // atime\n            \"d\", \"d\", // mtime\n            \"d\", \"d\", // ctime\n            \"d\", \"d\", // btime\n            \"d\", \"d\",\n            ], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\n            this.SendReply(0, index);\n            break;\n\n        case 26: // setattr\n            var req = marshall.Unmarshall2([\"w\", \"w\", \n                \"w\", // mode \n                \"w\", \"w\", // uid, gid\n                \"d\", // size\n                \"d\", \"d\", // atime\n                \"d\", \"d\"] // mtime\n            , GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\n            if (req[1] & P9_SETATTR_MODE) {\n                inode.mode = req[2];\n            }\n            if (req[1] & P9_SETATTR_UID) {\n                inode.uid = req[3];\n            }\n            if (req[1] & P9_SETATTR_GID) {\n                inode.gid = req[4];\n            }\n            if (req[1] & P9_SETATTR_ATIME) {\n                inode.atime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_MTIME) {\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_CTIME) {\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_ATIME_SET) {\n                inode.atime = req[6];\n            }\n            if (req[1] & P9_SETATTR_MTIME_SET) {\n                inode.mtime = req[8];\n            }\n            if (req[1] & P9_SETATTR_SIZE) {\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 50: // fsync\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 40: // TREADDIR\n        case 116: // read\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"read/treaddir: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            if (this.fids[fid].type == FID_XATTR) {\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\n                for(var i=0; i<count; i++)\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                this.BuildReply(id, tag, 4 + count);\n                this.SendReply(0, index);\n            } else {\n                var file = this.fs.inodes[this.fids[fid].inodeid];\n                this.bus.send(\"9p-read-start\");\n\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\n                this.fs.AddEvent(this.fids[fid].inodeid,\n                    function() {\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\n\n                        if (inode.size < offset+count) count = inode.size - offset;\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\n                        if(data) {\n                            for(var i=0; i<count; i++)\n                                this.replybuffer[7+4+i] = data[offset+i];\n                        }\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                        this.BuildReply(id, tag, 4 + count);\n                        this.SendReply(0, index);\n                    }.bind(this)\n                );\n            }\n            break;\n\n        case 118: // write\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\n\n            var file = this.fs.inodes[this.fids[fid].inodeid];\n            this.bus.send(\"9p-write-end\", [file.name, count]);\n\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n            this.BuildReply(id, tag, 4);\n            this.SendReply(0, index);\n            break;\n\n        case 74: // RENAMEAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\n            var olddirfid = req[0];\n            var oldname = req[1];\n            var newdirfid = req[2];\n            var newname = req[3];\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\n            if (ret == false) {\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 76: // TUNLINKAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\n            var dirfd = req[0];\n            var name = req[1];\n            var flags = req[2];\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\n            if (fid == -1) {\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\n                   this.SendReply(0, index);\n                   break;\n            }\n            var ret = this.fs.Unlink(fid);\n            if (!ret) {\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 100: // version\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\n            this.msize = version[0];\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 104: // attach\n            // return root directorie's QID\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var uid = req[4];\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 108: // tflush\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\n            var oldtag = req[0];\n            message.Debug(\"[flush] \" + tag);\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n\n        case 110: // walk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\n            var fid = req[0];\n            var nwfid = req[1];\n            var nwname = req[2];\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\n            if (nwname == 0) {\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\n                this.BuildReply(id, tag, 2);\n                this.SendReply(0, index);\n                break;\n            }\n            var wnames = [];\n            for(var i=0; i<nwname; i++) {\n                wnames.push(\"s\");\n            }\n            var walk = marshall.Unmarshall2(wnames, GetByte);\n            var idx = this.fids[fid].inodeid;\n            var offset = 7+2;\n            var nwidx = 0;\n            //console.log(idx, this.fs.inodes[idx]);\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\n            for(var i=0; i<nwname; i++) {\n                idx = this.fs.Search(idx, walk[i]);\n\n                if (idx == -1) {\n                   message.Debug(\"Could not find: \" + walk[i]);\n                   break;\n                }\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\n                nwidx++;\n                //message.Debug(this.fids[nwfid].inodeid);\n                //this.fids[nwfid].inodeid = idx;\n                //this.fids[nwfid].type = FID_INODE;\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\n            }\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\n            this.BuildReply(id, tag, offset-7);\n            this.SendReply(0, index);\n            break;\n\n        case 120: // clunk\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            message.Debug(\"[clunk]: fid=\" + req[0]);\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\n                this.fids[req[0]].inodeid = -1;\n                this.fids[req[0]].type = FID_NONE;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 32: // txattrcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var attr_size = req[2];\n            var flags = req[3];\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\n            //this.SendReply(0, index);\n            break;\n\n        case 30: // xattrwalk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var fid = req[0];\n            var newfid = req[1];\n            var name = req[2];\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\n            //this.fids[newfid].type = FID_NONE;\n            var length = 0;\n            if (name == \"security.capability\") {\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\n                this.fids[newfid].type = FID_XATTR;\n            }\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\n            this.BuildReply(id, tag, 8);\n            this.SendReply(0, index);\n            break;\n\n        default:\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\n            message.Abort();\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\n            //this.SendReply(0, index);\n            break;\n    }\n\n    //consistency checks if there are problems with the filesystem\n    //this.fs.Check();\n}\n","// -------------------------------------------------\n// ----------------- FILESYSTEM---------------------\n// -------------------------------------------------\n// Implementation of a unix filesystem in memory.\n\n\"use strict\";\n\nvar S_IRWXUGO = 0x1FF;\nvar S_IFMT = 0xF000;\nvar S_IFSOCK = 0xC000;\nvar S_IFLNK = 0xA000;\nvar S_IFREG = 0x8000;\nvar S_IFBLK = 0x6000;\nvar S_IFDIR = 0x4000;\nvar S_IFCHR = 0x2000;\n\n//var S_IFIFO  0010000\n//var S_ISUID  0004000\n//var S_ISGID  0002000\n//var S_ISVTX  0001000\n\nvar O_RDONLY = 0x0000; // open for reading only \nvar O_WRONLY = 0x0001; // open for writing only\nvar O_RDWR = 0x0002; // open for reading and writing\nvar O_ACCMODE = 0x0003; // mask for above modes\n\nvar STATUS_INVALID = -0x1;\nvar STATUS_OK = 0x0;\nvar STATUS_OPEN = 0x1;\nvar STATUS_ON_SERVER = 0x2;\nvar STATUS_LOADING = 0x3;\nvar STATUS_UNLINKED = 0x4;\n\n\n/** @const */ var JSONFS_VERSION = 2;\n\n\n/** @const */ var JSONFS_IDX_NAME = 0\n/** @const */ var JSONFS_IDX_SIZE = 1\n/** @const */ var JSONFS_IDX_MTIME = 2\n/** @const */ var JSONFS_IDX_MODE = 3\n/** @const */ var JSONFS_IDX_UID = 4\n/** @const */ var JSONFS_IDX_GID = 5\n/** @const */ var JSONFS_IDX_TARGET = 6\n\n\n/** @constructor */\nfunction FS(baseurl) {\n    /** @type {Array.<Inode>} */\n    this.inodes = [];\n    this.events = [];\n\n    this.baseurl = baseurl;\n\n    this.qidnumber = 0x0;\n    this.filesinloadingqueue = 0;\n    this.OnLoaded = function() {};\n\n    //this.tar = new TAR(this);\n\n    this.inodedata = {};\n\n    this.total_size = 256 * 1024 * 1024 * 1024;\n    this.used_size = 0;\n\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\n    //RegisterMessage(\"tar\",\n    //    function(data) {\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n    //RegisterMessage(\"sync\",\n    //    function(data) {\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n\n    // root entry\n    this.CreateDirectory(\"\", -1);\n}\n\n\n// -----------------------------------------------------\n\nFS.prototype.AddEvent = function(id, OnEvent) {\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_OK) {\n        OnEvent();\n        return;\n    }\n    this.events.push({id: id, OnEvent: OnEvent});    \n}\n\nFS.prototype.HandleEvent = function(id) {\n\n    if (this.filesinloadingqueue == 0) {\n        this.OnLoaded();\n        this.OnLoaded = function() {}\n    }\n    //message.Debug(\"number of events: \" + this.events.length);\n    var newevents = [];\n    for(var i=0; i<this.events.length; i++) {\n        if (this.events[i].id == id) {\n            this.events[i].OnEvent();\n        } else {\n            newevents.push(this.events[i]);\n        }\n    }\n    this.events = newevents;\n}\n\nFS.prototype.OnJSONLoaded = function(fs)\n{\n    if(DEBUG)\n    {\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\n    }\n\n    //console.time(\"parse\");\n    var fsdata = JSON.parse(fs);\n    //console.timeEnd(\"parse\");\n\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\n    {\n        throw \"The filesystem JSON format has changed. \" +\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\n    }\n\n    var fsroot = fsdata[\"fsroot\"];\n    this.used_size = fsdata[\"size\"];\n\n    var me = this;\n\n    setTimeout(function()\n    {\n        //console.time(\"Load\");\n        //console.profile(\"Load\");\n        for(var i = 0; i < fsroot.length; i++) {\n            me.LoadRecursive(fsroot[i], 0);\n        }\n        //console.profileEnd(\"Load\");\n        //console.timeEnd(\"Load\");\n\n        //if(DEBUG)\n        //{\n        //    console.time(\"Check\");\n        //    me.Check();\n        //    console.timeEnd(\"Check\");\n        //}\n\n        me.OnLoaded();\n        me.OnLoaded = function() {};\n    }, 0);\n};\n\nFS.prototype.LoadRecursive = function(data, parentid)\n{\n    var inode = this.CreateInode();\n\n    inode.name = data[JSONFS_IDX_NAME]\n    inode.size = data[JSONFS_IDX_SIZE];\n    inode.mtime = data[JSONFS_IDX_MTIME];\n    inode.ctime = inode.mtime;\n    inode.atime = inode.mtime;\n    inode.mode = data[JSONFS_IDX_MODE];\n    inode.uid = data[JSONFS_IDX_UID];\n    inode.gid = data[JSONFS_IDX_GID];\n\n    inode.parentid = parentid;\n    this.inodes[inode.parentid].nlinks++;\n\n    var ifmt = inode.mode & S_IFMT;\n\n    if(ifmt === S_IFDIR)\n    {\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\n    }\n    else if(ifmt === S_IFREG)\n    {\n        inode.status = STATUS_ON_SERVER;\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFLNK)\n    {\n        inode.symlink = data[JSONFS_IDX_TARGET];\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFSOCK)\n    {\n        // socket: ignore\n    }\n    else\n    {\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\n    }\n}\n\nFS.prototype.LoadDir = function(inode, children)\n{\n    inode.updatedir = true;\n    inode.nlinks = 2; // . and ..\n\n    var p = this.inodes.length;\n    this.PushInode(inode);\n\n    for(var i = 0; i < children.length; i++) {\n        this.LoadRecursive(children[i], p);\n    }\n}\n\n// Loads the data from a url for a specific inode\nFS.prototype.LoadFile = function(idx) {\n    var inode = this.inodes[idx];\n    if (inode.status != STATUS_ON_SERVER) {\n        return;\n    }\n    inode.status = STATUS_LOADING;\n    this.filesinloadingqueue++;\n\n    //if (inode.compressed) {\n    //    inode.data = new Uint8Array(inode.size);\n    //    LoadBinaryResource(inode.url + \".bz2\",\n    //    function(buffer){\n    //        var buffer8 = new Uint8Array(buffer);\n    //        var ofs = 0;\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \n    //        inode.status = STATUS_OK;\n    //        this.filesinloadingqueue--;\n    //        this.HandleEvent(idx);            \n    //    }.bind(this), \n    //    function(error){throw error;});\n    //    return;\n    //}\n\n    if(this.baseurl)\n    {\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \n            function(buffer){\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\n                inode.size = data.length; // correct size if the previous was wrong. \n                inode.status = STATUS_OK;\n\n                this.filesinloadingqueue--;\n                this.HandleEvent(idx);            \n            }.bind(this), \n            function(error){throw error;});\n    }\n    else\n    {\n        // If baseurl is not set, we started with an empty filesystem. No files\n        // can be loaded\n    }\n}\n\n// -----------------------------------------------------\n\nFS.prototype.PushInode = function(inode) {\n    if (inode.parentid != -1) {\n        this.inodes.push(inode);\n        inode.fid = this.inodes.length - 1;\n        var parent_node = this.inodes[inode.parentid];\n        parent_node.updatedir = true;\n        inode.nextid = parent_node.firstid;\n        parent_node.firstid = this.inodes.length-1;\n        return;\n    } else {\n        if (this.inodes.length == 0) { // if root directory\n            this.inodes.push(inode);\n            return;\n        }\n    }\n\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\n    message.Abort();\n\n}\n\n/** @constructor */\nfunction Inode(qidnumber)\n{\n    this.updatedir = false; // did the directory listing changed?\n    this.parentid = -1;\n    this.firstid = -1; // first file id in directory\n    this.nextid = -1; // next id in directory\n    this.status = 0;\n    this.name = \"\";\n    this.size = 0x0;\n    this.uid = 0x0;\n    this.gid = 0x0;\n    this.fid = 0;\n    this.ctime = 0;\n    this.atime = 0;\n    this.mtime = 0;\n    this.major = 0x0;\n    this.minor = 0x0;\n    //data = new Uint8Array(0);\n    this.symlink = \"\";\n    this.nlinks = 1;\n    this.mode = 0x01ED;\n    this.qid = {\n        type: 0,\n        version: 0,\n        path: qidnumber,\n    };\n    this.caps = undefined;\n\n    //this.qid_type = 0;\n    //this.qid_version = 0;\n    //this.qid_path = qidnumber;\n}\n\nFS.prototype.CreateInode = function() {\n    //console.log(\"CreateInode\", Error().stack);\n    return new Inode(++this.qidnumber);\n};\n\n\nFS.prototype.CreateDirectory = function(name, parentid) {\n    var x = this.CreateInode();\n    x.name = name;\n    x.parentid = parentid;\n    x.mode = 0x01FF | S_IFDIR;\n    x.updatedir = true;\n    x.nlinks = 2; // . and ..\n    if (parentid >= 0) {\n        x.uid = this.inodes[parentid].uid;\n        x.gid = this.inodes[parentid].gid;\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\n        this.inodes[parentid].nlinks++;\n    }\n    x.qid.type = S_IFDIR >> 8;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateFile = function(filename, parentid) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFREG >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\n    return this.inodes.length-1;\n}\n\n\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.major = major;\n    x.minor = minor;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFSOCK >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n     \nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFLNK >> 8;\n    x.symlink = symlink;\n    x.mode = S_IFLNK;\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(str.length);\n    x.size = str.length;\n    for (var j = 0; j < str.length; j++) {\n        data[j] = str.charCodeAt(j);\n    }\n    return id;\n}\n\n/** \n * @param {Uint8Array} buffer\n */\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\n    data.set(buffer);\n    x.size = buffer.length;\n    return id;\n}\n\n\nFS.prototype.OpenInode = function(id, mode) {\n    var inode = this.GetInode(id);\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n        this.FillDirectory(id);\n    }\n    /*\n    var type = \"\";\n    switch(inode.mode&S_IFMT) {\n        case S_IFREG: type = \"File\"; break;\n        case S_IFBLK: type = \"Block Device\"; break;\n        case S_IFDIR: type = \"Directory\"; break;\n        case S_IFCHR: type = \"Character Device\"; break;\n    }\n    */\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\n    if (inode.status == STATUS_ON_SERVER) {\n        this.LoadFile(id);\n        return false;\n    }\n    return true;\n}\n\nFS.prototype.CloseInode = function(id) {\n    //message.Debug(\"close: \" + this.GetFullPath(id));\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_UNLINKED) {\n        //message.Debug(\"Filesystem: Delete unlinked file\");\n        inode.status = STATUS_INVALID;\n        delete this.inodedata[id];\n        inode.size = 0;\n    }\n}\n\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\n    if ((olddirid == newdirid) && (oldname == newname)) {\n        return true;\n    }\n    var oldid = this.Search(olddirid, oldname);\n    var oldpath = this.GetFullPath(oldid);\n    if (oldid == -1) {\n        return false;\n    }\n    var newid = this.Search(newdirid, newname);\n    if (newid != -1) {\n        this.Unlink(newid);\n    }\n\n    var idx = oldid; // idx contains the id which we want to rename\n    var inode = this.inodes[idx];\n\n    // remove inode ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n\n    inode.parentid = newdirid;\n    inode.name = newname;\n    inode.qid.version++;\n\n    inode.nextid = this.inodes[inode.parentid].firstid;\n    this.inodes[inode.parentid].firstid = idx;\n\n    this.inodes[olddirid].updatedir = true;\n    this.inodes[newdirid].updatedir = true;\n    this.inodes[olddirid].nlinks--;\n    this.inodes[newdirid].nlinks++;\n\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\n    \n    return true;\n}\n\nFS.prototype.Write = function(id, offset, count, GetByte) {\n    this.NotifyListeners(id, 'write');\n    var inode = this.inodes[id];\n    var data = this.inodedata[id];\n\n    if (!data || data.length < (offset+count)) {\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\n        inode.size = offset + count;\n        data = this.inodedata[id];\n    } else\n    if (inode.size < (offset+count)) {\n        inode.size = offset + count;\n    }\n    for(var i=0; i<count; i++)\n        data[offset+i] = GetByte();\n}\n\nFS.prototype.Search = function(parentid, name) {\n    var id = this.inodes[parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].parentid != parentid) { // consistency check\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\n        }\n        if (this.inodes[id].name == name) return id;\n        id = this.inodes[id].nextid;\n    }\n    return -1;\n}\n\nFS.prototype.GetTotalSize = function() {\n    return this.used_size;\n    //var size = 0;\n    //for(var i=0; i<this.inodes.length; i++) {\n    //    var d = this.inodes[i].data;\n    //    size += d ? d.length : 0;\n    //}\n    //return size;\n}\n\nFS.prototype.GetSpace = function() {\n    return this.total_size;\n};\n\nFS.prototype.GetFullPath = function(idx) {\n    var path = \"\";\n\n    while(idx != 0) {\n        path = \"/\" + this.inodes[idx].name + path;\n        idx = this.inodes[idx].parentid;\n    }\n    return path.substring(1);\n}\n\n// no double linked list. So, we need this\nFS.prototype.FindPreviousID = function(idx) {\n    var inode = this.GetInode(idx);\n    var id = this.inodes[inode.parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].nextid == idx) return id;\n        id = this.inodes[id].nextid;\n    }\n    return id;\n}\n\nFS.prototype.Unlink = function(idx) {\n    this.NotifyListeners(idx, 'delete');\n    if (idx == 0) return false; // root node cannot be deleted\n    var inode = this.GetInode(idx);\n    //message.Debug(\"Unlink \" + inode.name);\n\n    // check if directory is not empty\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n       if (inode.firstid != -1) return false;\n    }\n\n    // update ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n    // don't delete the content. The file is still accessible\n    this.inodes[inode.parentid].updatedir = true;\n    this.inodes[inode.parentid].nlinks--;\n    inode.status = STATUS_UNLINKED;\n    inode.nextid = -1;\n    inode.firstid = -1;\n    inode.parentid = -1;\n    inode.nlinks--;\n    return true;\n}\n\nFS.prototype.GetInode = function(idx)\n{\n    if (isNaN(idx)) {\n        message.Debug(\"Error in filesystem: id is not a number \");\n        return 0;\n    }\n\n    if ((idx < 0) || (idx > this.inodes.length)) {\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\n        return 0;\n    }\n    return this.inodes[idx];\n}\n\nFS.prototype.ChangeSize = function(idx, newsize)\n{\n    var inode = this.GetInode(idx);\n    var temp = this.inodedata[idx];\n    //message.Debug(\"change size to: \" + newsize);\n    if (newsize == inode.size) return;\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\n    inode.size = newsize;\n    if(!temp) return;\n    var size = Math.min(temp.length, inode.size);\n    for(var i=0; i<size; i++) {\n        data[i] = temp[i];\n    }\n}\n\nFS.prototype.SearchPath = function(path) {\n    //path = path.replace(/\\/\\//g, \"/\");\n    path = path.replace(\"//\", \"/\");\n    var walk = path.split(\"/\");\n    var n = walk.length;\n    if (walk[n-1].length == 0) walk.pop();\n    if (walk[0].length == 0) walk.shift();\n    n = walk.length;\n\n    var parentid = 0;\n    var id = -1;\n    for(var i=0; i<n; i++) {\n        id = this.Search(parentid, walk[i]);        \n        if (id == -1) {\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\n        }\n        parentid = id;\n    }\n    return {id: id, parentid: parentid, name: walk[i]};\n}\n// -----------------------------------------------------\n\nFS.prototype.GetRecursiveList = function(dirid, list) {\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        list.push(id);\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\n            this.GetRecursiveList(id, list);\n        }\n        id = this.inodes[id].nextid;\n    }\n}\n\nFS.prototype.MergeFile = function(file) {\n    message.Debug(\"Merge path:\" + file.name);\n    var ids = this.SearchPath(file.name);\n    if (ids.parentid == -1) return; // not even the path seems to exist\n    if (ids.id == -1) {\n        ids.id = this.CreateFile(ids.name, ids.parentid); \n    }\n    this.inodes[ids.id].data = file.data;\n    this.inodes[ids.id].size = file.data.length;\n    // Don't forget to update the timestamps !\n    this.inodes[ids.id].mtime = Math.floor((new Date()).getTime()/1000);\n    this.inodes[ids.id].atime = this.inodes[ids.id].mtime;\n    this.inodes[ids.id].ctime = this.inodes[ids.id].mtime;\n}\n\n\nFS.prototype.RecursiveDelete = function(path) {\n    var toDelete = []\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    this.GetRecursiveList(ids.id, toDelete);\n\n    for(var i=toDelete.length-1; i>=0; i--)\n        this.Unlink(toDelete[i]);\n\n}\n\nFS.prototype.DeleteNode = function(path) {\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\n        this.Unlink(ids.id);\n        return;\n    }\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\n        var toDelete = []\n        this.GetRecursiveList(ids.id, toDelete);\n        for(var i=toDelete.length-1; i>=0; i--)\n            this.Unlink(toDelete[i]);\n        this.Unlink(ids.id);\n        return;\n    }\n}\n\n/** @param {*=} info */\nFS.prototype.NotifyListeners = function(id, action, info) {\n    //if(info==undefined)\n    //    info = {};\n\n    //var path = this.GetFullPath(id);\n    //if (this.watchFiles[path] == true && action=='write') {\n    //  message.Send(\"WatchFileEvent\", path);\n    //}\n    //for (var directory in this.watchDirectories) {\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\n    //        var indexOf = path.indexOf(directory)\n    //        if(indexOf == 0 || indexOf == 1)\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \n    //    }\n    //}\n}\n\n\nFS.prototype.Check = function() {\n    for(var i=1; i<this.inodes.length; i++)\n    {\n        if (this.inodes[i].status == STATUS_INVALID) continue;\n        if (this.inodes[i].nextid == i) {\n            message.Debug(\"Error in filesystem: file points to itself\");\n            message.Abort();\n        }\n\n        var inode = this.GetInode(i);\n        if (inode.parentid < 0) {\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\n        }\n        var n = inode.name.length;\n        if (n == 0) {\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\n        }\n\n        for (var j in inode.name) {\n            var c = inode.name.charCodeAt(j);\n            if (c < 32) {\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\n            } \n        }\n    }\n}\n\nFS.prototype.FillDirectory = function(dirid) {\n    var inode = this.GetInode(dirid);\n    if (!inode.updatedir) return;\n    var parentid = inode.parentid;\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\n\n    // first get size\n    var size = 0;\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\n        id = this.inodes[id].nextid;\n    }\n\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\n    //message.Debug(\"size of dir entry: \" + size);\n    var data = this.inodedata[dirid] = new Uint8Array(size);\n    inode.size = size;\n\n    var offset = 0x0;\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[dirid].qid, \n        offset+13+8+1+2+1, \n        this.inodes[dirid].mode >> 12, \n        \".\"],\n        data, offset);\n\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[parentid].qid,\n        offset+13+8+1+2+2, \n        this.inodes[parentid].mode >> 12, \n        \"..\"],\n        data, offset);\n\n    id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [\n            this.inodes[id].qid,\n            offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\n            this.inodes[id].mode >> 12,\n            this.inodes[id].name\n        ],\n        data, offset);\n        id = this.inodes[id].nextid;\n    }\n    inode.updatedir = false;\n}\n\n\n// -----------------------------------------------------\n\n// only support for security.capabilities\n// should return a  \"struct vfs_cap_data\" defined in\n// linux/capability for format\n// check also:\n//   sys/capability.h\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\nFS.prototype.PrepareCAPs = function(id) {\n    var inode = this.GetInode(id);\n    if (inode.caps) return inode.caps.length;\n    inode.caps = new Uint8Array(12);\n    // format is little endian\n    // magic_etc (revision=0x01: 12 bytes)\n    inode.caps[0]  = 0x00;\n    inode.caps[1]  = 0x00;\n    inode.caps[2]  = 0x00;\n    inode.caps[3]  = 0x01;\n    // permitted (full capabilities)\n    inode.caps[4]  = 0xFF;\n    inode.caps[5]  = 0xFF;\n    inode.caps[6]  = 0xFF;\n    inode.caps[7]  = 0xFF;\n    // inheritable (full capabilities\n    inode.caps[8]  = 0xFF;\n    inode.caps[9]  = 0xFF;\n    inode.caps[10] = 0xFF;\n    inode.caps[11] = 0xFF;\n\n    return inode.caps.length;\n}\n\n","\"use strict\";\n\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\n{\n    window.requestAnimationFrame =\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame;\n}\n\n\n/**\n * Adapter to use visual screen in browsers (in constrast to node)\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction ScreenAdapter(screen_container, bus)\n{\n    console.assert(screen_container, \"1st argument must be a DOM container\");\n\n    var\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\n        graphic_context = graphic_screen.getContext(\"2d\"),\n\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\n        cursor_element = document.createElement(\"div\");\n\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        /** @type {number} */\n        scale_x = 1,\n\n        /** @type {number} */\n        scale_y = 1,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        modified_pixel_min = 0,\n        modified_pixel_max = 0,\n\n        changed_rows,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    var stopped = false;\n\n    var screen = this;\n\n    // 0x12345 -> \"#012345\"\n    function number_as_color(n)\n    {\n        n = n.toString(16);\n\n        return \"#\" + Array(7 - n.length).join(\"0\") + n;\n    }\n\n\n    /**\n     * Charmaps that containt unicode sequences for the default dospage\n     * @const\n     */\n    var charmap_high = new Uint16Array([\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\n    ]);\n\n    /** @const */\n    var charmap_low = new Uint16Array([\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\n    ]);\n\n    var charmap = [],\n        chr;\n\n    for(var i = 0; i < 256; i++)\n    {\n        if(i > 127)\n        {\n            chr = charmap_high[i - 0x80];\n        }\n        else if(i < 32)\n        {\n            chr = charmap_low[i];\n        }\n        else\n        {\n            chr = i;\n        }\n\n        charmap[i] = String.fromCharCode(chr);\n    }\n\n    graphic_context[\"imageSmoothingEnabled\"] = false;\n\n    cursor_element.style.position = \"absolute\";\n    cursor_element.style.backgroundColor = \"#ccc\";\n    cursor_element.style.width = \"7px\";\n    cursor_element.style.display = \"inline-block\";\n\n    text_screen.style.display = \"block\";\n    graphic_screen.style.display = \"none\";\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        this.update_buffer(data);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-clear\", function()\n    {\n        this.clear_screen();\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1], data[2], data[3]);\n    }, this);\n\n\n    this.init = function()\n    {\n        // not necessary, because this gets initialized by the bios early,\n        // but nicer to look at\n        this.set_size_text(80, 25);\n\n        this.timer();\n    };\n\n    this.make_screenshot = function()\n    {\n        try {\n            window.open(graphic_screen.toDataURL());\n        }\n        catch(e) {}\n    };\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n\n            changed_rows[row] = 1;\n        }\n    };\n\n    this.timer = function()\n    {\n        if(!stopped)\n        {\n            requestAnimationFrame(is_graphical ? update_graphical : update_text);\n        }\n    };\n\n    var update_text = function()\n    {\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            if(changed_rows[i])\n            {\n                screen.text_update_row(i);\n                changed_rows[i] = 0;\n            }\n        }\n\n        this.timer();\n    }.bind(this);\n\n    var update_graphical = function()\n    {\n        this.bus.send(\"screen-fill-buffer\");\n        this.timer();\n    }.bind(this);\n\n    this.destroy = function()\n    {\n        stopped = true;\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n\n        if(graphical)\n        {\n            text_screen.style.display = \"none\";\n            graphic_screen.style.display = \"block\";\n        }\n        else\n        {\n            text_screen.style.display = \"block\";\n            graphic_screen.style.display = \"none\";\n        }\n    };\n\n    this.clear_screen = function()\n    {\n        graphic_context.fillStyle = \"#000\";\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        changed_rows = new Int8Array(rows);\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n\n        while(text_screen.childNodes.length > rows)\n        {\n            text_screen.removeChild(text_screen.firstChild);\n        }\n\n        while(text_screen.childNodes.length < rows)\n        {\n            text_screen.appendChild(document.createElement(\"div\"));\n        }\n\n        for(var i = 0; i < rows; i++)\n        {\n            this.text_update_row(i);\n        }\n\n        update_scale_text();\n    };\n\n    this.set_size_graphical = function(width, height, buffer_width, buffer_height)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            width = buffer_width;\n            height = buffer_height;\n        }\n\n        graphic_screen.style.display = \"block\";\n\n        graphic_screen.width = width;\n        graphic_screen.height = height;\n\n        //graphic_screen.style.width = width * scale_x + \"px\";\n        //graphic_screen.style.height = height * scale_y + \"px\";\n\n        // Make sure to call this here, because pixels are transparent otherwise\n        //screen.clear_screen();\n\n        graphic_image_data = graphic_context.createImageData(buffer_width, buffer_height);\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n        update_scale_graphic();\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n        scale_x = s_x;\n        scale_y = s_y;\n\n        update_scale_text();\n        update_scale_graphic();\n    };\n    this.set_scale(scale_x, scale_y);\n\n    function update_scale_text()\n    {\n        elem_set_scale(text_screen, scale_x, scale_y, true);\n    }\n\n    function update_scale_graphic()\n    {\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\n    }\n\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\n    {\n        elem.style.width = \"\";\n        elem.style.height = \"\";\n\n        if(use_scale)\n        {\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = \"\";\n        }\n\n        var rectangle = elem.getBoundingClientRect();\n\n        if(use_scale)\n        {\n            var scale_str = \"\";\n\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\n\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = scale_str;\n        }\n        else\n        {\n            // unblur non-fractional scales\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\n            {\n                graphic_screen.style.imageRendering = \"-moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"webkit-optimize-contrast\";\n                graphic_screen.style.imageRendering = \"o-crisp-edges\";\n                graphic_screen.style.imageRendering = \"pixelated\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\n            }\n            else\n            {\n                graphic_screen.style.imageRendering = \"\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\n            }\n\n            // undo fractional css-to-device pixel ratios\n            var device_pixel_ratio = window.devicePixelRatio || 1;\n            if(device_pixel_ratio % 1 !== 0)\n            {\n                scale_x /= device_pixel_ratio;\n                scale_y /= device_pixel_ratio;\n            }\n        }\n\n        if(scale_x !== 1)\n        {\n            elem.style.width = rectangle.width * scale_x + \"px\";\n        }\n        if(scale_y !== 1)\n        {\n            elem.style.height = rectangle.height * scale_y + \"px\";\n        }\n    }\n\n    this.update_cursor_scanline = function(start, end)\n    {\n        if(start & 0x20)\n        {\n            cursor_element.style.display = \"none\";\n        }\n        else\n        {\n            cursor_element.style.display = \"inline\";\n\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\n        }\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            changed_rows[row] = 1;\n            changed_rows[cursor_row] = 1;\n\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.text_update_row = function(row)\n    {\n        var offset = 3 * row * text_mode_width,\n            row_element,\n            color_element,\n            fragment;\n\n        var bg_color,\n            fg_color,\n            text;\n\n        row_element = text_screen.childNodes[row];\n        fragment = document.createElement(\"div\");\n\n        for(var i = 0; i < text_mode_width; )\n        {\n            color_element = document.createElement(\"span\");\n\n            bg_color = text_mode_data[offset + 1];\n            fg_color = text_mode_data[offset + 2];\n\n            color_element.style.backgroundColor = number_as_color(bg_color);\n            color_element.style.color = number_as_color(fg_color);\n\n            text = \"\";\n\n            // put characters of the same color in one element\n            while(i < text_mode_width &&\n                text_mode_data[offset + 1] === bg_color &&\n                text_mode_data[offset + 2] === fg_color)\n            {\n                var ascii = text_mode_data[offset];\n\n                text += charmap[ascii];\n\n                i++;\n                offset += 3;\n\n                if(row === cursor_row)\n                {\n                    if(i === cursor_col)\n                    {\n                        // next row will be cursor\n                        // create new element\n                        break;\n                    }\n                    else if(i === cursor_col + 1)\n                    {\n                        // found the cursor\n                        fragment.appendChild(cursor_element);\n                        break;\n                    }\n                }\n            }\n\n            color_element.textContent = text;\n            fragment.appendChild(color_element);\n        }\n\n        row_element.parentNode.replaceChild(fragment, row_element);\n    };\n\n    this.update_buffer = function(layers)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            graphic_context.putImageData(\n                graphic_image_data,\n                0, 0\n            );\n\n            // For each visible layer that would've been drawn, draw a\n            // rectangle to visualise the layer instead.\n            graphic_context.strokeStyle = \"#0F0\";\n            graphic_context.lineWidth = 4;\n            layers.forEach((layer) =>\n            {\n                graphic_context.strokeRect(\n                    layer.buffer_x,\n                    layer.buffer_y,\n                    layer.buffer_width,\n                    layer.buffer_height\n                );\n            });\n            graphic_context.lineWidth = 1;\n            return;\n        }\n\n        layers.forEach((layer) =>\n        {\n            graphic_context.putImageData(\n                graphic_image_data,\n                layer.screen_x - layer.buffer_x,\n                layer.screen_y - layer.buffer_y,\n                layer.buffer_x,\n                layer.buffer_y,\n                layer.buffer_width,\n                layer.buffer_height\n            );\n        });\n    };\n\n    this.init();\n}\n\n\n","\"use strict\";\n\n(function()\n{\n    /** @const */\n    var ON_LOCALHOST = !location.hostname.endsWith(\"copy.sh\");\n\n    /** @const */\n    var HOST = ON_LOCALHOST ? \"\" : \"//i.copy.sh/\";\n\n    /** @const */\n    var ON_HTTPS = location.protocol === \"https:\";\n\n    /** @const */\n    var OTHER_HOST = ON_LOCALHOST ? \"\" : ON_HTTPS ? \"//j.copy.sh:8443/\" : \"//j.copy.sh:8880/\";\n\n    /**\n     * @return {Object.<string, string>}\n     */\n    function get_query_arguments()\n    {\n        var query = location.search.substr(1).split(\"&\");\n        var parameters = {};\n\n        for(var i = 0; i < query.length; i++)\n        {\n            var param = query[i].split(\"=\");\n            parameters[param[0]] = decodeURIComponent(param[1]);\n        }\n\n        return parameters;\n    }\n\n    function set_title(text)\n    {\n        document.title = text + \" - Virtual x86\" +  (DEBUG ? \" - debug\" : \"\");\n    }\n\n    function format_timestamp(time)\n    {\n        if(time < 60)\n        {\n            return time + \"s\";\n        }\n        else if(time < 3600)\n        {\n            return (time / 60 | 0) + \"m \" + v86util.pad0(time % 60, 2) + \"s\";\n        }\n        else\n        {\n            return (time / 3600 | 0) + \"h \" +\n                v86util.pad0((time / 60 | 0) % 60, 2) + \"m \" +\n                v86util.pad0(time % 60, 2) + \"s\";\n        }\n    }\n\n    function chr_repeat(chr, count)\n    {\n        var result = \"\";\n\n        while(count-- > 0)\n        {\n            result += chr;\n        }\n\n        return result;\n    }\n\n    var progress_ticks = 0;\n\n    function show_progress(e)\n    {\n        var el = $(\"loading\");\n        el.style.display = \"block\";\n\n        if(e.file_index === e.file_count - 1 && e.loaded >= e.total - 2048)\n        {\n            // last file is (almost) loaded\n            el.textContent = \"Done downloading. Starting now ...\";\n            return;\n        }\n\n        var line = \"Downloading images \";\n\n        if(typeof e.file_index === \"number\" && e.file_count)\n        {\n            line += \"[\" + (e.file_index + 1) + \"/\" + e.file_count + \"] \";\n        }\n\n        if(e.total && typeof e.loaded === \"number\")\n        {\n            var per100 = Math.floor(e.loaded / e.total * 100);\n            per100 = Math.min(100, Math.max(0, per100));\n\n            var per50 = Math.floor(per100 / 2);\n\n            line += per100 + \"% [\";\n            line += chr_repeat(\"#\", per50);\n            line += chr_repeat(\" \", 50 - per50) + \"]\";\n        }\n        else\n        {\n            line += chr_repeat(\".\", progress_ticks++ % 50);\n        }\n\n        el.textContent = line;\n    }\n\n    function $(id)\n    {\n        var el = document.getElementById(id);\n\n        if(!el)\n        {\n            dbg_log(\"Element with id `\" + id + \"` not found\");\n        }\n\n        return el;\n    }\n\n    function onload()\n    {\n        if(!(\"responseType\" in new XMLHttpRequest))\n        {\n            alert(\"Your browser is not supported \" +\n                  \"because it doesn't have XMLHttpRequest.responseType\");\n            return;\n        }\n\n        var settings = {};\n\n        $(\"start_emulation\").onclick = function()\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_profile(\"custom\");\n\n            var images = [];\n            var last_file;\n\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                last_file = floppy_file;\n                settings.fda = { buffer: floppy_file };\n            }\n\n            var cd_file = $(\"cd_image\").files[0];\n            if(cd_file)\n            {\n                last_file = cd_file;\n                settings.cdrom = { buffer: cd_file };\n            }\n\n            var hd_file = $(\"hd_image\").files[0];\n            if(hd_file)\n            {\n                last_file = hd_file;\n                settings.hda = { buffer: hd_file };\n            }\n\n            if($(\"multiboot_image\"))\n            {\n                var multiboot_file = $(\"multiboot_image\").files[0];\n                if(multiboot_file)\n                {\n                    last_file = multiboot_file;\n                    settings.multiboot = { buffer: multiboot_file };\n                }\n            }\n\n            if(last_file)\n            {\n                set_title(last_file.name);\n            }\n\n            start_emulation(settings);\n        };\n\n        if(DEBUG)\n        {\n            debug_onload(settings);\n        }\n\n        var oses = [\n            {\n                id: \"archlinux\",\n                state: {\n                    \"url\": HOST + \"images/v86state.bin\",\n                    \"size\": 142770436,\n                },\n                name: \"Arch Linux\",\n                memory_size: 128 * 1024 * 1024,\n                vga_memory_size: 8 * 1024 * 1024,\n\n                // required for restoring state, should not be used when booted on 9p\n                hda: {\n                    \"url\": HOST + \"images/arch3.img\",\n                    \"size\": 16 * 1024 * 1024 * 1024,\n                    \"async\": true,\n                },\n\n                filesystem: {\n                    \"basefs\": {\n                        \"url\": HOST + \"images/fs.json\",\n                        \"size\": 10232633,\n                    },\n                    \"baseurl\": HOST + \"arch/\",\n                },\n            },\n            {\n                id: \"msdos\",\n                hda: {\n                    \"url\": HOST + \"images/msdos.img\",\n                    \"size\": 8 * 1024 * 1024,\n                },\n                boot_order: 0x132,\n                name: \"MS-DOS\",\n            },\n            {\n                id: \"freedos\",\n                fda: {\n                    \"url\": HOST + \"images/freedos722.img\",\n                    \"size\": 737280,\n                },\n                name: \"FreeDOS\",\n            },\n            {\n                id: \"oberon\",\n                fda: {\n                    \"url\": HOST + \"images/oberon-boot.dsk\",\n                    \"size\": 1440 * 1024,\n                },\n                hda: {\n                    \"url\": HOST + \"images/oberon.dsk\",\n                    \"size\": 41943040,\n                },\n                name: \"Oberon\",\n            },\n            {\n                id: \"windows1\",\n                fda: {\n                    \"url\": HOST + \"images/windows101.img\",\n                    \"size\": 1474560,\n                },\n                name: \"Windows\",\n            },\n            {\n                id: \"linux26\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux.iso\",\n                    \"size\": 5666816,\n                },\n                name: \"Linux\",\n            },\n            {\n                id: \"linux3\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux3.iso\",\n                    \"size\": 8624128,\n                },\n                name: \"Linux\",\n                filesystem: {},\n            },\n            {\n                id: \"kolibrios\",\n                fda: {\n                    \"url\": (ON_LOCALHOST || ON_HTTPS) ?\n                            \"images/kolibri.img\" :\n                            \"//builds.kolibrios.org/eng/data/data/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"kolibrios-fallback\",\n                fda: {\n                    \"url\": HOST + \"images/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"openbsd\",\n                fda: {\n                    \"url\": HOST + \"images/openbsd.img\",\n                    \"size\": 1474560,\n                },\n                name: \"OpenBSD\",\n            },\n            {\n                id: \"solos\",\n                fda: {\n                    \"url\": HOST + \"images/os8.dsk\",\n                    \"size\": 1474560,\n                },\n                name: \"Sol OS\",\n            },\n            {\n                id: \"dexos\",\n                cdrom: {\n                    \"url\": HOST + \"images/DexOSv6.iso\",\n                    \"size\": 1837056,\n                },\n                name: \"DexOS\",\n            },\n            {\n                id: \"bootchess\",\n                fda: {\n                    \"url\": HOST + \"images/bootchess.img\",\n                },\n                name: \"Bootchess\",\n            },\n            {\n                id: \"windows98\",\n                memory_size: 64 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/windows98.img\",\n                    \"async\": true,\n                    \"size\": 300 * 1024 * 1024,\n                },\n                name: \"Windows 98\",\n                state: {\n                    \"url\": HOST + \"images/windows98_state.bin\",\n                    \"size\": 75705744,\n                },\n            },\n            {\n                id: \"windows95\",\n                memory_size: 32 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/W95.IMG\",\n                    \"size\": 242049024,\n                    \"async\": true,\n                },\n                name: \"Windows 95\",\n                state: {\n                    \"url\": HOST + \"images/windows95_state.bin\",\n                    \"size\": 42151316,\n                },\n            },\n            {\n                id: \"freebsd\",\n                memory_size: 128 * 1024 * 1024,\n                state: {\n                    \"url\": HOST + \"images/freebsd_state.bin\",\n                    \"size\": 142815292,\n                },\n                hda: {\n                    \"url\": ON_LOCALHOST ? \"../v86-images/os/freebsd3.img\" :\n                                          OTHER_HOST + \"images/freebsd3.img\",\n                    \"size\": 17179869184,\n                    \"async\": true,\n                },\n                name: \"FreeBSD\",\n            },\n            {\n                id: \"reactos\",\n                memory_size: 256 * 1024 * 1024,\n                cdrom: {\n                    \"url\": HOST + \"images/ReactOS-0.4.9-RC-Live.iso\",\n                    \"async\": true,\n                },\n                state: {\n                    \"url\": HOST + \"images/reactos_state.bin\",\n                    \"size\": 276971224,\n                },\n                name: \"ReactOS\",\n                description: 'Running <a href=\"https://reactos.org/\">ReactOS</a>',\n            },\n        ];\n\n        if(DEBUG)\n        {\n            // see tests/kvm-unit-tests/x86/\n            var tests = [\n                \"realmode\",\n                // All tests below require an APIC\n                \"cmpxchg8b\",\n                \"port80\",\n                \"setjmp\",\n                \"sieve\",\n                \"hypercall\", // crashes\n                \"init\", // stops execution\n                \"msr\", // TODO: Expects 64 bit msrs\n                \"smap\", // test stops, SMAP not enabled\n                \"tsc_adjust\", // TODO: IA32_TSC_ADJUST\n                \"tsc\", // TODO: rdtscp\n                \"rmap_chain\", // crashes\n                \"memory\", // missing mfence (uninteresting)\n                \"taskswitch\", // TODO: Jump\n                \"taskswitch2\", // TODO: Call TSS\n                \"eventinj\", // Missing #nt\n                \"ioapic\",\n                \"apic\",\n            ];\n\n            for(let test of tests)\n            {\n                oses.push({\n                    name: \"Test case: \" + test,\n                    id: \"test-\" + test,\n                    memory_size: 128 * 1024 * 1024,\n                    multiboot: { \"url\": \"tests/kvm-unit-tests/x86/\" + test + \".flat\", }\n                });\n            }\n        }\n\n        var query_args = get_query_arguments();\n        var profile = query_args[\"profile\"];\n\n        if(query_args[\"use_bochs_bios\"])\n        {\n            settings.use_bochs_bios = true;\n        }\n\n        for(var i = 0; i < oses.length; i++)\n        {\n            var infos = oses[i];\n\n            if(profile === infos.id)\n            {\n                start_profile(infos);\n                return;\n            }\n\n            var element = $(\"start_\" + infos.id);\n\n            if(element)\n            {\n                element.onclick = function(infos, element)\n                {\n                    set_profile(infos.id);\n                    element.blur();\n\n                    start_profile(infos);\n                }.bind(this, infos, element);\n            }\n        }\n\n        if(profile === \"custom\")\n        {\n            if(query_args[\"hda.url\"])\n            {\n                settings.hda = {\n                    \"size\": parseInt(query_args[\"hda.size\"], 10) || undefined,\n                    \"url\": query_args[\"hda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"cdrom.url\"])\n            {\n                settings.cdrom = {\n                    \"size\": parseInt(query_args[\"cdrom.size\"], 10) || undefined,\n                    \"url\": query_args[\"cdrom.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"fda.url\"])\n            {\n                settings.fda = {\n                    \"size\": parseInt(query_args[\"fda.size\"], 10) || undefined,\n                    \"url\": query_args[\"fda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(settings.fda || settings.cdrom || settings.hda)\n            {\n                $(\"boot_options\").style.display = \"none\";\n\n                start_emulation(settings, done);\n            }\n        }\n\n        function start_profile(infos)\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_title(infos.name);\n\n            settings.filesystem = infos.filesystem;\n\n            if(infos.state)\n            {\n                $(\"reset\").style.display = \"none\";\n                settings.initial_state = infos.state;\n            }\n\n            settings.fda = infos.fda;\n            settings.cdrom = infos.cdrom;\n            settings.hda = infos.hda;\n            settings.multiboot = infos.multiboot;\n\n            settings.memory_size = infos.memory_size;\n            settings.vga_memory_size = infos.vga_memory_size;\n\n            settings.id = infos.id;\n\n            if(infos.boot_order !== undefined)\n            {\n                settings.boot_order = infos.boot_order;\n            }\n\n            if(!DEBUG && infos.description)\n            {\n                $(\"description\").style.display = \"block\";\n                $(\"description\").innerHTML = \"<br>\" + infos.description;\n            }\n\n            start_emulation(settings, done);\n        }\n\n        function done(emulator)\n        {\n            if(query_args[\"c\"])\n            {\n                setTimeout(function()\n                {\n                    //emulator.serial0_send(query_args[\"c\"] + \"\\n\");\n                    emulator.keyboard_send_text(query_args[\"c\"] + \"\\n\");\n                }, 25);\n            }\n        }\n    }\n\n    function debug_onload(settings)\n    {\n        // called on window.onload, in debug mode\n\n        //settings.filesystem = {\n        //    baseurl: \"http://localhost/v86-images/arch/\",\n        //    basefs: \"http://localhost/v86-images/fs.json\",\n        //};\n\n        //$(\"restore_state\").onchange = function()\n        //{\n        //};\n\n        //$(\"start_test\").onclick = function()\n        //{\n        //};\n\n        var log_levels = $(\"log_levels\");\n\n        for(var i = 0; i < LOG_NAMES.length; i++)\n        {\n            var mask = LOG_NAMES[i][0];\n\n            if(mask === 1)\n                continue;\n\n            var name = LOG_NAMES[i][1].toLowerCase(),\n                input = document.createElement(\"input\"),\n                label = document.createElement(\"label\");\n\n            input.type = \"checkbox\";\n\n            label.htmlFor = input.id = \"log_\" + name;\n\n            if(LOG_LEVEL & mask)\n            {\n                input.checked = true;\n            }\n            input.mask = mask;\n\n            label.appendChild(input);\n            label.appendChild(document.createTextNode(v86util.pads(name, 4) + \" \"));\n            log_levels.appendChild(label);\n\n            if(i === Math.floor(LOG_NAMES.length / 2))\n            {\n                log_levels.appendChild(document.createTextNode(\"\\n\"));\n            }\n        }\n\n        log_levels.onchange = function(e)\n        {\n            var target = e.target,\n                mask = target.mask;\n\n            if(target.checked)\n            {\n                LOG_LEVEL |= mask;\n            }\n            else\n            {\n                LOG_LEVEL &= ~mask;\n            }\n\n            target.blur();\n        };\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent = \"ACPI: \" + (ENABLE_ACPI ? \"enabled\" : \"disabled\");\n    }\n\n    window.addEventListener(\"load\", onload, false);\n\n    // old webkit fires popstate on every load, fuck webkit\n    // https://code.google.com/p/chromium/issues/detail?id=63040\n    window.addEventListener(\"load\", function()\n    {\n        setTimeout(function()\n        {\n            window.addEventListener(\"popstate\", onpopstate);\n        }, 0);\n    });\n\n    // works in firefox and chromium\n    if(document.readyState === \"complete\")\n    {\n        onload();\n    }\n\n    /** @param {?=} done */\n    function start_emulation(settings, done)\n    {\n        /** @const */\n        var MB = 1024 * 1024;\n\n        var memory_size = settings.memory_size;\n\n        if(!memory_size)\n        {\n            memory_size = parseInt($(\"memory_size\").value, 10) * MB;\n\n            if(!memory_size)\n            {\n                alert(\"Invalid memory size - reset to 128MB\");\n                memory_size = 128 * MB;\n            }\n        }\n\n        var vga_memory_size = settings.vga_memory_size;\n\n        if(!vga_memory_size)\n        {\n            vga_memory_size = parseInt($(\"video_memory_size\").value, 10) * MB;\n\n            if(!vga_memory_size)\n            {\n                alert(\"Invalid video memory size - reset to 8MB\");\n                vga_memory_size = 8 * MB;\n            }\n        }\n\n        if(!settings.fda)\n        {\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                settings.fda = { buffer: floppy_file };\n            }\n        }\n\n        /** @const */\n        var BIOSPATH = \"bios/\";\n\n        if(settings.use_bochs_bios)\n        {\n            var biosfile = \"bochs-bios.bin\";\n            var vgabiosfile = \"bochs-vgabios.bin\";\n        }\n        else\n        {\n            var biosfile = DEBUG ? \"seabios-debug.bin\" : \"seabios.bin\";\n            var vgabiosfile = DEBUG ? \"vgabios-debug.bin\" : \"vgabios.bin\";\n            //var biosfile = DEBUG ? \"seabios-ultradebug.bin\" : \"seabios.bin\";\n            //var vgabiosfile = DEBUG ? \"vgabios-ultradebug.bin\" : \"vgabios.bin\";\n        }\n\n        //var biosfile = \"seabios-qemu.bin\";\n        //var vgabiosfile = \"vgabios-qemu.bin\";\n\n        var bios;\n        var vga_bios;\n\n        // a bios is only needed if the machine is booted\n        if(!settings.initial_state)\n        {\n            bios = {\n                \"url\": BIOSPATH + biosfile,\n            };\n            vga_bios = {\n                \"url\": BIOSPATH + vgabiosfile,\n            };\n        }\n\n        var emulator = new V86Starter({\n            \"memory_size\": memory_size,\n            \"vga_memory_size\": vga_memory_size,\n\n            \"screen_container\": $(\"screen_container\"),\n            \"serial_container\": $(\"serial\"),\n\n            \"boot_order\": settings.boot_order || parseInt($(\"boot_order\").value, 16) || 0,\n\n            \"network_relay_url\": \"wss://relay.widgetry.org/\",\n            //\"network_relay_url\": \"ws://localhost:8001/\",\n\n            \"bios\": bios,\n            \"vga_bios\": vga_bios,\n\n            \"fda\": settings.fda,\n            \"hda\": settings.hda,\n            \"cdrom\": settings.cdrom,\n\n            \"multiboot\": settings.multiboot,\n\n            \"initial_state\": settings.initial_state,\n            \"filesystem\": settings.filesystem || {},\n\n            \"autostart\": true,\n        });\n\n        if(DEBUG) window[\"emulator\"] = emulator;\n\n        emulator.add_listener(\"emulator-ready\", function()\n        {\n            if(DEBUG)\n            {\n                debug_start(emulator);\n            }\n\n            init_ui(settings, emulator);\n\n            done && done(emulator);\n        });\n\n        emulator.add_listener(\"download-progress\", function(e)\n        {\n            show_progress(e);\n        });\n\n        emulator.add_listener(\"download-error\", function(e)\n        {\n            var el = $(\"loading\");\n            el.style.display = \"block\";\n            el.textContent = \"Loading \" + e.file_name + \" failed. Check your connection \" +\n                             \"and reload the page to try again.\";\n        });\n    }\n\n    /**\n     * @param {Object} settings\n     * @param {V86Starter} emulator\n     */\n    function init_ui(settings, emulator)\n    {\n        $(\"boot_options\").style.display = \"none\";\n        $(\"loading\").style.display = \"none\";\n        $(\"runtime_options\").style.display = \"block\";\n        $(\"runtime_infos\").style.display = \"block\";\n        $(\"screen_container\").style.display = \"block\";\n\n        if(settings.filesystem)\n        {\n            init_filesystem_panel(emulator);\n        }\n\n        $(\"run\").onclick = function()\n        {\n            if(emulator.is_running())\n            {\n                $(\"run\").value = \"Run\";\n                emulator.stop();\n            }\n            else\n            {\n                $(\"run\").value = \"Pause\";\n                emulator.run();\n            }\n\n            $(\"run\").blur();\n        };\n\n        $(\"exit\").onclick = function()\n        {\n            emulator.stop();\n            location.href = location.pathname;\n        };\n\n        $(\"lock_mouse\").onclick = function()\n        {\n            if(!mouse_is_enabled)\n            {\n                $(\"toggle_mouse\").onclick();\n            }\n\n            emulator.lock_mouse();\n            $(\"lock_mouse\").blur();\n        };\n\n        var mouse_is_enabled = true;\n\n        $(\"toggle_mouse\").onclick = function()\n        {\n            mouse_is_enabled = !mouse_is_enabled;\n\n            emulator.mouse_set_status(mouse_is_enabled);\n            $(\"toggle_mouse\").value = (mouse_is_enabled ? \"Dis\" : \"En\") + \"able mouse\";\n            $(\"toggle_mouse\").blur();\n        };\n\n\n        var last_tick = 0;\n        var running_time = 0;\n        var last_instr_counter = 0;\n        var interval;\n        var os_uses_mouse = false;\n\n        function update_info()\n        {\n            var now = Date.now();\n\n            var instruction_counter = emulator.get_instruction_counter();\n            var last_ips = instruction_counter - last_instr_counter;\n\n            last_instr_counter = instruction_counter;\n\n            var delta_time = now - last_tick;\n            running_time += delta_time;\n            last_tick = now;\n\n            $(\"speed\").textContent = last_ips / delta_time | 0;\n            $(\"avg_speed\").textContent = instruction_counter / running_time | 0;\n            $(\"running_time\").textContent = format_timestamp(running_time / 1000 | 0);\n        }\n\n        emulator.add_listener(\"emulator-started\", function()\n        {\n            last_tick = Date.now();\n            interval = setInterval(update_info, 1000);\n        });\n\n        emulator.add_listener(\"emulator-stopped\", function()\n        {\n            update_info();\n            clearInterval(interval);\n        });\n\n        var stats_9p = {\n            read: 0,\n            write: 0,\n        };\n\n        emulator.add_listener(\"9p-read-start\", function()\n        {\n            $(\"info_filesystem\").style.display = \"block\";\n            $(\"info_filesystem_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"9p-read-end\", function(args)\n        {\n            stats_9p.read += args[1];\n\n            $(\"info_filesystem_status\").textContent = \"Idle\";\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_read\").textContent = stats_9p.read;\n        });\n        emulator.add_listener(\"9p-write-end\", function(args)\n        {\n            stats_9p.write += args[1];\n\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_written\").textContent = stats_9p.write;\n        });\n\n        var stats_storage = {\n            read: 0,\n            read_sectors: 0,\n            write: 0,\n            write_sectors: 0,\n        };\n\n        emulator.add_listener(\"ide-read-start\", function()\n        {\n            $(\"info_storage\").style.display = \"block\";\n            $(\"info_storage_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"ide-read-end\", function(args)\n        {\n            stats_storage.read += args[1];\n            stats_storage.read_sectors += args[2];\n\n            $(\"info_storage_status\").textContent = \"Idle\";\n            $(\"info_storage_bytes_read\").textContent = stats_storage.read;\n            $(\"info_storage_sectors_read\").textContent = stats_storage.read_sectors;\n        });\n        emulator.add_listener(\"ide-write-end\", function(args)\n        {\n            stats_storage.write += args[1];\n            stats_storage.write_sectors += args[2];\n\n            $(\"info_storage_bytes_written\").textContent = stats_storage.write;\n            $(\"info_storage_sectors_written\").textContent = stats_storage.write_sectors;\n        });\n\n        var stats_net = {\n            bytes_transmitted: 0,\n            bytes_received: 0,\n        };\n\n        emulator.add_listener(\"eth-receive-end\", function(args)\n        {\n            stats_net.bytes_received += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_received\").textContent = stats_net.bytes_received;\n        });\n        emulator.add_listener(\"eth-transmit-end\", function(args)\n        {\n            stats_net.bytes_transmitted += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_transmitted\").textContent = stats_net.bytes_transmitted;\n        });\n\n\n        emulator.add_listener(\"mouse-enable\", function(is_enabled)\n        {\n            os_uses_mouse = is_enabled;\n            $(\"info_mouse_enabled\").textContent = is_enabled ? \"Yes\" : \"No\";\n        });\n\n        emulator.add_listener(\"screen-set-mode\", function(is_graphical)\n        {\n            if(is_graphical)\n            {\n                $(\"info_vga_mode\").textContent = \"Graphical\";\n            }\n            else\n            {\n                $(\"info_vga_mode\").textContent = \"Text\";\n                $(\"info_res\").textContent = \"-\";\n                $(\"info_bpp\").textContent = \"-\";\n            }\n        });\n        emulator.add_listener(\"screen-set-size-graphical\", function(args)\n        {\n            $(\"info_res\").textContent = args[0] + \"x\" + args[1];\n            $(\"info_bpp\").textContent = args[4];\n        });\n\n\n        $(\"reset\").onclick = function()\n        {\n            emulator.restart();\n            $(\"reset\").blur();\n        };\n\n        add_image_download_button(settings.hda, \"hda\");\n        add_image_download_button(settings.hdb, \"hdb\");\n        add_image_download_button(settings.fda, \"fda\");\n        add_image_download_button(settings.fdb, \"fdb\");\n        add_image_download_button(settings.cdrom, \"cdrom\");\n\n        function add_image_download_button(obj, type)\n        {\n            var elem = $(\"get_\" + type + \"_image\");\n\n            if(!obj || obj.size > 100 * 1024 * 1024)\n            {\n                elem.style.display = \"none\";\n                return;\n            }\n\n            elem.onclick = function(e)\n            {\n                let buffer = emulator.disk_images[type];\n                let filename = settings.id + (type === \"cdrom\" ? \".iso\" : \".img\");\n\n                if(buffer.get_as_file)\n                {\n                    var file = buffer.get_as_file(filename);\n                    download(file, filename);\n                }\n                else\n                {\n                    buffer.get_buffer(function(b)\n                    {\n                        if(b)\n                        {\n                            dump_file(b, filename);\n                        }\n                        else\n                        {\n                            alert(\"The file could not be loaded. Maybe it's too big?\");\n                        }\n                    });\n                }\n\n                elem.blur();\n            };\n        }\n\n        $(\"memory_dump\").onclick = function()\n        {\n            dump_file(emulator.v86.cpu.mem8, \"v86memory.bin\");\n            $(\"memory_dump\").blur();\n        };\n\n        //$(\"memory_dump_dmp\").onclick = function()\n        //{\n        //    var memory = emulator.v86.cpu.mem8;\n        //    var memory_size = memory.length;\n        //    var page_size = 4096;\n        //    var header = new Uint8Array(4096);\n        //    var header32 = new Int32Array(header.buffer);\n\n        //    header32[0] = 0x45474150; // 'PAGE'\n        //    header32[1] = 0x504D5544; // 'DUMP'\n\n        //    header32[0x10 >> 2] = emulator.v86.cpu.cr[3]; // DirectoryTableBase\n        //    header32[0x24 >> 2] = 1; // NumberProcessors\n        //    header32[0xf88 >> 2] = 1; // DumpType: full dump\n        //    header32[0xfa0 >> 2] = header.length + memory_size; // RequiredDumpSpace\n\n        //    header32[0x064 + 0 >> 2] = 1; // NumberOfRuns\n        //    header32[0x064 + 4 >> 2] = memory_size / page_size; // NumberOfPages\n        //    header32[0x064 + 8 >> 2] = 0; // BasePage\n        //    header32[0x064 + 12 >> 2] = memory_size / page_size; // PageCount\n\n        //    dump_file([header, memory], \"v86memory.dmp\");\n\n        //    $(\"memory_dump_dmp\").blur();\n        //};\n\n        $(\"save_state\").onclick = function()\n        {\n            emulator.save_state(function(error, result)\n            {\n                if(error)\n                {\n                    console.log(error.stack);\n                    console.log(\"Couldn't save state: \", error);\n                }\n                else\n                {\n                    dump_file(result, \"v86state.bin\");\n                }\n            });\n\n            $(\"save_state\").blur();\n        };\n\n        $(\"load_state\").onclick = function()\n        {\n            $(\"load_state_input\").click();\n            $(\"load_state\").blur();\n        };\n\n        $(\"load_state_input\").onchange = function()\n        {\n            var file = this.files[0];\n\n            if(!file)\n            {\n                return;\n            }\n\n            var was_running = emulator.is_running();\n\n            if(was_running)\n            {\n                emulator.stop();\n            }\n\n            var filereader = new FileReader();\n            filereader.onload = function(e)\n            {\n                try\n                {\n                    emulator.restore_state(e.target.result);\n                }\n                catch(err)\n                {\n                    alert(\"Something bad happened while restoring the state:\\n\" + err + \"\\n\\n\" +\n                          \"Note that the current configuration must be the same as the original\");\n                    throw err;\n                }\n\n                if(was_running)\n                {\n                    emulator.run();\n                }\n            };\n            filereader.readAsArrayBuffer(file);\n\n            this.value = \"\";\n        };\n\n        $(\"ctrlaltdel\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x1D, // ctrl\n                0x38, // alt\n                0x53, // delete\n\n                // break codes\n                0x1D | 0x80,\n                0x38 | 0x80,\n                0x53 | 0x80,\n            ]);\n\n            $(\"ctrlaltdel\").blur();\n        };\n\n        $(\"alttab\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x38, // alt\n                0x0F, // tab\n            ]);\n\n            setTimeout(function()\n            {\n                emulator.keyboard_send_scancodes([\n                    0x38 | 0x80,\n                    0x0F | 0x80,\n                ]);\n            }, 100);\n\n            $(\"alttab\").blur();\n        };\n\n        $(\"scale\").onchange = function()\n        {\n            var n = parseFloat(this.value);\n\n            if(n || n > 0)\n            {\n                emulator.screen_set_scale(n, n);\n            }\n        };\n\n        $(\"fullscreen\").onclick = function()\n        {\n            emulator.screen_go_fullscreen();\n        };\n\n        $(\"screen_container\").onclick = function()\n        {\n            if(mouse_is_enabled && os_uses_mouse)\n            {\n                emulator.lock_mouse();\n                $(\"lock_mouse\").blur();\n            }\n            else\n            {\n                // allow text selection\n                if(window.getSelection().isCollapsed)\n                {\n                    let phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n                    // stop mobile browser from scrolling into view when the keyboard is shown\n                    phone_keyboard.style.top = document.body.scrollTop + 100 + \"px\";\n                    phone_keyboard.style.left = document.body.scrollLeft + 100 + \"px\";\n\n                    phone_keyboard.focus();\n                }\n            }\n        };\n\n        const phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n        phone_keyboard.setAttribute(\"autocorrect\", \"off\");\n        phone_keyboard.setAttribute(\"autocapitalize\", \"off\");\n        phone_keyboard.setAttribute(\"spellcheck\", \"false\");\n        phone_keyboard.tabIndex = 0;\n\n        $(\"screen_container\").addEventListener(\"mousedown\", (e) =>\n        {\n            phone_keyboard.focus();\n        }, false);\n\n        $(\"take_screenshot\").onclick = function()\n        {\n            emulator.screen_make_screenshot();\n\n            $(\"take_screenshot\").blur();\n        };\n\n        $(\"serial\").style.display = \"block\";\n\n        window.addEventListener(\"keydown\", ctrl_w_rescue, false);\n        window.addEventListener(\"keyup\", ctrl_w_rescue, false);\n        window.addEventListener(\"blur\", ctrl_w_rescue, false);\n\n        function ctrl_w_rescue(e)\n        {\n            if(e.ctrlKey)\n            {\n                window.onbeforeunload = function()\n                {\n                    window.onbeforeunload = null;\n                    return \"CTRL-W cannot be sent to the emulator.\";\n                };\n            }\n            else\n            {\n                window.onbeforeunload = null;\n            }\n        }\n    }\n\n    function init_filesystem_panel(emulator)\n    {\n        $(\"filesystem_panel\").style.display = \"block\";\n\n        $(\"filesystem_send_file\").onchange = function()\n        {\n            Array.prototype.forEach.call(this.files, function(file)\n            {\n                var loader = new v86util.SyncFileBuffer(file);\n                loader.onload = function()\n                {\n                    loader.get_buffer(function(buffer)\n                    {\n                        emulator.create_file(\"/\" + file.name, new Uint8Array(buffer));\n                    });\n                };\n                loader.load();\n            }, this);\n\n            this.value = \"\";\n            this.blur();\n        };\n\n        $(\"filesystem_get_file\").onkeypress = function(e)\n        {\n            if(e.which !== 13)\n            {\n                return;\n            }\n\n            this.disabled = true;\n\n            emulator.read_file(this.value, function(err, uint8array)\n            {\n                this.disabled = false;\n\n                if(uint8array)\n                {\n                    var filename = this.value.replace(/\\/$/, \"\").split(\"/\");\n                    filename = filename[filename.length - 1] || \"root\";\n\n                    dump_file(uint8array, filename);\n                    this.value = \"\";\n                }\n                else\n                {\n                    alert(\"Can't read file\");\n                }\n            }.bind(this));\n        };\n    }\n\n    function debug_start(emulator)\n    {\n        if(!emulator.v86)\n        {\n            return;\n        }\n\n        // called as soon as soon as emulation is started, in debug mode\n        var debug = emulator.v86.cpu.debug;\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent += \" | logging ops: \" +\n            (debug.step_mode || debug.trace_all ? \"yes\" : \"no\");\n\n        $(\"step\").onclick = debug.step.bind(debug);\n        $(\"run_until\").onclick = debug.run_until.bind(debug);\n        $(\"dump_gdt\").onclick = debug.dump_gdt_ldt.bind(debug);\n        $(\"dump_idt\").onclick = debug.dump_idt.bind(debug);\n        $(\"dump_regs\").onclick = debug.dump_regs.bind(debug);\n        $(\"dump_pt\").onclick = debug.dump_page_directory.bind(debug);\n        $(\"dump_instructions\").onclick = debug.dump_instructions.bind(debug);\n\n        $(\"dump_log\").onclick = function()\n        {\n            dump_file(log_data, \"v86.log\");\n        };\n\n        $(\"dump_instructions_file\").onclick = function()\n        {\n            var ins = debug.get_instructions();\n\n            if(ins)\n            {\n                dump_file(ins, \"trace.txt\");\n            }\n        };\n\n        var cpu = emulator.v86.cpu;\n\n        $(\"debug_panel\").style.display = \"block\";\n        setInterval(function()\n        {\n            $(\"debug_panel\").textContent =\n                cpu.debug.get_regs_short().join(\"\\n\") + \"\\n\" + cpu.debug.get_state();\n        }, 1000);\n\n        // helps debugging\n        window.emulator = emulator;\n        window.cpu = cpu;\n        window.dump_file = dump_file;\n    }\n\n    function onpopstate(e)\n    {\n        location.reload();\n    }\n\n    function set_profile(prof)\n    {\n        if(window.history.pushState)\n        {\n            window.history.pushState({ profile: prof }, \"\", \"?profile=\" + prof);\n        }\n\n    }\n\n})();\n","\"use strict\";\n\n/**\n * Constructor for emulator instances.\n *\n * Usage: `var emulator = new V86Starter(options);`\n *\n * Options can have the following properties (all optional, default in parenthesis):\n *\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\n *   be a power of 2.\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\n *\n * - `autostart boolean` (false) - If emulation should be started when emulator\n *   is ready.\n *\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\n *\n * - `network_relay_url string` (No network card) - The url of a server running\n *   websockproxy. See [networking.md](networking.md). Setting this will\n *   enable an emulated network card.\n *\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\n *   ArrayBuffer, see below.\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\n * - `hda Object` (No hard drive) - First hard disk, see below.\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\n * - `cdrom Object` (No CD) - See below.\n * - `initial_state Object` (Normal boot) - An initial state to load, see\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\n *\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\n *   [filesystem.md](filesystem.md).\n *\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\n *   that will receive and send data to the emulated serial terminal.\n *   Alternatively the serial terminal can also be accessed programatically,\n *   see [serial.html](../examples/serial.html).\n *\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\n *   have a certain structure, see [basic.html](../examples/basic.html).\n *\n * ***\n *\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\n *\n * - Pass an object that has a url. Optionally, `async: true` and `size:\n *   size_in_bytes` can be added to the object, so that sectors of the image\n *   are loaded on demand instead of being loaded before boot (slower, but\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\n *   header must be supported on the server.\n *\n *   ```javascript\n *   // download file before boot\n *   bios: {\n *       url: \"bios/seabios.bin\"\n *   }\n *   // download file sectors as requested, size is required\n *   hda: {\n *       url: \"disk/linux.iso\",\n *       async: true,\n *       size: 16 * 1024 * 1024\n *   }\n *   ```\n *\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\n *\n *   ```javascript\n *   // use <input type=file>\n *   bios: {\n *       buffer: document.all.hd_image.files[0]\n *   }\n *   // start with empty hard drive\n *   hda: {\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\n *   }\n *   ```\n *\n * ***\n *\n * @param {Object} options Options to initialize the emulator with.\n * @constructor\n */\nfunction V86Starter(options)\n{\n    //var worker = new Worker(\"src/browser/worker.js\");\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\n\n    this.cpu_is_running = false;\n\n    var bus = Bus.create();\n    var adapter_bus = this.bus = bus[0];\n    this.emulator_bus = bus[1];\n    var emulator = this.v86 = new v86(this.emulator_bus);\n\n    this.bus.register(\"emulator-stopped\", function()\n    {\n        this.cpu_is_running = false;\n    }, this);\n\n    this.bus.register(\"emulator-started\", function()\n    {\n        this.cpu_is_running = true;\n    }, this);\n\n    var settings = {};\n\n    this.disk_images = {\n        \"fda\": undefined,\n        \"fdb\": undefined,\n        \"hda\": undefined,\n        \"hdb\": undefined,\n        \"cdrom\": undefined,\n    };\n\n    settings.load_devices = true;\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\n    settings.boot_order = options[\"boot_order\"] || 0x213;\n    settings.fastboot = options[\"fastboot\"] || false;\n    settings.fda = undefined;\n    settings.fdb = undefined;\n    settings.uart1 = options[\"uart1\"] || false;\n    settings.uart2 = options[\"uart2\"] || false;\n    settings.uart3 = options[\"uart3\"] || false;\n\n    if(options[\"network_relay_url\"])\n    {\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\n        settings.enable_ne2k = true;\n    }\n\n    if(!options[\"disable_keyboard\"])\n    {\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\n    }\n    if(!options[\"disable_mouse\"])\n    {\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\n    }\n\n    if(options[\"screen_container\"])\n    {\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\n    }\n    else if(options[\"screen_dummy\"])\n    {\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\n    }\n\n    if(options[\"serial_container\"])\n    {\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\n    }\n\n    if(!options[\"disable_speaker\"])\n    {\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\n    }\n\n    // ugly, but required for closure compiler compilation\n    function put_on_settings(name, buffer)\n    {\n        switch(name)\n        {\n            case \"hda\":\n                settings.hda = this.disk_images[\"hda\"] = buffer;\n                break;\n            case \"hdb\":\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\n                break;\n            case \"cdrom\":\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\n                break;\n            case \"fda\":\n                settings.fda = this.disk_images[\"fda\"] = buffer;\n                break;\n            case \"fdb\":\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\n                break;\n\n            case \"multiboot\":\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\n                break;\n\n            case \"bios\":\n                settings.bios = buffer.buffer;\n                break;\n            case \"vga_bios\":\n                settings.vga_bios = buffer.buffer;\n                break;\n            case \"initial_state\":\n                settings.initial_state = buffer.buffer;\n                break;\n            case \"fs9p_json\":\n                settings.fs9p_json = buffer.buffer;\n                break;\n            default:\n                dbg_assert(false, name);\n        }\n    }\n\n    var files_to_load = [];\n\n    function add_file(name, file)\n    {\n        if(!file)\n        {\n            return;\n        }\n\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\n        {\n            files_to_load.push({\n                name: name,\n                loadable: file,\n            });\n            return;\n        }\n\n        // Anything coming from the outside world needs to be quoted for\n        // Closure Compiler compilation\n        file = {\n            buffer: file[\"buffer\"],\n            async: file[\"async\"],\n            url: file[\"url\"],\n            size: file[\"size\"],\n        };\n\n        if(name === \"bios\" || name === \"vga_bios\" ||\n            name === \"initial_state\" || name === \"multiboot\")\n        {\n            // Ignore async for these because they must be availabe before boot.\n            // This should make result.buffer available after the object is loaded\n            file.async = false;\n        }\n\n        if(file.buffer instanceof ArrayBuffer)\n        {\n            var buffer = new SyncBuffer(file.buffer);\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\n        {\n            // SyncFileBuffer:\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\n            // - can later serve get/set operations fast and synchronously\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\n            //\n            // AsyncFileBuffer:\n            // - loads slices of the file asynchronously as requested\n            // - slower get/set\n\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\n            if(file.async === undefined)\n            {\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\n            }\n\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\n            }\n            else\n            {\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\n            }\n\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(file.url)\n        {\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\n                files_to_load.push({\n                    name: name,\n                    loadable: buffer,\n                });\n            }\n            else\n            {\n                files_to_load.push({\n                    name: name,\n                    url: file.url,\n                    size: file.size,\n                });\n            }\n        }\n        else\n        {\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\n        }\n    }\n\n    var image_names = [\n        \"bios\", \"vga_bios\",\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\n        \"initial_state\", \"multiboot\",\n    ];\n\n    for(var i = 0; i < image_names.length; i++)\n    {\n        add_file(image_names[i], options[image_names[i]]);\n    }\n\n    if(options[\"filesystem\"])\n    {\n        var fs_url = options[\"filesystem\"][\"basefs\"];\n        var base_url = options[\"filesystem\"][\"baseurl\"];\n\n        this.fs9p = new FS(base_url);\n        settings.fs9p = this.fs9p;\n\n        if(fs_url)\n        {\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\n\n            var size;\n\n            if(typeof fs_url === \"object\")\n            {\n                size = fs_url[\"size\"];\n                fs_url = fs_url[\"url\"];\n            }\n            dbg_assert(typeof fs_url === \"string\");\n\n            files_to_load.push({\n                name: \"fs9p_json\",\n                url: fs_url,\n                size: size,\n                as_text: true,\n            });\n        }\n    }\n\n    var starter = this;\n    var total = files_to_load.length;\n\n    var cont = function(index)\n    {\n        if(index === total)\n        {\n            setTimeout(done.bind(this), 0);\n            return;\n        }\n\n        var f = files_to_load[index];\n\n        if(f.loadable)\n        {\n            f.loadable.onload = function(e)\n            {\n                put_on_settings.call(this, f.name, f.loadable);\n                cont(index + 1);\n            }.bind(this);\n            f.loadable.load();\n        }\n        else\n        {\n            v86util.load_file(f.url, {\n                done: function(result)\n                {\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\n                    cont(index + 1);\n                }.bind(this),\n                progress: function progress(e)\n                {\n                    if(e.target.status === 200)\n                    {\n                        starter.emulator_bus.send(\"download-progress\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n\n                            lengthComputable: e.lengthComputable,\n                            total: e.total || f.size,\n                            loaded: e.loaded,\n                        });\n                    }\n                    else\n                    {\n                        starter.emulator_bus.send(\"download-error\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n                            request: e.target,\n                        });\n                    }\n                },\n                as_text: f.as_text,\n            });\n        }\n    }.bind(this);\n    cont(0);\n\n    function done()\n    {\n        if(settings.initial_state)\n        {\n            // avoid large allocation now, memory will be restored later anyway\n            settings.memory_size = 0;\n        }\n\n        this.bus.send(\"cpu-init\", settings);\n\n        setTimeout(function()\n        {\n            if(settings.initial_state)\n            {\n                emulator.restore_state(settings.initial_state);\n            }\n\n            setTimeout(function()\n            {\n                if(settings.fs9p && settings.fs9p_json)\n                {\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\n                }\n\n                if(options[\"autostart\"])\n                {\n                    this.bus.send(\"cpu-run\");\n                }\n            }.bind(this), 0);\n        }.bind(this), 0);\n    }\n}\n\n/**\n * Start emulation. Do nothing if emulator is running already. Can be\n * asynchronous.\n * @export\n */\nV86Starter.prototype.run = function()\n{\n    this.bus.send(\"cpu-run\");\n};\n\n/**\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\n * @export\n */\nV86Starter.prototype.stop = function()\n{\n    this.bus.send(\"cpu-stop\");\n};\n\n/**\n * @ignore\n * @export\n */\nV86Starter.prototype.destroy = function()\n{\n    this.stop();\n\n    this.v86.destroy();\n    this.keyboard_adapter && this.keyboard_adapter.destroy();\n    this.network_adapter && this.network_adapter.destroy();\n    this.mouse_adapter && this.mouse_adapter.destroy();\n    this.screen_adapter && this.screen_adapter.destroy();\n    this.serial_adapter && this.serial_adapter.destroy();\n};\n\n/**\n * Restart (force a reboot).\n * @export\n */\nV86Starter.prototype.restart = function()\n{\n    this.bus.send(\"cpu-restart\");\n};\n\n/**\n * Add an event listener (the emulator is an event emitter). A list of events\n * can be found at [events.md](events.md).\n *\n * The callback function gets a single argument which depends on the event.\n *\n * @param {string} event Name of the event.\n * @param {function(*)} listener The callback function.\n * @export\n */\nV86Starter.prototype.add_listener = function(event, listener)\n{\n    this.bus.register(event, listener, this);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} event\n * @param {function(*)} listener\n * @export\n */\nV86Starter.prototype.remove_listener = function(event, listener)\n{\n    this.bus.unregister(event, listener);\n};\n\n/**\n * Restore the emulator state from the given state, which must be an\n * ArrayBuffer returned by\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\n *\n * Note that the state can only be restored correctly if this constructor has\n * been created with the same options as the original instance (e.g., same disk\n * images, memory size, etc.).\n *\n * Different versions of the emulator might use a different format for the\n * state buffer.\n *\n * @param {ArrayBuffer} state\n * @export\n */\nV86Starter.prototype.restore_state = function(state)\n{\n    this.v86.restore_state(state);\n};\n\n/**\n * Asynchronously save the current state of the emulator. The first argument to\n * the callback is an Error object if something went wrong and is null\n * otherwise.\n *\n * @param {function(Object, ArrayBuffer)} callback\n * @export\n */\nV86Starter.prototype.save_state = function(callback)\n{\n    // Might become asynchronous at some point\n\n    setTimeout(function()\n    {\n        try\n        {\n            callback(null, this.v86.save_state());\n        }\n        catch(e)\n        {\n            callback(e, null);\n        }\n    }.bind(this), 0);\n};\n\n/**\n * Return an object with several statistics. Return value looks similar to\n * (but can be subject to change in future versions or different\n * configurations, so use defensively):\n *\n * ```javascript\n * {\n *     \"cpu\": {\n *         \"instruction_counter\": 2821610069\n *     },\n *     \"hda\": {\n *         \"sectors_read\": 95240,\n *         \"sectors_written\": 952,\n *         \"bytes_read\": 48762880,\n *         \"bytes_written\": 487424,\n *         \"loading\": false\n *     },\n *     \"cdrom\": {\n *         \"sectors_read\": 0,\n *         \"sectors_written\": 0,\n *         \"bytes_read\": 0,\n *         \"bytes_written\": 0,\n *         \"loading\": false\n *     },\n *     \"mouse\": {\n *         \"enabled\": true\n *     },\n *     \"vga\": {\n *         \"is_graphical\": true,\n *         \"res_x\": 800,\n *         \"res_y\": 600,\n *         \"bpp\": 32\n *     }\n * }\n * ```\n *\n * @deprecated\n * @return {Object}\n * @export\n */\nV86Starter.prototype.get_statistics = function()\n{\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\n\n    var stats = {\n        cpu: {\n            instruction_counter: this.get_instruction_counter(),\n        },\n    };\n\n    if(!this.v86)\n    {\n        return stats;\n    }\n\n    var devices = this.v86.cpu.devices;\n\n    if(devices.hda)\n    {\n        stats.hda = devices.hda.stats;\n    }\n\n    if(devices.cdrom)\n    {\n        stats.cdrom = devices.cdrom.stats;\n    }\n\n    if(devices.ps2)\n    {\n        stats[\"mouse\"] = {\n            \"enabled\": devices.ps2.use_mouse,\n        };\n    }\n\n    if(devices.vga)\n    {\n        stats[\"vga\"] = {\n            \"is_graphical\": devices.vga.stats.is_graphical,\n        };\n    }\n\n    return stats;\n};\n\n/**\n * @return {number}\n * @ignore\n * @export\n */\nV86Starter.prototype.get_instruction_counter = function()\n{\n    if(this.v86)\n    {\n        return this.v86.cpu.timestamp_counter;\n    }\n    else\n    {\n        // TODO: Should be handled using events\n        return 0;\n    }\n};\n\n/**\n * @return {boolean}\n * @export\n */\nV86Starter.prototype.is_running = function()\n{\n    return this.cpu_is_running;\n};\n\n/**\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\n * Do nothing if there is no keyboard controller.\n *\n * @param {Array.<number>} codes\n * @export\n */\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.bus.send(\"keyboard-code\", codes[i]);\n    }\n};\n\n/**\n * Send translated keys\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_keys = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.keyboard_adapter.simulate_press(codes[i]);\n    }\n};\n\n/**\n * Send text\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_text = function(string)\n{\n    for(var i = 0; i < string.length; i++)\n    {\n        this.keyboard_adapter.simulate_char(string[i]);\n    }\n};\n\n/**\n * Download a screenshot.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_make_screenshot = function()\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.make_screenshot();\n    }\n};\n\n/**\n * Set the scaling level of the emulated screen.\n *\n * @param {number} sx\n * @param {number} sy\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_set_scale = function(sx, sy)\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.set_scale(sx, sy);\n    }\n};\n\n/**\n * Go fullscreen.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_go_fullscreen = function()\n{\n    if(!this.screen_adapter)\n    {\n        return;\n    }\n\n    var elem = document.getElementById(\"screen_container\");\n\n    if(!elem)\n    {\n        return;\n    }\n\n    // bracket notation because otherwise they get renamed by closure compiler\n    var fn = elem[\"requestFullScreen\"] ||\n            elem[\"webkitRequestFullscreen\"] ||\n            elem[\"mozRequestFullScreen\"] ||\n            elem[\"msRequestFullScreen\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\n        // Might (but doesn't seem to) break something else\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\n        focus_element && focus_element.focus();\n    }\n\n    //this.lock_mouse(elem);\n    this.lock_mouse();\n};\n\n/**\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\n * browser window.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.lock_mouse = function()\n{\n    var elem = document.body;\n\n    var fn = elem[\"requestPointerLock\"] ||\n                elem[\"mozRequestPointerLock\"] ||\n                elem[\"webkitRequestPointerLock\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n    }\n};\n\n/**\n * Enable or disable sending mouse events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n */\nV86Starter.prototype.mouse_set_status = function(enabled)\n{\n    if(this.mouse_adapter)\n    {\n        this.mouse_adapter.emu_enabled = enabled;\n    }\n};\n\n/**\n * Enable or disable sending keyboard events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n * @export\n */\nV86Starter.prototype.keyboard_set_status = function(enabled)\n{\n    if(this.keyboard_adapter)\n    {\n        this.keyboard_adapter.emu_enabled = enabled;\n    }\n};\n\n\n/**\n * Send a string to the first emulated serial terminal.\n *\n * @param {string} data\n * @export\n */\nV86Starter.prototype.serial0_send = function(data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\n    }\n};\n\n/**\n * Send bytes to a serial port (to be received by the emulated PC).\n *\n * @param {Uint8Array} data\n * @export\n */\nV86Starter.prototype.serial_send_bytes = function(serial, data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial\" + serial + \"-input\", data[i]);\n    }\n};\n\n/**\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\n * been initialized. First argument to the callback is an error object if\n * something went wrong and null otherwise.\n *\n * @param {string} file\n * @param {Uint8Array} data\n * @param {function(Object)=} callback\n * @export\n */\nV86Starter.prototype.create_file = function(file, data, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var parts = file.split(\"/\");\n    var filename = parts[parts.length - 1];\n\n    var path_infos = fs.SearchPath(file);\n    var parent_id = path_infos.parentid;\n    var not_found = filename === \"\" || parent_id === -1;\n\n    if(!not_found)\n    {\n        fs.CreateBinaryFile(filename, parent_id, data);\n    }\n\n    if(callback)\n    {\n        setTimeout(function()\n        {\n            if(not_found)\n            {\n                callback(new FileNotFoundError());\n            }\n            else\n            {\n                callback(null);\n            }\n        }, 0);\n    }\n};\n\n/**\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\n * initialized.\n *\n * @param {string} file\n * @param {function(Object, Uint8Array)} callback\n * @export\n */\nV86Starter.prototype.read_file = function(file, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var path_infos = fs.SearchPath(file);\n    var id = path_infos.id;\n\n    if(id === -1)\n    {\n        callback(new FileNotFoundError(), null);\n    }\n    else\n    {\n        fs.OpenInode(id, undefined);\n        fs.AddEvent(\n            id,\n            function()\n            {\n                var data = fs.inodedata[id];\n\n                if(data)\n                {\n                    callback(null, data.subarray(0, fs.inodes[id].size));\n                }\n                else\n                {\n                    callback(new FileNotFoundError(), null);\n                }\n            }\n        );\n    }\n};\n\n/**\n * @ignore\n * @constructor\n *\n * @param {string=} message\n */\nfunction FileNotFoundError(message)\n{\n    this.message = message || \"File not found\";\n}\nFileNotFoundError.prototype = Error.prototype;\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"V86Starter\"] = V86Starter;\n    window[\"V86\"] = V86Starter;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"V86Starter\"] = V86Starter;\n    module.exports[\"V86\"] = V86Starter;\n}\nelse if(typeof importScripts === \"function\")\n{\n    // web worker\n    self[\"V86Starter\"] = V86Starter;\n    self[\"V86\"] = V86Starter;\n}\n","\"use strict\";\n\n/**\n * The ISA IO bus\n * Devices register their ports here\n *\n * @constructor\n * @param {CPU} cpu\n */\nfunction IO(cpu)\n{\n    /** @const */\n    this.ports = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 0x10000; i++)\n    {\n        this.ports[i] = this.create_empty_entry();\n    }\n\n    var memory_size = cpu.memory_size;\n\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\n    {\n        // avoid sparse arrays\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\n    }\n\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\n        function(addr) {\n            // read outside of the memory size\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return 0xFF;\n        },\n        function(addr, value) {\n            // write outside of the memory size\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\n        },\n        function(addr) {\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return -1;\n        },\n        function(addr, value) {\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\n        }\n    );\n}\n\nIO.prototype.create_empty_entry = function()\n{\n    return {\n        read8: this.empty_port_read8,\n        read16: this.empty_port_read16,\n        read32: this.empty_port_read32,\n\n        write8: this.empty_port_write,\n        write16: this.empty_port_write,\n        write32: this.empty_port_write,\n\n        device: undefined,\n    };\n};\n\nIO.prototype.empty_port_read8 = function()\n{\n    return 0xFF;\n};\n\nIO.prototype.empty_port_read16 = function()\n{\n    return 0xFFFF;\n};\n\nIO.prototype.empty_port_read32 = function()\n{\n    return -1;\n};\n\nIO.prototype.empty_port_write = function(x)\n{\n};\n\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function():number=} r8\n * @param {function():number=} r16\n * @param {function():number=} r32\n */\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!r8 || typeof r8 === \"function\");\n    dbg_assert(!r16 || typeof r16 === \"function\");\n    dbg_assert(!r32 || typeof r32 === \"function\");\n    dbg_assert(r8 || r16 || r32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\n            return -1 >>> (32 - n) | 0;\n        };\n        if(!r8) r8 = fail.bind(this, 8);\n        if(!r16) r16 = fail.bind(this, 16);\n        if(!r32) r32 = fail.bind(this, 32);\n    }\n\n    if(r8) this.ports[port_addr].read8 = r8;\n    if(r16) this.ports[port_addr].read16 = r16;\n    if(r32) this.ports[port_addr].read32 = r32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function(number)=} w8\n * @param {function(number)=} w16\n * @param {function(number)=} w32\n */\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!w8 || typeof w8 === \"function\");\n    dbg_assert(!w16 || typeof w16 === \"function\");\n    dbg_assert(!w32 || typeof w32 === \"function\");\n    dbg_assert(w8 || w16 || w32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\n        };\n        if(!w8) w8 = fail.bind(this, 8);\n        if(!w16) w16 = fail.bind(this, 16);\n        if(!w32) w32 = fail.bind(this, 32);\n    }\n\n    if(w8) this.ports[port_addr].write8 = w8;\n    if(w16) this.ports[port_addr].write16 = w16;\n    if(w32) this.ports[port_addr].write32 = w32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\n *\n * This info is not correct for all ports, but handled by the following functions\n *\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\n * ports and 0 or 1 32-bit ports\n *\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function():number} r8_1\n * @param {function():number} r8_2\n * @param {function():number=} r8_3\n * @param {function():number=} r8_4\n */\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function r16_1()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8;\n    }\n    function r16_2()\n    {\n        return r8_3.call(this) |\n                r8_4.call(this) << 8;\n    }\n    function r32()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8 |\n                r8_3.call(this) << 16 |\n                r8_4.call(this) << 24;\n    }\n\n    if(r8_3 && r8_4)\n    {\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\n        this.register_read(port_addr + 1, device, r8_2);\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\n        this.register_read(port_addr + 3, device, r8_4);\n    }\n    else\n    {\n        this.register_read(port_addr, device, r8_1, r16_1);\n        this.register_read(port_addr + 1, device, r8_2);\n    }\n};\n\n/**\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function(number)} w8_1\n * @param {function(number)} w8_2\n * @param {function(number)=} w8_3\n * @param {function(number)=} w8_4\n */\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function w16_1(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n    }\n    function w16_2(data)\n    {\n        w8_3.call(this, data & 0xFF);\n        w8_4.call(this, data >> 8 & 0xFF);\n    }\n    function w32(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n        w8_3.call(this, data >> 16 & 0xFF);\n        w8_4.call(this, data >>> 24);\n    }\n\n    if(w8_3 && w8_4)\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\n        this.register_write(port_addr + 1, device, w8_2);\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\n        this.register_write(port_addr + 3, device, w8_4);\n    }\n    else\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1);\n        this.register_write(port_addr + 1, device, w8_2);\n    }\n};\n\nIO.prototype.in_mmap_range = function(start, count)\n{\n    start >>>= 0;\n    count >>>= 0;\n\n    var end = start + count;\n\n    if(end >= this.cpu.memory_size)\n    {\n        return true;\n    }\n\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\n    start &= ~(MMAP_BLOCK_SIZE - 1);\n\n    while(start < end)\n    {\n        if(this.cpu.in_mapped_range(start))\n        {\n            return true;\n        }\n\n        start += MMAP_BLOCK_SIZE;\n    }\n\n    return false;\n};\n\nIO.prototype.mmap_read32_shim = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_read8[aligned_addr];\n\n    return fn(addr) | fn(addr + 1) << 8 |\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\n};\n\nIO.prototype.mmap_write32_shim = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_write8[aligned_addr];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1, value >> 8 & 0xFF);\n    fn(addr + 2, value >> 16 & 0xFF);\n    fn(addr + 3, value >>> 24);\n};\n\n/**\n * @param {number} addr\n * @param {number} size\n * @param {*} read_func8\n * @param {*} write_func8\n * @param {*=} read_func32\n * @param {*=} write_func32\n */\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\n{\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\n\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    if(!read_func32)\n        read_func32 = this.mmap_read32_shim.bind(this);\n\n    if(!write_func32)\n        write_func32 = this.mmap_write32_shim.bind(this);\n\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    for(; size > 0; aligned_addr++)\n    {\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\n\n        size -= MMAP_BLOCK_SIZE;\n    }\n};\n\n\nIO.prototype.port_write8 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write8.call(entry.device, data);\n};\n\nIO.prototype.port_write16 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write16.call(entry.device, data);\n};\n\nIO.prototype.port_write32 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write32.call(entry.device, data);\n};\n\nIO.prototype.port_read8 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read8.call(entry.device);\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read16 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read16.call(entry.device);\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read32 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read32.call(entry.device);\n    dbg_assert((value | 0) === value);\n    return value;\n};\n\n// via seabios ioport.h\nvar debug_port_list = {\n    0x0004: \"PORT_DMA_ADDR_2\",\n    0x0005: \"PORT_DMA_CNT_2\",\n    0x000a: \"PORT_DMA1_MASK_REG\",\n    0x000b: \"PORT_DMA1_MODE_REG\",\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\n    0x0020: \"PORT_PIC1_CMD\",\n    0x0021: \"PORT_PIC1_DATA\",\n    0x0040: \"PORT_PIT_COUNTER0\",\n    0x0041: \"PORT_PIT_COUNTER1\",\n    0x0042: \"PORT_PIT_COUNTER2\",\n    0x0043: \"PORT_PIT_MODE\",\n    0x0060: \"PORT_PS2_DATA\",\n    0x0061: \"PORT_PS2_CTRLB\",\n    0x0064: \"PORT_PS2_STATUS\",\n    0x0070: \"PORT_CMOS_INDEX\",\n    0x0071: \"PORT_CMOS_DATA\",\n    0x0080: \"PORT_DIAG\",\n    0x0081: \"PORT_DMA_PAGE_2\",\n    0x0092: \"PORT_A20\",\n    0x00a0: \"PORT_PIC2_CMD\",\n    0x00a1: \"PORT_PIC2_DATA\",\n    0x00b2: \"PORT_SMI_CMD\",\n    0x00b3: \"PORT_SMI_STATUS\",\n    0x00d4: \"PORT_DMA2_MASK_REG\",\n    0x00d6: \"PORT_DMA2_MODE_REG\",\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\n    0x00f0: \"PORT_MATH_CLEAR\",\n    0x0170: \"PORT_ATA2_CMD_BASE\",\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\n    0x0278: \"PORT_LPT2\",\n    0x02e8: \"PORT_SERIAL4\",\n    0x02f8: \"PORT_SERIAL2\",\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\n    0x0378: \"PORT_LPT1\",\n    0x03e8: \"PORT_SERIAL3\",\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\n    0x03f0: \"PORT_FD_BASE\",\n    0x03f2: \"PORT_FD_DOR\",\n    0x03f4: \"PORT_FD_STATUS\",\n    0x03f5: \"PORT_FD_DATA\",\n    0x03f6: \"PORT_HD_DATA\",\n    0x03f7: \"PORT_FD_DIR\",\n    0x03f8: \"PORT_SERIAL1\",\n    0x0cf8: \"PORT_PCI_CMD\",\n    0x0cf9: \"PORT_PCI_REBOOT\",\n    0x0cfc: \"PORT_PCI_DATA\",\n    0x0402: \"PORT_BIOS_DEBUG\",\n    0x0510: \"PORT_QEMU_CFG_CTL\",\n    0x0511: \"PORT_QEMU_CFG_DATA\",\n    0xb000: \"PORT_ACPI_PM_BASE\",\n    0xb100: \"PORT_SMB_BASE\",\n    0x8900: \"PORT_BIOS_APM\"\n};\n\nIO.prototype.get_port_description = function(addr)\n{\n    if(debug_port_list[addr])\n    {\n        return \"  (\" + debug_port_list[addr] + \")\";\n    }\n    else\n    {\n        return \"\";\n    }\n};\n\n\n","\"use strict\";\n\nvar\n/** @const */ LOG_ALL = -1,\n/** @const */ LOG_NONE = 0,\n\n/** @const */ LOG_OTHER =  0x000001,\n/** @const */ LOG_CPU =    0x000002,\n/** @const */ LOG_FPU =    0x000004,\n/** @const */ LOG_MEM =    0x000008,\n/** @const */ LOG_DMA =    0x000010,\n/** @const */ LOG_IO =     0x000020,\n/** @const */ LOG_PS2 =    0x000040,\n/** @const */ LOG_PIC =    0x000080,\n/** @const */ LOG_VGA =    0x000100,\n/** @const */ LOG_PIT =    0x000200,\n/** @const */ LOG_MOUSE =  0x000400,\n/** @const */ LOG_PCI =    0x000800,\n/** @const */ LOG_BIOS =   0x001000,\n/** @const */ LOG_FLOPPY = 0x002000,\n/** @const */ LOG_SERIAL = 0x004000,\n/** @const */ LOG_DISK =   0x008000,\n/** @const */ LOG_RTC =    0x010000,\n/** @const */ LOG_HPET =   0x020000,\n/** @const */ LOG_ACPI =   0x040000,\n/** @const */ LOG_APIC =   0x080000,\n/** @const */ LOG_NET =    0x100000,\n/** @const */ LOG_VIRTIO = 0x200000,\n/** @const */ LOG_9P =     0x400000,\n/** @const */ LOG_SB16 =   0x800000;\n\n\n/**\n * @const\n * @type {Array<Array<string|number>>}\n */\nvar LOG_NAMES = [\n    [1, \"\"],\n    [LOG_CPU, \"CPU\"],\n    [LOG_DISK, \"DISK\"],\n    [LOG_FPU, \"FPU\"],\n    [LOG_MEM, \"MEM\"],\n    [LOG_DMA, \"DMA\"],\n    [LOG_IO, \"IO\"],\n    [LOG_PS2, \"PS2\"],\n    [LOG_PIC, \"PIC\"],\n    [LOG_VGA, \"VGA\"],\n    [LOG_PIT, \"PIT\"],\n    [LOG_MOUSE, \"MOUS\"],\n    [LOG_PCI, \"PCI\"],\n    [LOG_BIOS, \"BIOS\"],\n    [LOG_FLOPPY, \"FLOP\"],\n    [LOG_SERIAL, \"SERI\"],\n    [LOG_RTC, \"RTC\"],\n    [LOG_HPET, \"HPET\"],\n    [LOG_ACPI, \"ACPI\"],\n    [LOG_APIC, \"APIC\"],\n    [LOG_NET, \"NET\"],\n    [LOG_VIRTIO, \"VIO\"],\n    [LOG_9P, \"9P\"],\n    [LOG_SB16, \"SB16\"]\n];\n\nvar\n/** @const */ TLB_SYSTEM_READ = 1,\n/** @const */ TLB_SYSTEM_WRITE = 2,\n/** @const */ TLB_USER_READ = 4,\n/** @const */ TLB_USER_WRITE = 8;\n\n\nvar\n\n// flags register bitflags\n/** @const */ flag_carry = 1,\n/** @const */ flag_parity = 4,\n/** @const */ flag_adjust = 16,\n/** @const */ flag_zero = 64,\n/** @const */ flag_sign = 128,\n/** @const */ flag_trap = 256,\n/** @const */ flag_interrupt = 512,\n/** @const */ flag_direction = 1024,\n/** @const */ flag_overflow = 2048,\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\n/** @const */ flag_nt = 1 << 14,\n/** @const */ flag_rf = 1 << 16,\n/** @const */ flag_vm = 1 << 17,\n/** @const */ flag_ac = 1 << 18,\n/** @const */ flag_vif = 1 << 19,\n/** @const */ flag_vip = 1 << 20,\n/** @const */ flag_id = 1 << 21,\n\n/**\n * default values of reserved flags bits\n * @const\n */\nflags_default = 1 << 1,\n\n/**\n * bitmask to select non-reserved flags bits\n * @const\n */\nflags_mask =\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\n    flag_vif | flag_vip | flag_id,\n\n\n/**\n * all arithmetic flags\n * @const\n */\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\n\n\n/**\n * opsizes used by get flag functions\n *\n * @const\n */\nOPSIZE_8 = 7,\n/** @const */\nOPSIZE_16 = 15,\n/** @const */\nOPSIZE_32 = 31,\n\n/** @const */\nPSE_ENABLED = 128,\n\n/** @const */ reg_eax = 0,\n/** @const */ reg_ecx = 1,\n/** @const */ reg_edx = 2,\n/** @const */ reg_ebx = 3,\n/** @const */ reg_esp = 4,\n/** @const */ reg_ebp = 5,\n/** @const */ reg_esi = 6,\n/** @const */ reg_edi = 7,\n\n/** @const */ reg_ax = 0,\n/** @const */ reg_cx = 2,\n/** @const */ reg_dx = 4,\n/** @const */ reg_bx = 6,\n/** @const */ reg_sp = 8,\n/** @const */ reg_bp = 10,\n/** @const */ reg_si = 12,\n/** @const */ reg_di = 14,\n\n/** @const */ reg_al = 0,\n/** @const */ reg_cl = 4,\n/** @const */ reg_dl = 8,\n/** @const */ reg_bl = 12,\n/** @const */ reg_ah = 1,\n/** @const */ reg_ch = 5,\n/** @const */ reg_dh = 9,\n/** @const */ reg_bh = 13,\n\n\n/** @const */ reg_es = 0,\n/** @const */ reg_cs = 1,\n/** @const */ reg_ss = 2,\n/** @const */ reg_ds = 3,\n/** @const */ reg_fs = 4,\n/** @const */ reg_gs = 5,\n\n\n/** @const */ reg_tr = 6, // task register\n/** @const */ reg_ldtr = 7; // local descriptor table register\n\nvar\n    /**\n     * The minimum number of bytes that can be memory-mapped\n     * by one device.\n     *\n     * @const\n     */\n    MMAP_BLOCK_BITS = 17,\n    /** @const */\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\n\n\n/** @const */\nvar MEM_PAGE_WRITTEN = 1;\n\n\n/** @const */\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\n\n\nvar\n    /** @const */\n    REPEAT_STRING_PREFIX_NONE = 0,\n    /** @const */\n    REPEAT_STRING_PREFIX_NZ = 1,\n    /** @const */\n    REPEAT_STRING_PREFIX_Z = 2;\n\nvar\n    /** @const */\n    CR0_PE = 1,\n    /** @const */\n    CR0_MP = 1 << 1,\n    /** @const */\n    CR0_EM = 1 << 2,\n    /** @const */\n    CR0_TS = 1 << 3,\n    /** @const */\n    CR0_ET = 1 << 4,\n    /** @const */\n    CR0_WP = 1 << 16,\n    /** @const */\n    CR0_NW = 1 << 29,\n    /** @const */\n    CR0_CD = 1 << 30,\n    /** @const */\n    CR0_PG = 1 << 31;\n\nvar\n    /** @const */\n    CR4_VME = 1,\n    /** @const */\n    CR4_PVI = 1 << 1,\n    /** @const */\n    CR4_TSD = 1 << 2,\n    /** @const */\n    CR4_PSE = 1 << 4,\n    /** @const */\n    CR4_DE = 1 << 3,\n    /** @const */\n    CR4_PAE = 1 << 5,\n    /** @const */\n    CR4_PGE = 1 << 7,\n    /** @const */\n    CR4_OSFXSR = 1 << 9,\n    /** @const */\n    CR4_OSXMMEXCPT = 1 << 10;\n\n\n// Segment prefixes must not collide with reg_*s variables\n// _ZERO is a special zero offset segment\nvar\n    /** @const */\n    SEG_PREFIX_NONE = -1,\n\n    /** @const */\n    SEG_PREFIX_ZERO = 7;\n\n\nvar\n    /** @const */\n    IA32_SYSENTER_CS = 0x174,\n\n    // Note: These are wrong in Intel's manuals. Fuck Intel\n    /** @const */\n    IA32_SYSENTER_ESP = 0x175,\n\n    /** @const */\n    IA32_SYSENTER_EIP = 0x176;\n\n/** @const */\nvar IA32_TIME_STAMP_COUNTER = 0x10;\n\n/** @const */\nvar IA32_PLATFORM_ID = 0x17;\n\n/** @const */\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\n\n/** @const */\nvar IA32_APIC_BASE_MSR = 0x1B;\n\n/** @const */\nvar IA32_BIOS_SIGN_ID = 0x8B;\n\n/** @const */\nvar IA32_MISC_ENABLE = 0x1A0;\n\n/** @const */\nvar IA32_RTIT_CTL = 0x570;\n\n/** @const */\nvar MSR_SMI_COUNT = 0x34;\n\n/** @const */\nvar IA32_MCG_CAP = 0x179;\n\n/** @const */\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\n\n/** @const */\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\n\n\n/** @const */\nvar IA32_APIC_BASE_BSP = 1 << 8;\n/** @const */\nvar IA32_APIC_BASE_EXTD = 1 << 10;\n/** @const */\nvar IA32_APIC_BASE_EN = 1 << 11;\n\n\n/** @const */ var TSR_BACKLINK = 0x00;\n/** @const */ var TSR_CR3 = 0x1C;\n/** @const */ var TSR_EIP = 0x20;\n/** @const */ var TSR_EFLAGS = 0x24;\n\n/** @const */ var TSR_EAX = 0x28;\n/** @const */ var TSR_ECX = 0x2c;\n/** @const */ var TSR_EDX = 0x30;\n/** @const */ var TSR_EBX = 0x34;\n/** @const */ var TSR_ESP = 0x38;\n/** @const */ var TSR_EBP = 0x3c;\n/** @const */ var TSR_ESI = 0x40;\n/** @const */ var TSR_EDI = 0x44;\n\n/** @const */ var TSR_ES = 0x48;\n/** @const */ var TSR_CS = 0x4c;\n/** @const */ var TSR_SS = 0x50;\n/** @const */ var TSR_DS = 0x54;\n/** @const */ var TSR_FS = 0x58;\n/** @const */ var TSR_GS = 0x5c;\n/** @const */ var TSR_LDT = 0x60;\n\n\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\n\n\n/** @const */\nvar PREFIX_MASK_REP = 0b11000;\n/** @const */\nvar PREFIX_REPZ = 0b01000;\n/** @const */\nvar PREFIX_REPNZ = 0b10000;\n\n/** @const */\nvar PREFIX_MASK_SEGMENT = 0b111;\n\n/** @const */\nvar PREFIX_MASK_OPSIZE = 0b100000;\n/** @const */\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\n\n/** @const */\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\n/** @const */\nvar PREFIX_F3 = PREFIX_REPZ; // alias\n/** @const */\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\n\n/** @const */\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\n\n\n/** @const */\nvar MIXER_CHANNEL_LEFT = 0;\n/** @const */\nvar MIXER_CHANNEL_RIGHT = 1;\n/** @const */\nvar MIXER_CHANNEL_BOTH = 2;\n/** @const */\nvar MIXER_SRC_MASTER = 0;\n/** @const */\nvar MIXER_SRC_PCSPEAKER = 1;\n/** @const */\nvar MIXER_SRC_DAC = 2;\n","\"use strict\";\n\n/** @constructor */\nfunction v86(bus)\n{\n    /** @type {boolean} */\n    this.running = false;\n\n    /** @type {boolean} */\n    this.stopped = false;\n\n    /** @type {CPU} */\n    this.cpu = new CPU(bus);\n\n    this.bus = bus;\n    bus.register(\"cpu-init\", this.init, this);\n    bus.register(\"cpu-run\", this.run, this);\n    bus.register(\"cpu-stop\", this.stop, this);\n    bus.register(\"cpu-restart\", this.restart, this);\n\n    this.register_tick();\n}\n\nv86.prototype.run = function()\n{\n    if(!this.running)\n    {\n        this.bus.send(\"emulator-started\");\n        this.fast_next_tick();\n    }\n};\n\nv86.prototype.do_tick = function()\n{\n    if(this.stopped)\n    {\n        this.stopped = this.running = false;\n        this.bus.send(\"emulator-stopped\");\n        return;\n    }\n\n    this.running = true;\n    var dt = this.cpu.main_run();\n\n    if(dt <= 0)\n    {\n        this.fast_next_tick();\n    }\n    else\n    {\n        this.next_tick(dt);\n    }\n};\n\nv86.prototype.stop = function()\n{\n    if(this.running)\n    {\n        this.stopped = true;\n    }\n};\n\nv86.prototype.destroy = function()\n{\n    this.unregister_tick();\n};\n\nv86.prototype.restart = function()\n{\n    this.cpu.reset();\n    this.cpu.load_bios();\n};\n\nv86.prototype.init = function(settings)\n{\n    this.cpu.init(settings, this.bus);\n    this.bus.send(\"emulator-ready\");\n};\n\nif(typeof setImmediate !== \"undefined\")\n{\n    /** @this {v86} */\n    var fast_next_tick = function()\n    {\n        setImmediate(() => { this.do_tick(); });\n    };\n\n    /** @this {v86} */\n    var register_tick = function() {};\n\n    /** @this {v86} */\n    var unregister_tick = function() {};\n}\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\n{\n    // setImmediate shim for the browser.\n    // TODO: Make this deactivatable, for other applications\n    //       using postMessage\n\n    /** @const */\n    let MAGIC_POST_MESSAGE = 0xAA55;\n\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\n    };\n\n    let tick;\n\n    /** @this {v86} */\n    register_tick = function()\n    {\n        tick = e =>\n        {\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\n            {\n                this.do_tick();\n            }\n        };\n\n        window.addEventListener(\"message\", tick, false);\n    };\n\n    /** @this {v86} */\n    unregister_tick = function()\n    {\n        window.removeEventListener(\"message\", tick);\n        tick = null;\n    };\n}\nelse\n{\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        setTimeout(() => { this.do_tick(); }, 0);\n    };\n\n    /** @this {v86} */\n    register_tick = function() {};\n\n    /** @this {v86} */\n    unregister_tick = function() {};\n}\n\nv86.prototype.fast_next_tick = fast_next_tick;\nv86.prototype.register_tick = register_tick;\nv86.prototype.unregister_tick = unregister_tick;\n\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\n{\n    /** @this {v86} */\n    var next_tick = function(t)\n    {\n        if(t < 4 || document.hidden)\n        {\n            // Avoid sleeping for 1 second (happens if page is not\n            // visible), it can break boot processes. Also don't try to\n            // sleep for less than 4ms, since the value is clamped up\n            this.fast_next_tick();\n        }\n        else\n        {\n            setTimeout(() => { this.do_tick(); }, t);\n        }\n    };\n}\nelse\n{\n    // In environments that aren't browsers, we might as well use setTimeout\n    /** @this {v86} */\n    next_tick = function(t)\n    {\n        setTimeout(() => { this.do_tick(); }, t);\n    };\n}\n\nv86.prototype.next_tick = next_tick;\n\nv86.prototype.save_state = function()\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.save_state();\n};\n\nv86.prototype.restore_state = function(state)\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.restore_state(state);\n};\n\n\nif(typeof performance === \"object\" && performance.now)\n{\n    v86.microtick = function()\n    {\n        return performance.now();\n    };\n}\n//else if(typeof process === \"object\" && process.hrtime)\n//{\n//    v86.microtick = function()\n//    {\n//        var t = process.hrtime();\n//        return t[0] * 1000 + t[1] / 1e6;\n//    };\n//}\nelse\n{\n    v86.microtick = Date.now;\n}\n","\"use strict\";\n\n/** @const */\nvar CPU_LOG_VERBOSE = false;\n\n\n// Resources:\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n// http://ref.x86asm.net/geek32.html\n\n\n// exception bits in the MXCSR Register\nvar\n    /** @const */\n    CPU_EX_P = 1 << 5,\n    /** @const */\n    CPU_EX_U = 1 << 4,\n    /** @const */\n    CPU_EX_O = 1 << 3,\n    /** @const */\n    CPU_EX_Z = 1 << 2,\n    /** @const */\n    CPU_EX_D = 1 << 1,\n    /** @const */\n    CPU_EX_I = 1 << 0;\n\n/** @constructor */\nfunction CPU(bus)\n{\n    /** @type {number} */\n    this.memory_size = 0;\n\n    // Note: Currently unused (degrades performance and not required by any OS\n    //       that we support)\n    this.a20_enabled = true;\n\n    this.mem_page_infos = undefined;\n\n    this.mem8 = new Uint8Array(0);\n    this.mem16 = new Uint16Array(this.mem8.buffer);\n    this.mem32s = new Int32Array(this.mem8.buffer);\n\n    this.segment_is_null = new Uint8Array(8);\n    this.segment_limits = new Uint32Array(8);\n    //this.segment_infos = new Uint32Array(8);\n    this.segment_offsets = new Int32Array(8);\n\n    /**\n     * Translation Lookaside Buffer\n     * @const\n     */\n    this.tlb_data = new Int32Array(1 << 20);\n\n    /**\n     * Information about which pages are cached in the tlb.\n     * By bit:\n     *   0 system, read\n     *   1 system, write\n     *   2 user, read\n     *   3 user, write\n     * @const\n     */\n    this.tlb_info = new Uint8Array(1 << 20);\n\n    /**\n     * Same as tlb_info, except it only contains global pages\n     * @const\n     */\n    this.tlb_info_global = new Uint8Array(1 << 20);\n\n    /**\n     * Wheter or not in protected mode\n     * @type {boolean}\n     */\n    this.protected_mode = false;\n\n    /**\n     * interrupt descriptor table\n     * @type {number}\n     */\n    this.idtr_size = 0;\n    /** @type {number} */\n    this.idtr_offset = 0;\n\n    /**\n     * global descriptor table register\n     * @type {number}\n     */\n    this.gdtr_size = 0;\n    /** @type {number} */\n    this.gdtr_offset = 0;\n\n    this.tss_size_32 = false;\n\n    /*\n     * whether or not a page fault occured\n     */\n    this.page_fault = false;\n\n    this.cr = new Int32Array(8);\n\n    /** @type {number} */\n    this.cr[0] = 0;\n    /** @type {number} */\n    this.cr[2] = 0;\n    /** @type {number} */\n    this.cr[3] = 0;\n    /** @type {number} */\n    this.cr[4] = 0;\n\n    // current privilege level\n    /** @type {number} */\n    this.cpl = 0;\n\n    // if false, pages are 4 KiB, else 4 Mib\n    /** @type {number} */\n    this.page_size_extensions = 0;\n\n    // current operand/address size\n    /** @type {boolean} */\n    this.is_32 = false;\n\n    /** @type {boolean} */\n    this.stack_size_32 = false;\n\n    /**\n     * Was the last instruction a hlt?\n     * @type {boolean}\n     */\n    this.in_hlt = false;\n\n    /** @type {number} */\n    this.last_virt_eip = 0;\n\n    /** @type {number} */\n    this.eip_phys = 0;\n\n    /** @type {number} */\n    this.last_virt_esp = 0;\n\n    /** @type {number} */\n    this.esp_phys = 0;\n\n\n    /** @type {number} */\n    this.sysenter_cs = 0;\n\n    /** @type {number} */\n    this.sysenter_esp = 0;\n\n    /** @type {number} */\n    this.sysenter_eip = 0;\n\n    /** @type {number} */\n    this.prefixes = 0;\n\n    /** @type {number} */\n    this.flags = 0;\n\n    /**\n     * bitmap of flags which are not updated in the flags variable\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\n     * @type {number}\n     */\n    this.flags_changed = 0;\n\n    /**\n     * the last 2 operators and the result and size of the last arithmetic operation\n     * @type {number}\n     */\n    this.last_op1 = 0;\n    /** @type {number} */\n    this.last_op2 = 0;\n    /** @type {number} */\n    this.last_op_size = 0;\n\n    /** @type {number} */\n    this.last_add_result = 0;\n\n    /** @type {number} */\n    this.last_result = 0;\n\n    this.div32_result = new Float64Array(2);\n\n    this.tsc_offset = 0;\n\n    /** @type {number} */\n    this.modrm_byte = 0;\n\n    /** @type {number} */\n    this.phys_addr = 0;\n\n    /** @type {number} */\n    this.phys_addr_high = 0;\n\n    /** @type {!Object} */\n    this.devices = {};\n\n    this.table = [];\n\n    // paging enabled\n    /** @type {boolean} */\n    this.paging = false;\n\n    /** @type {number} */\n    this.instruction_pointer = 0;\n\n    /** @type {number} */\n    this.previous_ip = 0;\n\n    this.apic_enabled = true;\n\n    /**\n     * @type {number}\n     */\n    this.timestamp_counter = 0;\n\n    // registers\n    this.reg32s = new Int32Array(8);\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    // mm0-mm7 split up into 32 bit pairs\n    this.reg_mmxs = new Int32Array(16);\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n\n    this.reg_xmm32s = new Int32Array(8 * 4);\n    this.mxcsr = 0x1F80;\n\n    // segment registers, tr and ldtr\n    this.sreg = new Uint16Array(8);\n\n    // debug registers\n    this.dreg = new Int32Array(8);\n\n\n    // managed in io.js\n    /** @const */ this.memory_map_read8 = [];\n    /** @const */ this.memory_map_write8 = [];\n    /** @const */ this.memory_map_read32 = [];\n    /** @const */ this.memory_map_write32 = [];\n\n    /**\n     * @const\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\n     */\n    this.bios = {\n        main: null,\n        vga: null,\n    };\n\n    /** @type {number} */\n    this.fw_value = 0;\n\n    this.io = undefined;\n    this.fpu = undefined;\n\n    this.bus = bus;\n\n    dbg_assert(this.table16 && this.table32);\n    dbg_assert(this.table0F_16 && this.table0F_32);\n\n    this.update_operand_size();\n\n    this.tsc_offset = v86.microtick();\n\n    this.debug_init();\n\n    this.init2();\n\n    //Object.seal(this);\n}\n\nCPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.memory_size;\n    state[1] = this.segment_is_null;\n    state[2] = this.segment_offsets;\n    state[3] = this.segment_limits;\n    state[4] = this.protected_mode;\n    state[5] = this.idtr_offset;\n    state[6] = this.idtr_size;\n    state[7] = this.gdtr_offset;\n    state[8] = this.gdtr_size;\n    state[9] = this.page_fault;\n    state[10] = this.cr;\n    state[11] = this.cpl;\n    state[12] = this.page_size_extensions;\n    state[13] = this.is_32;\n\n    state[16] = this.stack_size_32;\n    state[17] = this.in_hlt;\n    state[18] = this.last_virt_eip;\n    state[19] = this.eip_phys;\n    state[20] = this.last_virt_esp;\n    state[21] = this.esp_phys;\n    state[22] = this.sysenter_cs;\n    state[23] = this.sysenter_eip;\n    state[24] = this.sysenter_esp;\n    state[25] = this.prefixes;\n    state[26] = this.flags;\n    state[27] = this.flags_changed;\n    state[28] = this.last_op1;\n    state[29] = this.last_op2;\n    state[30] = this.last_op_size;\n    state[31] = this.last_add_result;\n    state[32] = this.modrm_byte;\n\n    state[36] = this.paging;\n    state[37] = this.instruction_pointer;\n    state[38] = this.previous_ip;\n    state[39] = this.reg32s;\n    state[40] = this.sreg;\n    state[41] = this.dreg;\n    state[42] = this.mem8;\n    state[43] = this.fpu;\n\n    state[45] = this.devices.virtio;\n    state[46] = this.devices.apic;\n    state[47] = this.devices.rtc;\n    state[48] = this.devices.pci;\n    state[49] = this.devices.dma;\n    state[50] = this.devices.acpi;\n    state[51] = this.devices.hpet;\n    state[52] = this.devices.vga;\n    state[53] = this.devices.ps2;\n    state[54] = this.devices.uart0;\n    state[55] = this.devices.fdc;\n    state[56] = this.devices.cdrom;\n    state[57] = this.devices.hda;\n    state[58] = this.devices.pit;\n    state[59] = this.devices.net;\n    state[60] = this.devices.pic;\n    state[61] = this.devices.sb16;\n\n    state[62] = this.a20_enabled;\n    state[63] = this.fw_value;\n\n    state[64] = this.devices.ioapic;\n\n    state[65] = this.tss_size_32;\n\n    state[66] = this.reg_mmxs;\n\n    state[67] = this.devices.uart1;\n    state[68] = this.devices.uart2;\n    state[69] = this.devices.uart3;\n\n    return state;\n};\n\nCPU.prototype.set_state = function(state)\n{\n    this.memory_size = state[0];\n    this.segment_is_null = state[1];\n    this.segment_offsets = state[2];\n    this.segment_limits = state[3];\n    this.protected_mode = state[4];\n    this.idtr_offset = state[5];\n    this.idtr_size = state[6];\n    this.gdtr_offset = state[7];\n    this.gdtr_size = state[8];\n    this.page_fault = state[9];\n    this.cr = state[10];\n    this.cpl = state[11];\n    this.page_size_extensions = state[12];\n    this.is_32 = state[13];\n\n    this.stack_size_32 = state[16];\n\n    this.in_hlt = state[17];\n    this.last_virt_eip = state[18];\n    this.eip_phys = state[19];\n    this.last_virt_esp = state[20];\n    this.esp_phys = state[21];\n    this.sysenter_cs = state[22];\n    this.sysenter_eip = state[23];\n    this.sysenter_esp = state[24];\n    this.prefixes = state[25];\n\n    this.flags = state[26];\n    this.flags_changed = state[27];\n    this.last_op1 = state[28];\n    this.last_op2 = state[29];\n    this.last_op_size = state[30];\n    this.last_add_result = state[31];\n    this.modrm_byte = state[32];\n\n    this.paging = state[36];\n    this.instruction_pointer = state[37];\n    this.previous_ip = state[38];\n    this.reg32s = state[39];\n    this.sreg = state[40];\n    this.dreg = state[41];\n    this.mem8 = state[42];\n    this.fpu = state[43];\n\n    this.devices.virtio = state[45];\n    this.devices.apic = state[46];\n    this.devices.rtc = state[47];\n    this.devices.pci = state[48];\n    this.devices.dma = state[49];\n    this.devices.acpi = state[50];\n    this.devices.hpet = state[51];\n    this.devices.vga = state[52];\n    this.devices.ps2 = state[53];\n    this.devices.uart0 = state[54];\n    this.devices.fdc = state[55];\n    this.devices.cdrom = state[56];\n    this.devices.hda = state[57];\n    this.devices.pit = state[58];\n    this.devices.net = state[59];\n    this.devices.pic = state[60];\n    this.devices.sb16 = state[61];\n\n    this.a20_enabled = state[62];\n    this.fw_value = state[63];\n\n    this.devices.ioapic = state[64];\n\n    this.tss_size_32 = state[65];\n\n    this.reg_mmxs = state[66];\n\n    this.devices.uart1 = state[67];\n    this.devices.uart2 = state[68];\n    this.devices.uart3 = state[69];\n\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\n\n\n    this.full_clear_tlb();\n    // tsc_offset?\n\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n    this.update_operand_size();\n};\n\n\n/**\n * @return {number} time in ms until this method should becalled again\n */\nCPU.prototype.main_run = function()\n{\n    if(this.in_hlt)\n    {\n        //if(false)\n        //{\n        //    var _t = this.hlt_loop();\n        //    var t = 0;\n        //}\n        //else\n        //{\n            var t = this.hlt_loop();\n        //}\n\n        if(this.in_hlt)\n        {\n            return t;\n        }\n    }\n\n    this.do_run();\n\n    return 0;\n};\n\nCPU.prototype.exception_cleanup = function(e)\n{\n    if(e === MAGIC_CPU_EXCEPTION)\n    {\n        // A legit CPU exception (for instance, a page fault happened)\n        // call_interrupt_vector has already been called at this point,\n        // so we just need to reset some state\n\n        this.page_fault = false;\n\n        // restore state from prefixes\n        this.clear_prefixes();\n    }\n    else\n    {\n        console.log(e);\n        console.log(e.stack);\n        //var e = new Error(e.message);\n        //Error.captureStackTrace && Error.captureStackTrace(e);\n        throw e;\n    }\n};\n\nCPU.prototype.reboot_internal = function()\n{\n    this.reset();\n    this.load_bios();\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.reset = function()\n{\n    this.a20_enabled = true;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.segment_is_null[i] = 0;\n        this.segment_limits[i] = 0;\n        //this.segment_infos = new Uint32Array(8);\n        this.segment_offsets[i] = 0;\n    }\n\n    this.full_clear_tlb();\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg32s[i] = 0;\n        this.sreg[i] = 0;\n        this.cr[i] = 0;\n        this.dreg[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_mmxs.length; i++)\n    {\n        this.reg_mmxs[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\n    {\n        this.reg_xmm32s[i] = 0;\n    }\n    this.mxcsr = 0x1F80;\n\n    this.protected_mode = false;\n\n    // http://www.sandpile.org/x86/initial.htm\n    this.idtr_size = 0;\n    this.idtr_offset = 0;\n\n    this.gdtr_size = 0;\n    this.gdtr_offset = 0;\n\n    this.page_fault = false;\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\n    this.cr[2] = 0;\n    this.cr[3] = 0;\n    this.cr[4] = 0;\n    this.dreg[6] = 0xFFFF0FF0|0;\n    this.dreg[7] = 0x400;\n    this.cpl = 0;\n    this.paging = false;\n    this.page_size_extensions = 0;\n    this.is_32 = false;\n    this.stack_size_32 = false;\n    this.prefixes = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.update_operand_size();\n\n    this.timestamp_counter = 0;\n    this.previous_ip = 0;\n    this.in_hlt = false;\n\n    this.sysenter_cs = 0;\n    this.sysenter_esp = 0;\n    this.sysenter_eip = 0;\n\n    this.flags = flags_default;\n    this.flags_changed = 0;\n\n    this.last_result = 0;\n    this.last_add_result = 0;\n    this.last_op1 = 0;\n    this.last_op2 = 0;\n    this.last_op_size = 0;\n\n    this.tsc_offset = v86.microtick();\n\n    this.instruction_pointer = 0xFFFF0;\n    this.switch_cs_real_mode(0xF000);\n\n    this.switch_seg(reg_ss, 0x30);\n    this.reg16[reg_sp] = 0x100;\n\n    if(this.devices.virtio)\n    {\n        this.devices.virtio.reset();\n    }\n\n    this.fw_value = 0;\n};\n\n/** @export */\nCPU.prototype.create_memory = function(size)\n{\n    if(size < 1024 * 1024)\n    {\n        size = 1024 * 1024;\n    }\n    else if((size | 0) < 0)\n    {\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\n    }\n\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\n    dbg_assert((size | 0) > 0);\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    this.memory_size = size;\n\n    var buffer = new ArrayBuffer(size);\n\n    this.mem8 = new Uint8Array(buffer);\n    this.mem16 = new Uint16Array(buffer);\n    this.mem32s = new Int32Array(buffer);\n};\n\nCPU.prototype.init = function(settings, device_bus)\n{\n    this.create_memory(typeof settings.memory_size === \"number\" ?\n        settings.memory_size : 1024 * 1024 * 64);\n\n    this.reset();\n\n    var io = new IO(this);\n    this.io = io;\n\n    this.bios.main = settings.bios;\n    this.bios.vga = settings.vga_bios;\n\n    this.load_bios();\n\n    var a20_byte = 0;\n\n    io.register_read(0xB3, this, function()\n    {\n        // seabios smm_relocate_and_restore\n        dbg_log(\"port 0xB3 read\");\n        return 0;\n    });\n\n    io.register_read(0x92, this, function()\n    {\n        return a20_byte;\n    });\n\n    io.register_write(0x92, this, function(out_byte)\n    {\n        a20_byte = out_byte;\n    });\n\n    io.register_read(0x511, this, function()\n    {\n        // bios config port (used by seabios and kvm-unit-test)\n        let result = this.fw_value & 0xFF;\n        this.fw_value >>>= 8;\n        return result;\n    });\n    io.register_write(0x510, this, undefined, function(value)\n    {\n        dbg_log(\"bios config port, index=\" + h(value));\n\n        if(value === FW_CFG_SIGNATURE)\n        {\n            // We could pretend to be QEMU here to control certain options in\n            // seabios, but for now this isn't needed\n            this.fw_value = 0xfab0fab0|0;\n        }\n        else if(value === FW_CFG_RAM_SIZE)\n        {\n            this.fw_value = this.memory_size;\n        }\n        else if(value === FW_CFG_NB_CPUS)\n        {\n            this.fw_value = 1;\n        }\n        else\n        {\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\n            this.fw_value = 0;\n        }\n    });\n\n    if(DEBUG)\n    {\n        // Use by linux for port-IO delay\n        // Avoid generating tons of debug messages\n        io.register_write(0x80, this, function(out_byte)\n        {\n        });\n    }\n\n    this.devices = {};\n\n    // TODO: Make this more configurable\n    if(settings.load_devices)\n    {\n        this.devices.pic = new PIC(this);\n        this.devices.pci = new PCI(this);\n\n        if(ENABLE_ACPI)\n        {\n            this.devices.ioapic = new IOAPIC(this);\n            this.devices.apic = new APIC(this);\n            this.devices.acpi = new ACPI(this);\n        }\n\n        this.devices.rtc = new RTC(this);\n        this.fill_cmos(this.devices.rtc, settings);\n\n        this.devices.dma = new DMA(this);\n\n        if(ENABLE_HPET)\n        {\n            this.devices.hpet = new HPET(this);\n        }\n\n        this.devices.vga = new VGAScreen(this, device_bus,\n                settings.vga_memory_size || 8 * 1024 * 1024);\n\n        this.fpu = new FPU(this);\n\n        this.devices.ps2 = new PS2(this, device_bus);\n\n        this.devices.uart0 = new UART(this, 0x3F8, device_bus);\n\n        if(settings.uart1)\n        {\n            this.devices.uart1 = new UART(this, 0x2F8, device_bus);\n        }\n        if(settings.uart2)\n        {\n            this.devices.uart2 = new UART(this, 0x3E8, device_bus);\n        }\n        if(settings.uart3)\n        {\n            this.devices.uart3 = new UART(this, 0x3E8, device_bus);\n        }\n\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\n\n        var ide_device_count = 0;\n\n        if(settings.hda)\n        {\n            this.devices.hda = new IDEDevice(this, settings.hda, false, ide_device_count++, device_bus);\n        }\n\n        if(settings.cdrom)\n        {\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, true, ide_device_count++, device_bus);\n        }\n\n        if(settings.hdb)\n        {\n            this.devices.hdb = new IDEDevice(this, settings.hdb, false, ide_device_count++, device_bus);\n        }\n\n        this.devices.pit = new PIT(this, device_bus);\n\n        if(settings.enable_ne2k)\n        {\n            this.devices.net = new Ne2k(this, device_bus);\n        }\n\n        if(settings.fs9p)\n        {\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\n        }\n\n        if(true)\n        {\n            this.devices.sb16 = new SB16(this, device_bus);\n        }\n    }\n\n    if(settings.multiboot)\n    {\n        dbg_assert(settings.multiboot.buffer);\n        this.load_multiboot(settings.multiboot.buffer);\n    }\n\n    if(DEBUG)\n    {\n        this.debug.init();\n    }\n};\n\nCPU.prototype.load_multiboot = function(buffer)\n{\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\n\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\n\n    const MAGIC = 0x1BADB002;\n    const ELF_MAGIC = 0x464C457F;\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\n    const MULTIBOOT_SEARCH_BYTES = 8192;\n\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\n    {\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\n    }\n    else\n    {\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\n    }\n\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\n    {\n        if(buf32[offset >> 2] === MAGIC)\n        {\n            var flags = buf32[offset + 4 >> 2];\n            var checksum = buf32[offset + 8 >> 2];\n            var total = MAGIC + flags + checksum | 0;\n\n            if(total)\n            {\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\n                continue;\n            }\n        }\n        else\n        {\n            continue;\n        }\n\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\n\n        this.reg32s[reg_eax] = 0x2BADB002;\n\n        let multiboot_info_addr = 0x7C00;\n        this.reg32s[reg_ebx] = multiboot_info_addr;\n        this.write32(multiboot_info_addr, 0);\n\n        this.cr[0] = 1;\n        this.protected_mode = true;\n        this.flags = flags_default;\n        this.update_cs_size(true);\n        this.stack_size_32 = true;\n\n        for(var i = 0; i < 6; i++)\n        {\n            this.segment_is_null[i] = 0;\n            this.segment_offsets[i] = 0;\n            this.segment_limits[i] = 0xFFFFFFFF;\n\n            // Value doesn't matter, OS isn't allowed to reload without setting\n            // up a proper GDT\n            this.sreg[i] = 0xB002;\n        }\n\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\n        {\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\n\n            var header_addr = buf32[offset + 12 >> 2];\n            var load_addr = buf32[offset + 16 >> 2];\n            var load_end_addr = buf32[offset + 20 >> 2];\n            var bss_end_addr = buf32[offset + 24 >> 2];\n            var entry_addr = buf32[offset + 28 >> 2];\n\n            dbg_log(\"header=\" + h(header_addr, 8) +\n                    \" load=\" + h(load_addr, 8) +\n                    \" load_end=\" + h(load_end_addr, 8) +\n                    \" bss_end=\" + h(bss_end_addr, 8) +\n                    \" entry=\" + h(entry_addr, 8));\n\n            dbg_assert(load_addr <= header_addr);\n\n            var file_start = offset - (header_addr - load_addr);\n\n            if(load_end_addr === 0)\n            {\n                var length = undefined;\n            }\n            else\n            {\n                dbg_assert(load_end_addr >= load_addr);\n                var length = load_end_addr - load_addr;\n            }\n\n            let blob = new Uint8Array(buffer, file_start, length);\n            this.write_blob(blob, load_addr);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\n        }\n        else if(buf32[0] === ELF_MAGIC)\n        {\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\n\n            let elf = read_elf(buffer);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\n\n            for(let program of elf.program_headers)\n            {\n                if(program.type === 0)\n                {\n                    // null\n                }\n                else if(program.type === 1)\n                {\n                    // load\n\n                    // Since multiboot specifies that paging is disabled,\n                    // virtual and physical address must be equal\n                    dbg_assert(program.paddr === program.vaddr);\n                    dbg_assert(program.filesz <= program.memsz);\n\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\n                    this.write_blob(blob, program.paddr);\n                }\n                else if(program.type === 4 ||\n                        program.type === 0x6474e550 ||\n                        program.type === 0x6474e551)\n                {\n                    // ignore for now\n                }\n                else\n                {\n                    dbg_assert(false, \"unimplemented elf section type\");\n                }\n            }\n        }\n        else\n        {\n            dbg_assert(false, \"Not a bootable multiboot format\");\n        }\n\n        // only for kvm-unit-test\n        this.io.register_write_consecutive(0xF4, this,\n            function(value)\n            {\n                console.log(\"Test exited with code \" + h(value, 2));\n                throw \"HALT\";\n            },\n            function() {},\n            function() {},\n            function() {});\n\n        // only for kvm-unit-test\n        for(let i = 0xE; i <= 0xF; i++)\n        {\n            this.io.register_write(0x2000 + i, this,\n                function(value)\n                {\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\n                    if(value)\n                    {\n                        this.device_raise_irq(i);\n                    }\n                    else\n                    {\n                        this.device_lower_irq(i);\n                    }\n                });\n        }\n\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\n        this.debug.dump_state();\n        this.debug.dump_regs();\n\n        break;\n    }\n};\n\nCPU.prototype.fill_cmos = function(rtc, settings)\n{\n    var boot_order = settings.boot_order || 0x213;\n\n    // Used by seabios to determine the boot order\n    //   Nibble\n    //   1: FloppyPrio\n    //   2: HDPrio\n    //   3: CDPrio\n    //   4: BEVPrio\n    // bootflag 1, high nibble, lowest priority\n    // Low nibble: Disable floppy signature check (1)\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\n\n    // bootflag 2, both nibbles, high and middle priority\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\n\n    // 640k or less if less memory is used\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\n\n    var memory_above_1m = 0; // in k\n    if(this.memory_size >= 1024 * 1024)\n    {\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\n    }\n\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\n\n    var memory_above_16m = 0; // in 64k blocks\n    if(this.memory_size >= 16 * 1024 * 1024)\n    {\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\n    }\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\n\n    // memory above 4G (not supported by this emulator)\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\n\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\n\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\n\n    // Used by bochs BIOS to skip the boot menu delay.\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\n};\n\nCPU.prototype.load_bios = function()\n{\n    var bios = this.bios.main;\n    var vga_bios = this.bios.vga;\n\n    if(!bios)\n    {\n        dbg_log(\"Warning: No BIOS\");\n        return;\n    }\n\n    // load bios\n    var data = new Uint8Array(bios),\n        start = 0x100000 - bios.byteLength;\n\n    this.write_blob(data, start);\n\n    if(vga_bios)\n    {\n        // load vga bios\n        var vga_bios8 = new Uint8Array(vga_bios);\n\n        // older versions of seabios\n        this.write_blob(vga_bios8, 0xC0000);\n\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\n        this.io.mmap_register(0xFEB00000, 0x100000,\n            function(addr)\n            {\n                addr = (addr - 0xFEB00000) | 0;\n                if(addr < vga_bios8.length)\n                {\n                    return vga_bios8[addr];\n                }\n                else\n                {\n                    return 0;\n                }\n            },\n            function(addr, value)\n            {\n                dbg_assert(false, \"Unexpected write to VGA rom\");\n            });\n    }\n    else\n    {\n        dbg_log(\"Warning: No VGA BIOS\");\n    }\n\n    // seabios expects the bios to be mapped to 0xFFF00000 also\n    this.io.mmap_register(0xFFF00000, 0x100000,\n        function(addr)\n        {\n            addr &= 0xFFFFF;\n            return this.mem8[addr];\n        }.bind(this),\n        function(addr, value)\n        {\n            addr &= 0xFFFFF;\n            this.mem8[addr] = value;\n        }.bind(this));\n};\n\nCPU.prototype.do_run = function()\n{\n    /** @type {number} */\n    var start = v86.microtick();\n\n    /** @type {number} */\n    var now = start;\n\n    // outer loop:\n    // runs cycles + timers\n    for(; now - start < TIME_PER_FRAME;)\n    {\n        this.run_hardware_timers(now);\n        this.handle_irqs();\n\n        this.do_many_cycles();\n\n        if(this.in_hlt)\n        {\n            return;\n        }\n\n        now = v86.microtick();\n    }\n};\n\nCPU.prototype.do_many_cycles = function()\n{\n    try {\n        this.do_many_cycles_unsafe();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.do_many_cycles_unsafe = function()\n{\n    // inner loop:\n    // runs only cycles\n    for(var k = LOOP_COUNTER; k--;)\n    {\n        this.cycle_internal();\n    }\n};\n\n/** @const */\nvar PROFILING = false;\n\nif(PROFILING)\n{\n    var instruction_total = new Float64Array(256);\n    var instruction_count = new Float64Array(256);\n\n    window[\"print_profiling\"] = function print_profiling()\n    {\n        var prof_instructions = [];\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\n            n: h(i, 2),\n            total: instruction_total[i],\n            count: instruction_count[i],\n            per: (instruction_total[i] / instruction_count[i]) || 0,\n        };\n\n        console.log(\"count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\n\n        console.log(\"time:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\n\n        console.log(\"time/count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\n    };\n}\n\n/**\n * execute a single instruction cycle on the cpu\n * this includes reading all prefixes and the whole instruction\n */\nCPU.prototype.cycle_internal = function()\n{\n    this.previous_ip = this.instruction_pointer;\n\n    this.timestamp_counter++;\n\n    if(PROFILING)\n    {\n        var start = performance.now();\n    }\n\n    var opcode = this.read_imm8();\n    //this.translate_address_read(this.instruction_pointer + 15|0)\n\n    if(DEBUG)\n    {\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\n    }\n\n    // call the instruction\n    this.table[opcode](this);\n\n    if(PROFILING)\n    {\n        var end = performance.now();\n        instruction_total[opcode] += end - start;\n        instruction_count[opcode]++;\n    }\n\n    if(this.flags & flag_trap)\n    {\n        // TODO\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\n    }\n};\n\n/** @export */\nCPU.prototype.cycle = function()\n{\n    try\n    {\n        this.cycle_internal();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.segment_prefix_op = function(sreg)\n{\n    dbg_assert(sreg <= 5);\n    this.prefixes |= sreg + 1;\n    this.run_prefix_instruction();\n    this.prefixes = 0;\n};\n\nCPU.prototype.run_prefix_instruction = function()\n{\n    if(this.is_osize_32())\n    {\n        this.table32[this.read_imm8()](this);\n    }\n    else\n    {\n        this.table16[this.read_imm8()](this);\n    }\n};\n\nCPU.prototype.hlt_loop = function()\n{\n    dbg_assert(this.flags & flag_interrupt);\n    //dbg_log(\"In HLT loop\", LOG_CPU);\n\n    this.run_hardware_timers(v86.microtick());\n    this.handle_irqs();\n\n    return 0;\n};\n\nCPU.prototype.run_hardware_timers = function(now)\n{\n    if(ENABLE_HPET)\n    {\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\n        this.devices.hpet.timer(now);\n    }\n    else\n    {\n        var pit_time = this.devices.pit.timer(now, false);\n        var rtc_time = this.devices.rtc.timer(now, false);\n    }\n\n    if(ENABLE_ACPI)\n    {\n        this.devices.acpi.timer(now);\n        this.devices.apic.timer(now);\n    }\n};\n\nCPU.prototype.clear_prefixes = function()\n{\n    this.prefixes = 0;\n};\n\nCPU.prototype.set_cr0 = function(cr0)\n{\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\n\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\n    {\n        // cannot load PG without PE\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.cr[0] = cr0;\n\n    if(!this.fpu)\n    {\n        // if there's no FPU, keep emulation set\n        this.cr[0] |= CR0_EM;\n    }\n    this.cr[0] |= CR0_ET;\n\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\n\n    dbg_assert(typeof this.paging === \"boolean\");\n    if(new_paging !== this.paging)\n    {\n        this.paging = new_paging;\n        this.full_clear_tlb();\n    }\n\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\n};\n\nCPU.prototype.set_cr4 = function(cr4)\n{\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.cr[4] ^ cr4) & CR4_PGE)\n    {\n        if(cr4 & CR4_PGE)\n        {\n            // The PGE bit has been enabled. The global TLB is\n            // still empty, so we only have to copy it over\n            this.clear_tlb();\n        }\n        else\n        {\n            // Clear the global TLB\n            this.full_clear_tlb();\n        }\n    }\n\n    this.cr[4] = cr4;\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\n\n    if(cr4 & CR4_PAE)\n    {\n        throw this.debug.unimpl(\"PAE\");\n    }\n\n    if(cr4 & 0xFFFFF900)\n    {\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\n        this.trigger_ud();\n    }\n\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\n};\n\nCPU.prototype.cpl_changed = function()\n{\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.read_imm8 = function()\n{\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\n    {\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\n    }\n\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\n\n    return data8;\n};\n\nCPU.prototype.read_imm8s = function()\n{\n    return this.read_imm8() << 24 >> 24;\n};\n\nCPU.prototype.read_imm16 = function()\n{\n    // Two checks in one comparison:\n    //    1. Did the high 20 bits of eip change\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\n    {\n        return this.read_imm8() | this.read_imm8() << 8;\n    }\n\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\n\n    return data16;\n};\n\nCPU.prototype.read_imm32s = function()\n{\n    // Analogue to the above comment\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\n    {\n        return this.read_imm16() | this.read_imm16() << 16;\n    }\n\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\n\n    return data32;\n};\n\n/*\n * Create an internal data unit to represent 64 bits of data\n */\nCPU.prototype.create_atom64s = function(low, high)\n{\n    let data = new Int32Array(2);\n    data[0] = low;\n    data[1] = high;\n    return data;\n};\n\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\n{\n    let data = new Int32Array(4);\n    data[0] = d0;\n    data[1] = d1;\n    data[2] = d2;\n    data[3] = d3;\n    return data;\n}\n\nCPU.prototype.read_modrm_byte = function()\n{\n    this.modrm_byte = this.read_imm8();\n};\n\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\n\nCPU.prototype.init2 = function () {};\nCPU.prototype.branch_taken = function () {};\nCPU.prototype.branch_not_taken = function () {};\nCPU.prototype.diverged = function () {};\n\nCPU.prototype.modrm_resolve = function(modrm_byte)\n{\n    dbg_assert(modrm_byte < 0xC0);\n\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\n};\n\nCPU.prototype.sib_resolve = function(mod)\n{\n    return this.sib_table[this.read_sib()](this, mod);\n};\n\nCPU.prototype.clear_instruction_cache = function() {};\n\n// read word from a page boundary, given 2 physical addresses\nCPU.prototype.virt_boundary_read16 = function(low, high)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    return this.read8(low) | this.read8(high) << 8;\n};\n\n// read doubleword from a page boundary, given 2 addresses\nCPU.prototype.virt_boundary_read32s = function(low, high)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    var mid;\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            mid = this.read_aligned16(high - 2 >> 1);\n        }\n        else\n        {\n            // 0xFFD\n            mid = this.read_aligned16(low + 1 >> 1);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\n    }\n\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\n};\n\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    this.write8(low, value);\n    this.write8(high, value >> 8);\n};\n\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    this.write8(low, value);\n    this.write8(high, value >> 24);\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            this.write8(high - 2, value >> 8);\n            this.write8(high - 1, value >> 16);\n        }\n        else\n        {\n            // 0xFFD\n            this.write8(low + 1 | 0, value >> 8);\n            this.write8(low + 2 | 0, value >> 16);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        this.write8(low + 1 | 0, value >> 8);\n        this.write8(high - 1, value >> 16);\n    }\n};\n\n// safe_read, safe_write\n// read or write byte, word or dword to the given *virtual* address,\n// and be safe on page boundaries\n\nCPU.prototype.safe_read8 = function(addr)\n{\n    dbg_assert(addr < 0x80000000);\n    return this.read8(this.translate_address_read(addr));\n};\n\nCPU.prototype.safe_read16 = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\n    {\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\n    }\n    else\n    {\n        return this.read16(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read32s = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\n    {\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\n    }\n    else\n    {\n        return this.read32s(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read64s = function(addr)\n{\n    let data = this.create_atom64s(0, 0);\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\n    {\n        data[0] = this.safe_read32s(addr);\n        data[1] = this.safe_read32s(addr + 4 | 0);\n    }\n    else\n    {\n        data[0] = this.read32s(this.translate_address_read(addr));\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\n    }\n    return data;\n};\n\nCPU.prototype.safe_read128s_aligned = function(addr)\n{\n    dbg_assert((addr & 0xF) === 0);\n    let phys = this.translate_address_read(addr);\n    return this.create_atom128s(\n        this.read32s(phys),\n        this.read32s(phys + 4 | 0),\n        this.read32s(phys + 8 | 0),\n        this.read32s(phys + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_read128s_unaligned = function(addr)\n{\n    return this.create_atom128s(\n        this.safe_read32s(addr),\n        this.safe_read32s(addr + 4 | 0),\n        this.safe_read32s(addr + 8 | 0),\n        this.safe_read32s(addr + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_write8 = function(addr, value)\n{\n    dbg_assert(addr < 0x80000000);\n    this.write8(this.translate_address_write(addr), value);\n};\n\nCPU.prototype.safe_write16 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) === 0xFFF)\n    {\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\n    }\n    else\n    {\n        this.write16(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write32 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) >= 0xFFD)\n    {\n        // XXX\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\n    }\n    else\n    {\n        this.write32(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write64 = function(addr, low, high)\n{\n    this.writable_or_pagefault(addr, 8);\n    this.safe_write32(addr, low);\n    this.safe_write32(addr + 4 | 0, high);\n};\n\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\n{\n    this.writable_or_pagefault(addr, 16);\n    this.safe_write32(addr, d0);\n    this.safe_write32(addr + 4 | 0, d1);\n    this.safe_write32(addr + 8 | 0, d2);\n    this.safe_write32(addr + 12 | 0, d3);\n};\n\n\n// read 2 or 4 byte from ip, depending on address size attribute\nCPU.prototype.read_moffs = function()\n{\n    if(this.is_asize_32())\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\n    }\n    else\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\n    }\n};\n\nCPU.prototype.getiopl = function()\n{\n    return this.flags >> 12 & 3;\n};\n\nCPU.prototype.vm86_mode = function()\n{\n    return !!(this.flags & flag_vm);\n};\n\nCPU.prototype.get_eflags = function()\n{\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\n};\n\n/**\n * Update the flags register depending on iopl and cpl\n */\nCPU.prototype.update_eflags = function(new_flags)\n{\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\n        clear = ~flag_vip & ~flag_vif & flags_mask;\n\n    if(this.flags & flag_vm)\n    {\n        // other case needs to be handled in popf or iret\n        dbg_assert(this.getiopl() === 3);\n\n        dont_update |= flag_iopl;\n\n        // don't clear vip or vif\n        clear |= flag_vip | flag_vif;\n    }\n    else\n    {\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\n\n        if(this.cpl)\n        {\n            // cpl > 0\n            // cannot update iopl\n            dont_update |= flag_iopl;\n\n            if(this.cpl > this.getiopl())\n            {\n                // cpl > iopl\n                // cannot update interrupt flag\n                dont_update |= flag_interrupt;\n            }\n        }\n    }\n\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\n\n    this.flags_changed = 0;\n};\n\nCPU.prototype.get_stack_reg = function()\n{\n    if(this.stack_size_32)\n    {\n        return this.reg32s[reg_esp];\n    }\n    else\n    {\n        return this.reg16[reg_sp];\n    }\n};\n\nCPU.prototype.set_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] = value;\n    }\n    else\n    {\n        this.reg16[reg_sp] = value;\n    }\n};\n\nCPU.prototype.adjust_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] += value;\n    }\n    else\n    {\n        this.reg16[reg_sp] += value;\n    }\n};\n\nCPU.prototype.get_stack_pointer = function(mod)\n{\n    if(this.stack_size_32)\n    {\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\n    }\n    else\n    {\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\n    }\n};\n\n/*\n * returns the \"real\" instruction pointer,\n * without segment offset\n */\nCPU.prototype.get_real_eip = function()\n{\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\n};\n\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\n{\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\n\n    this.debug.debug_interrupt(interrupt_nr);\n\n    dbg_assert(error_code === false || typeof error_code === \"number\");\n\n    // we have to leave hlt_loop at some point, this is a\n    // good place to do it\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\n    this.in_hlt = false;\n\n    if(this.protected_mode)\n    {\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\n        {\n            throw this.debug.unimpl(\"VME\");\n        }\n\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\n        {\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\n        {\n            dbg_log(interrupt_nr, LOG_CPU);\n            dbg_trace(LOG_CPU);\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\n        dbg_assert((addr & 0xFFF) < 0xFF8);\n\n        if(this.paging)\n        {\n            addr = this.translate_address_system_read(addr);\n        }\n\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\n        var selector = this.read16(addr + 2 | 0);\n        var access = this.read8(addr + 5 | 0);\n        var dpl = access >> 5 & 3;\n        var type = access & 31;\n\n        if((access & 0x80) === 0)\n        {\n            // present bit not set\n            throw this.debug.unimpl(\"#NP handler\");\n        }\n\n        if(is_software_int && dpl < this.cpl)\n        {\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(interrupt_nr << 3 | 2);\n        }\n\n        if(type === 5)\n        {\n            // task gate\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\n            dbg_trace(LOG_CPU);\n\n            this.do_task_switch(selector, error_code);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n            return;\n        }\n\n        if((type & ~1 & ~8) !== 6)\n        {\n            // invalid type\n            dbg_trace(LOG_CPU);\n            dbg_log(\"invalid type: \" + h(type));\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var is_trap = (type & 1) === 1;\n        var is_16 = (type & 8) === 0;\n\n        var info = this.lookup_segment_selector(selector);\n\n        dbg_assert((base >>> 0) <= info.effective_limit);\n        dbg_assert(info.is_valid);\n\n        if(info.is_null)\n        {\n            dbg_log(\"is null\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_executable || info.dpl > this.cpl)\n        {\n            dbg_log(\"not exec\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_present)\n        {\n            // kvm-unit-test\n            dbg_log(\"not present\");\n            this.trigger_np(interrupt_nr << 3 | 2);\n        }\n\n        var old_flags = this.get_eflags();\n\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\n\n        if(!info.dc_bit && info.dpl < this.cpl)\n        {\n            // inter privilege level interrupt\n            // interrupt from vm86 mode\n\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\n            //this.debug.dump_regs();\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\n\n            if(this.tss_size_32)\n            {\n                var new_esp = this.read32s(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\n            }\n            else\n            {\n                var new_esp = this.read16(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\n            }\n            var ss_info = this.lookup_segment_selector(new_ss);\n\n            // Disabled: Incorrect handling of direction bit\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n            //    debugger;\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n            if(ss_info.is_null)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(!ss_info.is_present)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n\n            var old_esp = this.reg32s[reg_esp];\n            var old_ss = this.sreg[reg_ss];\n\n            if(old_flags & flag_vm)\n            {\n                //dbg_log(\"return from vm86 mode\");\n                //this.debug.dump_regs();\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\n\n            // XXX: with new cpl or with cpl 0?\n            this.translate_address_system_write(new_stack_pointer);\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\n\n            // no exceptions below\n\n            this.cpl = info.dpl;\n            this.cpl_changed();\n\n            this.update_cs_size(info.size);\n\n            this.flags &= ~flag_vm & ~flag_rf;\n\n            this.switch_seg(reg_ss, new_ss);\n            this.set_stack_reg(new_esp);\n\n            if(old_flags & flag_vm)\n            {\n                if(is_16)\n                {\n                    dbg_assert(false);\n                }\n                else\n                {\n                    this.push32(this.sreg[reg_gs]);\n                    this.push32(this.sreg[reg_fs]);\n                    this.push32(this.sreg[reg_ds]);\n                    this.push32(this.sreg[reg_es]);\n                }\n            }\n\n            if(is_16)\n            {\n                this.push16(old_ss);\n                this.push16(old_esp);\n            }\n            else\n            {\n                this.push32(old_ss);\n                this.push32(old_esp);\n            }\n        }\n        else if(info.dc_bit || info.dpl === this.cpl)\n        {\n            // intra privilege level interrupt\n\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\n            //this.debug.dump_regs();\n\n            if(this.flags & flag_vm)\n            {\n                dbg_assert(false, \"check error code\");\n                this.trigger_gp(selector & ~3);\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\n\n            // XXX: with current cpl or with cpl 0?\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\n\n            // no exceptions below\n        }\n        else\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        if(is_16)\n        {\n            this.push16(old_flags);\n            this.push16(this.sreg[reg_cs]);\n            this.push16(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push16(error_code);\n            }\n\n            base &= 0xFFFF;\n        }\n        else\n        {\n            this.push32(old_flags);\n            this.push32(this.sreg[reg_cs]);\n            this.push32(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push32(error_code);\n            }\n        }\n\n        if(old_flags & flag_vm)\n        {\n            this.switch_seg(reg_gs, 0);\n            this.switch_seg(reg_fs, 0);\n            this.switch_seg(reg_ds, 0);\n            this.switch_seg(reg_es, 0);\n        }\n\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n        this.update_cs_size(info.size);\n\n        this.segment_limits[reg_cs] = info.effective_limit;\n        this.segment_offsets[reg_cs] = info.base;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\n\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\n\n        if(!is_trap)\n        {\n            // clear int flag for interrupt gates\n            this.flags &= ~flag_interrupt;\n        }\n        else\n        {\n            if((this.flags & flag_interrupt) && !(old_flags & flag_interrupt))\n            {\n                if(!this.page_fault[0]) // XXX\n                {\n                    this.handle_irqs();\n                }\n            }\n        }\n    }\n    else\n    {\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\n\n        var index = interrupt_nr << 2;\n        var new_ip = this.read16(index);\n        var new_cs = this.read16(index + 2 | 0);\n\n        // push flags, cs:ip\n        this.push16(this.get_eflags());\n        this.push16(this.sreg[reg_cs]);\n        this.push16(this.get_real_eip());\n\n        this.flags &= ~flag_interrupt;\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\n    }\n\n    //dbg_log(\"int to:\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n};\n\nCPU.prototype.iret16 = function()\n{\n    this.iret(true);\n};\n\nCPU.prototype.iret32 = function()\n{\n    this.iret(false);\n};\n\nCPU.prototype.iret = function(is_16)\n{\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\n    //this.debug.dump_regs();\n\n    if(this.vm86_mode() && this.getiopl() < 3)\n    {\n        // vm86 mode, iopl != 3\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(is_16)\n    {\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\n    }\n    else\n    {\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\n    }\n\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\n    {\n        if(new_eip & 0xFFFF0000)\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n            this.adjust_stack_reg(3 * 2);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n            this.adjust_stack_reg(3 * 4);\n        }\n\n        //dbg_log(\"iret32 to:\", LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n\n        this.handle_irqs();\n        return;\n    }\n\n    dbg_assert(!this.vm86_mode());\n\n    if(this.flags & flag_nt)\n    {\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\n        this.trigger_gp(0);\n    }\n\n    if(new_flags & flag_vm)\n    {\n        if(this.cpl === 0)\n        {\n            // return to virtual 8086 mode\n\n            // vm86 cannot be set in 16 bit flag\n            dbg_assert(!is_16);\n\n            dbg_assert((new_eip & ~0xFFFF) === 0);\n\n            //dbg_log(\"in vm86 mode now \" +\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\n\n\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\n\n            // no exceptions below\n\n            this.update_eflags(new_flags);\n            this.flags |= flag_vm;\n\n            this.switch_cs_real_mode(new_cs);\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\n\n            this.switch_seg(reg_es, new_es);\n            this.switch_seg(reg_ds, new_ds);\n            this.switch_seg(reg_fs, new_fs);\n            this.switch_seg(reg_gs, new_gs);\n\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\n\n            this.reg32s[reg_esp] = temp_esp;\n            this.switch_seg(reg_ss, temp_ss);\n\n            this.cpl = 3;\n            this.cpl_changed();\n\n            this.update_cs_size(false);\n\n            //dbg_log(\"iret32 to:\", LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n            //this.debug.dump_regs();\n\n            return;\n        }\n        else\n        {\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\n            new_flags &= ~flag_vm;\n        }\n    }\n\n    // protected mode return\n\n    var info = this.lookup_segment_selector(new_cs);\n\n    dbg_assert(info.is_valid);\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\n\n    if(info.is_null)\n    {\n        throw this.debug.unimpl(\"is null\");\n    }\n    if(!info.is_present)\n    {\n        throw this.debug.unimpl(\"not present\");\n    }\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"not exec\");\n    }\n    if(info.rpl < this.cpl)\n    {\n        throw this.debug.unimpl(\"rpl < cpl\");\n    }\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\n    }\n\n    if(!info.dc_bit && info.rpl !== info.dpl)\n    {\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\n        this.trigger_gp(new_cs & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        // outer privilege return\n        if(is_16)\n        {\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\n        }\n        else\n        {\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n        }\n\n        var ss_info = this.lookup_segment_selector(temp_ss);\n        var new_cpl = info.rpl;\n\n        if(ss_info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!ss_info.is_valid ||\n           ss_info.is_system ||\n           ss_info.rpl !== new_cpl ||\n           !ss_info.is_writable ||\n           ss_info.dpl !== new_cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(temp_ss & ~3);\n        }\n\n        if(!ss_info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(temp_ss & ~3);\n        }\n\n        // no exceptions below\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\n\n        this.switch_seg(reg_ss, temp_ss);\n\n        this.set_stack_reg(temp_esp);\n\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n\n\n        // XXX: Set segment to 0 if it's not usable in the new cpl\n        // XXX: Use cached segment information\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\n        // ...\n    }\n    else if(info.rpl === this.cpl)\n    {\n        // same privilege return\n        // no exceptions below\n        if(is_16)\n        {\n            this.adjust_stack_reg(3 * 2);\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.adjust_stack_reg(3 * 4);\n            this.update_eflags(new_flags);\n        }\n\n        // update vip and vif, which are not changed by update_eflags\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n\n    this.sreg[reg_cs] = new_cs;\n    dbg_assert((new_cs & 3) === this.cpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\n\n    this.handle_irqs();\n};\n\nCPU.prototype.switch_cs_real_mode = function(selector)\n{\n    dbg_assert(!this.protected_mode || this.vm86_mode());\n\n    this.sreg[reg_cs] = selector;\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_offsets[reg_cs] = selector << 4;\n};\n\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\n\n    if(!this.protected_mode)\n    {\n        dbg_assert(!this.is_32);\n        //dbg_assert(!this.stack_size_32);\n    }\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(false, \"is system in far return\");\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_executable)\n    {\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.rpl < this.cpl)\n    {\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        dbg_trace(LOG_CPU);\n        this.trigger_np(selector & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\n\n        if(this.is_osize_32())\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\n        }\n        else\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        // XXX: Can raise, conditions should be checked before side effects\n        this.switch_seg(reg_ss, temp_ss);\n        this.set_stack_reg(temp_esp + stack_adjust);\n\n        //if(this.is_osize_32())\n        //{\n        //    this.adjust_stack_reg(2 * 4);\n        //}\n        //else\n        //{\n        //    this.adjust_stack_reg(2 * 2);\n        //}\n\n        //throw this.debug.unimpl(\"privilege change\");\n\n        //this.adjust_stack_reg(stack_adjust);\n    }\n    else\n    {\n        if(this.is_osize_32())\n        {\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\n        }\n        else\n        {\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\n        }\n    }\n\n    //dbg_assert(this.cpl === info.dpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    //this.segment_infos[reg_cs] = 0; // TODO\n\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = selector;\n\n    dbg_assert((selector & 3) === this.cpl);\n\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n\n    //dbg_log(\"far return to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\n};\n\nCPU.prototype.far_jump = function(eip, selector, is_call)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"#gp null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(is_call, \"TODO: Jump\");\n\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\n\n        if(info.type === 0xC || info.type === 4)\n        {\n            // call gate\n            var is_16 = info.type === 4;\n\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\n            {\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n\n            if(!info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\n                this.trigger_np(selector & ~3);\n            }\n\n            var cs_selector = info.raw0 >>> 16;\n            var cs_info = this.lookup_segment_selector(cs_selector);\n\n            if(cs_info.is_null)\n            {\n                dbg_log(\"#gp null cs\", LOG_CPU);\n                this.trigger_gp(0);\n            }\n\n            if(!cs_info.is_valid)\n            {\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_executable)\n            {\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(cs_info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\n                this.trigger_np(cs_selector & ~3);\n            }\n\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\n            {\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\n\n                if(this.tss_size_32)\n                {\n                    var new_esp = this.read32s(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\n                }\n                else\n                {\n                    var new_esp = this.read16(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\n                }\n                var ss_info = this.lookup_segment_selector(new_ss);\n\n                // Disabled: Incorrect handling of direction bit\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n                //    debugger;\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n                if(ss_info.is_null)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(!ss_info.is_present)\n                {\n                    throw this.debug.unimpl(\"#SS handler\");\n                }\n\n                var parameter_count = info.raw1 & 0x1F;\n                var stack_space = is_16 ? 4 : 8;\n                if(is_call)\n                {\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\n                }\n                if(ss_info.size)\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n                else\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n\n                var old_esp = this.reg32s[reg_esp];\n                var old_ss = this.sreg[reg_ss];\n                var old_stack_pointer = this.get_stack_pointer(0);\n\n                //dbg_log(\"old_esp=\" + h(old_esp));\n\n                this.cpl = cs_info.dpl;\n                this.cpl_changed();\n\n                this.update_cs_size(cs_info.size);\n\n                this.switch_seg(reg_ss, new_ss);\n                this.set_stack_reg(new_esp);\n\n                //dbg_log(\"parameter_count=\" + parameter_count);\n                //dbg_assert(parameter_count === 0, \"TODO\");\n\n                if(is_16)\n                {\n                    this.push16(old_ss);\n                    this.push16(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n                else\n                {\n                    this.push32(old_ss);\n                    this.push32(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\n                            this.push16(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\n                            this.push32(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n            else\n            {\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\n                // ok\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n\n            // Note: eip from call is ignored\n            var new_eip = info.raw0 & 0xFFFF;\n            if(!is_16)\n            {\n                new_eip |= info.raw1 & 0xFFFF0000;\n            }\n\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\n\n            this.update_cs_size(cs_info.size);\n\n            this.segment_is_null[reg_cs] = 0;\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\n            //this.segment_infos[reg_cs] = 0; // TODO\n            this.segment_offsets[reg_cs] = cs_info.base;\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n        }\n        else\n        {\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\n        }\n    }\n    else\n    {\n        if(!info.is_executable)\n        {\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(info.dc_bit)\n        {\n            // conforming code segment\n            if(info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n        else\n        {\n            // non-conforming code segment\n\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\n            {\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n\n        this.update_cs_size(info.size);\n\n        this.segment_is_null[reg_cs] = 0;\n        this.segment_limits[reg_cs] = info.effective_limit;\n        //this.segment_infos[reg_cs] = 0; // TODO\n\n        this.segment_offsets[reg_cs] = info.base;\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n    }\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\n};\n\nCPU.prototype.get_tss_stack_addr = function(dpl)\n{\n    if(this.tss_size_32)\n    {\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\n    }\n    else\n    {\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\n    }\n\n    if(this.paging)\n    {\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\n    }\n\n    return tss_stack_addr;\n};\n\nCPU.prototype.do_task_switch = function(selector, error_code)\n{\n    dbg_assert(this.tss_size_32, \"TODO\");\n\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\n    var descriptor = this.lookup_segment_selector(selector);\n\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\n    var tss_is_16 = descriptor.type <= 3;\n    var tss_is_busy = (descriptor.type & 2) === 2;\n\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\n    {\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if((descriptor.access & 31) === 0xB)\n    {\n        // is busy\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!descriptor.is_present)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    if(descriptor.effective_limit < 103)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    var tsr_size = this.segment_limits[reg_tr];\n    var tsr_offset = this.segment_offsets[reg_tr];\n\n    var old_eflags = this.get_eflags();\n\n    if(tss_is_busy)\n    {\n        old_eflags &= ~flag_nt;\n    }\n\n    this.writable_or_pagefault(tsr_offset, 0x66);\n\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\n\n    // TODO: Write 16 bit values if old tss is 16 bit\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\n\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\n\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\n\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\n\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\n\n    if(true /* is jump or call or int */)\n    {\n        // mark as busy\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\n    }\n\n    //var new_tsr_size = descriptor.effective_limit;\n    var new_tsr_offset = descriptor.base;\n\n    dbg_assert(!tss_is_16, \"unimplemented\");\n\n    if(true /* is call or int */)\n    {\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\n    }\n\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\n\n    this.flags &= ~flag_vm;\n\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\n    var info = this.lookup_segment_selector(new_cs);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.is_system)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = new_cs;\n\n    this.cpl = info.dpl;\n    this.cpl_changed();\n\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n    this.update_cs_size(info.size);\n\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\n\n    if(true /* is call or int */)\n    {\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\n        new_eflags |= flag_nt;\n    }\n\n    if(new_eflags & flag_vm)\n    {\n        throw this.debug.unimpl(\"task switch to VM mode\");\n    }\n\n    this.update_eflags(new_eflags);\n\n    if(true /* call or int */)\n    {\n        this.flags |= flag_nt;\n    }\n\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\n    this.load_ldt(new_ldt);\n\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\n\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\n\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\n\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n\n    this.segment_offsets[reg_tr] = descriptor.base;\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    this.cr[3] = new_cr3;\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\n    this.clear_tlb();\n\n    this.cr[0] |= CR0_TS;\n\n    if(error_code !== false)\n    {\n        if(tss_is_16)\n        {\n            this.push16(error_code & 0xFFFF);\n        }\n        else\n        {\n            this.push32(error_code);\n        }\n    }\n};\n\nCPU.prototype.hlt_op = function()\n{\n    if(this.cpl)\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.flags & flag_interrupt) === 0)\n    {\n        this.debug.show(\"cpu halted\");\n        this.bus.send(\"cpu-event-halt\");\n        if(DEBUG) this.debug.dump_regs();\n        throw \"HALT\";\n    }\n    else\n    {\n        // get out of here and into hlt_loop\n        this.in_hlt = true;\n\n        //if(false) // possibly unsafe, test in safari\n        //{\n        //    this.hlt_loop();\n        //    this.diverged();\n        //    if(this.in_hlt)\n        //    {\n        //        throw MAGIC_CPU_EXCEPTION;\n        //    }\n        //}\n        //else\n        {\n            throw MAGIC_CPU_EXCEPTION;\n        }\n    }\n};\n\n// assumes ip to point to the byte before the next instruction\nCPU.prototype.raise_exception = function(interrupt_nr)\n{\n    //if(DEBUG && interrupt_nr !== 7)\n    //{\n    //    // show interesting exceptions\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //    this.debug.dump_state();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, false);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\n{\n    dbg_assert(typeof error_code === \"number\");\n\n    //if(DEBUG)\n    //{\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.trigger_de = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(0);\n};\n\nCPU.prototype.trigger_ud = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(6);\n};\n\nCPU.prototype.trigger_nm = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(7);\n};\n\nCPU.prototype.trigger_ts = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(10, code);\n};\n\nCPU.prototype.trigger_gp = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(13, code);\n};\n\nCPU.prototype.trigger_np = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(11, code);\n};\n\nCPU.prototype.trigger_ss = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(12, code);\n};\n\n// used before fpu instructions\nCPU.prototype.task_switch_test = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        this.trigger_nm();\n    }\n};\n\n// used before mmx instructions\nCPU.prototype.task_switch_test_mmx = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        if(this.cr[0] & CR0_TS)\n        {\n            this.trigger_nm();\n        }\n        else\n        {\n            this.trigger_ud();\n        }\n    }\n\n};\n\nCPU.prototype.todo = function()\n{\n    if(DEBUG)\n    {\n        dbg_trace();\n        throw \"TODO\";\n    }\n\n    this.trigger_ud();\n};\n\nCPU.prototype.undefined_instruction = function()\n{\n    dbg_assert(false, \"Possible fault: undefined instruction\");\n    this.trigger_ud();\n};\n\nCPU.prototype.unimplemented_sse = function()\n{\n    dbg_log(\"No SSE\", LOG_CPU);\n    dbg_assert(false);\n    this.trigger_ud();\n};\n\nCPU.prototype.get_seg_prefix_ds = function()\n{\n    return this.get_seg_prefix(reg_ds);\n};\n\nCPU.prototype.get_seg_prefix_ss = function()\n{\n    return this.get_seg_prefix(reg_ss);\n};\n\nCPU.prototype.get_seg_prefix_cs = function()\n{\n    return this.get_seg_prefix(reg_cs);\n};\n\n/**\n * Get segment base by prefix or default\n * @param {number} default_segment\n */\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\n{\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\n\n    if(prefix)\n    {\n        if(prefix === SEG_PREFIX_ZERO)\n        {\n            return 0;\n        }\n        else\n        {\n            return this.get_seg(prefix - 1 /*, offset*/);\n        }\n    }\n    else\n    {\n        return this.get_seg(default_segment /*, offset*/);\n    }\n};\n\n/**\n * Get segment base\n * @param {number} segment\n */\nCPU.prototype.get_seg = function(segment /*, offset*/)\n{\n    dbg_assert(segment >= 0 && segment < 8);\n\n    if(this.protected_mode)\n    {\n        if(this.segment_is_null[segment])\n        {\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\n            dbg_trace();\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\n\n            this.trigger_gp(0);\n        }\n\n        // TODO:\n        // - validate segment limits\n        // - validate if segment is writable\n    }\n\n    return this.segment_offsets[segment];\n};\n\nCPU.prototype.read_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.read_e8s = function()\n{\n    return this.read_e8() << 24 >> 24;\n};\n\nCPU.prototype.read_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.read_e16s = function()\n{\n    return this.read_e16() << 16 >> 16;\n};\n\nCPU.prototype.read_e32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.read_e32 = function()\n{\n    return this.read_e32s() >>> 0;\n};\n\nCPU.prototype.read_mmx_mem32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        // Returning lower dword of qword\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\n    }\n};\n\nCPU.prototype.read_mmx_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.create_atom64s(\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom64s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s_unaligned = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.set_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write8(addr, value);\n    } else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.set_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write16(addr, value);\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.set_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write32(addr, value);\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.set_mmx_mem64s = function(low, high)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write64(addr, low, high);\n    } else {\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\n    }\n};\n\nCPU.prototype.read_write_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        return this.read8(this.phys_addr);\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.write_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        this.write8(this.phys_addr, value);\n    }\n    else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.read_write_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read16(this.phys_addr);\n        }\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.write_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write16(this.phys_addr, value);\n        }\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.read_write_e32 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read32s(this.phys_addr);\n        }\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.write_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write32(this.phys_addr, value);\n        }\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.read_reg_e16 = function()\n{\n    return this.reg16[this.modrm_byte << 1 & 14];\n};\n\nCPU.prototype.write_reg_e16 = function(value)\n{\n    this.reg16[this.modrm_byte << 1 & 14] = value;\n};\n\nCPU.prototype.read_reg_e32s = function()\n{\n    return this.reg32s[this.modrm_byte & 7];\n};\n\nCPU.prototype.write_reg_e32 = function(value)\n{\n    this.reg32s[this.modrm_byte & 7] = value;\n};\n\nCPU.prototype.read_g8 = function()\n{\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\n};\n\nCPU.prototype.write_g8 = function(value)\n{\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\n};\n\nCPU.prototype.read_g16 = function()\n{\n    return this.reg16[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.read_g16s = function()\n{\n    return this.reg16s[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.write_g16 = function(value)\n{\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\n};\n\nCPU.prototype.read_g32s = function()\n{\n    return this.reg32s[this.modrm_byte >> 3 & 7];\n};\n\nCPU.prototype.write_g32 = function(value)\n{\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\n};\n\nCPU.prototype.read_xmm64s = function()\n{\n    return this.create_atom64s(\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\n    );\n};\n\nCPU.prototype.read_xmm128s = function()\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    return this.create_atom128s(\n        this.reg_xmm32s[i | 0],\n        this.reg_xmm32s[i | 1],\n        this.reg_xmm32s[i | 2],\n        this.reg_xmm32s[i | 3]\n    );\n};\n\nCPU.prototype.read_mmx64s = function()\n{\n    return this.create_atom64s(\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\n    );\n};\n\nCPU.prototype.write_mmx64s = function(low, high)\n{\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\n};\n\nCPU.prototype.write_xmm64 = function(low, high)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = low;\n    this.reg_xmm32s[i + 1] = high;\n};\n\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = d0;\n    this.reg_xmm32s[i + 1] = d1;\n    this.reg_xmm32s[i + 2] = d2;\n    this.reg_xmm32s[i + 3] = d3;\n};\n\nCPU.prototype.pic_call_irq = function(int)\n{\n    try\n    {\n        this.previous_ip = this.instruction_pointer;\n        this.call_interrupt_vector(int, false, false);\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.handle_irqs = function()\n{\n    dbg_assert(!this.page_fault);\n\n    this.diverged();\n\n    if((this.flags & flag_interrupt) && !this.page_fault)\n    {\n        if(this.devices.pic)\n        {\n            this.devices.pic.acknowledge_irq();\n        }\n\n        if(this.devices.apic)\n        {\n            this.devices.apic.acknowledge_irq();\n        }\n    }\n};\n\nCPU.prototype.device_raise_irq = function(i)\n{\n    dbg_assert(arguments.length === 1);\n    if(this.devices.pic)\n    {\n        this.devices.pic.set_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.set_irq(i);\n    }\n};\n\nCPU.prototype.device_lower_irq = function(i)\n{\n    if(this.devices.pic)\n    {\n        this.devices.pic.clear_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.clear_irq(i);\n    }\n};\n\nCPU.prototype.test_privileges_for_io = function(port, size)\n{\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\n    {\n        if(!this.tss_size_32)\n        {\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state();\n            this.trigger_gp(0);\n        }\n\n        var tsr_size = this.segment_limits[reg_tr];\n        var tsr_offset = this.segment_offsets[reg_tr];\n\n        if(tsr_size >= 0x67)\n        {\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\n\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\n                high_port = port + size - 1 | 0;\n\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\n            {\n                var mask = ((1 << size) - 1) << (port & 7),\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\n                    port_info = (mask & 0xFF00) ?\n                        this.read16(addr) : this.read8(addr);\n\n                dbg_assert((addr & 0xFFF) < 0xFFF);\n\n                if(!(port_info & mask))\n                {\n                    return;\n                }\n            }\n        }\n\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state();\n        this.trigger_gp(0);\n    }\n};\n\nCPU.prototype.cpuid = function()\n{\n    // cpuid\n    // TODO: Fill in with less bogus values\n\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\n    // http://www.sandpile.org/x86/cpuid.htm\n\n    var eax = 0;\n    var ecx = 0;\n    var edx = 0;\n    var ebx = 0;\n\n    var winnt_fix = false;\n\n    switch(this.reg32s[reg_eax])\n    {\n        case 0:\n            // maximum supported level\n            if(winnt_fix)\n            {\n                eax = 2;\n            }\n            else\n            {\n                eax = 5;\n            }\n\n            ebx = 0x756E6547|0; // Genu\n            edx = 0x49656E69|0; // ineI\n            ecx = 0x6C65746E|0; // ntel\n            break;\n\n        case 1:\n            // pentium\n            eax = 3 | 6 << 4 | 15 << 8;\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\n            var vme = 0 << 1;\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\n            edx = (this.fpu ? 1 : 0) |                // fpu\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\n                    0 << 23 | 0 << 24 | 0 << 25 | 0 << 26;   // mmx, fxsr, sse, sse2\n\n            if(ENABLE_ACPI && this.apic_enabled)\n            {\n                edx |= 1 << 9; // apic\n            }\n            break;\n\n        case 2:\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\n            eax = 0x665B5001|0;\n            ebx = 0;\n            ecx = 0;\n            edx = 0x007A7000;\n            break;\n\n        case 4:\n            // from my local machine\n            switch(this.reg32s[reg_ecx])\n            {\n                case 0:\n                    eax = 0x00000121;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 1:\n                    eax = 0x00000122;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 2:\n                    eax = 0x00000143;\n                    ebx = 0x05c0003f;\n                    ecx = 0x00000fff;\n                    edx = 0x00000001;\n                    break;\n            }\n            break;\n\n        case 5:\n            // from my local machine\n            eax = 0x40;\n            ebx = 0x40;\n            ecx = 3;\n            edx = 0x00142120;\n            break;\n\n        case 0x80000000|0:\n            // maximum supported extended level\n            eax = 5;\n            // other registers are reserved\n            break;\n\n        case 0x40000000|0: // hypervisor\n            if(VMWARE_HYPERVISOR_PORT)\n            {\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\n                ebx = 0x61774D56|0; // VMwa\n                ecx = 0x4D566572|0; // reVM\n                edx = 0x65726177|0; // ware\n            }\n            break;\n\n        default:\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\n    }\n\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\n\n    this.reg32s[reg_eax] = eax;\n    this.reg32s[reg_ecx] = ecx;\n    this.reg32s[reg_edx] = edx;\n    this.reg32s[reg_ebx] = ebx;\n};\n\nCPU.prototype.update_cs_size = function(new_size)\n{\n    dbg_assert(typeof new_size === \"boolean\");\n\n    if(this.is_32 !== new_size)\n    {\n        this.clear_instruction_cache();\n        this.is_32 = new_size;\n        this.update_operand_size();\n    }\n};\n\nCPU.prototype.update_operand_size = function()\n{\n    if(this.is_32)\n    {\n        this.table = this.table32;\n    }\n    else\n    {\n        this.table = this.table16;\n    }\n};\n\n/**\n * @param {number} selector\n */\nCPU.prototype.lookup_segment_selector = function(selector)\n{\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\n\n    var is_gdt = (selector & 4) === 0,\n        selector_offset = selector & ~7,\n        info,\n        table_offset,\n        table_limit;\n\n    info = {\n        rpl: selector & 3,\n        from_gdt: is_gdt,\n        is_null: false,\n        is_valid: true,\n\n        base: 0,\n        access: 0,\n        flags: 0,\n        type: 0,\n        dpl: 0,\n        is_system: false,\n        is_present: false,\n        is_executable: false,\n        rw_bit: false,\n        dc_bit: false,\n        size: false,\n\n        is_conforming_executable: false,\n\n        // limit after applying granularity\n        effective_limit: 0,\n\n        is_writable: false,\n        is_readable: false,\n        table_offset: 0,\n\n        raw0: 0,\n        raw1: 0,\n    };\n\n    if(is_gdt)\n    {\n        table_offset = this.gdtr_offset;\n        table_limit = this.gdtr_size;\n    }\n    else\n    {\n        table_offset = this.segment_offsets[reg_ldtr];\n        table_limit = this.segment_limits[reg_ldtr];\n    }\n\n    if(is_gdt && selector_offset === 0)\n    {\n        info.is_null = true;\n        return info;\n    }\n\n    // limit is the number of entries in the table minus one\n    if((selector | 7) > table_limit)\n    {\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\n        info.is_valid = false;\n        return info;\n    }\n\n    table_offset = table_offset + selector_offset | 0;\n\n    if(this.paging)\n    {\n        table_offset = this.translate_address_system_read(table_offset);\n    }\n    info.table_offset = table_offset;\n\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\n                this.read8(table_offset + 7 | 0) << 24;\n    info.access = this.read8(table_offset + 5 | 0);\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\n\n    info.raw0 = this.read32s(table_offset     | 0);\n    info.raw1 = this.read32s(table_offset + 4 | 0);\n\n    //this.write8(table_offset + 5 | 0, info.access | 1);\n\n    // used if system\n    info.type = info.access & 0xF;\n\n    info.dpl = info.access >> 5 & 3;\n\n    info.is_system = (info.access & 0x10) === 0;\n    info.is_present = (info.access & 0x80) === 0x80;\n    info.is_executable = (info.access & 8) === 8;\n\n    info.rw_bit = (info.access & 2) === 2;\n    info.dc_bit = (info.access & 4) === 4;\n\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\n\n    info.size = (info.flags & 4) === 4;\n\n    var limit = this.read16(table_offset) |\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\n\n    if(info.flags & 8)\n    {\n        // granularity set\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\n    }\n    else\n    {\n        info.effective_limit = limit;\n    }\n\n    info.is_writable = info.rw_bit && !info.is_executable;\n    info.is_readable = info.rw_bit || !info.is_executable;\n\n    return info;\n};\n\n/**\n * @param {number} reg\n * @param {number} selector\n */\nCPU.prototype.switch_seg = function(reg, selector)\n{\n    dbg_assert(reg >= 0 && reg <= 5);\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.sreg[reg] = selector;\n        this.segment_is_null[reg] = 0;\n        this.segment_offsets[reg] = selector << 4;\n\n        if(reg === reg_ss)\n        {\n            this.stack_size_32 = false;\n        }\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(reg === reg_ss)\n    {\n        if(info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           info.rpl !== this.cpl ||\n           !info.is_writable ||\n           info.dpl !== this.cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(selector & ~3);\n        }\n\n        this.stack_size_32 = info.size;\n    }\n    else if(reg === reg_cs)\n    {\n        // handled by switch_cs_real_mode, far_return or far_jump\n        dbg_assert(false);\n    }\n    else\n    {\n        // es, ds, fs, gs\n        if(info.is_null)\n        {\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            //dbg_trace(LOG_CPU);\n            this.sreg[reg] = selector;\n            this.segment_is_null[reg] = 1;\n            return;\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           !info.is_readable ||\n           (!info.is_conforming_executable &&\n            (info.rpl > info.dpl || this.cpl > info.dpl))\n        ) {\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            this.debug.dump_state();\n            this.debug.dump_regs();\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n    }\n\n    this.segment_is_null[reg] = 0;\n    this.segment_limits[reg] = info.effective_limit;\n    //this.segment_infos[reg] = 0; // TODO\n\n    this.segment_offsets[reg] = info.base;\n    this.sreg[reg] = selector;\n};\n\nCPU.prototype.load_tr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    dbg_assert(info.is_valid);\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\n    }\n\n    if(info.is_null)\n    {\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"#GP | ltr: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\n    }\n\n    if(info.type !== 9 && info.type !== 1)\n    {\n        // 0xB: busy 386 TSS (GP)\n        // 0x9: 386 TSS\n        // 0x3: busy 286 TSS (GP)\n        // 0x1: 286 TSS (??)\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NT | present bit not set (ltr)\");\n        throw this.debug.unimpl(\"#NT handler\");\n    }\n\n    this.tss_size_32 = info.type === 9;\n    this.segment_offsets[reg_tr] = info.base;\n    this.segment_limits[reg_tr] = info.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    // Mark task as busy\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\n\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\n};\n\nCPU.prototype.load_ldt = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        // invalid\n        this.segment_offsets[reg_ldtr] = 0;\n        this.segment_limits[reg_ldtr] = 0;\n        return;\n    }\n\n    dbg_assert(info.is_valid);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"lldt: present bit not set\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"lldt: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(info.type !== 2)\n    {\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.segment_offsets[reg_ldtr] = info.base;\n    this.segment_limits[reg_ldtr] = info.effective_limit;\n    this.sreg[reg_ldtr] = selector;\n\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\n};\n\nCPU.prototype.arpl = function(seg, r16)\n{\n    this.flags_changed &= ~flag_zero;\n\n    if((seg & 3) < (this.reg16[r16] & 3))\n    {\n        this.flags |= flag_zero;\n        return seg & ~3 | this.reg16[r16] & 3;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return seg;\n    }\n};\n\nCPU.prototype.lar = function(selector, original)\n{\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.raw1 & 0x00FFFF00;\n    }\n};\n\nCPU.prototype.lsl = function(selector, original)\n{\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.effective_limit | 0;\n    }\n\n};\n\nCPU.prototype.verr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\n    {\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.verw = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\n       info.dpl < this.cpl || info.dpl < info.rpl)\n    {\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verw valid\", LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.clear_tlb = function()\n{\n    // clear tlb excluding global pages\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.tlb_info.set(this.tlb_info_global);\n\n    //dbg_log(\"page table loaded\", LOG_CPU);\n};\n\nCPU.prototype.full_clear_tlb = function()\n{\n    //dbg_log(\"TLB full clear\", LOG_CPU);\n\n    // clear tlb including global pages\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\n    for(var i = 0; i < (1 << 18); )\n    {\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\n    }\n\n    this.clear_tlb();\n};\n\nCPU.prototype.invlpg = function(addr)\n{\n    var page = addr >>> 12;\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\n\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.translate_address_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_read(addr);\n    }\n    else\n    {\n        return this.translate_address_system_read(addr);\n    }\n};\n\nCPU.prototype.translate_address_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_write(addr);\n    }\n    else\n    {\n        return this.translate_address_system_write(addr);\n    }\n};\n\nCPU.prototype.translate_address_user_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_user_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\n    }\n};\n\n/**\n * @return {number}\n */\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\n{\n    var page = addr >>> 12,\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\n        page_dir_entry = this.mem32s[page_dir_addr],\n        high,\n        can_write = true,\n        global,\n        cachable = true,\n        allow_user = true;\n\n    dbg_assert(addr < 0x80000000);\n\n    if(!(page_dir_entry & 1))\n    {\n        // to do at this place:\n        //\n        // - set cr2 = addr (which caused the page fault)\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\n        // - prevent execution of the function that triggered this call\n        //dbg_log(\"#PF not present\", LOG_CPU);\n\n        this.cr[2] = addr;\n        this.trigger_pagefault(for_writing, user, 0);\n\n        // never reached as this.trigger_pagefault throws up\n        dbg_assert(false);\n    }\n\n    if((page_dir_entry & 2) === 0)\n    {\n        can_write = false;\n\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\n        {\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if((page_dir_entry & 4) === 0)\n    {\n        allow_user = false;\n\n        if(user)\n        {\n            // \"Page Fault: page table accessed by non-supervisor\";\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if(page_dir_entry & this.page_size_extensions)\n    {\n        // size bit is set\n\n        // set the accessed and dirty bits\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\n\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\n        global = page_dir_entry & 0x100;\n    }\n    else\n    {\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\n            page_table_entry = this.mem32s[page_table_addr];\n\n        if((page_table_entry & 1) === 0)\n        {\n            //dbg_log(\"#PF not present table\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 0);\n            dbg_assert(false);\n        }\n\n        if((page_table_entry & 2) === 0)\n        {\n            can_write = false;\n\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\n            {\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        if((page_table_entry & 4) === 0)\n        {\n            allow_user = false;\n\n            if(user)\n            {\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        // set the accessed and dirty bits\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\n\n        high = page_table_entry & 0xFFFFF000;\n        global = page_table_entry & 0x100;\n    }\n\n    this.tlb_data[page] = high ^ page << 12;\n\n    var allowed_flag;\n\n    if(allow_user)\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\n        }\n        else\n        {\n            // TODO: Consider if cr0.wp is not set\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\n        }\n    }\n    else\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\n        }\n        else\n        {\n            allowed_flag = TLB_SYSTEM_READ;\n        }\n    }\n\n    this.tlb_info[page] = allowed_flag;\n\n    if(global && (this.cr[4] & CR4_PGE))\n    {\n        this.tlb_info_global[page] = allowed_flag;\n    }\n\n    return high;\n};\n\nCPU.prototype.writable_or_pagefault = function(addr, size)\n{\n    dbg_assert(size < 0x1000, \"not supported yet\");\n    dbg_assert(size > 0);\n\n    if(!this.paging)\n    {\n        return;\n    }\n\n    var user = this.cpl === 3 ? 1 : 0,\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\n        page = addr >>> 12;\n\n    if((this.tlb_info[page] & mask) === 0)\n    {\n        this.do_page_translation(addr, 1, user);\n    }\n\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\n    {\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\n        {\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\n        }\n    }\n};\n\nCPU.prototype.trigger_pagefault = function(write, user, present)\n{\n    if(LOG_PAGE_FAULTS)\n    {\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\n        dbg_trace(LOG_CPU);\n    }\n\n    if(this.page_fault)\n    {\n        dbg_trace(LOG_CPU);\n        throw this.debug.unimpl(\"Double fault\");\n    }\n\n    // invalidate tlb entry\n    var page = this.cr[2] >>> 12;\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.instruction_pointer = this.previous_ip;\n    this.page_fault = true;\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.is_osize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\n};\n\nCPU.prototype.is_asize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\n};\n\nCPU.prototype.get_reg_asize = function(reg)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    var r = this.reg32s[reg];\n\n    if(this.is_asize_32())\n    {\n        return r;\n    }\n    else\n    {\n        return r & 0xFFFF;\n    }\n};\n\nCPU.prototype.set_ecx_asize = function(value)\n{\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg_ecx] = value;\n    }\n    else\n    {\n        this.reg16[reg_cx] = value;\n    }\n};\n\nCPU.prototype.add_reg_asize = function(reg, value)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg] += value;\n    }\n    else\n    {\n        this.reg16[reg << 1] += value;\n    }\n};\n\nCPU.prototype.decr_ecx_asize = function()\n{\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\n};\n\nCPU.prototype.invalid_arithmatic = function()\n{\n    this.mxcsr |= CPU_EX_I;\n};\n\nCPU.prototype.is_SNaN32 = function(value)\n{\n    let exponent = (value >>> 23) & 0xFF;\n    let most_significand = (value >>> 22) & 1;\n    let less_significand = (value >>> 0) & 0x3FFFFF;\n\n    return exponent === 0xFF && most_significand === 0 && less_significand > 0;\n};\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"CPU\"] = CPU;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"CPU\"] = CPU;\n}\nelse if(typeof importScripts === \"function\")\n{\n    self[\"CPU\"] = CPU;\n}\n","\"use strict\";\n/*\n * Compile time configuration, some only relevant for debug mode\n */\n\n/**\n * @define {boolean}\n * Overridden for production by closure compiler\n */\nvar DEBUG = true;\n\n/** @const */\nvar LOG_TO_FILE = false;\n\n/**\n * @const\n * Enables logging all IO port reads and writes. Very verbose\n */\nvar LOG_ALL_IO = false;\n\n/**\n * @const\n * Enables logging of page faults, quite verbose\n */\nvar LOG_PAGE_FAULTS = false;\n\n\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\n\n/**\n * @const\n * Draws entire buffer and visualizes the layers that would be drawn\n */\nvar DEBUG_SCREEN_LAYERS = DEBUG && false;\n\n\n/** @const */\nvar ENABLE_HPET = DEBUG && false;\n\n/**\n * @define {boolean}\n * Overridden by closure compiler\n */\nvar ENABLE_ACPI = false;\n\n\n/**\n * @const\n * How many cycles the CPU does at a time before running hardware timers\n */\nvar LOOP_COUNTER = 11001;\n\n/**\n * @const\n * How often, in milliseconds, to yield to the browser for rendering and\n * running events\n */\nvar TIME_PER_FRAME = 1;\n\n/**\n * @const\n * How many ticks the TSC does per millisecond\n */\nvar TSC_RATE = 8 * 1024;\n\n\n/** @const */\nvar APIC_TIMER_FREQ = TSC_RATE;\n\n\n/** @const */\nvar VMWARE_HYPERVISOR_PORT = true;\n","\"use strict\";\n\nvar v86util = v86util || {};\n\n// pad string with spaces on the right\nv86util.pads = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = str + \" \";\n    }\n\n    return str;\n};\n\n// pad string with zeros on the left\nv86util.pad0 = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = \"0\" + str;\n    }\n\n    return str;\n};\n\n/**\n * number to hex\n * @param {number} n\n * @param {number=} len\n * @return {string}\n */\nfunction h(n, len)\n{\n    if(!n)\n    {\n        var str = \"\";\n    }\n    else\n    {\n        var str = n.toString(16);\n    }\n\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\n}\n\n\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\n{\n    let rand_data = new Int32Array(1);\n\n    v86util.has_rand_int = function()\n    {\n        return true;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        window.crypto.getRandomValues(rand_data);\n        return rand_data[0];\n    };\n}\nelse\n{\n    v86util.has_rand_int = function()\n    {\n        return false;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        console.assert(false);\n    };\n}\n\n\n/**\n * Synchronous access to ArrayBuffer\n * @constructor\n */\nfunction SyncBuffer(buffer)\n{\n    this.buffer = buffer;\n    this.byteLength = buffer.byteLength;\n    this.onload = undefined;\n    this.onprogress = undefined;\n}\n\nSyncBuffer.prototype.load = function()\n{\n    this.onload && this.onload({ buffer: this.buffer });\n};\n\n/**\n * @param {number} start\n * @param {number} len\n * @param {function(!Uint8Array)} fn\n */\nSyncBuffer.prototype.get = function(start, len, fn)\n{\n    dbg_assert(start + len <= this.byteLength);\n    fn(new Uint8Array(this.buffer, start, len));\n};\n\n/**\n * @param {number} start\n * @param {!Uint8Array} slice\n * @param {function()} fn\n */\nSyncBuffer.prototype.set = function(start, slice, fn)\n{\n    dbg_assert(start + slice.byteLength <= this.byteLength);\n\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\n    fn();\n};\n\n/**\n * @param {function(!ArrayBuffer)} fn\n */\nSyncBuffer.prototype.get_buffer = function(fn)\n{\n    fn(this.buffer);\n};\n\n\n\n(function()\n{\n    if(typeof Math.clz32 === \"function\" && Math.clz32(0) === 32 &&\n       Math.clz32(0x12345) === 15 && Math.clz32(-1) === 0)\n    {\n        /**\n         * calculate the integer logarithm base 2 of a byte\n         * @param {number} x\n         * @return {number}\n         */\n        v86util.int_log2_byte = function(x)\n        {\n            dbg_assert(x > 0);\n            dbg_assert(x < 0x100);\n\n            return 31 - Math.clz32(x);\n        };\n\n        /**\n         * calculate the integer logarithm base 2\n         * @param {number} x\n         * @return {number}\n         */\n        v86util.int_log2 = function(x)\n        {\n            dbg_assert(x > 0);\n\n            return 31 - Math.clz32(x);\n        };\n\n        return;\n    }\n\n    var int_log2_table = new Int8Array(256);\n\n    for(var i = 0, b = -2; i < 256; i++)\n    {\n        if(!(i & i - 1))\n            b++;\n\n        int_log2_table[i] = b;\n    }\n\n    /**\n     * calculate the integer logarithm base 2 of a byte\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2_byte = function(x)\n    {\n        dbg_assert(x > 0);\n        dbg_assert(x < 0x100);\n\n        return int_log2_table[x];\n    };\n\n    /**\n     * calculate the integer logarithm base 2\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2 = function(x)\n    {\n        dbg_assert(x > 0);\n\n        // http://jsperf.com/integer-log2/6\n        var tt = x >>> 16;\n\n        if(tt)\n        {\n            var t = tt >>> 8;\n            if(t)\n            {\n                return 24 + int_log2_table[t];\n            }\n            else\n            {\n                return 16 + int_log2_table[tt];\n            }\n        }\n        else\n        {\n            var t = x >>> 8;\n            if(t)\n            {\n                return 8 + int_log2_table[t];\n            }\n            else\n            {\n                return int_log2_table[x];\n            }\n        }\n    };\n})();\n\n\nv86util.mul_low = v86util.imul_low =\n    typeof Math.imul === \"function\" &&\n    Math.imul(0x01234567, 0x89abcdef) === -0x36b1b9d7 ? Math.imul : function(a, b) {\n        b |= 0;\n        return (a & 0x003fffff) * b + ((a & 0xffc00000) * b | 0) | 0;\n    };\n\n\nv86util.imul_high = function(a, b) {\n    return Math.floor(a * b / 0x100000000) | 0;\n};\n\nv86util.mul_high = function(a, b) {\n    return Math.floor((a >>> 0) * (b >>> 0) / 0x100000000) | 0;\n};\n\n/**\n * @constructor\n *\n * Queue wrapper around Uint8Array\n * Used by devices such as the PS2 controller\n */\nfunction ByteQueue(size)\n{\n    var data = new Uint8Array(size),\n        start,\n        end;\n\n    dbg_assert((size & size - 1) === 0);\n\n    this.length = 0;\n\n    this.push = function(item)\n    {\n        if(this.length === size)\n        {\n            // intentional overwrite\n        }\n        else\n        {\n            this.length++;\n        }\n\n        data[end] = item;\n        end = end + 1 & size - 1;\n    };\n\n    this.shift = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            var item = data[start];\n\n            start = start + 1 & size - 1;\n            this.length--;\n\n            return item;\n        }\n    };\n\n    this.peek = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            return data[start];\n        }\n    };\n\n    this.clear = function()\n    {\n        start = 0;\n        end = 0;\n        this.length = 0;\n    };\n\n    this.clear();\n}\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Float32Array\n * Used by devices such as the sound blaster sound card\n */\nfunction FloatQueue(size)\n{\n    this.size = size;\n    this.data = new Float32Array(size);\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n\n    dbg_assert((size & size - 1) === 0);\n}\n\nFloatQueue.prototype.push = function(item)\n{\n    if(this.length === this.size)\n    {\n        // intentional overwrite\n        this.start = this.start + 1 & this.size - 1;\n    }\n    else\n    {\n        this.length++;\n    }\n\n    this.data[this.end] = item;\n    this.end = this.end + 1 & this.size - 1;\n};\n\nFloatQueue.prototype.shift = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        var item = this.data[this.start];\n\n        this.start = this.start + 1 & this.size - 1;\n        this.length--;\n\n        return item;\n    }\n};\n\nFloatQueue.prototype.shift_block = function(count)\n{\n    var slice = new Float32Array(count);\n\n    if(count > this.length)\n    {\n        count = this.length;\n    }\n    var slice_end = this.start + count;\n\n    var partial = this.data.subarray(this.start, slice_end);\n\n    slice.set(partial);\n    if(slice_end >= this.size)\n    {\n        slice_end -= this.size;\n        slice.set(this.data.subarray(0, slice_end), partial.length);\n    }\n    this.start = slice_end;\n\n    this.length -= count;\n\n    return slice;\n};\n\nFloatQueue.prototype.peek = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        return this.data[this.start];\n    }\n};\n\nFloatQueue.prototype.clear = function()\n{\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n};\n\n\n/**\n * Simple circular queue for logs\n *\n * @param {number} size\n * @constructor\n */\nfunction CircularQueue(size)\n{\n    this.data = [];\n    this.index = 0;\n    this.size = size;\n}\n\nCircularQueue.prototype.add = function(item)\n{\n    this.data[this.index] = item;\n    this.index = (this.index + 1) % this.size;\n};\n\nCircularQueue.prototype.toArray = function()\n{\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\n};\n\nCircularQueue.prototype.clear = function()\n{\n    this.data = [];\n    this.index = 0;\n};\n\n/**\n * @param {Array} new_data\n */\nCircularQueue.prototype.set = function(new_data)\n{\n    this.data = new_data;\n    this.index = 0;\n};\n\nfunction dump_file(ab, name)\n{\n    if(!(ab instanceof Array))\n    {\n        ab = [ab];\n    }\n\n    var blob = new Blob(ab);\n    download(blob, name);\n}\n\nfunction download(file_or_blob, name)\n{\n    var a = document.createElement(\"a\");\n    a[\"download\"] = name;\n    a.href = window.URL.createObjectURL(file_or_blob);\n    a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\n\n    if(document.createEvent)\n    {\n        var ev = document.createEvent(\"MouseEvent\");\n        ev.initMouseEvent(\"click\", true, true, window,\n                          0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        a.dispatchEvent(ev);\n    }\n    else\n    {\n        a.click();\n    }\n\n    window.URL.revokeObjectURL(a.href);\n}\n","\"use strict\";\n\n// Useful documentation, articles, and source codes for reference:\n// ===============================================================\n//\n// Official Hardware Programming Guide\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n//\n// Official Yamaha YMF262 Manual\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\n//\n// OPL3 Programming Guide\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\n//\n// DOSBox\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\n//\n// QEMU\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\n//\n// VirtualBox\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\n\nvar\n\n    // Used for drivers to identify device (DSP command 0xE3).\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\n\n    // Value of the current DSP command that indicates that the\n    // next command/data write in port 2xC should be interpreted\n    // as a command number.\n/** @const */ DSP_NO_COMMAND = 0,\n\n    // Size (bytes) of the DSP write/read buffers\n/** @const */ DSP_BUFSIZE = 64,\n\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\n/** @const */ DSP_DACSIZE = 65536,\n\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\n    // stored before being processed.\n/** @const */ SB_DMA_BUFSIZE = 65536,\n\n    // Number of samples to attempt to retrieve per transfer.\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\n\n    // Usable DMA channels.\n/** @const */ SB_DMA0 = 0,\n/** @const */ SB_DMA1 = 1,\n/** @const */ SB_DMA3 = 3,\n/** @const */ SB_DMA5 = 5,\n/** @const */ SB_DMA6 = 6,\n/** @const */ SB_DMA7 = 7,\n\n    // Default DMA channels.\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\n\n    // Usable IRQ channels.\n/** @const */ SB_IRQ2 = 2,\n/** @const */ SB_IRQ5 = 5,\n/** @const */ SB_IRQ7 = 7,\n/** @const */ SB_IRQ10 = 10,\n\n    // Default IRQ channel.\n/** @const */ SB_IRQ = SB_IRQ5,\n\n    // Indices to the irq_triggered register.\n/** @const */ SB_IRQ_8BIT = 0x1,\n/** @const */ SB_IRQ_16BIT = 0x2,\n/** @const */ SB_IRQ_MIDI = 0x1,\n/** @const */ SB_IRQ_MPU = 0x4;\n\n\n// Probably less efficient, but it's more maintainable, instead\n// of having a single large unorganised and decoupled table.\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\nvar DSP_COMMAND_HANDLERS = [];\nvar MIXER_READ_HANDLERS = [];\nvar MIXER_WRITE_HANDLERS = [];\nvar MIXER_REGISTER_IS_LEGACY = new Uint8Array(256);\nvar FM_HANDLERS = [];\n\n\n/**\n * Sound Blaster 16 Emulator, or so it seems.\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction SB16(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    // I/O Buffers.\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer_lastvalue = 0;\n\n    // Current DSP command info.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    // Mixer.\n    this.mixer_current_address = 0;\n    this.mixer_registers = new Uint8Array(256);\n    this.mixer_reset();\n\n    // Dummy status and test registers.\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    // DSP state.\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    // DAC buffer.\n    // The final destination for audio data before being sent off\n    // to Web Audio APIs.\n    // Format:\n    // Floating precision linear PCM, nominal between -1 and 1.\n    this.dac_buffers = [\n      new FloatQueue(DSP_DACSIZE),\n      new FloatQueue(DSP_DACSIZE),\n    ];\n\n    // Direct Memory Access transfer info.\n    this.dma = cpu.devices.dma;\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\n    this.dma_autoinit = false;\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n    this.sampling_rate = 22050;\n    bus.send(\"dac-tell-sampling-rate\", this.sampling_rate);\n    this.bytes_per_sample = 1;\n\n    // DMA identification data.\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    // ASP data: not understood by me.\n    this.asp_registers = new Uint8Array(256);\n\n    // MPU.\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.mpu_read_buffer_lastvalue = 0;\n\n    // FM Synthesizer.\n    this.fm_current_address0 = 0;\n    this.fm_current_address1 = 0;\n    this.fm_waveform_select_enable = false;\n\n    // Interrupts.\n    this.irq = SB_IRQ;\n    this.irq_triggered = new Uint8Array(0x10);\n\n    // IO Ports.\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n\n    cpu.io.register_read_consecutive(0x220, this,\n        this.port2x0_read, this.port2x1_read, this.port2x2_read, this.port2x3_read);\n    cpu.io.register_read_consecutive(0x388, this,\n        this.port2x0_read, this.port2x1_read);\n\n    cpu.io.register_read_consecutive(0x224, this,\n        this.port2x4_read, this.port2x5_read);\n\n    cpu.io.register_read(0x226, this, this.port2x6_read);\n    cpu.io.register_read(0x227, this, this.port2x7_read);\n    cpu.io.register_read(0x228, this, this.port2x8_read);\n    cpu.io.register_read(0x229, this, this.port2x9_read);\n\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\n\n    cpu.io.register_read_consecutive(0x22E, this,\n        this.port2xE_read, this.port2xF_read);\n\n    cpu.io.register_write_consecutive(0x220, this,\n        this.port2x0_write, this.port2x1_write, this.port2x2_write, this.port2x3_write);\n    cpu.io.register_write_consecutive(0x388, this,\n        this.port2x0_write, this.port2x1_write);\n\n    cpu.io.register_write_consecutive(0x224, this,\n        this.port2x4_write, this.port2x5_write);\n\n    cpu.io.register_write(0x226, this, this.port2x6_write);\n    cpu.io.register_write(0x227, this, this.port2x7_write);\n\n    cpu.io.register_write_consecutive(0x228, this,\n        this.port2x8_write, this.port2x9_write);\n\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\n\n    cpu.io.register_read_consecutive(0x330, this, this.port3x0_read, this.port3x1_read);\n    cpu.io.register_write_consecutive(0x330, this, this.port3x0_write, this.port3x1_write);\n\n    this.dma.on_unmask(this.dma_on_unmask, this);\n\n    bus.register(\"dac-request-data\", function()\n    {\n        this.dac_handle_request();\n    }, this);\n    bus.register(\"speaker-has-initialized\", function()\n    {\n        this.mixer_reset();\n    }, this);\n    bus.send(\"speaker-confirm-initialized\");\n\n    this.dsp_reset();\n}\n\n//\n// General\n//\n\nSB16.prototype.dsp_reset = function()\n{\n    this.write_buffer.clear();\n    this.read_buffer.clear();\n\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    this.dac_buffers[0].clear();\n    this.dac_buffers[1].clear();\n\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_autoinit = false;\n    this.dma_buffer_uint8.fill(0);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    this.lower_irq(SB_IRQ_8BIT);\n    this.irq_triggered.fill(0);\n\n    this.asp_registers.fill(0);\n    this.asp_registers[5] = 0x01;\n    this.asp_registers[9] = 0xF8;\n};\n\nSB16.prototype.get_state = function()\n{\n    var state = [];\n\n    // state[0] = this.write_buffer;\n    // state[1] = this.read_buffer;\n    state[2] = this.read_buffer_lastvalue;\n\n    state[3] = this.command;\n    state[4] = this.command_size;\n\n    state[5] = this.mixer_current_address;\n    state[6] = this.mixer_registers;\n\n    state[7] = this.dummy_speaker_enabled;\n    state[8] = this.test_register;\n\n    state[9] = this.dsp_highspeed;\n    state[10] = this.dsp_stereo;\n    state[11] = this.dsp_16bit;\n    state[12] = this.dsp_signed;\n\n    // state[13] = this.dac_buffers;\n    //state[14]\n\n    state[15] = this.dma_sample_count;\n    state[16] = this.dma_bytes_count;\n    state[17] = this.dma_bytes_left;\n    state[18] = this.dma_bytes_block;\n    state[19] = this.dma_irq;\n    state[20] = this.dma_channel;\n    state[21] = this.dma_channel_8bit;\n    state[22] = this.dma_channel_16bit;\n    state[23] = this.dma_autoinit;\n    state[24] = this.dma_buffer_uint8;\n    state[25] = this.dma_waiting_transfer;\n    state[26] = this.dma_paused;\n    state[27] = this.sampling_rate;\n    state[28] = this.bytes_per_sample;\n\n    state[29] = this.e2_value;\n    state[30] = this.e2_count;\n\n    state[31] = this.asp_registers;\n\n    // state[32] = this.mpu_read_buffer;\n    state[33] = this.mpu_read_buffer_last_value;\n\n    state[34] = this.irq;\n    state[35] = this.irq_triggered;\n    //state[36]\n\n    return state;\n};\n\nSB16.prototype.set_state = function(state)\n{\n    // this.write_buffer = state[0];\n    // this.read_buffer = state[1];\n    this.read_buffer_lastvalue = state[2];\n\n    this.command = state[3];\n    this.command_size = state[4];\n\n    this.mixer_current_address = state[5];\n    this.mixer_registers = state[6];\n    this.mixer_full_update();\n\n    this.dummy_speaker_enabled = state[7];\n    this.test_register = state[8];\n\n    this.dsp_highspeed = state[9];\n    this.dsp_stereo = state[10];\n    this.dsp_16bit = state[11];\n    this.dsp_signed = state[12];\n\n    // this.dac_buffers = state[13];\n    //state[14]\n\n    this.dma_sample_count = state[15];\n    this.dma_bytes_count = state[16];\n    this.dma_bytes_left = state[17];\n    this.dma_bytes_block = state[18];\n    this.dma_irq = state[19];\n    this.dma_channel = state[20];\n    this.dma_channel_8bit = state[21];\n    this.dma_channel_16bit = state[22];\n    this.dma_autoinit = state[23];\n    this.dma_buffer_uint8 = state[24];\n    this.dma_waiting_transfer = state[25];\n    this.dma_paused = state[26];\n    this.sampling_rate = state[27];\n    this.bytes_per_sample = state[28];\n\n    this.e2_value = state[29];\n    this.e2_count = state[30];\n\n    this.asp_registers = state[31];\n\n    // this.mpu_read_buffer = state[32];\n    this.mpu_read_buffer_last_value = state[33];\n\n    this.irq = state[34];\n    this.irq_triggered = state[35];\n    //state[36];\n\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n\n    if(this.dma_paused)\n    {\n        this.bus.send(\"dac-disable\");\n    }\n    else\n    {\n        this.bus.send(\"dac-enable\");\n    }\n};\n\n//\n// I/O handlers\n//\n\nSB16.prototype.port2x0_read = function()\n{\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x1_read = function()\n{\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x2_read = function()\n{\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x3_read = function()\n{\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_read = function()\n{\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\n    return this.mixer_current_address;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_read = function()\n{\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\n    return this.mixer_read(this.mixer_current_address);\n};\n\nSB16.prototype.port2x6_read = function()\n{\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x7_read = function()\n{\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x8_read = function()\n{\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x9_read = function()\n{\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read Data.\n// Used to acces in-bound DSP data.\nSB16.prototype.port2xA_read = function()\n{\n    dbg_log(\"22A read: read data\", LOG_SB16);\n    if(this.read_buffer.length)\n    {\n        this.read_buffer_lastvalue = this.read_buffer.shift();\n    }\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\n    return this.read_buffer_lastvalue;\n};\n\nSB16.prototype.port2xB_read = function()\n{\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Write-Buffer Status.\n// Indicates whether the DSP is ready to accept commands or data.\nSB16.prototype.port2xC_read = function()\n{\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\n    // Always return ready (bit-7 set to low)\n    return 0x7F;\n};\n\nSB16.prototype.port2xD_read = function()\n{\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read-Buffer Status.\n// Indicates whether there is any in-bound data available for reading.\n// Also used to acknowledge DSP 8-bit interrupt.\nSB16.prototype.port2xE_read = function()\n{\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\n    if(this.irq_triggered[SB_IRQ_8BIT])\n    {\n        this.lower_irq(SB_IRQ_8BIT);\n    }\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\n    return (ready << 7) | 0x7F;\n};\n\n// DSP 16-bit interrupt acknowledgement.\nSB16.prototype.port2xF_read = function()\n{\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\n    this.lower_irq(SB_IRQ_16BIT);\n    return 0;\n};\n\n\n// FM Address Port - primary register.\nSB16.prototype.port2x0_write = function(value)\n{\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\n    this.fm_current_address0 = 0;\n};\n\n// FM Data Port - primary register.\nSB16.prototype.port2x1_write = function(value)\n{\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address0];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 0, this.fm_current_address0);\n};\n\n// FM Address Port - secondary register.\nSB16.prototype.port2x2_write = function(value)\n{\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\n    this.fm_current_address1 = 0;\n};\n\n// FM Data Port - secondary register.\nSB16.prototype.port2x3_write = function(value)\n{\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address1];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 1, this.fm_current_address1);\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_write = function(value)\n{\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\n    this.mixer_current_address = value;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_write = function(value)\n{\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\n    this.mixer_write(this.mixer_current_address, value);\n};\n\n// Reset.\n// Used to reset the DSP to its default state and to exit highspeed mode.\nSB16.prototype.port2x6_write = function(yesplease)\n{\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\n\n    if(this.dsp_highspeed)\n    {\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\n        this.dsp_highspeed = false;\n    }\n    else if(yesplease)\n    {\n        dbg_log(\" -> reset\", LOG_SB16);\n        this.dsp_reset();\n    }\n\n    // Signal completion.\n    this.read_buffer.clear();\n    this.read_buffer.push(0xAA);\n};\n\nSB16.prototype.port2x7_write = function(value)\n{\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2x8_write = function(value)\n{\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2x9_write = function(value)\n{\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2xA_write = function(value)\n{\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xB_write = function(value)\n{\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\n};\n\n// Write Command/Data.\n// Used to send commands or data to the DSP.\nSB16.prototype.port2xC_write = function(value)\n{\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\n\n    if(this.command === DSP_NO_COMMAND)\n    {\n        // New command.\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\n        this.command = value;\n        this.write_buffer.clear();\n        this.command_size = DSP_COMMAND_SIZES[value];\n    }\n    else\n    {\n        // More data for current command.\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\n        this.write_buffer.push(value);\n    }\n\n    // Perform command when we have all the needed data.\n    if(this.write_buffer.length >= this.command_size)\n    {\n        this.command_do();\n    }\n};\n\nSB16.prototype.port2xD_write = function(value)\n{\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2xE_write = function(value)\n{\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xF_write = function(value)\n{\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\n};\n\n\n// MPU UART Mode - Data Port\nSB16.prototype.port3x0_read = function()\n{\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\n\n    if(this.mpu_read_buffer.length)\n    {\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\n    }\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\n\n    return this.mpu_read_buffer_lastvalue;\n};\nSB16.prototype.port3x0_write = function(value)\n{\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\n};\n\n// MPU UART Mode - Status Port\nSB16.prototype.port3x1_read = function()\n{\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\n\n    var status = 0;\n    status |= 0x40 * 0; // Output Ready\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\n\n    return status;\n};\n\n// MPU UART Mode - Command Port\nSB16.prototype.port3x1_write = function(value)\n{\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\n    if(value == 0xFF)\n    {\n        // Command acknowledge.\n        this.mpu_read_buffer.clear();\n        this.mpu_read_buffer.push(0xFE);\n    }\n};\n\n//\n// DSP command handlers\n//\n\nSB16.prototype.command_do = function()\n{\n    var handler = DSP_COMMAND_HANDLERS[this.command];\n    if(!handler)\n    {\n        handler = this.dsp_default_handler;\n    }\n    handler.call(this);\n\n    // Reset Inputs.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n    this.write_buffer.clear();\n};\n\nSB16.prototype.dsp_default_handler = function()\n{\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\n};\n\n/**\n * @param {Array} commands\n * @param {number} size\n * @param {function()=} handler\n */\nfunction register_dsp_command(commands, size, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.dsp_default_handler;\n    }\n    for(var i = 0; i < commands.length; i++)\n    {\n        DSP_COMMAND_SIZES[commands[i]] = size;\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\n    }\n}\n\nfunction any_first_digit(base)\n{\n    var commands = [];\n    for(var i = 0; i < 16; i++)\n    {\n        commands.push(base + i);\n    }\n    return commands;\n}\n\n// ASP set register\nregister_dsp_command([0x0E], 2, function()\n{\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\n});\n\n// ASP get register\nregister_dsp_command([0x0F], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\n});\n\n// 8-bit direct mode single byte digitized sound output.\nregister_dsp_command([0x10], 1, function()\n{\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\n\n    this.dac_buffers[0].push(value);\n    this.dac_buffers[1].push(value);\n    this.bus.send(\"dac-enable\");\n});\n\n// 8-bit single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x14, 0x15], 2, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = false;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output.\nregister_dsp_command([0x16], 2);\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\n// with reference byte.\nregister_dsp_command([0x17], 2);\n\n// 8-bit auto-init DMA mode digitized sound output.\nregister_dsp_command([0x1C], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x1F], 0);\n\n// 8-bit direct mode single byte digitized sound input.\nregister_dsp_command([0x20], 0, function()\n{\n    // Fake silent input.\n    this.read_buffer.clear();\n    this.read_buffer.push(0x7f);\n});\n\n// 8-bit single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x24], 2);\n\n// 8-bit auto-init DMA mode digitized sound input.\nregister_dsp_command([0x2C], 0);\n\n// Polling mode MIDI input.\nregister_dsp_command([0x30], 0);\n\n// Interrupt mode MIDI input.\nregister_dsp_command([0x31], 0);\n\n// UART polling mode MIDI I/O.\nregister_dsp_command([0x34], 0);\n\n// UART interrupt mode MIDI I/O.\nregister_dsp_command([0x35], 0);\n\n// UART polling mode MIDI I/O with time stamping.\nregister_dsp_command([0x36], 0);\n\n// UART interrupt mode MIDI I/O with time stamping.\nregister_dsp_command([0x37], 0);\n\n// MIDI output.\nregister_dsp_command([0x38], 0);\n\n// Set digitized sound transfer Time Constant.\nregister_dsp_command([0x40], 1, function()\n{\n    // Note: bTimeConstant = 256 * time constant\n    this.sampling_rate_change(\n        1000000\n        / (256 - this.write_buffer.shift())\n        / this.get_channel_count()\n    );\n});\n\n// Set digitized sound output sampling rate.\n// Set digitized sound input sampling rate.\nregister_dsp_command([0x41, 0x42], 2, function()\n{\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\n});\n\n// Set DSP block transfer size.\nregister_dsp_command([0x48], 2, function()\n{\n    // TODO: should be in bytes, but if this is only used\n    // for 8 bit transfers, then this number is the same\n    // as number of samples?\n    // Wrong: e.g. stereo requires two bytes per sample.\n    this.dma_transfer_size_set();\n});\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x74], 2);\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x75], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x76], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x77], 2);\n\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7D], 0);\n\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7F], 0);\n\n// Pause DAC for a duration.\nregister_dsp_command([0x80], 2);\n\n// 8-bit high-speed auto-init DMA mode digitized sound output.\nregister_dsp_command([0x90], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_highspeed = true;\n    this.dsp_16bit = false;\n    this.dma_transfer_start();\n});\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x91], 0);\n\n// 8-bit high-speed auto-init DMA mode digitized sound input.\nregister_dsp_command([0x98], 0);\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x99], 0);\n\n// Set input mode to mono.\nregister_dsp_command([0xA0], 0);\n\n// Set input mode to stereo.\nregister_dsp_command([0xA8], 0);\n\n// Program 16-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xB0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_16BIT;\n    this.dma_channel = this.dma_channel_16bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = true;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Program 8-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xC0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Pause 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD0], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"dac-disable\");\n});\n\n// Turn on speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD1], 0, function()\n{\n    this.dummy_speaker_enabled = true;\n});\n\n// Turn off speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD3], 0, function()\n{\n    this.dummy_speaker_enabled = false;\n});\n\n// Continue 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD4], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n});\n\n// Pause 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD5], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"dac-disable\");\n});\n\n// Continue 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD6], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n});\n\n// Get speaker status.\nregister_dsp_command([0xD8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\n});\n\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\n// Exit 8-bit auto-init mode digitized sound I/O.\nregister_dsp_command([0xD9, 0xDA], 0, function()\n{\n    this.dma_autoinit = false;\n});\n\n// DSP identification\nregister_dsp_command([0xE0], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(~this.write_buffer.shift());\n});\n\n// Get DSP version number.\nregister_dsp_command([0xE1], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(4);\n    this.read_buffer.push(5);\n});\n\n// DMA identification.\nregister_dsp_command([0xE2], 1);\n\n// Get DSP copyright.\nregister_dsp_command([0xE3], 0, function()\n{\n    this.read_buffer.clear();\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\n    {\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\n    }\n    // Null terminator.\n    this.read_buffer.push(0);\n});\n\n// Write test register.\nregister_dsp_command([0xE4], 1, function()\n{\n    this.test_register = this.write_buffer.shift();\n});\n\n// Read test register.\nregister_dsp_command([0xE8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.test_register);\n});\n\n// Trigger IRQ\nregister_dsp_command([0xF2, 0xF3], 0, function()\n{\n    this.raise_irq();\n});\n\n// ASP - unknown function\nvar SB_F9 = new Uint8Array(256);\nSB_F9[0x0E] = 0xFF;\nSB_F9[0x0F] = 0x07;\nSB_F9[0x37] = 0x38;\nregister_dsp_command([0xF9], 1, function()\n{\n    var input = this.write_buffer.shift();\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\n\n    this.read_buffer.clear();\n    this.read_buffer.push(SB_F9[input]);\n});\n\n//\n// Mixer Handlers (CT1745)\n//\n\nSB16.prototype.mixer_read = function(address)\n{\n    var handler = MIXER_READ_HANDLERS[address];\n    var data;\n    if(handler)\n    {\n        data = handler.call(this);\n    }\n    else\n    {\n        data = this.mixer_registers[address];\n        dbg_log(\"unhandled mixer register read. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    }\n    return data;\n};\n\nSB16.prototype.mixer_write = function(address, data)\n{\n    var handler = MIXER_WRITE_HANDLERS[address];\n    if(handler)\n    {\n        handler.call(this, data);\n    }\n    else\n    {\n        dbg_log(\"unhandled mixer register write. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    }\n};\n\nSB16.prototype.mixer_default_read = function()\n{\n    dbg_log(\"mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\n    return this.mixer_registers[this.mixer_current_address];\n};\n\nSB16.prototype.mixer_default_write = function(data)\n{\n    dbg_log(\"mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\n    this.mixer_registers[this.mixer_current_address] = data;\n};\n\nSB16.prototype.mixer_reset = function()\n{\n    // Values intentionally in decimal.\n    // Default values available at\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n    this.mixer_registers[0x04] = 12 << 4 | 12;\n    this.mixer_registers[0x22] = 12 << 4 | 12;\n    this.mixer_registers[0x26] = 12 << 4 | 12;\n    this.mixer_registers[0x28] = 0;\n    this.mixer_registers[0x2E] = 0;\n    this.mixer_registers[0x0A] = 0;\n    this.mixer_registers[0x30] = 24 << 3;\n    this.mixer_registers[0x31] = 24 << 3;\n    this.mixer_registers[0x32] = 24 << 3;\n    this.mixer_registers[0x33] = 24 << 3;\n    this.mixer_registers[0x34] = 24 << 3;\n    this.mixer_registers[0x35] = 24 << 3;\n    this.mixer_registers[0x36] = 0;\n    this.mixer_registers[0x37] = 0;\n    this.mixer_registers[0x38] = 0;\n    this.mixer_registers[0x39] = 0;\n    this.mixer_registers[0x3B] = 0;\n    this.mixer_registers[0x3C] = 0x1F;\n    this.mixer_registers[0x3D] = 0x15;\n    this.mixer_registers[0x3E] = 0x0B;\n    this.mixer_registers[0x3F] = 0;\n    this.mixer_registers[0x40] = 0;\n    this.mixer_registers[0x41] = 0;\n    this.mixer_registers[0x42] = 0;\n    this.mixer_registers[0x43] = 0;\n    this.mixer_registers[0x44] = 8 << 4;\n    this.mixer_registers[0x45] = 8 << 4;\n    this.mixer_registers[0x46] = 8 << 4;\n    this.mixer_registers[0x47] = 8 << 4;\n\n    this.mixer_full_update();\n};\n\nSB16.prototype.mixer_full_update = function()\n{\n    // Start at 1. Don't re-reset.\n    for(var i = 1; i < this.mixer_registers.length; i++)\n    {\n        if(MIXER_REGISTER_IS_LEGACY[i])\n        {\n            // Legacy registers are actually mapped to other register locations. Update\n            // using the new registers rather than the legacy registers.\n            continue;\n        }\n        this.mixer_write(i, this.mixer_registers[i]);\n    }\n};\n\n/**\n * @param{number} address\n * @param{function():number=} handler\n */\nfunction register_mixer_read(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_read;\n    }\n    MIXER_READ_HANDLERS[address] = handler;\n}\n\n/**\n * @param{number} address\n * @param{function(number)=} handler\n */\nfunction register_mixer_write(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_write;\n    }\n    MIXER_WRITE_HANDLERS[address] = handler;\n}\n\n// Legacy registers map each nibble to the last 4 bits of the new registers\nfunction register_mixer_legacy(address_old, address_new_left, address_new_right)\n{\n    MIXER_REGISTER_IS_LEGACY[address_old] = 1;\n\n    /** @this {SB16} */\n    MIXER_READ_HANDLERS[address_old] = function()\n    {\n        var left = this.mixer_registers[address_new_left] & 0xF0;\n        var right = this.mixer_registers[address_new_right] >>> 4;\n        return left | right;\n    };\n\n    /** @this {SB16} */\n    MIXER_WRITE_HANDLERS[address_old] = function(data)\n    {\n        this.mixer_registers[address_old] = data;\n        var prev_left = this.mixer_registers[address_new_left];\n        var prev_right = this.mixer_registers[address_new_right];\n        var left = (data & 0xF0) | (prev_left & 0x0F);\n        var right = (data << 4 & 0xF0) | (prev_right & 0x0F);\n\n        this.mixer_write(address_new_left, left);\n        this.mixer_write(address_new_right, right);\n    };\n}\n\n/**\n * @param {number} address\n * @param {number} mixer_source\n * @param {number} channel\n */\nfunction register_mixer_volume(address, mixer_source, channel)\n{\n    MIXER_READ_HANDLERS[address] = SB16.prototype.mixer_default_read;\n\n    /** @this {SB16} */\n    MIXER_WRITE_HANDLERS[address] = function(data)\n    {\n        this.mixer_registers[address] = data;\n        this.bus.send(\"mixer-volume\",\n        [\n            mixer_source,\n            channel,\n            (data >>> 2) - 62\n        ]);\n    };\n}\n\n// Reset.\nregister_mixer_read(0x00, function()\n{\n    this.mixer_reset();\n    return 0;\n});\nregister_mixer_write(0x00);\n\n// Legacy Voice Volume Left/Right.\nregister_mixer_legacy(0x04, 0x32, 0x33);\n\n// Legacy Mic Volume. TODO.\n//register_mixer_read(0x0A);\n//register_mixer_write(0x0A, function(data)\n//{\n//    this.mixer_registers[0x0A] = data;\n//    var prev = this.mixer_registers[0x3A];\n//    this.mixer_write(0x3A, data << 5 | (prev & 0x0F));\n//});\n\n// Legacy Master Volume Left/Right.\nregister_mixer_legacy(0x22, 0x30, 0x31);\n// Legacy Midi Volume Left/Right.\nregister_mixer_legacy(0x26, 0x34, 0x35);\n// Legacy CD Volume Left/Right.\nregister_mixer_legacy(0x28, 0x36, 0x37);\n// Legacy Line Volume Left/Right.\nregister_mixer_legacy(0x2E, 0x38, 0x39);\n\n// Master Volume Left.\nregister_mixer_volume(0x30, MIXER_SRC_MASTER, MIXER_CHANNEL_LEFT);\n// Master Volume Right.\nregister_mixer_volume(0x31, MIXER_SRC_MASTER, MIXER_CHANNEL_RIGHT);\n// Voice Volume Left.\nregister_mixer_volume(0x32, MIXER_SRC_DAC, MIXER_CHANNEL_LEFT);\n// Voice Volume Right.\nregister_mixer_volume(0x33, MIXER_SRC_DAC, MIXER_CHANNEL_RIGHT);\n// MIDI Volume Left. TODO.\n//register_mixer_volume(0x34, MIXER_SRC_SYNTH, MIXER_CHANNEL_LEFT);\n// MIDI Volume Right. TODO.\n//register_mixer_volume(0x35, MIXER_SRC_SYNTH, MIXER_CHANNEL_RIGHT);\n// CD Volume Left. TODO.\n//register_mixer_volume(0x36, MIXER_SRC_CD, MIXER_CHANNEL_LEFT);\n// CD Volume Right. TODO.\n//register_mixer_volume(0x37, MIXER_SRC_CD, MIXER_CHANNEL_RIGHT);\n// Line Volume Left. TODO.\n//register_mixer_volume(0x38, MIXER_SRC_LINE, MIXER_CHANNEL_LEFT);\n// Line Volume Right. TODO.\n//register_mixer_volume(0x39, MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT);\n// Mic Volume. TODO.\n//register_mixer_volume(0x3A, MIXER_SRC_MIC, MIXER_CHANNEL_BOTH);\n\n// PC Speaker Volume.\nregister_mixer_read(0x3B);\nregister_mixer_write(0x3B, function(data)\n{\n    this.mixer_registers[0x3B] = data;\n    this.bus.send(\"mixer-volume\", [MIXER_SRC_PCSPEAKER, MIXER_CHANNEL_BOTH, (data >>> 6) * 6 - 18]);\n});\n\n// Output Mixer Switches. TODO.\n//register_mixer_read(0x3C);\n//register_mixer_write(0x3C, function(data)\n//{\n//    this.mixer_registers[0x3C] = data;\n//\n//    if(data & 0x01) this.bus.send(\"mixer-connect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\n//\n//    if(data & 0x02) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\n//\n//    if(data & 0x04) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\n//\n//    if(data & 0x08) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\n//\n//    if(data & 0x10) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\n//});\n\n// Input Mixer Left Switches. TODO.\n//register_mixer_read(0x3D);\n//register_mixer_write(0x3D);\n\n// Input Mixer Right Switches. TODO.\n//register_mixer_read(0x3E);\n//register_mixer_write(0x3E);\n\n// Input Gain Left. TODO.\n//register_mixer_read(0x3F);\n//register_mixer_write(0x3F);\n\n// Input Gain Right. TODO.\n//register_mixer_read(0x40);\n//register_mixer_write(0x40);\n\n// Output Gain Left.\nregister_mixer_read(0x41);\nregister_mixer_write(0x41, function(data)\n{\n    this.mixer_registers[0x41] = data;\n    this.bus.send(\"mixer-gain-left\", (data >>> 6) * 6);\n});\n\n// Output Gain Right.\nregister_mixer_read(0x42);\nregister_mixer_write(0x42, function(data)\n{\n    this.mixer_registers[0x42] = data;\n    this.bus.send(\"mixer-gain-right\", (data >>> 6) * 6);\n});\n\n// Mic AGC. TODO.\n//register_mixer_read(0x43);\n//register_mixer_write(0x43);\n\n// Treble Left.\nregister_mixer_read(0x44);\nregister_mixer_write(0x44, function(data)\n{\n    this.mixer_registers[0x44] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-treble-left\", data - (data < 16 ? 14 : 16));\n});\n\n// Treble Right.\nregister_mixer_read(0x45);\nregister_mixer_write(0x45, function(data)\n{\n    this.mixer_registers[0x45] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-treble-right\", data - (data < 16 ? 14 : 16));\n});\n\n// Bass Left.\nregister_mixer_read(0x46);\nregister_mixer_write(0x46, function(data)\n{\n    this.mixer_registers[0x46] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\n});\n\n// Bass Right.\nregister_mixer_read(0x47);\nregister_mixer_write(0x47, function(data)\n{\n    this.mixer_registers[0x47] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\n});\n\n// IRQ Select.\nregister_mixer_read(0x80, function()\n{\n    switch(this.irq)\n    {\n        case SB_IRQ2: return 0x1;\n        case SB_IRQ5: return 0x2;\n        case SB_IRQ7: return 0x4;\n        case SB_IRQ10: return 0x8;\n        default: return 0x0;\n    }\n});\nregister_mixer_write(0x80, function(bits)\n{\n    if(bits & 0x1) this.irq = SB_IRQ2;\n    if(bits & 0x2) this.irq = SB_IRQ5;\n    if(bits & 0x4) this.irq = SB_IRQ7;\n    if(bits & 0x8) this.irq = SB_IRQ10;\n});\n\n// DMA Select.\nregister_mixer_read(0x81, function()\n{\n    var ret = 0;\n    switch(this.dma_channel_8bit)\n    {\n        case SB_DMA0: ret |= 0x1; break;\n        case SB_DMA1: ret |= 0x2; break;\n        // Channel 2 is hardwired to floppy disk.\n        case SB_DMA3: ret |= 0x8; break;\n    }\n    switch(this.dma_channel_16bit)\n    {\n        // Channel 4 cannot be used.\n        case SB_DMA5: ret |= 0x20; break;\n        case SB_DMA6: ret |= 0x40; break;\n        case SB_DMA7: ret |= 0x80; break;\n    }\n    return ret;\n});\nregister_mixer_write(0x81, function(bits)\n{\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\n});\n\n// IRQ Status.\nregister_mixer_read(0x82, function()\n{\n    var ret = 0x20;\n    for(var i = 0; i < 16; i++)\n    {\n        ret |= i * this.irq_triggered[i];\n    }\n    return ret;\n});\n\n//\n// FM Handlers\n//\n\nSB16.prototype.fm_default_write = function(data, register, address)\n{\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    // No need to save into a dummy register as the registers are write-only.\n};\n\n/**\n * @param{Array} addresses\n * @param{function(number, number, number)=} handler\n */\nfunction register_fm_write(addresses, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.fm_default_write;\n    }\n    for(var i = 0; i < addresses.length; i++)\n    {\n        FM_HANDLERS[addresses[i]] = handler;\n    }\n}\n\nfunction between(start, end)\n{\n    var a = [];\n    for(var i = start; i <= end; i++)\n    {\n        a.push(i);\n    }\n    return a;\n}\n\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\n\nfunction get_fm_operator(register, offset)\n{\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\n}\n\nregister_fm_write([0x01], function(bits, register, address)\n{\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\n    this.fm_update_waveforms();\n});\n\n// Timer 1 Count.\nregister_fm_write([0x02]);\n\n// Timer 2 Count.\nregister_fm_write([0x03]);\n\nregister_fm_write([0x04], function(bits, register, address)\n{\n    switch(register)\n    {\n        case 0:\n            // if(bits & 0x80)\n            // {\n            //     // IQR Reset\n            // }\n            // else\n            // {\n            //     // Timer masks and on/off\n            // }\n            break;\n        case 1:\n            // Four-operator enable\n            break;\n    }\n});\n\nregister_fm_write([0x05], function(bits, register, address)\n{\n    if(register === 0)\n    {\n        // No registers documented here.\n        this.fm_default_write(bits, register, address);\n        return;\n    }\n    // OPL3 Mode Enable\n});\n\nregister_fm_write([0x08], function(bits, register, address)\n{\n    // Composite sine wave on/off\n    // Note select (keyboard split selection method)\n});\n\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x20);\n    // Tremolo\n    // Vibrato\n    // Sustain\n    // KSR Envelope Scaling\n    // Frequency Multiplication Factor\n});\n\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x40);\n    // Key Scale Level\n    // Output Level\n});\n\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x60);\n    // Attack Rate\n    // Decay Rate\n});\n\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x80);\n    // Sustain Level\n    // Release Rate\n});\n\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\n{\n    var channel = address - 0xA0;\n    // Frequency Number (Lower 8 bits)\n});\n\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\n{\n    // Key-On\n    // Block Number\n    // Frequency Number (Higher 2 bits)\n});\n\nregister_fm_write([0xBD], function(bits, register, address)\n{\n    // Tremelo Depth\n    // Vibrato Depth\n    // Percussion Mode\n    // Bass Drum Key-On\n    // Snare Drum Key-On\n    // Tom-Tom Key-On\n    // Cymbal Key-On\n    // Hi-Hat Key-On\n});\n\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\n{\n    // Right Speaker Enable\n    // Left Speaker Enable\n    // Feedback Modulation Factor\n    // Synthesis Type\n});\n\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0xE0);\n    // Waveform Select\n});\n\n//\n// FM behaviours\n//\n\nSB16.prototype.fm_update_waveforms = function()\n{\n    // To be implemented.\n};\n\n//\n// General behaviours\n//\n\nSB16.prototype.sampling_rate_change = function(rate)\n{\n    this.sampling_rate = rate;\n    this.bus.send(\"dac-tell-sampling-rate\", rate);\n};\n\nSB16.prototype.get_channel_count = function()\n{\n    return this.dsp_stereo ? 2 : 1;\n};\n\nSB16.prototype.dma_transfer_size_set = function()\n{\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\n};\n\nSB16.prototype.dma_transfer_start = function()\n{\n    dbg_log(\"begin dma transfer\", LOG_SB16);\n\n    // (1) Setup appropriate settings.\n\n    this.bytes_per_sample = 1;\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\n\n    // Don't count stereo interleaved bits apparently.\n    // Disabling this line is needed for sounds to work correctly,\n    // especially double buffering autoinit mode.\n    // Learnt the hard way.\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\n\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\n\n    // Ensure block size is small enough but not too small, and is divisible by 4\n    var max_bytes_block = Math.max(this.dma_bytes_count >> 2 & ~0x3, 32);\n    this.dma_bytes_block = Math.min(max_bytes_block, this.dma_bytes_block);\n\n    // (2) Wait until channel is unmasked (if not already)\n    this.dma_waiting_transfer = true;\n    if(!this.dma.channel_mask[this.dma_channel])\n    {\n        this.dma_on_unmask(this.dma_channel);\n    }\n};\n\nSB16.prototype.dma_on_unmask = function(channel)\n{\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\n    {\n        return;\n    }\n\n    // (3) Configure amount of bytes left to transfer and tell speaker adapter\n    // to start requesting transfers\n    this.dma_waiting_transfer = false;\n    this.dma_bytes_left = this.dma_bytes_count;\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n};\n\nSB16.prototype.dma_transfer_next = function()\n{\n    dbg_log(\"dma transfering next block\", LOG_SB16);\n\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\n    var samples = Math.floor(size / this.bytes_per_sample);\n\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\n    {\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\n        if(error) return;\n\n        this.dma_to_dac(samples);\n        this.dma_bytes_left -= size;\n\n        if(!this.dma_bytes_left)\n        {\n            // Completed requested transfer of given size.\n            this.raise_irq(this.dma_irq);\n\n            if(this.dma_autoinit)\n            {\n                // Restart the transfer.\n                this.dma_bytes_left = this.dma_bytes_count;\n            }\n        }\n    });\n};\n\nSB16.prototype.dma_to_dac = function(sample_count)\n{\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\n    var offset = this.dsp_signed ? 0 : -1;\n    var repeats = this.dsp_stereo ? 1 : 2;\n\n    var buffer;\n    if(this.dsp_16bit)\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\n    }\n    else\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\n    }\n\n    var channel = 0;\n    for(var i = 0; i < sample_count; i++)\n    {\n        var sample = audio_normalize(buffer[i], amplitude, offset);\n        for(var j = 0; j < repeats; j++)\n        {\n            this.dac_buffers[channel].push(sample);\n            channel ^= 1;\n        }\n    }\n\n    this.dac_send();\n};\n\nSB16.prototype.dac_handle_request = function()\n{\n    if(!this.dma_bytes_left || this.dma_paused)\n    {\n        // No more data to transfer or is paused. Send whatever is in the buffers.\n        this.dac_send();\n    }\n    else\n    {\n        this.dma_transfer_next();\n    }\n};\n\nSB16.prototype.dac_send = function()\n{\n    if(!this.dac_buffers[0].length)\n    {\n        return;\n    }\n\n    var out0 = this.dac_buffers[0].shift_block(this.dac_buffers[0].length);\n    var out1 = this.dac_buffers[1].shift_block(this.dac_buffers[1].length);\n    this.bus.send(\"dac-send-data\", [out0, out1], [out0.buffer, out1.buffer]);\n};\n\nSB16.prototype.raise_irq = function(type)\n{\n    dbg_log(\"raise irq\", LOG_SB16);\n    this.irq_triggered[type] = 1;\n    this.cpu.device_raise_irq(this.irq);\n};\n\nSB16.prototype.lower_irq = function(type)\n{\n    dbg_log(\"lower irq\", LOG_SB16);\n    this.irq_triggered[type] = 0;\n    this.cpu.device_lower_irq(this.irq);\n};\n\n//\n// Helpers\n//\n\nfunction audio_normalize(value, amplitude, offset)\n{\n    return audio_clip(value / amplitude + offset, -1, 1);\n}\n\nfunction audio_clip(value, low, high)\n{\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\n}\n","\"use strict\";\n\n/** @const */\nvar FPU_LOG_OP = false;\n\nvar\n    /** @const */\n    FPU_C0 = 0x100,\n    /** @const */\n    FPU_C1 = 0x200,\n    /** @const */\n    FPU_C2 = 0x400,\n    /** @const */\n    FPU_C3 = 0x4000,\n    /** @const */\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\n    /** @const */\n    FPU_STACK_TOP = 0x3800;\n\nvar\n    // precision, round & infinity control\n    /** @const */\n    FPU_PC = 3 << 8,\n    /** @const */\n    FPU_RC = 3 << 10,\n    /** @const */\n    FPU_IF = 1 << 12;\n\n// exception bits in the status word\nvar\n    /** @const */\n    FPU_EX_SF = 1 << 6,\n    /** @const */\n    FPU_EX_P = 1 << 5,\n    /** @const */\n    FPU_EX_U = 1 << 4,\n    /** @const */\n    FPU_EX_O = 1 << 3,\n    /** @const */\n    FPU_EX_Z = 1 << 2,\n    /** @const */\n    FPU_EX_D = 1 << 1,\n    /** @const */\n    FPU_EX_I = 1 << 0;\n\nvar\n    /** @const */\n    TWO_POW_63 =  0x8000000000000000;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction FPU(cpu)\n{\n    // TODO:\n    // - Precision Control\n    // - QNaN, unordered comparison\n    // - Exceptions\n\n    this.cpu = cpu;\n\n    // Why no Float80Array :-(\n    this.st = new Float64Array(8);\n\n    // used for conversion\n    /** @const */ this.float32 = new Float32Array(1);\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\n    /** @const */ this.float64 = new Float64Array(1);\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\n\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\n\n\n    // bitmap of which stack registers are empty\n    this.stack_empty = 0xff;\n    this.stack_ptr = 0;\n\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_ip_selector = 0;\n    this.fpu_opcode = 0;\n    this.fpu_dp = 0;\n    this.fpu_dp_selector = 0;\n\n    /** @const */\n    this.indefinite_nan = NaN;\n\n    /** @const */\n    this.constants = new Float64Array([\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\n        Math.log(2) / Math.LN10, Math.LN2, 0\n    ]);\n\n}\n\nFPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.st;\n    state[1] = this.stack_empty;\n    state[2] = this.stack_ptr;\n    state[3] = this.control_word;\n    state[4] = this.fpu_dp_selector;\n    state[5] = this.fpu_ip;\n    state[6] = this.fpu_ip_selector;\n    state[7] = this.fpu_dp;\n    state[8] = this.fpu_dp_selector;\n    state[9] = this.fpu_opcode;\n\n    return state;\n};\n\nFPU.prototype.set_state = function(state)\n{\n    this.st.set(state[0]);\n    this.stack_empty = state[1];\n    this.stack_ptr = state[2];\n    this.control_word = state[3];\n    this.fpu_dp_selector = state[4];\n    this.fpu_ip = state[5];\n    this.fpu_ip_selector = state[6];\n    this.fpu_dp = state[7];\n    this.fpu_dp_selector = state[8];\n    this.fpu_opcode = state[9];\n};\n\nFPU.prototype.fpu_unimpl = function()\n{\n    dbg_trace();\n    if(DEBUG) throw \"fpu: unimplemented\";\n    else this.cpu.trigger_ud();\n}\n\nFPU.prototype.stack_fault = function()\n{\n    // TODO: Interrupt\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\n}\n\nFPU.prototype.invalid_arithmatic = function()\n{\n    this.status_word |= FPU_EX_I;\n}\n\nFPU.prototype.fcom = function(y)\n{\n    var x = this.get_st0();\n\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === y)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else\n    {\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\n    }\n}\n\nFPU.prototype.fucom = function(y)\n{\n    // TODO\n    this.fcom(y);\n}\n\n\nFPU.prototype.fcomi = function(y)\n{\n    var x = this.st[this.stack_ptr];\n\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        this.cpu.flags |= flag_zero;\n    }\n    else\n    {\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\n    }\n}\n\nFPU.prototype.fucomi = function(y)\n{\n    // TODO\n    this.fcomi(y);\n}\n\nFPU.prototype.ftst = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(isNaN(x))\n    {\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x < 0)\n    {\n        this.status_word |= FPU_C0;\n    }\n\n    // TODO: unordered (x is nan, etc)\n}\n\nFPU.prototype.fxam = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n    this.status_word |= this.sign(0) << 9;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word |= FPU_C3 | FPU_C0;\n    }\n    else if(isNaN(x))\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x === Infinity || x === -Infinity)\n    {\n        this.status_word |= FPU_C2 | FPU_C0;\n    }\n    else\n    {\n        this.status_word |= FPU_C2;\n    }\n    // TODO:\n    // Unsupported, Denormal\n}\n\nFPU.prototype.finit = function()\n{\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_dp = 0;\n    this.fpu_opcode = 0;\n\n    this.stack_empty = 0xFF;\n    this.stack_ptr = 0;\n}\n\nFPU.prototype.load_status_word = function()\n{\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\n}\n\nFPU.prototype.set_status_word = function(sw)\n{\n    this.status_word = sw & ~(7 << 11);\n    this.stack_ptr = sw >> 11 & 7;\n}\n\nFPU.prototype.load_tag_word = function()\n{\n    var tag_word = 0,\n        value;\n\n    for(var i = 0; i < 8; i++)\n    {\n        value = this.st[i];\n\n        if(this.stack_empty >> i & 1)\n        {\n            tag_word |= 3 << (i << 1);\n        }\n        else if(value === 0)\n        {\n            tag_word |= 1 << (i << 1);\n        }\n        else if(!isFinite(value))\n        {\n            tag_word |= 2 << (i << 1);\n        }\n    }\n\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\n\n    return tag_word;\n}\n\nFPU.prototype.set_tag_word = function(tag_word)\n{\n    this.stack_empty = 0;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\n    }\n\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\n}\n\nFPU.prototype.fstenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.cpu.writable_or_pagefault(addr, 26);\n\n        this.cpu.safe_write16(addr, this.control_word);\n\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\n\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fldenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.control_word = this.cpu.safe_read16(addr);\n\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\n\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fsave = function(addr)\n{\n    this.cpu.writable_or_pagefault(addr, 108);\n\n    this.fstenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\n        addr += 10;\n    }\n\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n\n    this.finit();\n}\n\nFPU.prototype.frstor = function(addr)\n{\n    this.fldenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\n        addr += 10;\n    }\n\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n}\n\nFPU.prototype.fxtract = function()\n{\n    this.float64[0] = this.get_st0();\n\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\n\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\n    this.float64_byte[6] |= 0xF0;\n\n    this.st[this.stack_ptr] = exponent;\n    this.push(this.float64[0]);\n};\n\nFPU.prototype.integer_round = function(f)\n{\n    var rc = this.control_word >> 10 & 3;\n    return this.cpu.integer_round(f, rc);\n}\n\nFPU.prototype.truncate = function(x)\n{\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nFPU.prototype.push = function(x)\n{\n    this.stack_ptr = this.stack_ptr - 1 & 7;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_empty &= ~(1 << this.stack_ptr);\n        this.st[this.stack_ptr] = x;\n    }\n    else\n    {\n        this.status_word |= FPU_C1;\n        this.stack_fault();\n        this.st[this.stack_ptr] = this.indefinite_nan;\n    }\n}\n\nFPU.prototype.pop = function()\n{\n    this.stack_empty |= 1 << this.stack_ptr;\n    this.stack_ptr = this.stack_ptr + 1 & 7;\n}\n\nFPU.prototype.get_sti = function(i)\n{\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\n\n    i = i + this.stack_ptr & 7;\n\n    if(this.stack_empty >> i & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[i];\n    }\n}\n\nFPU.prototype.get_st0 = function()\n{\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[this.stack_ptr];\n    }\n}\n\nFPU.prototype.load_m80 = function(addr)\n{\n    var exponent = this.cpu.safe_read16(addr + 8),\n        sign,\n        low = this.cpu.safe_read32s(addr) >>> 0,\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\n\n    sign = exponent >> 15;\n    exponent &= ~0x8000;\n\n    if(exponent === 0)\n    {\n        // TODO: denormal numbers\n        return 0;\n    }\n\n    if(exponent < 0x7FFF)\n    {\n        exponent -= 0x3FFF;\n    }\n    else\n    {\n        // TODO: NaN, Infinity\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\n        this.float64_byte[7] = 0x7F | sign << 7;\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\n\n        this.float64_byte[5] = 0;\n        this.float64_byte[4] = 0;\n\n        this.float64_int[0] = 0;\n\n        return this.float64[0];\n    }\n\n    // Note: some bits might be lost at this point\n    var mantissa = low + 0x100000000 * high;\n\n    if(sign)\n    {\n        mantissa = -mantissa;\n    }\n\n    //console.log(\"m: \" + mantissa);\n    //console.log(\"e: \" + exponent);\n    //console.log(\"s: \" + this.sign);\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\n\n    // Simply compute the 64 bit floating point number.\n    // An alternative write the mantissa, sign and exponent in the\n    // float64_byte and return float64[0]\n\n    return mantissa * Math.pow(2, exponent - 63);\n}\n\nFPU.prototype.store_m80 = function(addr, n)\n{\n    this.float64[0] = n;\n\n    var sign = this.float64_byte[7] & 0x80,\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\n        low,\n        high;\n\n    if(exponent === 0x7FF)\n    {\n        // all bits set (NaN and infinity)\n        exponent = 0x7FFF;\n        low = 0;\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\n    }\n    else if(exponent === 0)\n    {\n        // zero and denormal numbers\n        // Just assume zero for now\n        low = 0;\n        high = 0;\n    }\n    else\n    {\n        exponent += 0x3FFF - 0x3FF;\n\n        // does the mantissa need to be adjusted?\n        low = this.float64_int[0] << 11;\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\n    }\n\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\n\n    this.cpu.safe_write32(addr, low);\n    this.cpu.safe_write32(addr + 4, high);\n\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\n}\n\nFPU.prototype.load_m64 = function(addr)\n{\n    var low = this.cpu.safe_read32s(addr),\n        high = this.cpu.safe_read32s(addr + 4);\n\n    this.float64_int[0] = low;\n    this.float64_int[1] = high;\n\n    return this.float64[0];\n};\n\nFPU.prototype.store_m64 = function(addr, i)\n{\n    this.cpu.writable_or_pagefault(addr, 8);\n\n    this.float64[0] = this.get_sti(i);\n\n    this.cpu.safe_write32(addr, this.float64_int[0]);\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\n};\n\nFPU.prototype.load_m32 = function(addr)\n{\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\n\n    return this.float32[0];\n};\n\nFPU.prototype.store_m32 = function(addr, x)\n{\n    this.float32[0] = x;\n\n    this.cpu.safe_write32(addr, this.float32_int[0]);\n};\n\n// sign of a number on the stack\nFPU.prototype.sign = function(i)\n{\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\n};\n\n\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\n{\n    if(!FPU_LOG_OP)\n    {\n        return;\n    }\n\n    if(imm8 >= 0xC0)\n    {\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n    else\n    {\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n}\n\n\nFPU.prototype.fwait = function()\n{\n    // NOP unless FPU instructions run in parallel with CPU instructions\n};\n\n\nFPU.prototype.op_D8_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + sti;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * sti;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D8_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.load_m32(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var sti = this.get_sti(low);\n            this.push(sti);\n            break;\n        case 1:\n            // fxch\n            var sti = this.get_sti(low);\n\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            this.st[this.stack_ptr] = sti;\n            break;\n        case 2:\n            switch(low)\n            {\n                case 0:\n                    // fnop\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 3:\n            // fstp1\n            this.fpu_unimpl();\n            break;\n        case 4:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fchs\n                    this.st[this.stack_ptr] = -st0;\n                    break;\n                case 1:\n                    // fabs\n                    this.st[this.stack_ptr] = Math.abs(st0);\n                    break;\n                case 4:\n                    this.ftst(st0);\n                    break;\n                case 5:\n                    this.fxam(st0);\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.push(this.constants[low]);\n            break;\n        case 6:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // f2xm1\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\n                    break;\n                case 1:\n                    // fyl2x\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    // fptan\n                    this.st[this.stack_ptr] = Math.tan(st0);\n                    this.push(1); // no bug: push constant 1\n                    break;\n                case 3:\n                    // fpatan\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\n                    this.pop();\n                    break;\n                case 4:\n                    this.fxtract();\n                    break;\n                case 5:\n                    // fprem1\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\n                    break;\n                case 6:\n                    // fdecstp\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                case 7:\n                    // fincstp\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        case 7:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fprem\n                    var st1 = this.get_sti(1);\n                    var fprem_quotient = Math.trunc(st0 / st1);\n                    this.st[this.stack_ptr] = st0 % st1;\n\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\n                    if (fprem_quotient & 1) {\n                        this.status_word |= FPU_C1;\n                    }\n                    if (fprem_quotient & (1 << 1)) {\n                        this.status_word |= FPU_C3;\n                    }\n                    if (fprem_quotient & (1 << 2)) {\n                        this.status_word |= FPU_C0;\n                    }\n\n                    this.status_word &= ~FPU_C2;\n                    break;\n                case 1:\n                    // fyl2xp1: y * log2(x+1) and pop\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\n                    break;\n                case 3:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    this.push(Math.cos(st0));\n                    break;\n                case 4:\n                    // frndint\n                    this.st[this.stack_ptr] = this.integer_round(st0);\n                    break;\n                case 5:\n                    // fscale\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\n                    break;\n                case 6:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    break;\n                case 7:\n                    this.st[this.stack_ptr] = Math.cos(st0);\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m32(addr);\n            this.push(data);\n            break;\n        case 1:\n            // not defined\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m32(addr, this.get_st0());\n            break;\n        case 3:\n            // fstp\n            this.store_m32(addr, this.get_st0());\n            this.pop();\n            break;\n        case 4:\n            this.fldenv(addr);\n            break;\n        case 5:\n            // fldcw\n            var word = this.cpu.safe_read16(addr);\n            this.control_word = word;\n            break;\n        case 6:\n            this.fstenv(addr);\n            break;\n        case 7:\n            // fstcw\n            this.cpu.safe_write16(addr, this.control_word);\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DA_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovb\n            if(this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmove\n            if(this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovbe\n            if(this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovu\n            if(this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 5:\n            if(low === 1)\n            {\n                // fucompp\n                this.fucom(this.get_sti(1));\n                this.pop();\n                this.pop();\n            }\n            else\n            {\n                dbg_log(mod); this.fpu_unimpl();\n            }\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DA_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.cpu.safe_read32s(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DB_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovnb\n            if(!this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmovne\n            if(!this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovnbe\n            if(!this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovnu\n            if(!this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 4:\n            if(imm8 === 0xE3)\n            {\n                this.finit();\n            }\n            else if(imm8 === 0xE4)\n            {\n                // fsetpm\n                // treat as nop\n            }\n            else if(imm8 === 0xE1)\n            {\n                // fdisi\n                // also treat as nop\n            }\n            else if(imm8 === 0xE2)\n            {\n                // fclex\n                this.status_word = 0;\n            }\n            else\n            {\n                dbg_log(h(imm8));\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.fucomi(this.get_sti(low));\n            break;\n        case 6:\n            this.fcomi(this.get_sti(low));\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DB_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fild\n            var int32 = this.cpu.safe_read32s(addr);\n            this.push(int32);\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                // TODO: Invalid operation\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            this.pop();\n            break;\n        case 5:\n            // fld\n            this.push(this.load_m80(addr));\n            break;\n        case 7:\n            // fstp\n            this.cpu.writable_or_pagefault(addr, 10);\n            this.store_m80(addr, this.get_st0());\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DC_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmul\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsubr\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsub\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivr\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdiv\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DC_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var\n        mod = imm8 >> 3 & 7,\n        m64 = this.load_m64(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m64;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m64;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m64);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m64);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m64;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m64 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m64;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m64 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DD_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // ffree\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\n            break;\n        case 2:\n            // fst\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            break;\n        case 3:\n            // fstp\n            if(low === 0)\n            {\n                this.pop();\n            }\n            else\n            {\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\n                this.pop();\n            }\n            break;\n        case 4:\n            this.fucom(this.get_sti(low));\n            break;\n        case 5:\n            // fucomp\n            this.fucom(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DD_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m64(addr);\n            this.push(data);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m64(addr, 0);\n            break;\n        case 3:\n            // fstp\n            this.store_m64(addr, 0);\n            this.pop();\n            break;\n        case 4:\n            this.frstor(addr);\n            break;\n        case 5:\n            // nothing\n            this.fpu_unimpl();\n            break;\n        case 6:\n            // fsave\n            this.fsave(addr);\n            break;\n        case 7:\n            // fnstsw / store status word\n            this.cpu.safe_write16(addr, this.load_status_word());\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\n\nFPU.prototype.op_DE_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // faddp\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmulp\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcomp\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcompp\n            if(low === 1)\n            {\n                this.fcom(this.st[low_ptr]);\n                this.pop();\n            }\n            else\n            {\n                // not a valid encoding\n                dbg_log(mod);\n                this.fpu_unimpl();\n            }\n            break;\n        case 4:\n            // fsubrp\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubp\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivrp\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivp\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n\n    this.pop();\n};\n\nFPU.prototype.op_DE_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m16;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m16;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m16);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m16);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m16;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m16 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m16;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m16 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DF_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 4:\n            if(imm8 === 0xE0)\n            {\n                // fnstsw\n                this.cpu.reg16[reg_ax] = this.load_status_word();\n            }\n            else\n            {\n                dbg_log(imm8);\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            // fucomip\n            this.fucomi(this.get_sti(low));\n            this.pop();\n            break;\n        case 6:\n            // fcomip\n            this.fcomi(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DF_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n            this.push(m16);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            this.pop();\n            break;\n        case 4:\n            // fbld\n            this.fpu_unimpl();\n            break;\n        case 5:\n            // fild\n            var low = this.cpu.safe_read32s(addr) >>> 0,\n                high = this.cpu.safe_read32s(addr + 4);\n\n            var m64 = low + 0x100000000 * high;\n\n            this.push(m64);\n            break;\n        case 6:\n            // fbstp\n            this.fpu_unimpl();\n            break;\n        case 7:\n            this.cpu.writable_or_pagefault(addr, 8);\n\n            // fistp\n            var st0 = this.integer_round(this.get_st0()),\n                st0_low,\n                st0_high;\n\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\n            {\n                st0_low = st0 | 0;\n                st0_high = st0 / 0x100000000 | 0;\n\n                if(st0_high === 0 && st0 < 0)\n                    st0_high = -1;\n            }\n            else\n            {\n                // write 0x8000000000000000\n                st0_low  = 0;\n                st0_high = 0x80000000 | 0;\n                this.invalid_arithmatic();\n            }\n\n            this.cpu.safe_write32(addr, st0_low);\n            this.cpu.safe_write32(addr + 4, st0_high);\n\n            this.pop();\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n","\"use strict\";\n\n/** @param {number=} length */\nfunction hex_dump(buffer, length)\n{\n    var result = [];\n    length = length || buffer.byteLength;\n    var addr = 0;\n    var line, byt;\n\n    for(var i = 0; i < length >> 4; i++)\n    {\n        line = h(addr + (i << 4), 5) + \"   \";\n\n        for(var j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += h(byt, 2) + \" \";\n        }\n\n        line += \"  \";\n\n        for(j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n        }\n\n        result.push(line);\n    }\n\n    return \"\\n\" + result.join(\"\\n\");\n}\n\n/** @const */\nvar CDROM_SECTOR_SIZE = 2048;\n/** @const */\nvar HD_SECTOR_SIZE = 512;\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {boolean} is_cd\n * @param {number} nr\n * @param {BusConnector} bus\n * */\nfunction IDEDevice(cpu, buffer, is_cd, nr, bus)\n{\n    this.master = new IDEInterface(this, cpu, buffer, is_cd, nr, 0, bus);\n    this.slave = new IDEInterface(this, cpu, undefined, false, nr, 1, bus);\n\n    this.current_interface = this.master;\n\n    this.cpu = cpu;\n\n    // gets set via PCI in seabios, likely doesn't matter\n    if(nr === 0)\n    {\n        this.ata_port = 0x1F0;\n        this.irq = 14;\n\n        this.pci_id = 0x1E << 3;\n    }\n    else if(nr === 1)\n    {\n        this.ata_port = 0x170;\n        this.irq = 15;\n\n        this.pci_id = 0x1F << 3;\n    }\n    else\n    {\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\n    }\n\n    // alternate status, starting at 3f4/374\n    /** @type {number} */\n    this.ata_port_high = this.ata_port | 0x204;\n\n    /** @type {number} */\n    this.master_port = 0xB400;\n\n    this.pci_space = [\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // second device\n        0x00, 0x00, 0x00, 0x00, // second device\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x43, 0x10, 0xD4, 0x82,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\n\n        // 0x40\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        // 0x80\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    this.pci_bars = [\n        {\n            size: 8,\n        },\n        {\n            size: 4,\n        },\n        undefined,\n        undefined,\n        {\n            size: 0x10,\n        },\n    ];\n    this.name = \"ide\" + nr;\n\n    /** @type {number} */\n    this.device_control = 2;\n\n    // status\n    cpu.io.register_read(this.ata_port | 7, this, function() {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        return this.read_status();\n    });\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\n\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\n    cpu.io.register_read(this.ata_port | 0, this, function()\n    {\n        return this.current_interface.read_data(1);\n    }, function()\n    {\n        return this.current_interface.read_data(2);\n    }, function()\n    {\n        return this.current_interface.read_data(4);\n    });\n\n    cpu.io.register_read(this.ata_port | 1, this, function()\n    {\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\n        return this.current_interface.error;\n    });\n    cpu.io.register_read(this.ata_port | 2, this, function()\n    {\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\n        return this.current_interface.bytecount & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 3, this, function()\n    {\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\n        return this.current_interface.sector & 0xFF;\n    });\n\n    cpu.io.register_read(this.ata_port | 4, this, function()\n    {\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_low & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 5, this, function()\n    {\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_high & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 6, this, function()\n    {\n        dbg_log(\"Read 1F6\", LOG_DISK);\n        return this.current_interface.drive_head;\n    });\n\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\n    {\n        this.current_interface.write_data_port8(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port16(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port32(data);\n    });\n\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\n    {\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\n    {\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\n    {\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\n    });\n\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\n    {\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\n    {\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\n    {\n        var slave = data & 0x10;\n        var mode = data & 0xE0;\n\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\n\n        if(slave)\n        {\n            dbg_log(\"Slave\", LOG_DISK);\n            this.current_interface = this.slave;\n        }\n        else\n        {\n            this.current_interface = this.master;\n        }\n\n        this.master.drive_head = data;\n        this.slave.drive_head = data;\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\n        this.master.head = this.slave.head = data & 0xF;\n    });\n\n    /** @type {number} */\n    this.prdt_addr = 0;\n\n    /** @type {number} */\n    this.dma_status = 0;\n\n    /** @type {number} */\n    this.dma_command = 0;\n\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\n    {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        this.current_interface.ata_command(data);\n    });\n\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\n\n    cpu.io.register_read(this.master_port, this,\n                         this.dma_read_command8, undefined, this.dma_read_command);\n    cpu.io.register_write(this.master_port, this,\n                          this.dma_write_command8, undefined, this.dma_write_command);\n\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\n\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\n    });\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\n    });\n\n    cpu.devices.pci.register_device(this);\n\n    DEBUG && Object.seal(this);\n}\n\nIDEDevice.prototype.read_status = function()\n{\n    if(this.current_interface.buffer)\n    {\n        var ret = this.current_interface.status;\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\n        return ret;\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nIDEDevice.prototype.write_control = function(data)\n{\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\n\n    if(data & 4)\n    {\n        dbg_log(\"Reset via control port\", LOG_DISK);\n\n        this.cpu.device_lower_irq(this.irq);\n\n        this.master.device_reset();\n        this.slave.device_reset();\n    }\n\n    this.device_control = data;\n};\n\nIDEDevice.prototype.dma_read_addr = function()\n{\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\n    return this.prdt_addr;\n};\n\nIDEDevice.prototype.dma_set_addr = function(data)\n{\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\n    this.prdt_addr = data;\n};\n\nIDEDevice.prototype.dma_read_status = function()\n{\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\n    return this.dma_status;\n};\n\nIDEDevice.prototype.dma_write_status = function(value)\n{\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\n    this.dma_status &= ~(value & 6);\n};\n\nIDEDevice.prototype.dma_read_command = function()\n{\n    return this.dma_read_command8() | this.dma_read_status() << 16;\n};\n\nIDEDevice.prototype.dma_read_command8 = function()\n{\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\n    return this.dma_command;\n};\n\nIDEDevice.prototype.dma_write_command = function(value)\n{\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\n\n    this.dma_write_command8(value & 0xFF);\n    this.dma_write_status(value >> 16 & 0xFF);\n};\n\nIDEDevice.prototype.dma_write_command8 = function(value)\n{\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\n\n    let old_command = this.dma_command;\n    this.dma_command = value & 0x9;\n\n    if((old_command & 1) === (value & 1))\n    {\n        return;\n    }\n\n    if((value & 1) === 0)\n    {\n        this.dma_status &= ~1;\n        return;\n    }\n\n    this.dma_status |= 1;\n\n    switch(this.current_interface.current_command)\n    {\n        case 0x25:\n        case 0xC8:\n            this.current_interface.do_ata_read_sectors_dma();\n            break;\n\n        case 0xCA:\n        case 0x35:\n            this.current_interface.do_ata_write_sectors_dma();\n            break;\n\n        case 0xA0:\n            this.current_interface.do_atapi_dma();\n            break;\n\n        default:\n            dbg_log(\"Spurious dma command write, current command: \" +\n                    h(this.current_interface.current_command), LOG_DISK);\n            dbg_assert(false);\n    }\n};\n\nIDEDevice.prototype.push_irq = function()\n{\n    if((this.device_control & 2) === 0)\n    {\n        dbg_log(\"push irq\", LOG_DISK);\n        this.dma_status |= 4;\n        this.cpu.device_raise_irq(this.irq);\n    }\n};\n\nIDEDevice.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.master;\n    state[1] = this.slave;\n    state[2] = this.ata_port;\n    state[3] = this.irq;\n    state[4] = this.pci_id;\n    state[5] = this.ata_port_high;\n    state[6] = this.master_port;\n    state[7] = this.name;\n    state[8] = this.device_control;\n    state[9] = this.prdt_addr;\n    state[10] = this.dma_status;\n    state[11] = this.current_interface === this.master;\n    state[12] = this.dma_command;\n    return state;\n};\n\nIDEDevice.prototype.set_state = function(state)\n{\n    this.master = state[0];\n    this.slave = state[1];\n    this.ata_port = state[2];\n    this.irq = state[3];\n    this.pci_id = state[4];\n    this.ata_port_high = state[5];\n    this.master_port = state[6];\n    this.name = state[7];\n    this.device_control = state[8];\n    this.prdt_addr = state[9];\n    this.dma_status = state[10];\n    this.current_interface = state[11] ? this.master : this.slave;\n    this.dma_command = state[12];\n};\n\n\n/**\n * @constructor\n */\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\n{\n    this.device = device;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.nr = device_nr;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\n\n    /** @type {boolean} */\n    this.is_atapi = is_cd;\n\n    /** @type {number} */\n    this.sector_count = 0;\n\n    /** @type {number} */\n    this.head_count = 0;\n\n    /** @type {number} */\n    this.sectors_per_track = 0;\n\n    /** @type {number} */\n    this.cylinder_count = 0;\n\n    if(this.buffer)\n    {\n        this.sector_count = this.buffer.byteLength / this.sector_size;\n\n        if(this.sector_count !== (this.sector_count | 0))\n        {\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\n            this.sector_count = Math.ceil(this.sector_count);\n        }\n\n        if(is_cd)\n        {\n            this.head_count = 1;\n            this.sectors_per_track = 0;\n        }\n        else\n        {\n            // \"default\" values: 16/63\n            // common: 255, 63\n            this.head_count = 16;\n            this.sectors_per_track = 63;\n        }\n\n\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\n\n        if(this.cylinder_count !== (this.cylinder_count | 0))\n        {\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\n            this.cylinder_count = Math.floor(this.cylinder_count);\n            //this.sector_count = this.cylinder_count * this.head_count *\n            //                        this.sectors_per_track * this.sector_size;\n        }\n\n        //if(this.cylinder_count > 16383)\n        //{\n        //    this.cylinder_count = 16383;\n        //}\n\n        // disk translation: lba\n        var rtc = cpu.devices.rtc;\n\n        // master\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\n\n        var reg = CMOS_DISK_DRIVE1_CYL;\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\n        rtc.cmos_write(reg + 3, 0xFF);\n        rtc.cmos_write(reg + 4, 0xFF);\n        rtc.cmos_write(reg + 5, 0xC8);\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\n\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\n    }\n\n    /** @const */\n    this.stats = {\n        sectors_read: 0,\n        sectors_written: 0,\n        bytes_read: 0,\n        bytes_written: 0,\n        loading: false,\n    };\n\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.is_lba = 0;\n\n    /** @type {number} */\n    this.bytecount = 0;\n\n    /** @type {number} */\n    this.sector = 0;\n\n    /** @type {number} */\n    this.lba_count = 0;\n\n    /** @type {number} */\n    this.cylinder_low = 0;\n\n    /** @type {number} */\n    this.cylinder_high = 0;\n\n    /** @type {number} */\n    this.head = 0;\n\n    /** @type {number} */\n    this.drive_head = 0;\n\n    /** @type {number} */\n    this.status = 0x50;\n\n    /** @type {number} */\n    this.sectors_per_drq = 0x80;\n\n    /** @type {number} */\n    this.error = 0;\n\n    /** @type {number} */\n    this.data_pointer = 0;\n\n    this.data = new Uint8Array(64 * 1024);\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n\n    /** @type {number} */\n    this.data_length = 0;\n\n    /** @type {number} */\n    this.data_end = 0;\n\n    /** @type {number} */\n    this.current_command = -1;\n\n    /** @type {number} */\n    this.current_atapi_command = -1;\n\n    /** @type {number} */\n    this.write_dest = 0;\n\n    Object.seal(this);\n}\n\nIDEInterface.prototype.device_reset = function()\n{\n    if(this.is_atapi)\n    {\n        this.status = 0;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n        this.cylinder_low = 0x14; // lba_mid\n        this.cylinder_high = 0xEB; // lba_high\n    }\n    else\n    {\n        this.status = 0x50 | 1;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n\n        // 0, 0 needed by bochs bios\n        this.cylinder_low = 0; // lba_mid\n        this.cylinder_high = 0; // lba_high\n    }\n};\n\nIDEInterface.prototype.push_irq = function()\n{\n    this.device.push_irq();\n};\n\nIDEInterface.prototype.ata_command = function(cmd)\n{\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    if(!this.buffer)\n    {\n        dbg_log(\"abort: No buffer\", LOG_DISK);\n        this.error = 4;\n        this.status = 0x41;\n        this.push_irq();\n        return;\n    }\n\n    this.current_command = cmd;\n    this.error = 0;\n\n    switch(cmd)\n    {\n        case 0x08:\n            dbg_log(\"ATA device reset\", LOG_DISK);\n            this.data_pointer = 0;\n            this.data_end = 0;\n            this.data_length = 0;\n            this.device_reset();\n            this.push_irq();\n            break;\n\n        case 0x10:\n            // calibrate drive\n            this.status = 0x50;\n            this.cylinder_low = 0;\n            this.push_irq();\n            break;\n\n        case 0xF8:\n            // read native max address\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\n            this.push_irq();\n            break;\n\n        case 0x27:\n            // read native max address ext\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\n            this.push_irq();\n            break;\n\n        case 0x20:\n        case 0x24:\n        case 0x29:\n        case 0xC4:\n            // 0x20 read sectors\n            // 0x24 read sectors ext\n            // 0xC4 read multiple\n            // 0x29 read multiple ext\n            this.ata_read_sectors(cmd);\n            break;\n\n        case 0x30:\n        case 0x34:\n        case 0x39:\n        case 0xC5:\n            // 0x30 write sectors\n            // 0x34 write sectors ext\n            // 0xC5 write multiple\n            // 0x39 write multiple ext\n            this.ata_write_sectors(cmd);\n            break;\n\n        case 0x90:\n            // execute device diagnostic\n            this.push_irq();\n            this.error = 0x101;\n            this.status = 0x50;\n            break;\n\n        case 0x91:\n            // initialize device parameters\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xA0:\n            // ATA packet\n            if(this.is_atapi)\n            {\n                this.status = 0x58;\n                this.data_allocate(12);\n                this.data_end = 12;\n                this.bytecount = 1;\n                this.push_irq();\n            }\n            break;\n\n        case 0xA1:\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.create_identify_packet();\n                this.status = 0x58;\n\n                this.cylinder_low = 0x14;\n                this.cylinder_high = 0xEB;\n\n                this.push_irq();\n            }\n            else\n            {\n                this.status = 0x41;\n                this.push_irq();\n            }\n            break;\n\n        case 0xC6:\n            // set multiple mode\n            // Logical sectors per DRQ Block in word 1\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.sectors_per_drq = this.bytecount & 0xFF;\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0x25: // read dma ext\n        case 0xC8: // read dma\n            this.ata_read_sectors_dma(cmd);\n            break;\n\n        case 0x35: // write dma ext\n        case 0xCA: // write dma\n            this.ata_write_sectors_dma(cmd);\n            break;\n\n        case 0x40:\n            dbg_log(\"read verify sectors\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xDA:\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            this.push_irq();\n            break;\n\n        case 0xE0:\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE1:\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE7:\n            dbg_log(\"ATA flush cache\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEC:\n            dbg_log(\"ATA identify device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.status = 0x41;\n                this.error = 4;\n                this.push_irq();\n                return;\n            }\n\n            this.create_identify_packet();\n            this.status = 0x58;\n\n            this.push_irq();\n            break;\n\n        case 0xEA:\n            dbg_log(\"flush cache ext\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEF:\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF5:\n            dbg_log(\"security freeze lock\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF9:\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            break;\n\n        default:\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\n\n            this.status = 0x41;\n            // abort bit set\n            this.error = 4;\n    }\n};\n\nIDEInterface.prototype.atapi_handle = function()\n{\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    this.data_pointer = 0;\n    this.current_atapi_command = this.data[0];\n\n    switch(this.current_atapi_command)\n    {\n        case 0x00:\n            dbg_log(\"test unit ready\", LOG_DISK);\n            // test unit ready\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x03:\n            // request sense\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n\n            this.data[0] = 0x80 | 0x70;\n            this.data[2] = 5; // illegal request\n            this.data[7] = 8;\n            break;\n\n        case 0x12:\n            // inquiry\n            var length = this.data[4];\n            this.status = 0x58;\n\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\n\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\n            //this.data_allocate(36);\n            this.data.set([\n                0x05, 0x80, 0x01, 0x31,\n                // additional length\n                31,\n                0, 0, 0,\n\n                // 8\n                0x53, 0x4F, 0x4E, 0x59,\n                0x20, 0x20, 0x20, 0x20,\n\n                // 16\n                0x43, 0x44, 0x2D, 0x52,\n                0x4F, 0x4D, 0x20, 0x43,\n                0x44, 0x55, 0x2D, 0x31,\n                0x30, 0x30, 0x30, 0x20,\n\n                // 32\n                0x31, 0x2E, 0x31, 0x61,\n            ]);\n            this.data_end = this.data_length = Math.min(36, length);\n            break;\n\n        case 0x1A:\n            // mode sense (6)\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x1E:\n            // prevent/allow medium removal\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x25:\n            // read capacity\n            var count = this.sector_count - 1;\n            this.data_set(new Uint8Array([\n                count >> 24 & 0xFF,\n                count >> 16 & 0xFF,\n                count >> 8 & 0xFF,\n                count & 0xFF,\n                0,\n                0,\n                this.sector_size >> 8 & 0xFF,\n                this.sector_size & 0xFF,\n            ]));\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x28:\n            // read\n            if(this.lba_count & 1)\n            {\n                this.atapi_read_dma(this.data);\n            }\n            else\n            {\n                this.atapi_read(this.data);\n            }\n            break;\n\n        case 0x42:\n            var length = this.data[8];\n            this.data_allocate(Math.min(8, length));\n            this.data_end = this.data_length;\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\n            this.status = 0x58;\n            break;\n\n        case 0x43:\n            // read toc\n            var length = this.data[8] | this.data[7] << 8;\n            var format = this.data[9] >> 6;\n\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            dbg_log(\"read toc: \" + h(format, 2) +\n                    \" length=\" + length +\n                    \" \" + (this.data[1] & 2) +\n                    \" \" + h(this.data[6]), LOG_DISK);\n\n            if(format === 0)\n            {\n                var sector_count = this.sector_count;\n                this.data.set(new Uint8Array([\n                    0, 18, // length\n                    1, 1, // first and last session\n\n                    0,\n                    0x14,\n                    1, // track number\n                    0,\n                    0, 0, 0, 0,\n\n                    0,\n                    0x16,\n                    0xAA, // track number\n                    0,\n                    sector_count >> 24,\n                    sector_count >> 16 & 0xFF,\n                    sector_count >> 8 & 0xFF,\n                    sector_count & 0xFF,\n                ]));\n            }\n            else if(format === 1)\n            {\n                this.data.set(new Uint8Array([\n                    0, 10, // length\n                    1, 1, // first and last session\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                ]));\n            }\n            else\n            {\n                dbg_assert(false, \"Unimplemented format: \" + format);\n            }\n\n            this.status = 0x58;\n            break;\n\n        case 0x46:\n            // get configuration\n            var length = this.data[8] | this.data[7] << 8;\n            length = Math.min(length, 32);\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            this.data[0] = length - 4 >> 24 & 0xFF;\n            this.data[1] = length - 4 >> 16 & 0xFF;\n            this.data[2] = length - 4 >> 8 & 0xFF;\n            this.data[3] = length - 4 & 0xFF;\n            this.data[6] = 0x08;\n            this.data[10] = 3;\n            this.status = 0x58;\n            break;\n\n        case 0x51:\n            // read disk information\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x52:\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            break;\n\n        case 0x5A:\n            // mode sense\n            var length = this.data[8] | this.data[7] << 8;\n            var page_code = this.data[2];\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\n            if(page_code === 0x2A)\n            {\n                this.data_allocate(Math.min(30, length));\n            }\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0xBD:\n            // mechanism status\n            this.data_allocate(this.data[9] | this.data[8] << 8);\n            this.data_end = this.data_length;\n            this.data[5] = 1;\n            this.status = 0x58;\n            break;\n\n        case 0x4A:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            break;\n\n        default:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            dbg_assert(false);\n    }\n\n    this.bytecount = this.bytecount & ~7 | 2;\n\n    if((this.status & 0x80) === 0)\n    {\n        this.push_irq();\n    }\n\n    if((this.status & 0x80) === 0 && this.data_length === 0)\n    {\n        this.bytecount |= 1;\n        this.status &= ~8;\n    }\n};\n\nIDEInterface.prototype.do_write = function()\n{\n    this.status = 0x50;\n\n    dbg_assert(this.data_length <= this.data.length);\n    var data = this.data.subarray(0, this.data_length);\n\n    //dbg_log(hex_dump(data), LOG_DISK);\n    dbg_assert(this.data_length % 512 === 0);\n    this.ata_advance(this.current_command, this.data_length / 512);\n    this.push_irq();\n\n    this.buffer.set(this.write_dest, data, function()\n    {\n    });\n\n    this.report_write(this.data_length);\n};\n\nIDEInterface.prototype.atapi_read = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    this.data_length = 0;\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\n\n    if(req_length === 0xFFFF)\n        req_length--;\n\n    if(req_length > byte_count)\n    {\n        req_length = byte_count;\n    }\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else if(byte_count === 0)\n    {\n        this.status = 0x50;\n\n        this.data_pointer = 0;\n        //this.push_irq();\n    }\n    else\n    {\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\n            this.data_set(data);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n\n            this.push_irq();\n\n            req_length &= ~3;\n\n            this.data_end = req_length;\n            if(this.data_end > this.data_length)\n            {\n                this.data_end = this.data_length;\n            }\n            this.cylinder_low = this.data_end & 0xFF;\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\n\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.atapi_read_dma = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            dbg_log(\"atapi_read_dma: Data arrived\");\n            this.report_read_end(byte_count);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.data_set(data);\n\n            this.do_atapi_dma();\n        });\n    }\n};\n\nIDEInterface.prototype.do_atapi_dma = function()\n{\n    if((this.device.dma_status & 1) === 0)\n    {\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\n        return;\n    }\n\n    if((this.status & 0x8) === 0)\n    {\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\n        return;\n    }\n\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\n\n    var prdt_start = this.device.prdt_addr;\n    var offset = 0;\n\n    var data = this.data;\n\n    do {\n        var addr = this.cpu.read32s(prdt_start);\n        var count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!count)\n        {\n            count = 0x10000;\n        }\n\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\n        this.cpu.write_blob(data.subarray(offset,\n            Math.min(offset + count, this.data_length)), addr);\n\n        offset += count;\n        prdt_start += 8;\n\n        if(offset >= this.data_length && !end)\n        {\n            dbg_log(\"leave early end=\" + (+end) +\n                    \" offset=\" + h(offset) +\n                    \" data_length=\" + h(this.data_length) +\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\n            break;\n        }\n    }\n    while(!end);\n\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\n\n    this.status = 0x50;\n    this.device.dma_status &= ~1;\n    this.bytecount = this.bytecount & ~7 | 3;\n    this.push_irq();\n};\n\nIDEInterface.prototype.read_data = function(length)\n{\n    if(this.data_pointer < this.data_end)\n    {\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\n\n        if(length === 1)\n        {\n            var result = this.data[this.data_pointer];\n        }\n        else if(length === 2)\n        {\n            var result = this.data16[this.data_pointer >>> 1];\n        }\n        else\n        {\n            var result = this.data32[this.data_pointer >>> 2];\n        }\n\n        this.data_pointer += length;\n\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer & align) === 0)\n        {\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\n                        \" cur=\" + h(this.data_pointer) +\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\n        }\n\n        if(this.data_pointer >= this.data_end)\n        {\n            this.read_end();\n        }\n\n        return result;\n    }\n    else\n    {\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\n\n        this.data_pointer += length;\n        return 0;\n    }\n};\n\nIDEInterface.prototype.read_end = function()\n{\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\n\n    if(this.current_command === 0xA0)\n    {\n        if(this.data_end === this.data_length)\n        {\n            this.status = 0x50;\n            this.bytecount = this.bytecount & ~7 | 3;\n            this.push_irq();\n        }\n        else\n        {\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.push_irq();\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n\n            if(this.data_end + byte_count > this.data_length)\n            {\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\n                this.data_end = this.data_length;\n            }\n            else\n            {\n                this.data_end += byte_count;\n            }\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\n        }\n    }\n    else\n    {\n        this.error = 0;\n        if(this.data_pointer >= this.data_length)\n        {\n            this.status = 0x50;\n            this.push_irq();\n        }\n        else\n        {\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\n            {\n                var sector_count = Math.min(this.sectors_per_drq,\n                    (this.data_length - this.data_end) / 512);\n                dbg_assert(sector_count % 1 === 0);\n            }\n            else\n            {\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\n                var sector_count = 1;\n            }\n            this.ata_advance(this.current_command, sector_count);\n            this.data_end += 512 * sector_count;\n            this.status = 0x58;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port = function(data, length)\n{\n    dbg_assert(this.data_pointer % length === 0);\n\n    if(this.data_pointer >= this.data_end)\n    {\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\n    }\n    else\n    {\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\n        {\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\n        }\n\n        if(length === 1)\n        {\n            this.data[this.data_pointer++] = data;\n        }\n        else if(length === 2)\n        {\n            this.data16[this.data_pointer >>> 1] = data;\n            this.data_pointer += 2;\n        }\n        else\n        {\n            this.data32[this.data_pointer >>> 2] = data;\n            this.data_pointer += 4;\n        }\n\n        dbg_assert(this.data_pointer <= this.data_end);\n        if(this.data_pointer === this.data_end)\n        {\n            this.write_end();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port8 = function(data)\n{\n    this.write_data_port(data, 1);\n};\n\nIDEInterface.prototype.write_data_port16 = function(data)\n{\n    this.write_data_port(data, 2);\n};\n\nIDEInterface.prototype.write_data_port32 = function(data)\n{\n    this.write_data_port(data, 4);\n};\n\nIDEInterface.prototype.write_end = function()\n{\n    if(this.current_command === 0xA0)\n    {\n        this.atapi_handle();\n    }\n    else\n    {\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\n                \" data_length=\" + h(this.data_length), LOG_DISK);\n\n        if(this.data_pointer >= this.data_length)\n        {\n            this.do_write();\n        }\n        else\n        {\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\n            // XXX: Should advance here, but do_write does all the advancing\n            //this.ata_advance(this.current_command, 1);\n            this.status = 0x58;\n            this.data_end += 512;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\n{\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\n    this.bytecount -= sectors;\n\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\n       cmd === 0x25 || cmd === 0x35)\n    {\n        var new_sector = sectors + this.get_lba48();\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n    }\n    else if(this.is_lba)\n    {\n        var new_sector = sectors + this.get_lba28();\n        this.sector = new_sector & 0xFF;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n        this.head = this.head & ~0xF | new_sector & 0xF;\n    }\n    else // chs\n    {\n        var new_sector = sectors + this.get_chs();\n\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\n        this.cylinder_low = c & 0xFF;\n        this.cylinder_high = c >> 8 & 0xFF;\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\n\n        dbg_assert(new_sector === this.get_chs());\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x20 || cmd === 0x24;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x80 | 0x40;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\n\n            this.data_set(data);\n            this.status = 0x58;\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\n\n            this.push_irq();\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_assert(lba < this.buffer.byteLength);\n\n    this.report_read_start();\n\n    var orig_prdt_start = this.device.prdt_addr;\n\n    this.buffer.get(start, byte_count, (data) =>\n    {\n        //setTimeout(function() {\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\n        var prdt_start = this.device.prdt_addr;\n        var offset = 0;\n\n        dbg_assert(orig_prdt_start === prdt_start);\n\n        do {\n            var prd_addr = this.cpu.read32s(prdt_start);\n            var prd_count = this.cpu.read16(prdt_start + 4);\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n            if(!prd_count)\n            {\n                prd_count = 0x10000;\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\n            }\n\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\n\n            offset += prd_count;\n            prdt_start += 8;\n        }\n        while(!end);\n\n        dbg_assert(offset === byte_count);\n\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n\n        this.push_irq();\n\n        this.report_read_end(byte_count);\n        //}.bind(this), 10);\n    });\n};\n\nIDEInterface.prototype.ata_write_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x30 || cmd === 0x34;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA write lba=\" + h(lba) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x58;\n        this.data_allocate_noclear(byte_count);\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n        this.write_dest = start;\n    }\n};\n\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    var prdt_start = this.device.prdt_addr;\n    var prdt_count = 0;\n    var prdt_write_count = 0;\n    var offset = 0;\n\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\n\n    do {\n        var prd_addr = this.cpu.read32s(prdt_start);\n        var prd_count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!prd_count)\n        {\n            prd_count = 0x10000;\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\n        }\n\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\n\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\n        dbg_assert(slice.length === prd_count);\n\n        //if(DEBUG)\n        //{\n        //    dbg_log(hex_dump(slice), LOG_DISK);\n        //}\n\n        this.buffer.set(start + offset, slice, function()\n        {\n            prdt_write_count++;\n        });\n\n        offset += prd_count;\n        prdt_start += 8;\n        prdt_count++;\n    }\n    while(!end);\n\n    if(prdt_write_count === prdt_count)\n    {\n        //setTimeout(function() {\n        dbg_log(\"dma write completed\", LOG_DISK);\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.push_irq();\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n        //}, 10);\n    }\n    else\n    {\n        // fails when writes don't happen synchronously, which isn't currently\n        // the case, but might be in the future\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\n    }\n\n    this.report_write(byte_count);\n};\n\nIDEInterface.prototype.get_chs = function()\n{\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\n    var h = this.head;\n    var s = this.sector & 0xFF;\n\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\n\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\n};\n\nIDEInterface.prototype.get_lba28 = function()\n{\n    return this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.head & 0xF) << 24;\n};\n\nIDEInterface.prototype.get_lba48 = function()\n{\n    // Note: Bits over 32 missing\n    return (this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\n};\n\nIDEInterface.prototype.get_lba = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        return this.get_lba48();\n    }\n    else if(this.is_lba)\n    {\n        return this.get_lba28();\n    }\n    else\n    {\n        return this.get_chs();\n    }\n};\n\nIDEInterface.prototype.get_count = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        var count = this.bytecount;\n        if(count === 0) count = 0x10000;\n        return count;\n    }\n    else\n    {\n        var count = this.bytecount & 0xFF;\n        if(count === 0) count = 0x100;\n        return count;\n    }\n};\n\nIDEInterface.prototype.create_identify_packet = function()\n{\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\n\n    if(this.drive_head & 0x10)\n    {\n        // slave\n        this.data_allocate(0);\n        return;\n    }\n\n    for(var i = 0; i < 512; i++)\n    {\n        this.data[i] = 0;\n    }\n\n    var cylinder_count = Math.min(16383, this.cylinder_count);\n\n    this.data_set([\n        0x40, this.is_atapi ? 0x85 : 0,\n        // 1 cylinders\n        cylinder_count, cylinder_count >> 8,\n        0, 0,\n\n        // 3 heads\n        this.head_count, this.head_count >> 8,\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\n        // 5\n        0, 512 >> 8,\n        // sectors per track\n        this.sectors_per_track, this.sectors_per_track >> 8,\n        0, 0, 0, 0, 0, 0,\n        // 10-19 serial number\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 15\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 20\n        3, 0,\n        0, 2,\n        4, 0,\n        // 23-26 firmware revision\n        0, 0, 0, 0, 0, 0, 0, 0,\n\n        // 27 model number\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n\n        // 47 max value for set multiple mode\n        0x80, 0,\n        1, 0,\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        // 50\n        0, 0,\n        0, 2,\n        0, 2,\n        7, 0,\n\n        // 54 cylinders\n        cylinder_count, cylinder_count >> 8,\n        // 55 heads\n        this.head_count, this.head_count >> 8,\n        // 56 sectors per track\n        this.sectors_per_track, 0,\n        // capacity in sectors\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 60\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 63, dma supported mode, dma selected mode\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\n        //0, 0, // no DMA\n\n        0, 0,\n        // 65\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\n        // 70\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 75\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 80\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\n        // 85\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\n        // 90\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\n        // 95\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 100\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n    ]);\n\n    this.data_length = 512;\n    this.data_end = 512;\n};\n\nIDEInterface.prototype.data_allocate = function(len)\n{\n    this.data_allocate_noclear(len);\n\n    for(var i = 0; i < (len + 3 >> 2); i++)\n    {\n        this.data32[i] = 0;\n    }\n};\n\nIDEInterface.prototype.data_allocate_noclear = function(len)\n{\n    if(this.data.length < len)\n    {\n        this.data = new Uint8Array(len + 3 & ~3);\n        this.data16 = new Uint16Array(this.data.buffer);\n        this.data32 = new Int32Array(this.data.buffer);\n    }\n\n    this.data_length = len;\n    this.data_pointer = 0;\n};\n\nIDEInterface.prototype.data_set = function(data)\n{\n    this.data_allocate_noclear(data.length);\n    this.data.set(data);\n};\n\nIDEInterface.prototype.report_read_start = function()\n{\n    this.stats.loading = true;\n    this.bus.send(\"ide-read-start\");\n};\n\nIDEInterface.prototype.report_read_end = function(byte_count)\n{\n    this.stats.loading = false;\n\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_read += sector_count;\n    this.stats.bytes_read += byte_count;\n\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.report_write = function(byte_count)\n{\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_written += sector_count;\n    this.stats.bytes_written += byte_count;\n\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.bytecount;\n    state[1] = this.cylinder_count;\n    state[2] = this.cylinder_high;\n    state[3] = this.cylinder_low;\n    state[4] = this.data_pointer;\n    state[5] = 0;\n    state[6] = 0;\n    state[7] = 0;\n    state[8] = 0;\n    state[9] = this.drive_head;\n    state[10] = this.error;\n    state[11] = this.head;\n    state[12] = this.head_count;\n    state[13] = this.is_atapi;\n    state[14] = this.is_lba;\n    state[15] = this.lba_count;\n    state[16] = this.data;\n    state[17] = this.data_length;\n    state[18] = this.sector;\n    state[19] = this.sector_count;\n    state[20] = this.sector_size;\n    state[21] = this.sectors_per_drq;\n    state[22] = this.sectors_per_track;\n    state[23] = this.status;\n    state[24] = this.write_dest;\n    state[25] = this.current_command;\n    state[26] = this.data_end;\n    state[27] = this.current_atapi_command;\n    return state;\n};\n\nIDEInterface.prototype.set_state = function(state)\n{\n    this.bytecount = state[0];\n    this.cylinder_count = state[1];\n    this.cylinder_high = state[2];\n    this.cylinder_low = state[3];\n    this.data_pointer = state[4];\n\n    this.drive_head = state[9];\n    this.error = state[10];\n    this.head = state[11];\n    this.head_count = state[12];\n    this.is_atapi = state[13];\n    this.is_lba = state[14];\n    this.lba_count = state[15];\n    this.data = state[16];\n    this.data_length = state[17];\n    this.sector = state[18];\n    this.sector_count = state[19];\n    this.sector_size = state[20];\n    this.sectors_per_drq = state[21];\n    this.sectors_per_track = state[22];\n    this.status = state[23];\n    this.write_dest = state[24];\n    this.current_command = state[25];\n\n    this.data_end = state[26];\n    this.current_atapi_command = state[27];\n\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n};\n","\"use strict\";\n\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\n/** @const */ var CMOS_RTC_HOURS = 0x04;\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\n/** @const */ var CMOS_RTC_MONTH = 0x08;\n/** @const */ var CMOS_RTC_YEAR = 0x09;\n/** @const */ var CMOS_STATUS_A = 0x0a;\n/** @const */ var CMOS_STATUS_B = 0x0b;\n/** @const */ var CMOS_STATUS_C = 0x0c;\n/** @const */ var CMOS_STATUS_D = 0x0d;\n/** @const */ var CMOS_RESET_CODE = 0x0f;\n\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\n/** @const */ var CMOS_DISK_DATA = 0x12;\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\n/** @const */ var CMOS_CENTURY = 0x32;\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\n\n\n/**\n * RTC (real time clock) and CMOS\n * @constructor\n * @param {CPU} cpu\n */\nfunction RTC(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cmos_index = 0;\n    this.cmos_data = new Uint8Array(128);\n\n    // used for cmos entries\n    this.rtc_time = Date.now();\n    this.last_update = this.rtc_time;\n\n    // used for periodic interrupt\n    this.next_interrupt = 0;\n\n    this.periodic_interrupt = false;\n\n    // corresponds to default value for cmos_a\n    this.periodic_interrupt_time = 1000 / 1024;\n\n    this.cmos_a = 0x26;\n    this.cmos_b = 2;\n    this.cmos_c = 0;\n\n    this.nmi_disabled = 0;\n\n    cpu.io.register_write(0x70, this, function(out_byte)\n    {\n        this.cmos_index = out_byte & 0x7F;\n        this.nmi_disabled = out_byte >> 7;\n    });\n\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\n}\n\nRTC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.cmos_index;\n    state[1] = this.cmos_data;\n    state[2] = this.rtc_time;\n    state[3] = this.last_update;\n    state[4] = this.next_interrupt;\n\n    state[6] = this.periodic_interrupt;\n    state[7] = this.periodic_interrupt_time;\n    state[8] = this.cmos_a;\n    state[9] = this.cmos_b;\n    state[10] = this.cmos_c;\n    state[11] = this.nmi_disabled;\n\n    return state;\n};\n\nRTC.prototype.set_state = function(state)\n{\n    this.cmos_index = state[0];\n    this.cmos_data = state[1];\n    this.rtc_time = state[2];\n    this.last_update = state[3];\n    this.next_interrupt = state[4];\n\n    this.periodic_interrupt = state[6];\n    this.periodic_interrupt_time = state[7];\n    this.cmos_a = state[8];\n    this.cmos_b = state[9];\n    this.cmos_c = state[10];\n    this.nmi_disabled = state[11];\n};\n\nRTC.prototype.timer = function(time, legacy_mode)\n{\n    time = Date.now(); // XXX\n    this.rtc_time += time - this.last_update;\n    this.last_update = time;\n\n    if(this.periodic_interrupt && this.next_interrupt < time)\n    {\n        this.cpu.device_raise_irq(8);\n        this.cmos_c |= 1 << 6 | 1 << 7;\n\n        this.next_interrupt += this.periodic_interrupt_time *\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\n\n        return Math.max(0, time - this.next_interrupt);\n    }\n\n    return 100;\n};\n\nRTC.prototype.bcd_pack = function(n)\n{\n    var i = 0,\n        result = 0,\n        digit;\n\n    while(n)\n    {\n        digit = n % 10;\n\n        result |= digit << (4 * i);\n        i++;\n        n = (n - digit) / 10;\n    }\n\n    return result;\n};\n\nRTC.prototype.encode_time = function(t)\n{\n    if(this.cmos_b & 4)\n    {\n        // binary mode\n        return t;\n    }\n    else\n    {\n        return this.bcd_pack(t);\n    }\n};\n\n// TODO\n// - interrupt on update\n// - countdown\n// - letting bios/os set values\n// (none of these are used by seabios or the OSes we're\n// currently testing)\nRTC.prototype.cmos_port_read = function()\n{\n    var index = this.cmos_index;\n\n    //this.cmos_index = 0xD;\n\n    switch(index)\n    {\n        case CMOS_RTC_SECONDS:\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\n        case CMOS_RTC_MINUTES:\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\n        case CMOS_RTC_HOURS:\n            // TODO: 12 hour mode\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\n        case CMOS_RTC_DAY_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\n        case CMOS_RTC_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\n        case CMOS_RTC_YEAR:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\n\n        case CMOS_STATUS_A:\n            return this.cmos_a;\n        case CMOS_STATUS_B:\n            //dbg_log(\"cmos read from index \" + h(index));\n            return this.cmos_b;\n\n        case CMOS_STATUS_C:\n            // It is important to know that upon a IRQ 8, Status Register C\n            // will contain a bitmask telling which interrupt happened.\n            // What is important is that if register C is not read after an\n            // IRQ 8, then the interrupt will not happen again.\n            this.cpu.device_lower_irq(8);\n\n            dbg_log(\"cmos reg C read\", LOG_RTC);\n            // Missing IRQF flag\n            //return cmos_b & 0x70;\n            var c = this.cmos_c;\n\n            this.cmos_c &= ~0xF0;\n\n            return c;\n\n        case CMOS_STATUS_D:\n            return 0xFF;\n\n        case CMOS_CENTURY:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\n\n        default:\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\n            return this.cmos_data[this.cmos_index];\n    }\n};\n\nRTC.prototype.cmos_port_write = function(data_byte)\n{\n    switch(this.cmos_index)\n    {\n        case 0xA:\n            this.cmos_a = data_byte & 0x7F;\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\n\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\n            break;\n        case 0xB:\n            this.cmos_b = data_byte;\n            if(this.cmos_b & 0x40)\n            {\n                this.next_interrupt = Date.now();\n            }\n\n            if(this.cmos_b & 0x20) dbg_log(\"Unimplemented: alarm interrupt\", LOG_RTC);\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\n\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\n            break;\n        default:\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\n    }\n\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\n};\n\n/**\n * @param {number} index\n */\nRTC.prototype.cmos_read = function(index)\n{\n    dbg_assert(index < 128);\n    return this.cmos_data[index];\n};\n\n/**\n * @param {number} index\n * @param {number} value\n */\nRTC.prototype.cmos_write = function(index, value)\n{\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\n    dbg_assert(index < 128);\n    this.cmos_data[index] = value;\n};\n","\"use strict\";\n\n/** @const */\nvar A20_MASK = ~(1 << 20);\n/** @const */\nvar A20_MASK16 = ~(1 << 20 - 1);\n/** @const */\nvar A20_MASK32 = ~(1 << 20 - 2);\n\n/** @const */\nvar USE_A20 = false;\n\n\n// called by all memory writes\nCPU.prototype.debug_write = function(addr, size, value)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\n\n    this.debug_read(addr, size, true);\n}\n\n/**\n * @param {boolean=} is_write\n */\nCPU.prototype.debug_read = function(addr, size, is_write)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof addr === \"number\");\n    dbg_assert(!isNaN(addr));\n};\n\n\nCPU.prototype.mmap_read8 = function(addr)\n{\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\n};\n\nCPU.prototype.mmap_write8 = function(addr, value)\n{\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\n};\n\nCPU.prototype.mmap_read16 = function(addr)\n{\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\n\n    return fn(addr) | fn(addr + 1 | 0) << 8;\n};\n\nCPU.prototype.mmap_write16 = function(addr, value)\n{\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\n};\n\nCPU.prototype.mmap_read32 = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    return this.memory_map_read32[aligned_addr](addr);\n}\n\nCPU.prototype.mmap_write32 = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    this.memory_map_write32[aligned_addr](addr, value);\n}\n\nCPU.prototype.in_mapped_range = function(addr)\n{\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read8 = function(addr)\n{\n    this.debug_read(addr, 1);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read8(addr);\n    }\n    else\n    {\n        return this.mem8[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read16 = function(addr)\n{\n    this.debug_read(addr, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read16(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned16 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_read(addr << 1, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        return this.mmap_read16(addr << 1);\n    }\n    else\n    {\n        return this.mem16[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read32s = function(addr)\n{\n    this.debug_read(addr, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read32(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned32 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_read(addr << 2, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        return this.mmap_read32(addr << 2);\n    }\n    else\n    {\n        return this.mem32s[addr];\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write8 = function(addr, value)\n{\n    this.debug_write(addr, 1, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write8(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write16 = function(addr, value)\n{\n    this.debug_write(addr, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write16(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write_aligned16 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_write(addr << 1, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        this.mmap_write16(addr << 1, value);\n    }\n    else\n    {\n        this.mem16[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write32 = function(addr, value)\n{\n    this.debug_write(addr, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write32(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n        this.mem8[addr + 2 | 0] = value >> 16;\n        this.mem8[addr + 3 | 0] = value >> 24;\n    }\n};\n\nCPU.prototype.write_aligned32 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_write(addr << 2, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        this.mmap_write32(addr << 2, value);\n    }\n    else\n    {\n        this.mem32s[addr] = value;\n    }\n};\n\n/**\n * @param {Array.<number>|Uint8Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob = function(blob, offset)\n{\n    this.debug_write(offset, blob.length, 0)\n    dbg_assert(blob && blob.length >= 0);\n\n    this.mem8.set(blob, offset);\n};\n\n/**\n * @param {Array.<number>|Int32Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob32 = function(blob, offset)\n{\n    dbg_assert(blob && blob.length);\n    this.debug_write(offset, blob.length << 2, 0);\n    this.mem32s.set(blob, offset);\n};\n","\"use strict\";\n\n// http://wiki.osdev.org/PCI\n\nvar\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction PCI(cpu)\n{\n    this.pci_addr = new Uint8Array(4);\n    this.pci_value = new Uint8Array(4);\n    this.pci_response = new Uint8Array(4);\n    this.pci_status = new Uint8Array(4);\n\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\n\n    this.device_spaces = [];\n    this.devices = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 256; i++)\n    {\n        this.device_spaces[i] = undefined;\n        this.devices[i] = undefined;\n    }\n\n    this.io = cpu.io;\n\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write32(this.pci_addr32[0], value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\n        });\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\n        function()\n        {\n            return this.pci_response[0];\n        },\n        function()\n        {\n            return this.pci_response[1];\n        },\n        function()\n        {\n            return this.pci_response[2];\n        },\n        function()\n        {\n            return this.pci_response[3];\n        }\n    );\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\n        function()\n        {\n            return this.pci_status[0];\n        },\n        function()\n        {\n            return this.pci_status[1];\n        },\n        function()\n        {\n            return this.pci_status[2];\n        },\n        function()\n        {\n            return this.pci_status[3];\n        }\n    );\n\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\n        function(out_byte)\n        {\n            this.pci_addr[0] = out_byte & 0xFC;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[1] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[2] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[3] = out_byte;\n            this.pci_query();\n        }\n    );\n\n\n    // Some experimental PCI devices taken from my PC:\n\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\n    //var host_bridge = {\n    //    pci_id: 0,\n    //    pci_space: [\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    ],\n    //    pci_bars: [],\n    //};\n\n    var host_bridge = {\n        pci_id: 0,\n        pci_space: [\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82441FX PMC\",\n    };\n    this.register_device(host_bridge);\n\n    this.isa_bridge = {\n        pci_id: 1 << 3,\n        pci_space: [\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82371SB PIIX3 ISA\",\n    };\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\n\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\n    //this.register_device([\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\n    //], 0x1e << 3);\n}\n\nPCI.prototype.get_state = function()\n{\n    var state = [];\n\n    for(var i = 0; i < 256; i++)\n    {\n        state[i] = this.device_spaces[i];\n    }\n\n    state[256] = this.pci_addr;\n    state[257] = this.pci_value;\n    state[258] = this.pci_response;\n    state[259] = this.pci_status;\n\n    return state;\n};\n\nPCI.prototype.set_state = function(state)\n{\n    for(var i = 0; i < 256; i++)\n    {\n        var device = this.devices[i];\n        var space = state[i];\n\n        if(!device || !space)\n        {\n            if(device)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\n                        \"configuration but not in snapshot (\" + device.name + \")\");\n            }\n            if(space)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\n            }\n            continue;\n        }\n\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\n        {\n            var value = space[(0x10 >> 2) + bar_nr];\n\n            if(value & 1)\n            {\n                var bar = device.pci_bars[bar_nr];\n                var from = bar.original_bar & ~1 & 0xFFFF;\n                var to = value & ~1 & 0xFFFF;\n                this.set_io_bars(bar, from, to);\n            }\n            else\n            {\n                // memory, cannot be changed\n            }\n        }\n\n        this.device_spaces[i].set(space);\n    }\n\n    this.pci_addr.set(state[256]);\n    this.pci_value.set(state[257]);\n    this.pci_response.set(state[258]);\n    this.pci_status.set(state[259]);\n};\n\nPCI.prototype.pci_query = function()\n{\n    var dbg_line = \"query\";\n\n    // Bit | .31                     .0\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\n\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\n        addr = this.pci_addr[0] & 0xFC,\n        //devfn = bdf & 0xFF,\n        //bus = bdf >> 8,\n        dev = bdf >> 3 & 0x1F,\n        //fn = bdf & 7,\n        enabled = this.pci_addr[3] >> 7;\n\n    dbg_line += \" enabled=\" + enabled;\n    dbg_line += \" bdf=\" + h(bdf, 4);\n    dbg_line += \" dev=\" + h(dev, 2);\n    dbg_line += \" addr=\" + h(addr, 2);\n\n    var device = this.device_spaces[bdf];\n\n    if(device !== undefined)\n    {\n        this.pci_status32[0] = 0x80000000 | 0;\n\n        if(addr < device.byteLength)\n        {\n            this.pci_response32[0] = device[addr >> 2];\n        }\n        else\n        {\n            // required by freebsd-9.1\n            this.pci_response32[0] = 0;\n        }\n\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\n\n        if(addr >= device.byteLength)\n        {\n            dbg_line += \" (undef)\";\n        }\n\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\n\n        dbg_log(dbg_line, LOG_PCI);\n    }\n    else\n    {\n        this.pci_response32[0] = -1;\n        this.pci_status32[0] = 0;\n    }\n};\n\nPCI.prototype.pci_write8 = function(address, written)\n{\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 2), LOG_PCI);\n\n    space[addr] = written;\n};\n\nPCI.prototype.pci_write16 = function(address, written)\n{\n    dbg_assert((address & 1) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 4), LOG_PCI);\n\n    space[addr >>> 1] = written;\n};\n\nPCI.prototype.pci_write32 = function(address, written)\n{\n    dbg_assert((address & 3) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = this.device_spaces[bdf];\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    if(addr >= 0x10 && addr < 0x28)\n    {\n        var bar_nr = addr - 0x10 >> 2;\n        var bar = device.pci_bars[bar_nr];\n\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\n\n        if(bar)\n        {\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\n\n            var space_addr = addr >> 2;\n            var type = space[space_addr] & 1;\n\n            if((written | 3 | bar.size - 1)  === -1) // size check\n            {\n                written = ~(bar.size - 1) | type;\n\n                if(type === 0)\n                {\n                    space[space_addr] = written;\n                }\n            }\n            else\n            {\n                if(type === 0)\n                {\n                    // memory\n                    var original_bar = bar.original_bar;\n\n                    if((written & ~0xF) !== (original_bar & ~0xF))\n                    {\n                        // seabios\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\n                    }\n\n                    // changing isn't supported yet, reset to default\n                    space[space_addr] = original_bar;\n                }\n            }\n\n            if(type === 1)\n            {\n                // io\n                dbg_assert(type === 1);\n\n                var from = space[space_addr] & ~1 & 0xFFFF;\n                var to = written & ~1 & 0xFFFF;\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\n                this.set_io_bars(bar, from, to);\n                space[space_addr] = written | 1;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\n    }\n    else if(addr === 0x30)\n    {\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n\n        if(device.pci_rom_size)\n        {\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\n            {\n                space[addr >> 2] = -device.pci_rom_size | 0;\n            }\n            else\n            {\n                space[addr >> 2] = device.pci_rom_address | 0;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n    }\n    else\n    {\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n        space[addr >>> 2] = written;\n    }\n};\n\nPCI.prototype.register_device = function(device)\n{\n    dbg_assert(device.pci_id !== undefined);\n    dbg_assert(device.pci_space !== undefined);\n    dbg_assert(device.pci_bars !== undefined);\n\n    var device_id = device.pci_id;\n\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\n\n    dbg_assert(!this.devices[device_id]);\n    dbg_assert(device.pci_space.length >= 64);\n    dbg_assert(device_id < this.devices.length);\n\n    // convert bytewise notation from lspci to double words\n    var space = new Int32Array(64);\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\n    this.device_spaces[device_id] = space;\n    this.devices[device_id] = device;\n\n    var bar_space = space.slice(4, 10);\n\n    for(var i = 0; i < device.pci_bars.length; i++)\n    {\n        var bar = device.pci_bars[i];\n\n        if(!bar)\n        {\n            continue;\n        }\n\n        var bar_base = bar_space[i];\n        var type = bar_base & 1;\n\n        bar.original_bar = bar_base;\n        bar.entries = [];\n\n        if(type === 0)\n        {\n            // memory, not needed currently\n        }\n        else\n        {\n            dbg_assert(type === 1);\n            var port = bar_base & ~1;\n\n            for(var j = 0; j < bar.size; j++)\n            {\n                bar.entries[j] = this.io.ports[port + j];\n            }\n        }\n    }\n\n    return space;\n};\n\nPCI.prototype.set_io_bars = function(bar, from, to)\n{\n    var count = bar.size;\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\n\n    var ports = this.io.ports;\n\n    for(var i = 0; i < count; i++)\n    {\n        var old_entry = ports[from + i];\n        ports[from + i] = this.io.create_empty_entry();\n\n        if(old_entry.read8 === this.io.empty_port_read8 &&\n           old_entry.read16 === this.io.empty_port_read16 &&\n           old_entry.read32 === this.io.empty_port_read32 &&\n           old_entry.write8 === this.io.empty_port_write &&\n           old_entry.write16 === this.io.empty_port_write &&\n           old_entry.write32 === this.io.empty_port_write)\n        {\n            dbg_log(\"Move IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\n        }\n\n        var entry = bar.entries[i];\n        var empty_entry = ports[to + i];\n        dbg_assert(entry && empty_entry);\n\n        ports[to + i] = entry;\n\n        // these can fail if the os maps an io port in multiple bars (indicating a bug)\n        dbg_assert(empty_entry.read8 === this.io.empty_port_read8, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read16 === this.io.empty_port_read16, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read32 === this.io.empty_port_read32, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write8 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write16 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write32 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n    }\n};\n\nPCI.prototype.raise_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\n    var device = (pci_id >> 3) - 1 & 0xFF;\n    var parent_pin = pin + device & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_raise_irq(irq);\n};\n\nPCI.prototype.lower_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\n    var device = pci_id >> 3 & 0xFF;\n    var parent_pin = pin + device - 2 & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_lower_irq(irq);\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {CPU} cpu\n */\nfunction FloppyController(cpu, fda_image, fdb_image)\n{\n    /** @const @type {IO|undefined} */\n    this.io = cpu.io;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {DMA} */\n    this.dma = cpu.devices.dma;\n\n    this.bytes_expecting = 0;\n    this.receiving_command = new Uint8Array(10);\n    this.receiving_index = 0;\n    this.next_command = null;\n\n    this.response_data = new Uint8Array(10);\n    this.response_index = 0;\n    this.response_length = 0;\n\n    this.floppy_size = 0;\n\n    /* const */\n    this.fda_image = fda_image;\n\n    /* const */\n    this.fdb_image = fdb_image;\n\n\n    this.status_reg0 = 0;\n    this.status_reg1 = 0;\n    this.status_reg2 = 0;\n    this.drive = 0;\n\n    this.last_cylinder = 0;\n    this.last_head = 0;\n    this.last_sector = 1;\n\n    // this should actually be write-only ... but people read it anyway\n    this.dor = 0;\n\n    if(!fda_image)\n    {\n        // Needed for CD emulation provided by seabios\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\n\n        this.sectors_per_track = 0;\n        this.number_of_heads = 0;\n        this.number_of_cylinders = 0;\n\n        this.floppy_size = 0;\n    }\n    else\n    {\n        this.floppy_size = fda_image.byteLength;\n\n        var floppy_types = {\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\n        };\n\n        var number_of_cylinders,\n            sectors_per_track,\n            number_of_heads,\n            floppy_type = floppy_types[this.floppy_size >> 10];\n\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\n        {\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\n\n            sectors_per_track = floppy_type.sectors;\n            number_of_heads = floppy_type.heads;\n            number_of_cylinders = floppy_type.tracks;\n        }\n        else\n        {\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\n        }\n\n        this.sectors_per_track = sectors_per_track;\n        this.number_of_heads = number_of_heads;\n        this.number_of_cylinders = number_of_cylinders;\n    }\n\n    this.io.register_read(0x3F0, this, this.port3F0_read);\n    this.io.register_read(0x3F2, this, this.port3F2_read);\n    this.io.register_read(0x3F4, this, this.port3F4_read);\n    this.io.register_read(0x3F5, this, this.port3F5_read);\n    this.io.register_read(0x3F7, this, this.port3F7_read);\n\n    this.io.register_write(0x3F2, this, this.port3F2_write);\n    this.io.register_write(0x3F5, this, this.port3F5_write);\n}\n\nFloppyController.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.bytes_expecting;\n    state[1] = this.receiving_command;\n    state[2] = this.receiving_index;\n    //state[3] = this.next_command;\n    state[4] = this.response_data;\n    state[5] = this.response_index;\n    state[6] = this.response_length;\n    state[7] = this.floppy_size;\n    state[8] = this.status_reg0;\n    state[9] = this.status_reg1;\n    state[10] = this.status_reg2;\n    state[11] = this.drive;\n    state[12] = this.last_cylinder;\n    state[13] = this.last_head;\n    state[14] = this.last_sector;\n    state[15] = this.dor;\n    state[16] = this.sectors_per_track;\n    state[17] = this.number_of_heads;\n    state[18] = this.number_of_cylinders;\n\n    return state;\n};\n\nFloppyController.prototype.set_state = function(state)\n{\n    this.bytes_expecting = state[0];\n    this.receiving_command = state[1];\n    this.receiving_index = state[2];\n    this.next_command = state[3];\n    this.response_data = state[4];\n    this.response_index = state[5];\n    this.response_length = state[6];\n    this.floppy_size = state[7];\n    this.status_reg0 = state[8];\n    this.status_reg1 = state[9];\n    this.status_reg2 = state[10];\n    this.drive = state[11];\n    this.last_cylinder = state[12];\n    this.last_head = state[13];\n    this.last_sector = state[14];\n    this.dor = state[15];\n    this.sectors_per_track = state[16];\n    this.number_of_heads = state[17];\n    this.number_of_cylinders = state[18];\n};\n\nFloppyController.prototype.port3F0_read = function()\n{\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\n\n    return 0;\n};\n\n\nFloppyController.prototype.port3F4_read = function()\n{\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\n\n    var return_byte = 0x80;\n\n    if(this.response_index < this.response_length)\n    {\n        return_byte |= 0x40 | 0x10;\n    }\n\n    if((this.dor & 8) === 0)\n    {\n        return_byte |= 0x20;\n    }\n\n    return return_byte;\n};\n\nFloppyController.prototype.port3F7_read = function()\n{\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\n    return 0x00;\n}\n\nFloppyController.prototype.port3F5_read = function()\n{\n    if(this.response_index < this.response_length)\n    {\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\n        this.cpu.device_lower_irq(6);\n        return this.response_data[this.response_index++];\n    }\n    else\n    {\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\n        return 0xFF;\n    }\n};\n\nFloppyController.prototype.port3F5_write = function(reg_byte)\n{\n    if(!this.fda_image) return;\n\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\n\n    if(this.bytes_expecting > 0)\n    {\n        this.receiving_command[this.receiving_index++] = reg_byte;\n\n        this.bytes_expecting--;\n\n        if(this.bytes_expecting === 0)\n        {\n            if(DEBUG)\n            {\n                var log = \"3F5 command received: \";\n                for(var i = 0; i < this.receiving_index; i++)\n                    log += h(this.receiving_command[i]) + \" \";\n                dbg_log(log, LOG_FLOPPY);\n            }\n\n            this.next_command.call(this, this.receiving_command);\n        }\n    }\n    else\n    {\n        switch(reg_byte)\n        {\n            // TODO\n            //case 2:\n                //this.next_command = read_complete_track;\n                //this.bytes_expecting = 8;\n                //break;\n            case 0x03:\n                this.next_command = this.fix_drive_data;\n                this.bytes_expecting = 2;\n                break;\n            case 0x04:\n                this.next_command = this.check_drive_status;\n                this.bytes_expecting = 1;\n                break;\n            case 0x05:\n            case 0xC5:\n                this.next_command = function(args) { this.do_sector(true, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0xE6:\n                this.next_command = function(args) { this.do_sector(false, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0x07:\n                this.next_command = this.calibrate;\n                this.bytes_expecting = 1;\n                break;\n            case 0x08:\n                this.check_interrupt_status();\n                break;\n            case 0x4A:\n                this.next_command = this.read_sector_id;\n                this.bytes_expecting = 1;\n                break;\n            case 0x0F:\n                this.bytes_expecting = 2;\n                this.next_command = this.seek;\n                break;\n            case 0x0E:\n                // dump regs\n                dbg_log(\"dump registers\", LOG_FLOPPY);\n                this.response_data[0] = 0x80;\n                this.response_index = 0;\n                this.response_length = 1;\n\n                this.bytes_expecting = 0;\n                break;\n\n            default:\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\n        }\n\n        this.receiving_index = 0;\n    }\n};\n\nFloppyController.prototype.port3F2_read = function()\n{\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\n    return this.dor;\n}\n\nFloppyController.prototype.port3F2_write = function(value)\n{\n    if((value & 4) === 4 && (this.dor & 4) === 0)\n    {\n        // reset\n        this.cpu.device_raise_irq(6);\n    }\n\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\n\n    this.dor = value;\n}\n\nFloppyController.prototype.check_drive_status = function(args)\n{\n    dbg_log(\"check drive status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 1;\n    this.response_data[0] = 1 << 5;\n}\n\nFloppyController.prototype.seek = function(args)\n{\n    dbg_log(\"seek\", LOG_FLOPPY);\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\n\n    this.last_cylinder = args[1];\n    this.last_head = args[0] >> 2 & 1;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.calibrate = function(args)\n{\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.check_interrupt_status = function()\n{\n    // do not trigger an interrupt here\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 2;\n\n    this.response_data[0] = 1 << 5;\n    this.response_data[1] = this.last_cylinder;\n}\n\nFloppyController.prototype.do_sector = function(is_write, args)\n{\n    var head = args[2],\n        cylinder = args[1],\n        sector = args[3],\n        sector_size = 128 << args[4],\n        read_count = args[5] - args[3] + 1,\n\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\n\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\n\n    if(!args[4])\n    {\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\n    }\n\n    if(!this.fda_image)\n    {\n        return;\n    }\n\n    if(is_write)\n    {\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n    else\n    {\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n};\n\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\n{\n    if(error)\n    {\n        // TODO: Set appropriate bits\n        return;\n    }\n\n    sector++;\n\n    if(sector > this.sectors_per_track)\n    {\n        sector = 1;\n        head++;\n\n        if(head >= this.number_of_heads)\n        {\n            head = 0;\n            cylinder++;\n        }\n    }\n\n    this.last_cylinder = cylinder;\n    this.last_head = head;\n    this.last_sector = sector;\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = head << 2 | 0x20;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = cylinder;\n    this.response_data[4] = head;\n    this.response_data[5] = sector;\n    this.response_data[6] = args[4];\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.fix_drive_data = function(args)\n{\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\n}\n\nFloppyController.prototype.read_sector_id = function(args)\n{\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = 0;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = 0;\n    this.response_data[4] = 0;\n    this.response_data[5] = 0;\n    this.response_data[6] = 0;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.raise_irq = function()\n{\n    if(this.dor & 8)\n    {\n        this.cpu.device_raise_irq(6);\n    }\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction DMA(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.channel_page = new Uint8Array(8);\n    this.channel_pagehi = new Uint8Array(8);\n    this.channel_addr = new Uint16Array(8);\n    this.channel_addr_init = new Uint16Array(8);\n    this.channel_count = new Uint16Array(8);\n    this.channel_count_init = new Uint16Array(8);\n    this.channel_mask = new Uint8Array(8);\n    this.channel_mode = new Uint8Array(8);\n    this.unmask_listeners = [];\n\n    this.lsb_msb_flipflop = 0;\n\n    var io = cpu.io;\n\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\n\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\n\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\n\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\n\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\n\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\n\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\n\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\n\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\n\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\n\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\n\n    io.register_write(0x0C, this, this.portC_write);\n    io.register_write(0xD8, this, this.portC_write);\n}\n\nDMA.prototype.get_state = function()\n{\n    return [\n        this.channel_page,\n        this.channel_pagehi,\n        this.channel_addr,\n        this.channel_addr_init,\n        this.channel_count,\n        this.channel_count_init,\n        this.channel_mask,\n        this.channel_mode,\n        this.lsb_msb_flipflop,\n    ];\n};\n\nDMA.prototype.set_state = function(state)\n{\n    this.channel_page = state[0];\n    this.channel_pagehi = state[1];\n    this.channel_addr = state[2];\n    this.channel_addr_init = state[3];\n    this.channel_count = state[4];\n    this.channel_count_init = state[5];\n    this.channel_mask = state[6];\n    this.channel_mode = state[7];\n    this.lsb_msb_flipflop = state[8];\n};\n\nDMA.prototype.port_count_write = function(channel, data_byte)\n{\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_count[channel] =\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\n\n    this.channel_count_init[channel] =\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_count_read = function(channel)\n{\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_count[channel]);\n};\n\nDMA.prototype.port_addr_write = function(channel, data_byte)\n{\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_addr[channel] =\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\n\n    this.channel_addr_init[channel] =\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_addr_read = function(channel)\n{\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_addr[channel]);\n};\n\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\n{\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_pagehi[channel] = data_byte;\n};\n\nDMA.prototype.port_pagehi_read = function(channel)\n{\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_pagehi[channel];\n};\n\nDMA.prototype.port_page_write = function(channel, data_byte)\n{\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_page[channel] = data_byte;\n};\n\nDMA.prototype.port_page_read = function(channel)\n{\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_page[channel];\n};\n\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    var value = data_byte & 0x4 ? 1 : 0;\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\n    this.update_mask(channel, value);\n};\n\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\n{\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\n    for(var i = 0; i < 4; i++)\n    {\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\n    }\n};\n\nDMA.prototype.port_multimask_read = function(channel_offset)\n{\n    var value = 0;\n    value |= this.channel_mask[channel_offset + 0];\n    value |= this.channel_mask[channel_offset + 1] << 1;\n    value |= this.channel_mask[channel_offset + 2] << 2;\n    value |= this.channel_mask[channel_offset + 3] << 3;\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\n    return value;\n};\n\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_mode[channel] = data_byte;\n};\n\nDMA.prototype.portC_write = function(data_byte)\n{\n    dbg_log(\"flipflop reset\", LOG_DMA);\n    this.lsb_msb_flipflop = 0;\n};\n\nDMA.prototype.on_unmask = function(fn, this_value)\n{\n    this.unmask_listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\nDMA.prototype.update_mask = function(channel, value)\n{\n    if(this.channel_mask[channel] !== value)\n    {\n        this.channel_mask[channel] = value;\n\n        if(!value)\n        {\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\n            for(var i = 0; i < this.unmask_listeners.length; i++)\n            {\n                this.unmask_listeners[i].fn.call(\n                    this.unmask_listeners[i].this_value,\n                    channel\n                );\n            }\n        }\n    }\n};\n\n// read data, write to memory\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\n{\n    var read_count = this.count_get_8bit(channel),\n        addr = this.address_get_8bit(channel);\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\n\n    if(len < read_count)\n    {\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\n    }\n\n    if(start + read_count > buffer.byteLength)\n    {\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        var cpu = this.cpu;\n        this.channel_addr[channel] += read_count;\n\n        buffer.get(start, read_count, function(data)\n        {\n            cpu.write_blob(data, addr);\n            fn(false);\n        });\n    }\n};\n\n// write data, read memory\n// start and len in bytes\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\n{\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\n        bytes_per_count = channel >= 5 ? 2 : 1,\n        read_bytes = read_count * bytes_per_count,\n        addr = this.address_get_8bit(channel),\n        unfinished = false,\n        want_more = false,\n        autoinit = this.channel_mode[channel] & 0x10;\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\n\n    if(len < read_bytes)\n    {\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\n        read_count = Math.floor(len / bytes_per_count);\n        read_bytes = read_count * bytes_per_count;\n        unfinished = true;\n    }\n    else if(len > read_bytes)\n    {\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\n        want_more = true;\n    }\n\n    if(start + read_bytes > buffer.byteLength)\n    {\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        this.channel_addr[channel] += read_count;\n        this.channel_count[channel] -= read_count;\n        // when complete, counter should underflow to 0xFFFF\n\n        if(!unfinished && autoinit)\n        {\n            dbg_log(\"DMA autoinit\", LOG_DMA);\n            this.channel_addr[channel] = this.channel_addr_init[channel];\n            this.channel_count[channel] = this.channel_count_init[channel];\n        }\n\n        buffer.set(start,\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\n                () =>\n                {\n                    if(want_more && autoinit)\n                    {\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\n                    }\n                    else\n                    {\n                        fn(false);\n                    }\n                }\n            );\n    }\n};\n\nDMA.prototype.address_get_8bit = function(channel)\n{\n    var addr = this.channel_addr[channel];\n\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\n    if(channel >= 5)\n    {\n        addr = (addr << 1);\n    }\n\n    addr &= 0xFFFF;\n    addr |= this.channel_page[channel] << 16;\n    addr |= this.channel_pagehi[channel] << 24;\n\n    return addr;\n};\n\nDMA.prototype.count_get_8bit = function(channel)\n{\n    var count = this.channel_count[channel] + 1;\n\n    if(channel >= 5)\n    {\n        count *= 2;\n    }\n\n    return count;\n};\n\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\n{\n    if(!continuing)\n    {\n        this.lsb_msb_flipflop ^= 1;\n    }\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return old_dword & ~0xFF | new_byte;\n    }\n    else\n    {\n        // high byte\n        return old_dword & ~0xFF00 | new_byte << 8;\n    }\n};\n\nDMA.prototype.flipflop_read = function(dword)\n{\n    this.lsb_msb_flipflop ^= 1;\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return dword & 0xFF;\n    }\n    else\n    {\n        // high byte\n        return (dword >> 8) & 0xFF;\n    }\n};\n","\"use strict\";\n\n/**\n * @const\n * In kHz\n */\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\n\n/**\n * @constructor\n *\n * Programmable Interval Timer\n */\nfunction PIT(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.bus = bus;\n\n    this.counter_start_time = new Float64Array(3);\n    this.counter_start_value = new Uint16Array(3);\n\n    this.counter_next_low = new Uint8Array(4);\n    this.counter_enabled = new Uint8Array(4);\n    this.counter_mode = new Uint8Array(4);\n    this.counter_read_mode = new Uint8Array(4);\n\n    // 2 = latch low, 1 = latch high, 0 = no latch\n    this.counter_latch = new Uint8Array(4);\n    this.counter_latch_value = new Uint16Array(3);\n\n    this.counter_reload = new Uint16Array(3);\n\n    // TODO:\n    // - counter2 can be controlled by an input\n\n    cpu.io.register_read(0x61, this, function()\n    {\n        var now = v86.microtick();\n\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\n        var counter2_out = this.did_rollover(2, now);\n\n        return ref_toggle << 4 | counter2_out << 5;\n    });\n    cpu.io.register_write(0x61, this, function(data)\n    {\n        if(data & 1)\n        {\n            this.bus.send(\"pcspeaker-enable\");\n        }\n        else\n        {\n            this.bus.send(\"pcspeaker-disable\");\n        }\n    });\n\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\n\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\n\n    cpu.io.register_write(0x43, this, this.port43_write);\n}\n\nPIT.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.counter_next_low;\n    state[1] = this.counter_enabled;\n    state[2] = this.counter_mode;\n    state[3] = this.counter_read_mode;\n    state[4] = this.counter_latch;\n    state[5] = this.counter_latch_value;\n    state[6] = this.counter_reload;\n    state[7] = this.counter_start_time;\n    state[8] = this.counter_start_value;\n\n    return state;\n};\n\nPIT.prototype.set_state = function(state)\n{\n    this.counter_next_low = state[0];\n    this.counter_enabled = state[1];\n    this.counter_mode = state[2];\n    this.counter_read_mode = state[3];\n    this.counter_latch = state[4];\n    this.counter_latch_value = state[5];\n    this.counter_reload = state[6];\n    this.counter_start_time = state[7];\n    this.counter_start_value = state[8];\n};\n\nPIT.prototype.timer = function(now, no_irq)\n{\n    var time_to_next_interrupt = 100;\n\n    // counter 0 produces interrupts\n    if(!no_irq)\n    {\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\n        {\n            time_to_next_interrupt = 0;\n\n            this.counter_start_value[0] = this.get_counter_value(0, now);\n            this.counter_start_time[0] = now;\n\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\n\n            this.cpu.device_raise_irq(0);\n            var mode = this.counter_mode[0];\n\n            if(mode === 0)\n            {\n                this.counter_enabled[0] = 0;\n            }\n        }\n        else\n        {\n            this.cpu.device_lower_irq(0);\n        }\n    }\n    time_to_next_interrupt = 0;\n\n    return time_to_next_interrupt;\n};\n\nPIT.prototype.get_counter_value = function(i, now)\n{\n    if(!this.counter_enabled[i])\n    {\n        return 0;\n    }\n\n    var diff = now - this.counter_start_time[i];\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n\n    var value = this.counter_start_value[i] - diff_in_ticks;\n\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\n\n    var reload = this.counter_reload[i];\n\n    if(value >= reload)\n    {\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\n        value %= reload;\n    }\n    else if(value < 0)\n    {\n        value = value % reload + reload;\n    }\n\n    return value;\n};\n\nPIT.prototype.did_rollover = function(i, now)\n{\n    var diff = now - this.counter_start_time[i];\n\n    if(diff < 0)\n    {\n        // should only happen after restore_state\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\n        return true;\n    }\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\n\n    return this.counter_start_value[i] < diff_in_ticks;\n};\n\nPIT.prototype.counter_read = function(i)\n{\n    var latch = this.counter_latch[i];\n\n    if(latch)\n    {\n        this.counter_latch[i]--;\n\n        if(latch === 2)\n        {\n            return this.counter_latch_value[i] & 0xFF;\n        }\n        else\n        {\n            return this.counter_latch_value[i] >> 8;\n        }\n    }\n    else\n    {\n        var next_low = this.counter_next_low[i];\n\n        if(this.counter_mode[i] === 3)\n        {\n            this.counter_next_low[i] ^= 1;\n        }\n\n        var value = this.get_counter_value(i, v86.microtick());\n\n        if(next_low)\n        {\n            return value & 0xFF;\n        }\n        else\n        {\n            return value >> 8;\n        }\n    }\n};\n\nPIT.prototype.counter_write = function(i, value)\n{\n    if(this.counter_next_low[i])\n    {\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\n    }\n    else\n    {\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\n    }\n\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\n    {\n        if(!this.counter_reload[i])\n        {\n            this.counter_reload[i] = 0xFFFF;\n        }\n\n        // depends on the mode, should actually\n        // happen on the first tick\n        this.counter_start_value[i] = this.counter_reload[i];\n\n        this.counter_enabled[i] = true;\n\n        this.counter_start_time[i] = v86.microtick();\n\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\n    }\n\n    if(this.counter_read_mode[i] === 3)\n    {\n        this.counter_next_low[i] ^= 1;\n    }\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n\nPIT.prototype.port43_write = function(reg_byte)\n{\n    var mode = reg_byte >> 1 & 7,\n        binary_mode = reg_byte & 1,\n        i = reg_byte >> 6 & 3,\n        read_mode = reg_byte >> 4 & 3;\n\n    if(i === 1)\n    {\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\n    }\n\n    if(i === 3)\n    {\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\n        return;\n    }\n\n    if(read_mode === 0)\n    {\n        // latch\n        this.counter_latch[i] = 2;\n        var value = this.get_counter_value(i, v86.microtick());\n        dbg_log(\"latch: \" + value, LOG_PIT);\n        this.counter_latch_value[i] = value ? value - 1 : 0\n\n        return;\n    }\n\n    if(mode >= 6)\n    {\n        // 6 and 7 are aliased to 2 and 3\n        mode &= ~4;\n    }\n\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\n\n    if(read_mode === 1)\n    {\n        // msb\n        this.counter_next_low[i] = 0;\n    }\n    else if(read_mode === 2)\n    {\n        // lsb\n        this.counter_next_low[i] = 1;\n    }\n    else\n    {\n        // first lsb then msb\n        this.counter_next_low[i] = 1;\n    }\n\n    if(i === 0)\n    {\n        this.cpu.device_lower_irq(0);\n    }\n\n    if(mode === 0)\n    {\n    }\n    else if(mode === 3 || mode === 2)\n    {\n        // what is the difference\n    }\n    else\n    {\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\n    }\n\n    this.counter_mode[i] = mode;\n    this.counter_read_mode[i] = read_mode;\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n","\"use strict\";\n\n\nvar\n    /**\n     * Always 64k\n     * @const\n     */\n    VGA_BANK_SIZE = 64 * 1024,\n\n    /** @const */\n    MAX_XRES = 2560,\n\n    /** @const */\n    MAX_YRES = 1600,\n\n    /** @const */\n    MAX_BPP = 32;\n\n/** @const */\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\nvar VGA_LFB_ADDRESS = 0xE0000000;\n\n/** @const */\nvar VGA_PIXEL_BUFFER_START = 4 * VGA_BANK_SIZE;\n\n/**\n * @const\n * Equals the maximum number of pixels for non svga.\n * 8 pixels per byte.\n */\nvar VGA_PIXEL_BUFFER_SIZE = 8 * VGA_BANK_SIZE;\n\n/** @const */\nvar VGA_MIN_MEMORY_SIZE = VGA_PIXEL_BUFFER_START + VGA_PIXEL_BUFFER_SIZE;\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_START = Uint32Array.from([\n    0xA0000,\n    0xA0000,\n    0xB0000,\n    0xB8000,\n]);\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_SIZE = Uint32Array.from([\n    0x20000, // 128K\n    0x10000, // 64K\n    0x8000, // 32K\n    0x8000, // 32K\n]);\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {number} vga_memory_size\n */\nfunction VGAScreen(cpu, bus, vga_memory_size)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.vga_memory_size = vga_memory_size;\n\n    /** @type {number} */\n    this.cursor_address = 0;\n\n    /** @type {number} */\n    this.cursor_scanline_start = 0xE;\n\n    /** @type {number} */\n    this.cursor_scanline_end = 0xF;\n\n    /**\n     * Number of columns in text mode\n     * @type {number}\n     */\n    this.max_cols = 80;\n\n    /**\n     * Number of rows in text mode\n     * @type {number}\n     */\n    this.max_rows = 25;\n\n    /**\n     * Width in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_width = 0;\n\n    /**\n     * Height in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_height = 0;\n\n    /**\n     * Logical width in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_width = 0;\n\n    /**\n     * Logical height in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_height = 0;\n\n    /**\n     * The rectangular fragments of the image buffer, and their destination\n     * locations, to be drawn every screen_fill_buffer during VGA modes.\n     * @type {Array<Object<string, number>>}\n     */\n    this.layers = [];\n\n    /**\n     * video memory start address\n     * @type {number}\n     */\n    this.start_address = 0;\n\n    /**\n     * Start address - a copy of start_address that only gets updated\n     * during VSync, used for panning and page flipping\n     * @type {number}\n     */\n    this.start_address_latched = 0;\n\n    /**\n     * Unimplemented CRTC registers go here\n     */\n    this.crtc = new Uint8Array(0x19);\n\n    // Implemented CRTC registers:\n\n    /** @type {number} */\n    this.crtc_mode = 0;\n\n    /** @type {number} */\n    this.horizontal_display_enable_end = 0;\n\n    /** @type {number} */\n    this.horizontal_blank_start = 0;\n\n    /** @type {number} */\n    this.vertical_display_enable_end = 0;\n\n    /** @type {number} */\n    this.vertical_blank_start = 0;\n\n    /** @type {number} */\n    this.underline_location_register = 0;\n\n    /** @type {number} */\n    this.preset_row_scan = 0;\n\n    /** @type {number} */\n    this.offset_register = 0;\n\n    /** @type {number} */\n    this.line_compare = 0;\n\n    // End of CRTC registers\n\n    /**\n     * Used for svga, e.g. banked modes\n     * @type{boolean}\n     */\n    this.graphical_mode_is_linear = true;\n\n    /** @type {boolean} */\n    this.graphical_mode = false;\n    setTimeout(() => { bus.send(\"screen-set-mode\", this.graphical_mode); }, 0);\n\n    /*\n     * VGA palette containing 256 colors for video mode 13, svga 8bpp, etc.\n     * Needs to be initialised by the BIOS\n     */\n    this.vga256_palette = new Int32Array(256);\n\n    /**\n     * VGA read latches\n     * @type{number}\n     */\n    this.latch_dword = 0;\n\n    /** @type {number} */\n    this.svga_width = 0;\n\n    /** @type {number} */\n    this.svga_height = 0;\n\n    this.svga_enabled = false;\n\n    /** @type {number} */\n    this.svga_bpp = 32;\n\n    /** @type {number} */\n    this.svga_bank_offset = 0;\n\n    /**\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\n     * In bytes\n     * @type {number}\n     */\n    this.svga_offset = 0;\n\n    // Experimental, could probably need some changes\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\n    this.pci_space = [\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x12 << 3;\n    this.pci_bars = [\n        {\n            size: vga_memory_size,\n        },\n    ];\n\n    // TODO: Should be matched with vga bios size and mapping address\n    // Seabios config for this device:\n    // CONFIG_VGA_PCI=y\n    // CONFIG_OVERRIDE_PCI_ID=y\n    // CONFIG_VGA_VID=0x10de\n    // CONFIG_VGA_DID=0x0a20\n\n    this.pci_rom_size = 0x10000;\n    this.pci_rom_address = 0xFEB00000;\n\n    this.name = \"vga\";\n\n    this.stats = {\n        is_graphical: false,\n        res_x: 0,\n        res_y: 0,\n        bpp: 0,\n    };\n\n    this.index_crtc = 0;\n\n    // index for setting colors through port 3C9h\n    this.dac_color_index_write = 0;\n    this.dac_color_index_read = 0;\n    this.dac_state = 0;\n\n    this.dac_map = new Uint8Array(0x10);\n\n    this.attribute_controller_index = -1;\n    this.palette_source = 0x20;\n    this.attribute_mode = 0;\n    this.color_plane_enable = 0;\n    this.horizontal_panning = 0;\n    this.color_select = 0;\n\n    this.sequencer_index = -1;\n\n    // bitmap of planes 0-3\n    this.plane_write_bm = 0xF;\n    this.sequencer_memory_mode = 0;\n    this.clocking_mode = 0;\n    this.graphics_index = -1;\n\n    this.plane_read = 0, // value 0-3, which plane to read\n    this.planar_mode = 0;\n    this.planar_rotate_reg = 0;\n    this.planar_bitmap = 0xFF;\n    this.planar_setreset = 0;\n    this.planar_setreset_enable = 0;\n    this.miscellaneous_graphics_register = 0;\n\n    this.color_compare = 0;\n    this.color_dont_care = 0;\n\n    this.max_scan_line = 0;\n\n    this.miscellaneous_output_register = 0xff;\n    this.port_3DA_value = 0xFF;\n\n\n    var io = cpu.io;\n\n    io.register_write(0x3C0, this, this.port3C0_write);\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\n\n    io.register_read(0x3C1, this, this.port3C1_read);\n    io.register_write(0x3C2, this, this.port3C2_write);\n\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\n\n    io.register_read(0x3C4, this, this.port3C4_read);\n    io.register_read(0x3C5, this, this.port3C5_read);\n\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\n\n    io.register_read(0x3CE, this, this.port3CE_read);\n    io.register_read(0x3CF, this, this.port3CF_read);\n\n    io.register_write(0x3C7, this, this.port3C7_write);\n    io.register_read(0x3C7, this, this.port3C7_read);\n    io.register_write(0x3C8, this, this.port3C8_write);\n    io.register_read(0x3C8, this, this.port3C8_read);\n    io.register_write(0x3C9, this, this.port3C9_write);\n    io.register_read(0x3C9, this, this.port3C9_read);\n\n    io.register_read(0x3CC, this, this.port3CC_read);\n\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\n    io.register_read(0x3D4, this, this.port3D4_read);\n    io.register_read(0x3D5, this, this.port3D5_read);\n\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\n\n    io.register_read(0x3DA, this, this.port3DA_read);\n    io.register_read(0x3BA, this, this.port3DA_read);\n\n\n    // Bochs VBE Extensions\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\n    this.dispi_index = -1;\n    this.dispi_enable_value = 0;\n\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\n\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\n\n    if(this.vga_memory_size === undefined || this.vga_memory_size < VGA_MIN_MEMORY_SIZE)\n    {\n        this.vga_memory_size = VGA_MIN_MEMORY_SIZE;\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\n    }\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\n    {\n        // round up to next 64k\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\n        this.vga_memory_size++;\n    }\n\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\n\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n\n    this.dest_buffer = undefined;\n\n    bus.register(\"screen-tell-buffer\", function(data)\n    {\n        if(this.dest_buffer && data[0])\n        {\n            data[0].set(this.dest_buffer.subarray(0, data[0].length));\n        }\n        this.dest_buffer = data[0];\n    }, this);\n\n    bus.register(\"screen-fill-buffer\", function()\n    {\n        this.screen_fill_buffer();\n    }, this);\n\n\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.pixel_buffer = new Uint8Array(this.svga_memory.buffer,\n        VGA_PIXEL_BUFFER_START, VGA_PIXEL_BUFFER_SIZE);\n\n    var me = this;\n    io.mmap_register(0xA0000, 0x20000,\n        function(addr) { return me.vga_memory_read(addr); },\n        function(addr, value) { me.vga_memory_write(addr, value); }\n    );\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\n        function(addr) { return me.svga_memory_read8(addr); },\n        function(addr, value) { me.svga_memory_write8(addr, value); },\n        function(addr) { return me.svga_memory_read32(addr); },\n        function(addr, value) { me.svga_memory_write32(addr, value); }\n    );\n\n    cpu.devices.pci.register_device(this);\n}\n\nVGAScreen.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.vga_memory_size;\n    state[1] = this.cursor_address;\n    state[2] = this.cursor_scanline_start;\n    state[3] = this.cursor_scanline_end;\n    state[4] = this.max_cols;\n    state[5] = this.max_rows;\n    state[6] = this.layers;\n    state[7] = this.dac_state;\n    state[8] = this.start_address;\n    state[9] = this.graphical_mode;\n    state[10] = this.vga256_palette;\n    state[11] = this.latch_dword;\n    state[12] = this.color_compare;\n    state[13] = this.color_dont_care;\n    state[14] = this.miscellaneous_graphics_register;\n    state[15] = this.svga_width;\n    state[16] = this.svga_height;\n    state[17] = this.crtc_mode;\n    state[18] = this.svga_enabled;\n    state[19] = this.svga_bpp;\n    state[20] = this.svga_bank_offset;\n    state[21] = this.svga_offset;\n    state[22] = this.index_crtc;\n    state[23] = this.dac_color_index_write;\n    state[24] = this.dac_color_index_read;\n    state[25] = this.dac_map;\n    state[26] = this.sequencer_index;\n    state[27] = this.plane_write_bm;\n    state[28] = this.sequencer_memory_mode;\n    state[29] = this.graphics_index;\n    state[30] = this.plane_read;\n    state[31] = this.planar_mode;\n    state[32] = this.planar_rotate_reg;\n    state[33] = this.planar_bitmap;\n    state[34] = this.max_scan_line;\n    state[35] = this.miscellaneous_output_register;\n    state[36] = this.port_3DA_value;\n    state[37] = this.dispi_index;\n    state[38] = this.dispi_enable_value;\n    state[39] = this.svga_memory;\n    state[40] = this.graphical_mode_is_linear;\n    state[41] = this.attribute_controller_index;\n    state[42] = this.offset_register;\n    state[43] = this.planar_setreset;\n    state[44] = this.planar_setreset_enable;\n    state[45] = this.start_address_latched;\n    state[46] = this.crtc;\n    state[47] = this.horizontal_display_enable_end;\n    state[48] = this.horizontal_blank_start;\n    state[49] = this.vertical_display_enable_end;\n    state[50] = this.vertical_blank_start;\n    state[51] = this.underline_location_register;\n    state[52] = this.preset_row_scan;\n    state[53] = this.offset_register;\n    state[54] = this.palette_source;\n    state[55] = this.attribute_mode;\n    state[56] = this.color_plane_enable;\n    state[57] = this.horizontal_panning;\n    state[58] = this.color_select;\n    state[59] = this.clocking_mode;\n    state[60] = this.line_compare;\n\n    return state;\n};\n\nVGAScreen.prototype.set_state = function(state)\n{\n    this.vga_memory_size = state[0];\n    this.cursor_address = state[1];\n    this.cursor_scanline_start = state[2];\n    this.cursor_scanline_end = state[3];\n    this.max_cols = state[4];\n    this.max_rows = state[5];\n    this.layers = state[6];\n    this.dac_state = state[7];\n    this.start_address = state[8];\n    this.graphical_mode = state[9];\n    this.vga256_palette = state[10];\n    this.latch_dword = state[11];\n    this.color_compare = state[12];\n    this.color_dont_care = state[13];\n    this.miscellaneous_graphics_register = state[14];\n    this.svga_width = state[15];\n    this.svga_height = state[16];\n    this.crtc_mode = state[17];\n    this.svga_enabled = state[18];\n    this.svga_bpp = state[19];\n    this.svga_bank_offset = state[20];\n    this.svga_offset = state[21];\n    this.index_crtc = state[22];\n    this.dac_color_index_write = state[23];\n    this.dac_color_index_read = state[24];\n    this.dac_map = state[25];\n    this.sequencer_index = state[26];\n    this.plane_write_bm = state[27];\n    this.sequencer_memory_mode = state[28];\n    this.graphics_index = state[29];\n    this.plane_read = state[30];\n    this.planar_mode = state[31];\n    this.planar_rotate_reg = state[32];\n    this.planar_bitmap = state[33];\n    this.max_scan_line = state[34];\n    this.miscellaneous_output_register = state[35];\n    this.port_3DA_value = state[36];\n    this.dispi_index = state[37];\n    this.dispi_enable_value = state[38];\n    this.svga_memory.set(state[39]);\n    this.graphical_mode_is_linear = state[40];\n    this.attribute_controller_index = state[41];\n    this.offset_register = state[42];\n    this.planar_setreset = state[43];\n    this.planar_setreset_enable = state[44];\n    this.start_address_latched = state[45];\n    this.crtc.set(state[46]);\n    this.horizontal_display_enable_end = state[47];\n    this.horizontal_blank_start = state[48];\n    this.vertical_display_enable_end = state[49];\n    this.vertical_blank_start = state[50];\n    this.underline_location_register = state[51];\n    this.preset_row_scan = state[52];\n    this.offset_register = state[53];\n    this.palette_source = state[54];\n    this.attribute_mode = state[55];\n    this.color_plane_enable = state[56];\n    this.horizontal_panning = state[57];\n    this.color_select = state[58];\n    this.clocking_mode = state[59];\n    this.line_compare = state[60];\n\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\n\n    if(this.graphical_mode)\n    {\n        // Ensure set_size_graphical will update\n        this.screen_width = 0;\n        this.screen_height = 0;\n\n        if(this.svga_enabled)\n        {\n            this.set_size_graphical(this.svga_width, this.svga_height,\n                this.svga_bpp, this.svga_width, this.svga_height);\n            this.update_layers();\n        }\n        else\n        {\n            this.update_vga_size();\n            this.complete_replot();\n        }\n    }\n    else\n    {\n        this.set_size_text(this.max_cols, this.max_rows);\n        this.update_cursor_scanline();\n        this.update_cursor();\n    }\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.vga_memory_read = function(addr)\n{\n    if(this.svga_enabled && this.graphical_mode_is_linear)\n    {\n        addr -= 0xA0000;\n        addr |= this.svga_bank_offset;\n\n        return this.svga_memory[addr];\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    // VGA chip only decodes addresses within the selected memory space.\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga read outside memory space: addr:\" + h(addr), LOG_VGA);\n        return 0;\n    }\n\n    this.latch_dword = this.plane0[addr];\n    this.latch_dword |= this.plane1[addr] << 8;\n    this.latch_dword |= this.plane2[addr] << 16;\n    this.latch_dword |= this.plane3[addr] << 24;\n\n    if(this.planar_mode & 0x08)\n    {\n        // read mode 1\n        var reading = 0xFF;\n\n        if(this.color_dont_care & 0x1)\n        {\n            reading &= this.plane0[addr] ^ ~(this.color_compare & 0x1 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x2)\n        {\n            reading &= this.plane1[addr] ^ ~(this.color_compare & 0x2 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x4)\n        {\n            reading &= this.plane2[addr] ^ ~(this.color_compare & 0x4 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x8)\n        {\n            reading &= this.plane3[addr] ^ ~(this.color_compare & 0x8 ? 0xFF : 0x00);\n        }\n\n        return reading;\n    }\n    else\n    {\n        // read mode 0\n\n        var plane = this.plane_read;\n        if(!this.graphical_mode)\n        {\n            // We currently put all text data linearly\n            plane = 0;\n        }\n        else if(this.sequencer_memory_mode & 0x8)\n        {\n            // Chain 4\n            plane = addr & 0x3;\n            addr &= ~0x3;\n        }\n        else if(this.planar_mode & 0x10)\n        {\n            // Odd/Even host read\n            plane = addr & 0x1;\n            addr &= ~0x1;\n        }\n        return this.vga_memory[plane << 16 | addr];\n    }\n};\n\nVGAScreen.prototype.vga_memory_write = function(addr, value)\n{\n    if(this.svga_enabled && this.graphical_mode && this.graphical_mode_is_linear)\n    {\n        // vbe banked mode\n        addr -= 0xA0000;\n        this.vga_memory_write_graphical_linear(addr, value);\n        return;\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga write outside memory space: addr:\" + h(addr) + \", value:\" + h(value), LOG_VGA);\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        this.vga_memory_write_graphical(addr, value);\n    }\n    else\n    {\n        if(!(this.plane_write_bm & 0x3))\n        {\n            // Ignore writes to font planes.\n            return;\n        }\n        this.vga_memory_write_text_mode(addr, value);\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\n{\n    addr |= this.svga_bank_offset;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n};\n\nVGAScreen.prototype.vga_memory_write_graphical = function(addr, value)\n{\n    var plane_dword;\n    var write_mode = this.planar_mode & 3;\n    var bitmask = this.apply_feed(this.planar_bitmap);\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    var setreset_enable_dword = this.apply_expand(this.planar_setreset_enable);\n\n    // Write modes - see http://www.osdever.net/FreeVGA/vga/graphreg.htm#05\n    switch(write_mode)\n    {\n        case 0:\n            value = this.apply_rotate(value);\n            plane_dword = this.apply_feed(value);\n            plane_dword = this.apply_setreset(plane_dword, setreset_enable_dword);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 1:\n            plane_dword = this.latch_dword;\n            break;\n        case 2:\n            plane_dword = this.apply_expand(value);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 3:\n            value = this.apply_rotate(value);\n            bitmask &= this.apply_feed(value);\n            plane_dword = setreset_dword;\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n    }\n\n    var plane_select = 0xF;\n\n    switch(this.sequencer_memory_mode & 0xC)\n    {\n        // Odd/Even (aka chain 2)\n        case 0x0:\n            plane_select = 0x5 << (addr & 0x1);\n            addr &= ~0x1;\n            break;\n\n        // Chain 4\n        // Note: FreeVGA may have mistakenly stated that this bit field is\n        // for system read only, yet the IBM Open Source Graphics Programmer's\n        // Reference Manual explicitly states \"both read and write\".\n        case 0x8:\n        case 0xC:\n            plane_select = 1 << (addr & 0x3);\n            addr &= ~0x3;\n            break;\n    }\n\n    // Plane masks take precedence\n    // See: http://www.osdever.net/FreeVGA/vga/seqreg.htm#02\n    plane_select &= this.plane_write_bm;\n\n    if(plane_select & 0x1) this.plane0[addr] = (plane_dword >> 0) & 0xFF;\n    if(plane_select & 0x2) this.plane1[addr] = (plane_dword >> 8) & 0xFF;\n    if(plane_select & 0x4) this.plane2[addr] = (plane_dword >> 16) & 0xFF;\n    if(plane_select & 0x8) this.plane3[addr] = (plane_dword >> 24) & 0xFF;\n\n    var pixel_addr = this.vga_addr_to_pixel(addr);\n    this.partial_replot(pixel_addr, pixel_addr + 7);\n};\n\n/**\n * Copies data_byte into the four planes, with each plane\n * represented by an 8-bit field inside the dword.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_feed = function(data_byte)\n{\n    var dword = data_byte;\n    dword |= data_byte << 8;\n    dword |= data_byte << 16;\n    dword |= data_byte << 24;\n    return dword;\n};\n\n/**\n * Expands bits 0 to 3 to ocupy bits 0 to 31. Each\n * bit is expanded to 0xFF if set or 0x00 if clear.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_expand = function(data_byte)\n{\n    var dword = data_byte & 0x1 ? 0xFF : 0x00;\n    dword |= (data_byte & 0x2 ? 0xFF : 0x00) << 8;\n    dword |= (data_byte & 0x4 ? 0xFF : 0x00) << 16;\n    dword |= (data_byte & 0x8 ? 0xFF : 0x00) << 24;\n    return dword;\n};\n\n/**\n * Planar Write - Barrel Shifter\n * @param {number} data_byte\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_rotate = function(data_byte)\n{\n    var wrapped = data_byte | (data_byte << 8);\n    var count = this.planar_rotate_reg & 0x7;\n    var shifted = wrapped >>> count;\n    return shifted & 0xFF;\n};\n\n/**\n * Planar Write - Set / Reset Circuitry\n * @param {number} data_dword\n * @param {number} enable_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-03.html#Heading5}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#00}\n */\nVGAScreen.prototype.apply_setreset = function(data_dword, enable_dword)\n{\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    data_dword |= enable_dword & setreset_dword;\n    data_dword &= ~enable_dword | setreset_dword;\n    return data_dword;\n};\n\n/**\n * Planar Write - ALU Unit\n * @param {number} data_dword\n * @param {number} latch_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch24/24-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_logical = function(data_dword, latch_dword)\n{\n    switch(this.planar_rotate_reg & 0x18)\n    {\n        case 0x08:\n            return data_dword & latch_dword;\n        case 0x10:\n            return data_dword | latch_dword;\n        case 0x18:\n            return data_dword ^ latch_dword;\n    }\n    return data_dword;\n};\n\n/**\n * Planar Write - Bitmask Unit\n * @param {number} data_dword\n * @param {number} bitmask_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading2}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#08}\n */\nVGAScreen.prototype.apply_bitmask = function(data_dword, bitmask_dword)\n{\n    var plane_dword = bitmask_dword & data_dword;\n    plane_dword |= ~bitmask_dword & this.latch_dword;\n    return plane_dword;\n};\n\nVGAScreen.prototype.text_mode_redraw = function()\n{\n    var addr = this.start_address << 1,\n        chr,\n        color;\n\n    for(var row = 0; row < this.max_rows; row++)\n    {\n        for(var col = 0; col < this.max_cols; col++)\n        {\n            chr = this.vga_memory[addr];\n            color = this.vga_memory[addr | 1];\n\n            this.bus.send(\"screen-put-char\", [row, col, chr,\n                this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n            addr += 2;\n        }\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\n{\n    var memory_start = (addr >> 1) - this.start_address,\n        row = memory_start / this.max_cols | 0,\n        col = memory_start % this.max_cols,\n        chr,\n        color;\n\n    // XXX: Should handle 16 bit write if possible\n    if(addr & 1)\n    {\n        color = value;\n        chr = this.vga_memory[addr & ~1];\n    }\n    else\n    {\n        chr = value;\n        color = this.vga_memory[addr | 1];\n    }\n\n    this.bus.send(\"screen-put-char\", [row, col, chr,\n            this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n    this.vga_memory[addr] = value;\n};\n\nVGAScreen.prototype.update_cursor = function()\n{\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\n        col = (this.cursor_address - this.start_address) % this.max_cols;\n\n    row = Math.min(this.max_rows - 1, row);\n\n    this.bus.send(\"screen-update-cursor\", [row, col]);\n};\n\nVGAScreen.prototype.svga_memory_read8 = function(addr)\n{\n    return this.svga_memory[addr & 0xFFFFFFF];\n};\n\nVGAScreen.prototype.svga_memory_read32 = function(addr)\n{\n    addr &= 0xFFFFFFF;\n\n    if(addr & 3)\n    {\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\n    }\n    else\n    {\n        return this.svga_memory32[addr >> 2];\n    }\n};\n\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n    this.svga_memory[addr] = value;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n};\n\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n    this.svga_memory[addr + 1] = value >> 8;\n    this.svga_memory[addr + 2] = value >> 16;\n    this.svga_memory[addr + 3] = value >> 24;\n};\n\nVGAScreen.prototype.complete_redraw = function()\n{\n    dbg_log(\"complete redraw\", LOG_VGA);\n\n    if(this.graphical_mode)\n    {\n        this.diff_addr_min = 0;\n\n        if(this.svga_enabled)\n        {\n            this.diff_addr_max = this.vga_memory_size;\n        }\n        else\n        {\n            this.diff_addr_max = VGA_PIXEL_BUFFER_SIZE;\n        }\n    }\n    else\n    {\n        this.text_mode_redraw();\n    }\n};\n\nVGAScreen.prototype.complete_replot = function()\n{\n    dbg_log(\"complete replot\", LOG_VGA);\n\n    if(!this.graphical_mode || this.svga_enabled)\n    {\n        return;\n    }\n\n    this.diff_plot_min = 0;\n    this.diff_plot_max = VGA_PIXEL_BUFFER_SIZE;\n\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.partial_redraw = function(min, max)\n{\n    if(min < this.diff_addr_min) this.diff_addr_min = min;\n    if(max > this.diff_addr_max) this.diff_addr_max = max;\n};\n\nVGAScreen.prototype.partial_replot = function(min, max)\n{\n    if(min < this.diff_plot_min) this.diff_plot_min = min;\n    if(max > this.diff_plot_max) this.diff_plot_max = max;\n\n    this.partial_redraw(min, max);\n};\n\nVGAScreen.prototype.reset_diffs = function()\n{\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n};\n\nVGAScreen.prototype.destroy = function()\n{\n\n};\n\nVGAScreen.prototype.vga_bytes_per_line = function()\n{\n    var bytes_per_line = this.offset_register << 2;\n    if(this.underline_location_register & 0x40) bytes_per_line <<= 1;\n    else if(this.crtc_mode & 0x40) bytes_per_line >>>= 1;\n    return bytes_per_line;\n};\n\nVGAScreen.prototype.vga_addr_shift_count = function()\n{\n    // Count in multiples of 0x40 for convenience\n    // Left shift 2 for word mode - 2 bytes per dot clock\n    var shift_count = 0x80;\n\n    // Left shift 3 for byte mode - 1 byte per dot clock\n    shift_count += ~this.underline_location_register & this.crtc_mode & 0x40;\n\n    // Left shift 1 for doubleword mode - 4 bytes per dot clock\n    shift_count -= this.underline_location_register & 0x40;\n\n    // But shift one less if PEL width mode - 2 dot clocks per pixel\n    shift_count -= this.attribute_mode & 0x40;\n\n    return shift_count >>> 6;\n};\n\nVGAScreen.prototype.vga_addr_to_pixel = function(addr)\n{\n    var shift_count = this.vga_addr_shift_count();\n\n    // Undo effects of substituted bits 13 and 14\n    // Assumptions:\n    //  - max_scan_line register is set to the values shown below\n    //  - Each scan line stays within the offset alignment\n    //  - No panning and no page flipping after drawing\n    if(~this.crtc_mode & 0x3)\n    {\n        var pixel_addr = addr - this.start_address;\n\n        // Remove substituted bits\n        pixel_addr &= this.crtc_mode << 13 | ~0x6000;\n\n        // Convert to 1 pixel per address\n        pixel_addr <<= shift_count;\n\n        // Decompose address\n        var row = pixel_addr / this.virtual_width | 0;\n        var col = pixel_addr % this.virtual_width;\n\n        switch(this.crtc_mode & 0x3)\n        {\n            case 0x2:\n                // Alternating rows using bit 13\n                // Assumes max scan line = 1\n                row = row << 1 | (addr >> 13 & 0x1);\n                break;\n            case 0x1:\n                // Alternating rows using bit 14\n                // Assumes max scan line = 3\n                row = row << 1 | (addr >> 14 & 0x1);\n                break;\n            case 0x0:\n                // Cycling through rows using bit 13 and 14\n                // Assumes max scan line = 3\n                row = row << 2 | (addr >> 13 & 0x3);\n                break;\n        }\n\n        // Reassemble address\n        return row * this.virtual_width + col + (this.start_address << shift_count);\n    }\n    else\n    {\n        // Convert to 1 pixel per address\n        return addr << shift_count;\n    }\n};\n\nVGAScreen.prototype.scan_line_to_screen_row = function(scan_line)\n{\n    // Double scanning. The clock to the row scan counter is halved\n    // so it is not affected by the memory address bit substitutions below\n    if(this.max_scan_line & 0x80)\n    {\n        scan_line >>>= 1;\n    }\n\n    // Maximum scan line, aka scan lines per character row\n    // This is the number of repeats - 1 for graphic modes\n    var repeat_factor = 1 + (this.max_scan_line & 0x1F);\n    scan_line = Math.ceil(scan_line / repeat_factor);\n\n    // Odd and Even Row Scan Counter\n    // Despite repeated address counter values, because bit 13 of the shifted\n    // address is substituted with bit 0 of the row scan counter, a different\n    // display buffer address is generated instead of repeated\n    // Assumes maximum scan line register is set to 2 or 4.\n    // Note: can't assert this as register values may not be fully programmed.\n    if(!(this.crtc_mode & 0x1))\n    {\n        scan_line <<= 1;\n    }\n\n    // Undo effects of substituted bit 14\n    // Assumes maximum scan line register is set to 2 or 4\n    // Note: can't assert this as register values may not be fully programmed.\n    // Other maximum scan line register values would result in weird addressing\n    // anyway\n    if(!(this.crtc_mode & 0x2))\n    {\n        scan_line <<= 1;\n    }\n\n    return scan_line;\n};\n\n/**\n * @param {number} cols_count\n * @param {number} rows_count\n */\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\n{\n    this.max_cols = cols_count;\n    this.max_rows = rows_count;\n\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\n};\n\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp, virtual_width, virtual_height)\n{\n    var needs_update = !this.stats.is_graphical ||\n        this.stats.bpp !== bpp ||\n        this.screen_width !== width ||\n        this.screen_height !== height ||\n        this.virtual_width !== virtual_width ||\n        this.virtual_height !== virtual_height;\n\n    if(needs_update)\n    {\n        this.screen_width = width;\n        this.screen_height = height;\n        this.virtual_width = virtual_width;\n        this.virtual_height = virtual_height;\n\n        this.stats.bpp = bpp;\n        this.stats.is_graphical = true;\n        this.stats.res_x = width;\n        this.stats.res_y = height;\n\n        this.bus.send(\"screen-set-size-graphical\", [width, height, virtual_width, virtual_height, bpp]);\n    }\n};\n\nVGAScreen.prototype.update_vga_size = function()\n{\n    if(this.svga_enabled)\n    {\n        return;\n    }\n\n    var horizontal_characters = Math.min(1 + this.horizontal_display_enable_end,\n        this.horizontal_blank_start);\n    var vertical_scans = Math.min(1 + this.vertical_display_enable_end,\n        this.vertical_blank_start);\n\n    if(!horizontal_characters || !vertical_scans)\n    {\n        // Don't update if width or height is zero.\n        // These happen when registers are not fully configured yet.\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        var screen_width = horizontal_characters << 3;\n\n        // Offset is half the number of bytes/words/dwords (depending on clocking mode)\n        // of display memory that each logical line occupies.\n        // However, the number of pixels latched, regardless of addressing mode,\n        // should always 8 pixels per character clock (except for 8 bit PEL width, in which\n        // case 4 pixels).\n        var virtual_width = this.offset_register << 4;\n\n        // Pixel Width / PEL Width / Clock Select\n        if(this.attribute_mode & 0x40)\n        {\n            screen_width >>>= 1;\n            virtual_width >>>= 1;\n        }\n\n        var screen_height = this.scan_line_to_screen_row(vertical_scans);\n\n        // The virtual buffer height is however many rows of data that can fit.\n        // Previously drawn graphics outside of current memory address space can\n        // still be drawn by setting start_address. The address at\n        // VGA_HOST_MEMORY_SPACE_START[memory_space_select] is mapped to the first\n        // byte of the frame buffer. Verified on some hardware.\n        // Depended on by: Windows 98 start screen\n        var available_bytes = VGA_HOST_MEMORY_SPACE_SIZE[0];\n\n        var virtual_height = Math.ceil(available_bytes / this.vga_bytes_per_line());\n\n        this.set_size_graphical(screen_width, screen_height, 8,\n            virtual_width, virtual_height);\n\n        this.update_vertical_retrace();\n        this.update_layers();\n    }\n    else\n    {\n        if(this.max_scan_line & 0x80)\n        {\n            // Double scanning means that half of those scan lines\n            // are just repeats\n            vertical_scans >>>= 1;\n        }\n\n        var height = vertical_scans / (1 + (this.max_scan_line & 0x1F)) | 0;\n\n        if(horizontal_characters && height)\n        {\n            this.set_size_text(horizontal_characters, height);\n        }\n    }\n};\n\nVGAScreen.prototype.update_layers = function()\n{\n    if(!this.graphical_mode)\n    {\n        this.text_mode_redraw();\n    }\n\n    if(this.svga_enabled)\n    {\n        this.layers = [];\n        return;\n    }\n\n    if(!this.virtual_width || !this.screen_width)\n    {\n        // Avoid division by zero\n        return;\n    }\n\n    if(!this.palette_source || (this.clocking_mode & 0x20))\n    {\n        // Palette source and screen disable bits = draw nothing\n        // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n        // and http://www.osdever.net/FreeVGA/vga/seqreg.htm#01\n        this.layers = [];\n        this.bus.send(\"screen-clear\");\n        return;\n    }\n\n    var start_addr = this.start_address_latched;\n\n    var pixel_panning = this.horizontal_panning;\n    if(this.attribute_mode & 0x40)\n    {\n        pixel_panning >>>= 1;\n    }\n\n    var byte_panning = this.preset_row_scan >> 5 & 0x3;\n    var pixel_addr_start = this.vga_addr_to_pixel(start_addr + byte_panning);\n\n    var start_buffer_row = pixel_addr_start / this.virtual_width | 0;\n    var start_buffer_col = pixel_addr_start % this.virtual_width + pixel_panning;\n\n    var split_screen_row = this.scan_line_to_screen_row(1 + this.line_compare);\n    split_screen_row = Math.min(split_screen_row, this.screen_height);\n\n    var split_buffer_height = this.screen_height - split_screen_row;\n\n    this.layers = [];\n\n    for(var x = -start_buffer_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: 0,\n            buffer_x: 0,\n            buffer_y: start_buffer_row + y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_screen_row,\n        });\n    }\n\n    var start_split_col = 0;\n    if(!(this.attribute_mode & 0x20))\n    {\n        // Pixel panning mode. Allow panning for the lower split screen\n        start_split_col = this.vga_addr_to_pixel(byte_panning) + pixel_panning;\n    }\n\n    for(var x = -start_split_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: split_screen_row,\n            buffer_x: 0,\n            buffer_y: y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_buffer_height,\n        });\n    }\n};\n\nVGAScreen.prototype.update_vertical_retrace = function()\n{\n    // Emulate behaviour during VSync/VRetrace\n    this.port_3DA_value |= 0x8;\n    if(this.start_address_latched !== this.start_address)\n    {\n        this.start_address_latched = this.start_address;\n        this.update_layers();\n    }\n};\n\nVGAScreen.prototype.update_cursor_scanline = function()\n{\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\n};\n\n/**\n * Attribute controller register / index write\n * @see {@link http://www.osdever.net/FreeVGA/vga/attrreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 89\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 48\n */\nVGAScreen.prototype.port3C0_write = function(value)\n{\n    if(this.attribute_controller_index === -1)\n    {\n        dbg_log(\"attribute controller index register: \" + h(value), LOG_VGA);\n        this.attribute_controller_index = value & 0x1F;\n        dbg_log(\"attribute actual index: \" + h(this.attribute_controller_index), LOG_VGA);\n\n        if(this.palette_source !== (value & 0x20))\n        {\n            // A method of blanking the screen.\n            // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n            this.palette_source = value & 0x20;\n            this.update_layers();\n        }\n    }\n    else\n    {\n        if(this.attribute_controller_index < 0x10)\n        {\n            dbg_log(\"internal palette: \" + h(this.attribute_controller_index) + \" -> \" + h(value), LOG_VGA);\n            this.dac_map[this.attribute_controller_index] = value;\n\n            if(!(this.attribute_mode & 0x40))\n            {\n                this.complete_redraw();\n            }\n        }\n        else\n        switch(this.attribute_controller_index)\n        {\n            case 0x10:\n                dbg_log(\"3C0 / attribute mode control: \" + h(value), LOG_VGA);\n                if(this.attribute_mode !== value)\n                {\n                    var previous_mode = this.attribute_mode;\n                    this.attribute_mode = value;\n\n                    var is_graphical = (value & 0x1) > 0;\n                    if(!this.svga_enabled && this.graphical_mode !== is_graphical)\n                    {\n                        this.graphical_mode = is_graphical;\n                        this.bus.send(\"screen-set-mode\", this.graphical_mode);\n                    }\n\n                    if((previous_mode ^ value) & 0x40)\n                    {\n                        // PEL width changed. Pixel Buffer now invalidated\n                        this.complete_replot();\n                    }\n\n                    this.update_vga_size();\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x12:\n                dbg_log(\"3C0 / color plane enable: \" + h(value), LOG_VGA);\n                if(this.color_plane_enable !== value)\n                {\n                    this.color_plane_enable = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x13:\n                dbg_log(\"3C0 / horizontal panning: \" + h(value), LOG_VGA);\n                if(this.horizontal_panning !== value)\n                {\n                    this.horizontal_panning = value & 0xF;\n                    this.update_layers();\n                }\n                break;\n            case 0x14:\n                dbg_log(\"3C0 / color select: \" + h(value), LOG_VGA);\n                if(this.color_select !== value)\n                {\n                    this.color_select = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            default:\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\n        }\n\n        this.attribute_controller_index = -1;\n    }\n};\n\nVGAScreen.prototype.port3C0_read = function()\n{\n    dbg_log(\"3C0 read\", LOG_VGA);\n    var result = this.attribute_controller_index | this.palette_source;\n    return result;\n};\n\nVGAScreen.prototype.port3C0_read16 = function()\n{\n    dbg_log(\"3C0 read16\", LOG_VGA);\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\n};\n\nVGAScreen.prototype.port3C1_read = function()\n{\n    if(this.attribute_controller_index < 0x10)\n    {\n        dbg_log(\"3C1 / internal palette read: \" + h(this.attribute_controller_index) +\n            \" -> \" + h(this.dac_map[this.attribute_controller_index]), LOG_VGA);\n        return this.dac_map[this.attribute_controller_index];\n    }\n\n    switch(this.attribute_controller_index)\n    {\n        case 0x10:\n            dbg_log(\"3C1 / attribute mode read: \" + h(this.attribute_mode), LOG_VGA);\n            return this.attribute_mode;\n        case 0x12:\n            dbg_log(\"3C1 / color plane enable read: \" + h(this.color_plane_enable), LOG_VGA);\n            return this.color_plane_enable;\n        case 0x13:\n            dbg_log(\"3C1 / horizontal panning read: \" + h(this.horizontal_panning), LOG_VGA);\n            return this.horizontal_panning;\n        case 0x14:\n            dbg_log(\"3C1 / color select read: \" + h(this.color_select), LOG_VGA);\n            return this.color_select;\n        default:\n            dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\n    }\n    return -1;\n\n};\n\nVGAScreen.prototype.port3C2_write = function(value)\n{\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\n    this.miscellaneous_output_register = value;\n};\n\nVGAScreen.prototype.port3C4_write = function(value)\n{\n    this.sequencer_index = value;\n};\n\nVGAScreen.prototype.port3C4_read = function()\n{\n    return this.sequencer_index;\n};\n\n/**\n * Sequencer register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/seqreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 47\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 19\n */\nVGAScreen.prototype.port3C5_write = function(value)\n{\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            dbg_log(\"clocking mode: \" + h(value), LOG_VGA);\n            var previous_clocking_mode = this.clocking_mode;\n            this.clocking_mode = value;\n            if((previous_clocking_mode ^ value) & 0x20)\n            {\n                // Screen disable bit modified\n                this.update_layers();\n            }\n            break;\n        case 0x02:\n            dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\n            this.plane_write_bm = value;\n            break;\n        case 0x04:\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\n            this.sequencer_memory_mode = value;\n            break;\n        default:\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3C5_read = function()\n{\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\n\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            return this.clocking_mode;\n        case 0x02:\n            return this.plane_write_bm;\n        case 0x04:\n            return this.sequencer_memory_mode;\n        case 0x06:\n            return 0x12;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3C7_write = function(index)\n{\n    // index for reading the DAC\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\n    this.dac_color_index_read = index * 3;\n    this.dac_state &= 0x0;\n};\n\nVGAScreen.prototype.port3C7_read = function()\n{\n    // prepared to accept reads or writes\n    return this.dac_state;\n};\n\nVGAScreen.prototype.port3C8_write = function(index)\n{\n    this.dac_color_index_write = index * 3;\n    this.dac_state |= 0x3;\n};\n\nVGAScreen.prototype.port3C8_read = function()\n{\n    return this.dac_color_index_write / 3 | 0;\n};\n\n/**\n * DAC color palette register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/colorreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 104\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 57\n */\nVGAScreen.prototype.port3C9_write = function(color_byte)\n{\n    var index = this.dac_color_index_write / 3 | 0,\n        offset = this.dac_color_index_write % 3,\n        color = this.vga256_palette[index];\n\n    color_byte = (color_byte & 0x3F) * 255 / 63 | 0;\n\n    if(offset === 0)\n    {\n        color = color & ~0xFF0000 | color_byte << 16;\n    }\n    else if(offset === 1)\n    {\n        color = color & ~0xFF00 | color_byte << 8;\n    }\n    else\n    {\n        color = color & ~0xFF | color_byte;\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\n    }\n\n    if(this.vga256_palette[index] !== color)\n    {\n        this.vga256_palette[index] = color;\n        this.complete_redraw();\n    }\n    this.dac_color_index_write++;\n};\n\nVGAScreen.prototype.port3C9_read = function()\n{\n    dbg_log(\"3C9 read\", LOG_VGA);\n\n    var index = this.dac_color_index_read / 3 | 0;\n    var offset = this.dac_color_index_read % 3;\n    var color = this.vga256_palette[index];\n\n    this.dac_color_index_read++;\n    return (color >> (2 - offset) * 8 & 0xFF) / 255 * 63 | 0;\n};\n\nVGAScreen.prototype.port3CC_read = function()\n{\n    dbg_log(\"3CC read\", LOG_VGA);\n    return this.miscellaneous_output_register;\n};\n\nVGAScreen.prototype.port3CE_write = function(value)\n{\n    this.graphics_index = value;\n};\n\nVGAScreen.prototype.port3CE_read = function()\n{\n    return this.graphics_index;\n};\n\n/**\n * Graphics controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 78\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 29\n */\nVGAScreen.prototype.port3CF_write = function(value)\n{\n    switch(this.graphics_index)\n    {\n        case 0:\n            this.planar_setreset = value;\n            dbg_log(\"plane set/reset: \" + h(value), LOG_VGA);\n            break;\n        case 1:\n            this.planar_setreset_enable = value;\n            dbg_log(\"plane set/reset enable: \" + h(value), LOG_VGA);\n            break;\n        case 2:\n            this.color_compare = value;\n            dbg_log(\"color compare: \" + h(value), LOG_VGA);\n            break;\n        case 3:\n            this.planar_rotate_reg = value;\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\n            break;\n        case 4:\n            this.plane_read = value;\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\n            break;\n        case 5:\n            var previous_planar_mode = this.planar_mode;\n            this.planar_mode = value;\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\n            if((previous_planar_mode ^ value) & 0x60)\n            {\n                // Shift mode modified. Pixel buffer invalidated\n                this.complete_replot();\n            }\n            break;\n        case 6:\n            dbg_log(\"miscellaneous graphics register: \" + h(value), LOG_VGA);\n            if(this.miscellaneous_graphics_register !== value)\n            {\n                this.miscellaneous_graphics_register = value;\n                this.update_vga_size();\n            }\n            break;\n        case 7:\n            this.color_dont_care = value;\n            dbg_log(\"color don't care: \" + h(value), LOG_VGA);\n            break;\n        case 8:\n            this.planar_bitmap = value;\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\n            break;\n        default:\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3CF_read = function()\n{\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\n\n    switch(this.graphics_index)\n    {\n        case 0:\n            return this.planar_setreset;\n        case 1:\n            return this.planar_setreset_enable;\n        case 2:\n            return this.color_compare;\n        case 3:\n            return this.planar_rotate_reg;\n        case 4:\n            return this.plane_read;\n        case 5:\n            return this.planar_mode;\n        case 6:\n            return this.miscellaneous_graphics_register;\n        case 7:\n            return this.color_dont_care;\n        case 8:\n            return this.planar_bitmap;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3D4_write = function(register)\n{\n    dbg_log(\"3D4 / crtc index: \" + register, LOG_VGA);\n    this.index_crtc = register;\n};\n\nVGAScreen.prototype.port3D4_read = function()\n{\n    dbg_log(\"3D4 read / crtc index: \" + this.index_crtc, LOG_VGA);\n    return this.index_crtc;\n};\n\n/**\n * CRT controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/crtcreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 55\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 63\n */\nVGAScreen.prototype.port3D5_write = function(value)\n{\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            dbg_log(\"3D5 / hdisp enable end write: \" + h(value), LOG_VGA);\n            if(this.horizontal_display_enable_end !== value)\n            {\n                this.horizontal_display_enable_end = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x2:\n            if(this.horizontal_blank_start !== value)\n            {\n                this.horizontal_blank_start = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x7:\n            dbg_log(\"3D5 / overflow register write: \" + h(value), LOG_VGA);\n            var previous_vertical_display_enable_end = this.vertical_display_enable_end;\n            this.vertical_display_enable_end &= 0xFF;\n            this.vertical_display_enable_end |= (value << 3 & 0x200) | (value << 7 & 0x100);\n            if(previous_vertical_display_enable_end != this.vertical_display_enable_end)\n            {\n                this.update_vga_size();\n            }\n            this.line_compare = (this.line_compare & 0x2FF) | (value << 4 & 0x100);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x2FF) | (value << 5 & 0x100);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n            this.update_layers();\n            break;\n        case 0x8:\n            dbg_log(\"3D5 / preset row scan write: \" + h(value), LOG_VGA);\n            this.preset_row_scan = value;\n            this.update_layers();\n            break;\n        case 0x9:\n            dbg_log(\"3D5 / max scan line write: \" + h(value), LOG_VGA);\n            this.max_scan_line = value;\n            this.line_compare = (this.line_compare & 0x1FF) | (value << 3 & 0x200);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x1FF) | (value << 4 & 0x200);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n\n            this.update_layers();\n            break;\n        case 0xA:\n            dbg_log(\"3D5 / cursor scanline start write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_start = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xB:\n            dbg_log(\"3D5 / cursor scanline end write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_end = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xC:\n            if((this.start_address >> 8 & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff | value << 8;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr hi write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xD:\n            if((this.start_address & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff00 | value;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr lo write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xE:\n            dbg_log(\"3D5 / cursor address hi write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\n            this.update_cursor();\n            break;\n        case 0xF:\n            dbg_log(\"3D5 / cursor address lo write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\n            this.update_cursor();\n            break;\n        case 0x12:\n            dbg_log(\"3D5 / vdisp enable end write: \" + h(value), LOG_VGA);\n            if((this.vertical_display_enable_end & 0xFF) !== value)\n            {\n                this.vertical_display_enable_end = (this.vertical_display_enable_end & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x13:\n            dbg_log(\"3D5 / offset register write: \" + h(value), LOG_VGA);\n            if(this.offset_register !== value)\n            {\n                this.offset_register = value;\n                this.update_vga_size();\n\n                if(~this.crtc_mode & 0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // virtual width, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x14:\n            dbg_log(\"3D5 / underline location write: \" + h(value), LOG_VGA);\n            if(this.underline_location_register !== value)\n            {\n                var previous_underline = this.underline_location_register;\n\n                this.underline_location_register = value;\n                this.update_vga_size();\n\n                if((previous_underline ^ value) & 0x40)\n                {\n                    // Doubleword addressing changed. Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x15:\n            dbg_log(\"3D5 / vertical blank start write: \" + h(value), LOG_VGA);\n            if((this.vertical_blank_start & 0xFF) !== value)\n            {\n                this.vertical_blank_start = (this.vertical_blank_start & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x17:\n            dbg_log(\"3D5 / crtc mode write: \" + h(value), LOG_VGA);\n            if(this.crtc_mode !== value)\n            {\n                var previous_mode = this.crtc_mode;\n\n                this.crtc_mode = value;\n                this.update_vga_size();\n\n                if((previous_mode ^ value) & 0x43)\n                {\n                    // Word/byte addressing changed or address substitution changed.\n                    // Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x18:\n            dbg_log(\"3D5 / line compare write: \" + h(value), LOG_VGA);\n            this.line_compare = (this.line_compare & 0x300) | value;\n            this.update_layers();\n            break;\n        default:\n            if(this.index_crtc < this.crtc.length)\n            {\n                this.crtc[this.index_crtc] = value;\n            }\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\n    }\n\n};\n\nVGAScreen.prototype.port3D5_read = function()\n{\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\n\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            return this.horizontal_display_enable_end;\n        case 0x2:\n            return this.horizontal_blank_start;\n        case 0x7:\n            return (this.vertical_display_enable_end >> 7 & 0x2) |\n                (this.vertical_blank_start >> 5 & 0x8) |\n                (this.line_compare >> 4 & 0x10) |\n                (this.vertical_display_enable_end >> 3 & 0x40);\n        case 0x8:\n            return this.preset_row_scan;\n        case 0x9:\n            return this.max_scan_line;\n        case 0xA:\n            return this.cursor_scanline_start;\n        case 0xB:\n            return this.cursor_scanline_end;\n        case 0xC:\n            return this.start_address & 0xFF;\n        case 0xD:\n            return this.start_address >> 8;\n        case 0xE:\n            return this.cursor_address >> 8;\n        case 0xF:\n            return this.cursor_address & 0xFF;\n        case 0x12:\n            return this.vertical_display_enable_end & 0xFF;\n        case 0x13:\n            return this.offset_register;\n        case 0x14:\n            return this.underline_location_register;\n        case 0x15:\n            return this.vertical_blank_start & 0xFF;\n        case 0x17:\n            return this.crtc_mode;\n        case 0x18:\n            return this.line_compare & 0xFF;\n    }\n\n    if(this.index_crtc < this.crtc.length)\n    {\n        return this.crtc[this.index_crtc];\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nVGAScreen.prototype.port3DA_read = function()\n{\n    dbg_log(\"3DA read - status 1 and clear attr index\", LOG_VGA);\n\n    var value = this.port_3DA_value;\n\n    // Status register, bit 3 set by update_vertical_retrace\n    // during screen-fill-buffer\n    if(!this.graphical_mode)\n    {\n        // But screen-fill-buffer may not get triggered in text mode\n        // so toggle it manually here\n        if(this.port_3DA_value & 1)\n        {\n            this.port_3DA_value ^= 8;\n        }\n        this.port_3DA_value ^= 1;\n    }\n    else\n    {\n        this.port_3DA_value ^= 1;\n        this.port_3DA_value &= 1;\n    }\n    this.attribute_controller_index = -1;\n    return value;\n};\n\nVGAScreen.prototype.svga_bytes_per_line = function()\n{\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\n\n    return this.svga_width * bits / 8;\n};\n\nVGAScreen.prototype.port1CE_write = function(value)\n{\n    this.dispi_index = value;\n};\n\nVGAScreen.prototype.port1CF_write = function(value)\n{\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\n\n    switch(this.dispi_index)\n    {\n        case 1:\n            this.svga_width = value;\n            if(this.svga_width > MAX_XRES)\n            {\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\n                this.svga_width = MAX_XRES;\n            }\n            break;\n        case 2:\n            this.svga_height = value;\n            if(this.svga_height > MAX_YRES)\n            {\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\n                this.svga_height = MAX_YRES;\n            }\n            break;\n        case 3:\n            this.svga_bpp = value;\n            break;\n        case 4:\n            // enable, options\n            this.svga_enabled = (value & 1) === 1;\n            this.dispi_enable_value = value;\n            break;\n        case 5:\n            this.svga_bank_offset = value << 16;\n            break;\n        case 9:\n            // y offset\n            this.svga_offset = value * this.svga_bytes_per_line();\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\n            this.complete_redraw();\n            break;\n        default:\n    }\n\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\n    {\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\n        this.svga_enabled = false;\n    }\n\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\n               this.svga_bpp === 24 || this.svga_bpp === 32,\n               \"unexpected svga bpp: \" + this.svga_bpp);\n\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\n\n    if(this.svga_enabled && this.dispi_index === 4)\n    {\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp, this.svga_width, this.svga_height);\n        this.bus.send(\"screen-set-mode\", true);\n        this.graphical_mode = true;\n        this.graphical_mode_is_linear = true;\n    }\n\n    if(!this.svga_enabled)\n    {\n        this.svga_bank_offset = 0;\n    }\n\n    this.update_layers();\n};\n\nVGAScreen.prototype.port1CF_read = function()\n{\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\n    return this.svga_register_read(this.dispi_index);\n};\n\nVGAScreen.prototype.svga_register_read = function(n)\n{\n    switch(n)\n    {\n        case 0:\n            // id\n            return 0xB0C0;\n        case 1:\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\n        case 2:\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\n        case 3:\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\n        case 4:\n            return this.dispi_enable_value;\n        case 5:\n            return this.svga_bank_offset >>> 16;\n        case 6:\n            // virtual width\n            if(this.screen_width)\n            {\n                return this.screen_width;\n            }\n            else\n            {\n                return 1; // seabios/windows98 divide exception\n            }\n            break;\n\n        case 8:\n            // x offset\n            return 0;\n        case 0x0A:\n            // memory size in 64 kilobyte banks\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\n    }\n\n    return 0xFF;\n};\n\n/**\n * Transfers graphics from VGA Planes to the Pixel Buffer\n * VGA Planes represent data stored on actual hardware.\n * Pixel Buffer caches the 4-bit or 8-bit color indices for each pixel.\n */\nVGAScreen.prototype.vga_replot = function()\n{\n    // Round to multiple of 8 towards extreme\n    var start = this.diff_plot_min & ~0xF;\n    var end = Math.min((this.diff_plot_max | 0xF), VGA_PIXEL_BUFFER_SIZE - 1);\n\n    var addr_shift = this.vga_addr_shift_count();\n    var addr_substitution = ~this.crtc_mode & 0x3;\n\n    var shift_mode = this.planar_mode & 0x60\n    var pel_width = this.attribute_mode & 0x40;\n\n    for(var pixel_addr = start; pixel_addr <= end;)\n    {\n        var addr = pixel_addr >>> addr_shift;\n        if(addr_substitution)\n        {\n            var row = pixel_addr / this.virtual_width | 0;\n            var col = pixel_addr - this.virtual_width * row;\n\n            switch(addr_substitution)\n            {\n                case 0x1:\n                    // Alternating rows using bit 13\n                    // Assumes max scan line = 1\n                    addr = (row & 0x1) << 13;\n                    row >>>= 1;\n                    break;\n                case 0x2:\n                    // Alternating rows using bit 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x1) << 14;\n                    row >>>= 1;\n                    break;\n                case 0x3:\n                    // Cycling through rows using bit 13 and 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x3) << 13;\n                    row >>>= 2;\n                    break;\n            }\n\n            addr |= (row * this.virtual_width + col >>> addr_shift) + this.start_address;\n        }\n\n        var byte0 = this.plane0[addr];\n        var byte1 = this.plane1[addr];\n        var byte2 = this.plane2[addr];\n        var byte3 = this.plane3[addr];\n\n        var shift_loads = new Uint8Array(8);\n        switch(shift_mode)\n        {\n            // Planar Shift Mode\n            // See http://www.osdever.net/FreeVGA/vga/vgaseq.htm\n            case 0x00:\n                // Shift these, so that the bits for the color are in\n                // the correct position in the for loop\n                byte0 <<= 0;\n                byte1 <<= 1;\n                byte2 <<= 2;\n                byte3 <<= 3;\n\n                for(var i = 7; i >= 0; i--)\n                {\n                    shift_loads[7 - i] =\n                            byte0 >> i & 1 |\n                            byte1 >> i & 2 |\n                            byte2 >> i & 4 |\n                            byte3 >> i & 8;\n                }\n                break;\n\n            // Packed Shift Mode, aka Interleaved Shift Mode\n            // Video Modes 4h and 5h\n            case 0x20:\n                shift_loads[0] = (byte0 >> 6 & 0x3) | (byte2 >> 4 & 0xC);\n                shift_loads[1] = (byte0 >> 4 & 0x3) | (byte2 >> 2 & 0xC);\n                shift_loads[2] = (byte0 >> 2 & 0x3) | (byte2 >> 0 & 0xC);\n                shift_loads[3] = (byte0 >> 0 & 0x3) | (byte2 << 2 & 0xC);\n\n                shift_loads[4] = (byte1 >> 6 & 0x3) | (byte3 >> 4 & 0xC);\n                shift_loads[5] = (byte1 >> 4 & 0x3) | (byte3 >> 2 & 0xC);\n                shift_loads[6] = (byte1 >> 2 & 0x3) | (byte3 >> 0 & 0xC);\n                shift_loads[7] = (byte1 >> 0 & 0x3) | (byte3 << 2 & 0xC);\n                break;\n\n            // 256-Color Shift Mode\n            // Video Modes 13h and unchained 256 color\n            case 0x40:\n            case 0x60:\n                shift_loads[0] = byte0 >> 4 & 0xF;\n                shift_loads[1] = byte0 >> 0 & 0xF;\n                shift_loads[2] = byte1 >> 4 & 0xF;\n                shift_loads[3] = byte1 >> 0 & 0xF;\n                shift_loads[4] = byte2 >> 4 & 0xF;\n                shift_loads[5] = byte2 >> 0 & 0xF;\n                shift_loads[6] = byte3 >> 4 & 0xF;\n                shift_loads[7] = byte3 >> 0 & 0xF;\n                break;\n        }\n\n        if(pel_width)\n        {\n            // Assemble from two sets of 4 bits.\n            for(var i = 0, j = 0; i < 4; i++, pixel_addr++, j += 2)\n            {\n                this.pixel_buffer[pixel_addr] = (shift_loads[j] << 4) | shift_loads[j + 1];\n            }\n        }\n        else\n        {\n            for(var i = 0; i < 8; i++, pixel_addr++)\n            {\n                this.pixel_buffer[pixel_addr] = shift_loads[i];\n            }\n        }\n    }\n};\n\n/**\n * Transfers graphics from Pixel Buffer to Destination Image Buffer.\n * The 4-bit/8-bit color indices in the Pixel Buffer are passed through\n * the internal palette (dac_map) and the DAC palette (vga256_palette) to\n * obtain the final 32 bit color that the Canvas API uses.\n */\nVGAScreen.prototype.vga_redraw = function()\n{\n    var start = this.diff_addr_min;\n    var end = Math.min(this.diff_addr_max, VGA_PIXEL_BUFFER_SIZE - 1);\n    var buffer = this.dest_buffer;\n\n    // Closure compiler\n    if(!buffer) return;\n\n    var mask = 0xFF;\n    var colorset = 0x00;\n    if(this.attribute_mode & 0x80)\n    {\n        // Palette bits 5/4 select\n        mask &= 0xCF;\n        colorset |= this.color_select << 4 & 0x30;\n    }\n\n    if(this.attribute_mode & 0x40)\n    {\n        // 8 bit mode\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color256 = (this.pixel_buffer[pixel_addr] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n    else\n    {\n        // 4 bit mode\n\n        // Palette bits 7/6 select\n        mask &= 0x3F;\n        colorset |= this.color_select << 4 & 0xC0;\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color16 = this.pixel_buffer[pixel_addr] & this.color_plane_enable;\n            var color256 = (this.dac_map[color16] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n};\n\nVGAScreen.prototype.screen_fill_buffer = function()\n{\n    if(!this.graphical_mode)\n    {\n        // text mode\n        // Update retrace behaviour anyway - programs waiting for signal before\n        // changing to graphical mode\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(!this.dest_buffer)\n    {\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\n        // Update retrace behaviour anyway\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.diff_addr_max < this.diff_addr_min && this.diff_plot_max < this.diff_plot_min)\n    {\n        // No pixels to update\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.svga_enabled)\n    {\n        var bpp = this.svga_bpp;\n\n        var buffer = this.dest_buffer;\n\n        var start = this.diff_addr_min;\n        var end = this.diff_addr_max;\n\n        switch(bpp)\n        {\n            case 32:\n                var start_pixel = start >> 2;\n                var end_pixel = (end >> 2) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var dword = this.svga_memory32[i];\n\n                    buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\n                }\n                break;\n\n            case 24:\n                var start_pixel = start / 3 | 0;\n                var end_pixel = (end / 3 | 0) + 1;\n                var addr = start_pixel * 3;\n\n                for(var i = start_pixel; addr < end; i++)\n                {\n                    var red = this.svga_memory[addr++];\n                    var green = this.svga_memory[addr++];\n                    var blue = this.svga_memory[addr++];\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 16:\n                var start_pixel = start >> 1;\n                var end_pixel = (end >> 1) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var word = this.svga_memory16[i];\n\n                    var blue = (word >> 11) * 0xFF / 0x1F | 0;\n                    var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\n                    var red = (word & 0x1F) * 0xFF / 0x1F | 0;\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 8:\n                var start_pixel = start;\n                var end_pixel = end + 1;\n\n                for(var i = start; i <= end; i++)\n                {\n                    var color = this.vga256_palette[this.svga_memory[i]];\n                    buffer[i] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n                }\n                break;\n\n            default:\n                dbg_assert(false, \"Unsupported BPP: \" + bpp);\n        }\n\n        var min_y = start_pixel / this.svga_width | 0;\n        var max_y = end_pixel / this.svga_width | 0;\n\n        this.bus.send(\"screen-fill-buffer-end\", [{\n            screen_x: 0, screen_y: min_y,\n            buffer_x: 0, buffer_y: min_y,\n            buffer_width: this.svga_width,\n            buffer_height: max_y - min_y + 1,\n        }]);\n    }\n    else\n    {\n        this.vga_replot();\n        this.vga_redraw();\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n    }\n\n    this.reset_diffs();\n    this.update_vertical_retrace();\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction PS2(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @type {boolean} */\n    this.enable_mouse_stream = false;\n\n    /** @type {boolean} */\n    this.use_mouse = false;\n\n    /** @type {boolean} */\n    this.have_mouse = true;\n\n    /** @type {number} */\n    this.mouse_delta_x = 0;\n    /** @type {number} */\n    this.mouse_delta_y = 0;\n    /** @type {number} */\n    this.mouse_clicks = 0;\n\n    /** @type {boolean} */\n    this.have_keyboard = true;\n\n    /** @type {boolean} */\n    this.enable_keyboard_stream = false;\n\n    /** @type {boolean} */\n    this.next_is_mouse_command = false;\n\n    /** @type {boolean} */\n    this.next_read_sample = false;\n\n    /** @type {boolean} */\n    this.next_read_led = false;\n\n    /** @type {boolean} */\n    this.next_handle_scan_code_set = false;\n\n    /** @type {boolean} */\n    this.next_read_rate = false;\n\n    /** @type {boolean} */\n    this.next_read_resolution = false;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.kbd_buffer = new ByteQueue(1024);\n\n    this.last_port60_byte = 0;\n\n    /** @type {number} */\n    this.sample_rate = 100;\n\n    /** @type {number} */\n    this.resolution = 4;\n\n    /** @type {boolean} */\n    this.scaling2 = false;\n\n    /** @type {number} */\n    this.last_mouse_packet = -1;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.mouse_buffer = new ByteQueue(1024);\n\n    /**\n     * @type {boolean}\n     * Also known as DBBOUT OBF - Output Buffer Full flag\n     */\n    this.next_byte_is_ready = false;\n\n    /** @type {boolean} */\n    this.next_byte_is_aux = false;\n\n    this.bus.register(\"keyboard-code\", function(code)\n    {\n        this.kbd_send_code(code);\n    }, this);\n\n    this.bus.register(\"mouse-click\", function(data)\n    {\n        this.mouse_send_click(data[0], data[1], data[2]);\n    }, this);\n\n    this.bus.register(\"mouse-delta\", function(data)\n    {\n        this.mouse_send_delta(data[0], data[1]);\n    }, this);\n\n    this.bus.register(\"mouse-wheel\", function(data)\n    {\n        // TODO: Mouse Wheel\n        // http://www.computer-engineering.org/ps2mouse/\n    }, this);\n\n    this.command_register = 1 | 4;\n    this.read_output_register = false;\n    this.read_command_register = false;\n\n    cpu.io.register_read(0x60, this, this.port60_read);\n    cpu.io.register_read(0x64, this, this.port64_read);\n\n    cpu.io.register_write(0x60, this, this.port60_write);\n    cpu.io.register_write(0x64, this, this.port64_write);\n}\n\nPS2.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.enable_mouse_stream;\n    state[1] = this.use_mouse;\n    state[2] = this.have_mouse;\n    state[3] = this.mouse_delta_x;\n    state[4] = this.mouse_delta_y;\n    state[5] = this.mouse_clicks;\n    state[6] = this.have_keyboard;\n    state[7] = this.enable_keyboard_stream;\n    state[8] = this.next_is_mouse_command;\n    state[9] = this.next_read_sample;\n    state[10] = this.next_read_led;\n    state[11] = this.next_handle_scan_code_set;\n    state[12] = this.next_read_rate;\n    state[13] = this.next_read_resolution;\n    //state[14] = this.kbd_buffer;\n    state[15] = this.last_port60_byte;\n    state[16] = this.sample_rate;\n    state[17] = this.resolution;\n    state[18] = this.scaling2;\n    //state[19] = this.mouse_buffer;\n    state[20] = this.command_register;\n    state[21] = this.read_output_register;\n    state[22] = this.read_command_register;\n\n    return state;\n};\n\nPS2.prototype.set_state = function(state)\n{\n    this.enable_mouse_stream = state[0];\n    this.use_mouse = state[1];\n    this.have_mouse = state[2];\n    this.mouse_delta_x = state[3];\n    this.mouse_delta_y = state[4];\n    this.mouse_clicks = state[5];\n    this.have_keyboard = state[6];\n    this.enable_keyboard_stream = state[7];\n    this.next_is_mouse_command = state[8];\n    this.next_read_sample = state[9];\n    this.next_read_led = state[10];\n    this.next_handle_scan_code_set = state[11];\n    this.next_read_rate = state[12];\n    this.next_read_resolution = state[13];\n    //this.kbd_buffer = state[14];\n    this.last_port60_byte = state[15];\n    this.sample_rate = state[16];\n    this.resolution = state[17];\n    this.scaling2 = state[18];\n    //this.mouse_buffer = state[19];\n    this.command_register = state[20];\n    this.read_output_register = state[21];\n    this.read_command_register = state[22];\n\n    this.next_byte_is_ready = false;\n    this.next_byte_is_aux = false;\n    this.kbd_buffer.clear();\n    this.mouse_buffer.clear();\n\n    this.bus.send(\"mouse-enable\", this.use_mouse);\n};\n\nPS2.prototype.raise_irq = function()\n{\n    if(this.next_byte_is_ready)\n    {\n        // Wait until previous byte is read\n        // http://halicery.com/Hardware/8042/8042_1503033_TXT.htm\n        return;\n    }\n\n    // Kbd has priority over aux\n    if(this.kbd_buffer.length)\n    {\n        this.kbd_irq();\n    }\n    else if(this.mouse_buffer.length)\n    {\n        this.mouse_irq();\n    }\n};\n\nPS2.prototype.mouse_irq = function()\n{\n    this.next_byte_is_ready = true;\n    this.next_byte_is_aux = true;\n\n    if(this.command_register & 2)\n    {\n        dbg_log(\"Mouse irq\", LOG_PS2);\n\n        // Pulse the irq line\n        // Note: can't lower immediately after rising, so lower before rising\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\n        this.cpu.device_lower_irq(12);\n        this.cpu.device_raise_irq(12);\n    }\n};\n\nPS2.prototype.kbd_irq = function()\n{\n    this.next_byte_is_ready = true;\n    this.next_byte_is_aux = false;\n\n    if(this.command_register & 1)\n    {\n        dbg_log(\"Keyboard irq\", LOG_PS2);\n\n        // Pulse the irq line\n        // Note: can't lower immediately after rising, so lower before rising\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\n        this.cpu.device_lower_irq(1);\n        this.cpu.device_raise_irq(1);\n    }\n};\n\nPS2.prototype.kbd_send_code = function(code)\n{\n    if(this.enable_keyboard_stream)\n    {\n        dbg_log(\"adding kbd code: \" + h(code), LOG_PS2);\n        this.kbd_buffer.push(code);\n        this.raise_irq();\n    }\n};\n\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    // note: delta_x or delta_y can be floating point numbers\n\n    var factor = this.resolution * this.sample_rate / 80;\n\n    this.mouse_delta_x += delta_x * factor;\n    this.mouse_delta_y += delta_y * factor;\n\n    if(this.enable_mouse_stream)\n    {\n        var change_x = this.mouse_delta_x | 0,\n            change_y = this.mouse_delta_y | 0;\n\n        if(change_x || change_y)\n        {\n            var now = Date.now();\n\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\n            //{\n            //    // TODO: set timeout\n            //    return;\n            //}\n\n            this.mouse_delta_x -= change_x;\n            this.mouse_delta_y -= change_y;\n\n            this.send_mouse_packet(change_x, change_y);\n        }\n    }\n};\n\nPS2.prototype.mouse_send_click = function(left, middle, right)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    this.mouse_clicks = left | right << 1 | middle << 2;\n\n    if(this.enable_mouse_stream)\n    {\n        this.send_mouse_packet(0, 0);\n    }\n};\n\nPS2.prototype.send_mouse_packet = function(dx, dy)\n{\n    var info_byte =\n            (dy < 0) << 5 |\n            (dx < 0) << 4 |\n            1 << 3 |\n            this.mouse_clicks,\n        delta_x = dx,\n        delta_y = dy;\n\n    this.last_mouse_packet = Date.now();\n\n    //if(this.scaling2)\n    //{\n    //    // only in automatic packets, not 0xEB requests\n    //    delta_x = this.apply_scaling2(delta_x);\n    //    delta_y = this.apply_scaling2(delta_y);\n    //}\n\n    this.mouse_buffer.push(info_byte);\n    this.mouse_buffer.push(delta_x);\n    this.mouse_buffer.push(delta_y);\n\n    dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\n\n    this.raise_irq();\n};\n\nPS2.prototype.apply_scaling2 = function(n)\n{\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\n    var abs = Math.abs(n),\n        sign = n >> 31;\n\n    switch(abs)\n    {\n        case 0:\n        case 1:\n        case 3:\n            return n;\n        case 2:\n            return sign;\n        case 4:\n            return 6 * sign;\n        case 5:\n            return 9 * sign;\n        default:\n            return n << 1;\n    }\n};\n\nPS2.prototype.port60_read = function()\n{\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\n\n    this.next_byte_is_ready = false;\n\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\n    {\n        // should not happen\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\n        return this.last_port60_byte;\n    }\n\n    if(this.next_byte_is_aux)\n    {\n        this.cpu.device_lower_irq(12);\n        this.last_port60_byte = this.mouse_buffer.shift();\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\n    }\n    else\n    {\n        this.cpu.device_lower_irq(1);\n        this.last_port60_byte = this.kbd_buffer.shift();\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\n    }\n\n    if(this.kbd_buffer.length || this.mouse_buffer.length)\n    {\n        this.raise_irq();\n    }\n\n    return this.last_port60_byte;\n};\n\nPS2.prototype.port64_read = function()\n{\n    // status port\n\n    var status_byte = 0x10;\n\n    if(this.next_byte_is_ready)\n    {\n        status_byte |= 0x1;\n    }\n    if(this.next_byte_is_aux)\n    {\n        status_byte |= 0x20;\n    }\n\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\n\n    return status_byte;\n};\n\nPS2.prototype.port60_write = function(write_byte)\n{\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\n\n    if(this.read_command_register)\n    {\n        this.command_register = write_byte;\n        this.read_command_register = false;\n\n        // not sure, causes \"spurious ack\" in Linux\n        //this.kbd_buffer.push(0xFA);\n        //this.kbd_irq();\n\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\n    }\n    else if(this.read_output_register)\n    {\n        this.read_output_register = false;\n\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(write_byte);\n        this.mouse_irq();\n    }\n    else if(this.next_read_sample)\n    {\n        this.next_read_sample = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        this.sample_rate = write_byte;\n        dbg_log(\"mouse sample rate: \" + h(write_byte), LOG_PS2);\n        if(!this.sample_rate)\n        {\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\n            this.sample_rate = 100;\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_resolution)\n    {\n        this.next_read_resolution = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        if(write_byte > 3)\n        {\n            this.resolution = 4;\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\n        }\n        else\n        {\n            this.resolution = 1 << write_byte;\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_led)\n    {\n        // nope\n        this.next_read_led = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_handle_scan_code_set)\n    {\n        this.next_handle_scan_code_set = false;\n\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n\n        if(write_byte)\n        {\n            // set scan code set\n        }\n        else\n        {\n            this.kbd_buffer.push(2);\n        }\n    }\n    else if(this.next_read_rate)\n    {\n        // nope\n        this.next_read_rate = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_is_mouse_command)\n    {\n        this.next_is_mouse_command = false;\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        if(!this.have_mouse)\n        {\n            return;\n        }\n\n        // send ack\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xE6:\n            // set scaling to 1:1\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\n            this.scaling2 = false;\n            break;\n        case 0xE7:\n            // set scaling to 2:1\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\n            this.scaling2 = true;\n            break;\n        case 0xE8:\n            // set mouse resolution\n            this.next_read_resolution = true;\n            break;\n        case 0xE9:\n            // status request - send one packet\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xEB:\n            // request single packet\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xF2:\n            //  MouseID Byte\n            this.mouse_buffer.push(0);\n            this.mouse_buffer.push(0);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF3:\n            // sample rate\n            this.next_read_sample = true;\n            break;\n        case 0xF4:\n            // enable streaming\n            this.enable_mouse_stream = true;\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF5:\n            // disable streaming\n            this.enable_mouse_stream = false;\n            break;\n        case 0xF6:\n            // set defaults\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n            break;\n        case 0xFF:\n            // reset, send completion code\n            dbg_log(\"Mouse reset\", LOG_PS2);\n            this.mouse_buffer.push(0xAA);\n            this.mouse_buffer.push(0);\n\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n\n        default:\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.mouse_irq();\n    }\n    else\n    {\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        // send ack\n        this.mouse_buffer.clear();\n        this.kbd_buffer.clear();\n        this.kbd_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xED:\n            this.next_read_led = true;\n            break;\n        case 0xF0:\n            // get/set scan code set\n            this.next_handle_scan_code_set = true;\n            break;\n        case 0xF2:\n            // identify\n            this.kbd_buffer.push(0xAB);\n            this.kbd_buffer.push(83);\n            break;\n        case 0xF3:\n            //  Set typematic rate and delay\n            this.next_read_rate = true;\n            break;\n        case 0xF4:\n            // enable scanning\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = true;\n            break;\n        case 0xF5:\n            // disable scanning\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = false;\n            break;\n        case 0xF6:\n            // reset defaults\n            //this.enable_keyboard_stream = false;\n            break;\n        case 0xFF:\n            this.kbd_buffer.clear();\n            this.kbd_buffer.push(0xFA);\n            this.kbd_buffer.push(0xAA);\n            this.kbd_buffer.push(0);\n            break;\n        default:\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.port64_write = function(write_byte)\n{\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\n\n    switch(write_byte)\n    {\n    case 0x20:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(this.command_register);\n        this.kbd_irq();\n        break;\n    case 0x60:\n        this.read_command_register = true;\n        break;\n    case 0xD3:\n        this.read_output_register = true;\n        break;\n    case 0xD4:\n        this.next_is_mouse_command = true;\n        break;\n    case 0xA7:\n        // Disable second port\n        dbg_log(\"Disable second port\", LOG_PS2);\n        this.command_register |= 0x20;\n        break;\n    case 0xA8:\n        // Enable second port\n        dbg_log(\"Enable second port\", LOG_PS2);\n        this.command_register &= ~0x20;\n        break;\n    case 0xA9:\n        // test second ps/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        this.kbd_irq();\n        break;\n    case 0xAA:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0x55);\n        this.kbd_irq();\n        break;\n    case 0xAB:\n        // Test first PS/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        this.kbd_irq();\n        break;\n    case 0xAD:\n        // Disable Keyboard\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\n        this.command_register |= 0x10;\n        break;\n    case 0xAE:\n        // Enable Keyboard\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\n        this.command_register &= ~0x10;\n        break;\n    case 0xFE:\n        dbg_log(\"CPU reboot via PS2\");\n        this.cpu.reboot_internal();\n        break;\n    default:\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar PIC_LOG_VERBOSE = false;\n\n/**\n * Programmable Interrupt Controller\n * http://stanislavs.org/helppc/8259.html\n *\n * @constructor\n * @param {CPU} cpu\n * @param {PIC=} master\n */\nfunction PIC(cpu, master)\n{\n    /**\n     * all irqs off\n     * @type {number}\n     */\n    this.irq_mask = 0;\n\n    /**\n     * @type {number}\n     *\n     * Bogus default value (both master and slave mapped to 0).\n     * Will be initialized by the BIOS\n     */\n    this.irq_map = 0;\n\n    /**\n     * in-service register\n     * Holds interrupts that are currently being serviced\n     * @type {number}\n     */\n    this.isr = 0;\n\n    /**\n     * interrupt request register\n     * Holds interrupts that have been requested\n     * @type {number}\n     */\n    this.irr = 0;\n\n    this.irq_value = 0;\n\n    /**\n     * @type {number}\n     */\n    this.requested_irq = -1;\n\n    this.master = master;\n    this.is_master = this.master === undefined;\n    this.slave = undefined;\n\n    this.name = this.is_master ? \"master\" : \"slave \";\n\n    this.expect_icw4 = false;\n    this.state = 0;\n    this.read_isr = 0;\n    this.auto_eoi = 1;\n    this.special_mask_mode = 0;\n\n    this.elcr = 0;\n\n    this.cpu = cpu;\n\n    // Checking for callable interrupts:\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\n\n    // triggering irqs:\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\n\n\n    if(this.is_master)\n    {\n        this.slave = new PIC(this.cpu, this);\n\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\n\n            this.requested_irq = irq_number;\n            this.cpu.handle_irqs();\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\n            if(this.requested_irq === 2)\n            {\n                this.slave.acknowledge_irq();\n            }\n            else\n            {\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n            }\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n    else\n    {\n        // is slave\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\n            this.requested_irq = irq_number;\n            this.master.set_irq(2);\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.master.irq_value &= ~(1 << 2);\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            this.master.irq_value &= ~(1 << 2);\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n\n    this.dump = function()\n    {\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\n\n        if(this.is_master)\n        {\n            this.slave.dump();\n        }\n    };\n\n    var io_base;\n    var iobase_high;\n    if(this.is_master)\n    {\n        io_base = 0x20;\n        iobase_high = 0x4D0;\n    }\n    else\n    {\n        io_base = 0xA0;\n        iobase_high = 0x4D1;\n    }\n\n    this.cpu.io.register_write(io_base, this, this.port20_write);\n    this.cpu.io.register_read(io_base, this, this.port20_read);\n\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\n\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\n\n\n    if(this.is_master)\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n\n            if(irq_number >= 8)\n            {\n                this.slave.set_irq(irq_number - 8);\n                return;\n            }\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\n            }\n\n            if(irq_number >= 8)\n            {\n                this.slave.clear_irq(irq_number - 8);\n                return;\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n    else\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n\n    this.get_isr = function()\n    {\n        return this.isr;\n    };\n}\n\nPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.irq_mask;\n    state[1] = this.irq_map;\n    state[2] = this.isr;\n    state[3] = this.irr;\n    state[4] = this.is_master;\n    state[5] = this.slave;\n    state[6] = this.expect_icw4;\n    state[7] = this.state;\n    state[8] = this.read_isr;\n    state[9] = this.auto_eoi;\n    state[10] = this.elcr;\n\n    return state;\n};\n\nPIC.prototype.set_state = function(state)\n{\n    this.irq_mask = state[0];\n    this.irq_map = state[1];\n    this.isr = state[2];\n    this.irr = state[3];\n    this.is_master = state[4];\n    this.slave = state[5];\n    this.expect_icw4 = state[6];\n    this.state = state[7];\n    this.read_isr = state[8];\n    this.auto_eoi = state[9];\n    this.elcr = state[10];\n};\n\nPIC.prototype.port20_write = function(data_byte)\n{\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\n    if(data_byte & 0x10) // xxxx1xxx\n    {\n        // icw1\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\n        this.isr = 0;\n        this.irr = 0;\n        this.irq_mask = 0;\n        this.irq_value = 0;\n        this.auto_eoi = 1;\n        this.requested_irq = -1;\n\n        this.expect_icw4 = data_byte & 1;\n        this.state = 1;\n    }\n    else if(data_byte & 8) // xxx01xxx\n    {\n        // ocw3\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\n        if(data_byte & 2)\n        {\n            this.read_isr = data_byte & 1;\n        }\n        if(data_byte & 4)\n        {\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\n        }\n        if(data_byte & 0x40)\n        {\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\n        }\n    }\n    else // xxx00xxx\n    {\n        // ocw2\n        // end of interrupt\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\n\n        var eoi_type = data_byte >> 5;\n\n        if(eoi_type === 1)\n        {\n            // non-specific eoi\n            this.isr &= this.isr - 1;\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\n        }\n        else if(eoi_type === 3)\n        {\n            // specific eoi\n            this.isr &= ~(1 << (data_byte & 7));\n        }\n        else if((data_byte & 0xC8) === 0xC0)\n        {\n            // os2 v4\n            let priority = data_byte & 7;\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\n        }\n        else\n        {\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\n            dbg_assert(false);\n            this.isr &= this.isr - 1;\n        }\n\n        this.check_irqs();\n    }\n};\n\nPIC.prototype.port20_read = function()\n{\n    if(this.read_isr)\n    {\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\n        return this.isr;\n    }\n    else\n    {\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\n        return this.irr;\n    }\n};\n\nPIC.prototype.port21_write = function(data_byte)\n{\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\n    if(this.state === 0)\n    {\n        if(this.expect_icw4)\n        {\n            // icw4\n            this.expect_icw4 = false;\n            this.auto_eoi = data_byte & 2;\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\n\n            if((data_byte & 1) === 0)\n            {\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\n            }\n        }\n        else\n        {\n            // ocw1\n            this.irq_mask = ~data_byte;\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\n                        \" (\" + this.name + \")\", LOG_PIC);\n            }\n\n            this.check_irqs();\n        }\n    }\n    else if(this.state === 1)\n    {\n        // icw2\n        this.irq_map = data_byte;\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\n                \" (\" + this.name + \")\", LOG_PIC);\n        this.state++;\n    }\n    else if(this.state === 2)\n    {\n        // icw3\n        this.state = 0;\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\n    }\n};\n\nPIC.prototype.port21_read = function()\n{\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\n    return ~this.irq_mask & 0xFF;\n};\n\nPIC.prototype.port4D0_read = function()\n{\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\n    return this.elcr;\n};\n\nPIC.prototype.port4D0_write = function(value)\n{\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\n    // set by seabios to 00 0C (only set for pci interrupts)\n    this.elcr = value;\n};\n\n","\"use strict\";\n\n/*\n * Serial ports\n * http://wiki.osdev.org/UART\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\n * https://www.freebsd.org/doc/en/articles/serial-uart/\n */\n\n/** @const */\nvar DLAB = 0x80;\n\n\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\n\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\n/** @const */var UART_IIR_NO_INT = 0x01;\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\n\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {number} port\n * @param {BusConnector} bus\n */\nfunction UART(cpu, port, bus)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.ints = 1 << UART_IIR_THRI;\n\n    this.baud_rate = 0;\n\n    this.line_control = 0;\n\n    // line status register\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\n\n    this.fifo_control = 0;\n\n    // interrupts enable\n    this.ier = 0;\n\n    // interrupt identification register\n    this.iir = UART_IIR_NO_INT;\n\n    this.modem_control = 0;\n    this.modem_status = 0;\n\n    this.scratch_register = 0;\n\n    this.irq = 0;\n\n    this.input = new ByteQueue(4096);\n\n    this.current_line = [];\n\n    switch(port)\n    {\n        case 0x3F8:\n            this.com = 0;\n            this.irq = 4;\n            break;\n        case 0x2F8:\n            this.com = 1;\n            this.irq = 3;\n            break;\n        case 0x3E8:\n            this.com = 2;\n            this.irq = 4;\n            break;\n        case 0x2E8:\n            this.com = 3;\n            this.irq = 3;\n            break;\n        default:\n            dbg_log(\"Invalid serial port: \" + h(port), LOG_SERIAL);\n            this.com = 0;\n            this.irq = 4;\n    }\n\n    this.bus.register(\"serial\" + this.com + \"-input\", function(data)\n    {\n        this.data_received(data);\n    }, this);\n\n    var io = cpu.io;\n\n    io.register_write(port, this, function(out_byte)\n    {\n        this.write_data(out_byte);\n    }, function(out_word)\n    {\n        this.write_data(out_word & 0xFF);\n        this.write_data(out_word >> 8);\n    });\n\n    io.register_write(port | 1, this, function(out_byte)\n    {\n        if(this.line_control & DLAB)\n        {\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\n        }\n        else\n        {\n            this.ier = out_byte & 0xF;\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\n            this.CheckInterrupt();\n        }\n    });\n\n    io.register_read(port, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate & 0xFF;\n        }\n        else\n        {\n            var data = this.input.shift();\n\n            if(data === -1)\n            {\n                dbg_log(\"Read input empty\", LOG_SERIAL);\n            }\n            else\n            {\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\n            }\n\n            if(this.input.length === 0)\n            {\n                this.lsr &= ~UART_LSR_DATA_READY;\n                this.ClearInterrupt(UART_IIR_CTI);\n            }\n\n            return data;\n        }\n    });\n\n    io.register_read(port | 1, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate >> 8;\n        }\n        else\n        {\n            return this.ier & 0xF;\n        }\n    });\n\n    io.register_read(port | 2, this, function()\n    {\n        var ret = this.iir & 0xF | 0xC0;\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\n\n        if (this.iir == UART_IIR_THRI) {\n            this.ClearInterrupt(UART_IIR_THRI);\n        }\n\n        return ret;\n    });\n    io.register_write(port | 2, this, function(out_byte)\n    {\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\n        this.fifo_control = out_byte;\n    });\n\n    io.register_read(port | 3, this, function()\n    {\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\n        return this.line_control;\n    });\n    io.register_write(port | 3, this, function(out_byte)\n    {\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\n        this.line_control = out_byte;\n    });\n\n\n    io.register_read(port | 4, this, function()\n    {\n        return this.modem_control;\n    });\n    io.register_write(port | 4, this, function(out_byte)\n    {\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\n        this.modem_control = out_byte;\n    });\n\n    io.register_read(port | 5, this, function()\n    {\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\n        return this.lsr;\n    });\n    io.register_write(port | 5, this, function(out_byte)\n    {\n        dbg_log(\"Factory test write\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 6, this, function()\n    {\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\n        return this.modem_status;\n    });\n    io.register_write(port | 6, this, function(out_byte)\n    {\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 7, this, function()\n    {\n        return this.scratch_register;\n    });\n    io.register_write(port | 7, this, function(out_byte)\n    {\n        this.scratch_register = out_byte;\n    });\n}\n\nUART.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.ints;\n    state[1] = this.baud_rate;\n    state[2] = this.line_control;\n    state[3] = this.lsr;\n    state[4] = this.fifo_control;\n    state[5] = this.ier;\n    state[6] = this.iir;\n    state[7] = this.modem_control;\n    state[8] = this.modem_status;\n    state[9] = this.scratch_register;\n    state[10] = this.irq;\n\n    return state;\n};\n\nUART.prototype.set_state = function(state)\n{\n    this.ints = state[0];\n    this.baud_rate = state[1];\n    this.line_control = state[2];\n    this.lsr = state[3];\n    this.fifo_control = state[4];\n    this.ier = state[5];\n    this.iir = state[6];\n    this.modem_control = state[7];\n    this.modem_status = state[8];\n    this.scratch_register = state[9];\n    this.irq = state[10];\n};\n\nUART.prototype.CheckInterrupt = function() {\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\n        this.iir = UART_IIR_CTI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\n        this.iir = UART_IIR_THRI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\n        this.iir = UART_IIR_MSI;\n        this.cpu.device_raise_irq(this.irq);\n    } else {\n        this.iir = UART_IIR_NO_INT;\n        this.cpu.device_lower_irq(this.irq);\n    }\n};\n\nUART.prototype.ThrowInterrupt = function(line) {\n    this.ints |= (1 << line);\n    this.CheckInterrupt();\n};\n\nUART.prototype.ClearInterrupt = function(line) {\n    this.ints &= ~(1 << line);\n    this.CheckInterrupt();\n};\n\n/**\n * @param {number} data\n */\nUART.prototype.data_received = function(data)\n{\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\n    this.input.push(data);\n\n    this.lsr |= UART_LSR_DATA_READY;\n    this.ThrowInterrupt(UART_IIR_CTI);\n};\n\nUART.prototype.write_data = function(out_byte)\n{\n    if(this.line_control & DLAB)\n    {\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\n        return;\n    }\n\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\n\n    this.ThrowInterrupt(UART_IIR_THRI);\n\n    this.bus.send(\"serial\" + this.com + \"-output-byte\", out_byte);\n\n    if(out_byte === 0xFF)\n    {\n        return;\n    }\n\n    var char = String.fromCharCode(out_byte);\n\n    this.bus.send(\"serial\" + this.com + \"-output-char\", char);\n\n    this.current_line.push(out_byte);\n\n    if(char === \"\\n\")\n    {\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\n        this.bus.send(\"serial\" + this.com + \"-output-line\", String.fromCharCode.apply(\"\", this.current_line));\n        this.current_line = [];\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar STATE_VERSION = 5;\n\n/** @const */\nvar STATE_MAGIC = 0x86768676|0;\n\n/** @const */\nvar STATE_INDEX_MAGIC = 0;\n\n/** @const */\nvar STATE_INDEX_VERSION = 1;\n\n/** @const */\nvar STATE_INDEX_TOTAL_LEN = 2;\n\n/** @const */\nvar STATE_INDEX_INFO_LEN = 3;\n\n/** @const */\nvar STATE_INFO_BLOCK_START = 16;\n\n\n/** @constructor */\nfunction StateLoadError(msg)\n{\n    this.message = msg;\n}\nStateLoadError.prototype = new Error;\n\n\nfunction save_object(obj, saved_buffers)\n{\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\n    {\n        return obj;\n    }\n\n    dbg_assert(obj.constructor !== Object);\n\n    if(obj.BYTES_PER_ELEMENT)\n    {\n        // Uint8Array, etc.\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\n\n        return {\n            \"__state_type__\": obj.constructor.name,\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\n        };\n    }\n\n    if(DEBUG && !obj.get_state)\n    {\n        console.log(\"Object without get_state: \", obj);\n    }\n\n    var state = obj.get_state();\n    var result = [];\n\n    for(var i = 0; i < state.length; i++)\n    {\n        var value = state[i];\n\n        dbg_assert(typeof value !== \"function\");\n\n        result[i] = save_object(value, saved_buffers);\n    }\n\n    return result;\n}\n\nfunction restore_object(base, obj, buffers)\n{\n    // recursively restore obj into base\n\n    if(typeof obj !== \"object\" || obj === null)\n    {\n        return obj;\n    }\n\n    if(base instanceof Array)\n    {\n        return obj;\n    }\n\n    var type = obj[\"__state_type__\"];\n\n    if(type === undefined)\n    {\n        if(DEBUG && base === undefined)\n        {\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\n            dbg_assert(false);\n        }\n\n        if(DEBUG && !base.get_state)\n        {\n            console.log(\"No get_state:\", base);\n        }\n\n        var current = base.get_state();\n\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\n\n        for(var i = 0; i < obj.length; i++)\n        {\n            obj[i] = restore_object(current[i], obj[i], buffers);\n        }\n\n        base.set_state(obj);\n\n        return base;\n    }\n    else\n    {\n        var table = {\n            \"Uint8Array\": Uint8Array,\n            \"Int8Array\": Int8Array,\n            \"Uint16Array\": Uint16Array,\n            \"Int16Array\": Int16Array,\n            \"Uint32Array\": Uint32Array,\n            \"Int32Array\": Int32Array,\n            \"Float32Array\": Float32Array,\n            \"Float64Array\": Float64Array,\n        };\n\n        var constructor = table[type];\n        dbg_assert(constructor, \"Unkown type: \" + type);\n\n        var info = buffers.infos[obj[\"buffer_id\"]];\n\n        dbg_assert(base);\n        dbg_assert(base.constructor === constructor);\n\n        // restore large buffers by just returning a view on the state blob\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\n        {\n            return new Uint8Array(buffers.full, info.offset, info.length);\n        }\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\n        //      and possibly also breaks restore -> save -> restore again\n        // avoid a new allocation if possible\n        //else if(base &&\n        //        base.constructor === constructor &&\n        //        base.byteOffset === 0 &&\n        //        base.byteLength === info.length)\n        //{\n        //    new Uint8Array(base.buffer).set(\n        //        new Uint8Array(buffers.full, info.offset, info.length),\n        //        base.byteOffset\n        //    );\n        //    return base;\n        //}\n        else\n        {\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\n            return new constructor(buf);\n        }\n    }\n}\n\nCPU.prototype.save_state = function()\n{\n    var saved_buffers = [];\n    var state = save_object(this, saved_buffers);\n\n    var buffer_infos = [];\n    var total_buffer_size = 0;\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var len = saved_buffers[i].byteLength;\n\n        buffer_infos[i] = {\n            offset: total_buffer_size,\n            length: len,\n        };\n\n        total_buffer_size += len;\n\n        // align\n        total_buffer_size = total_buffer_size + 3 & ~3;\n    }\n\n    var info_object = JSON.stringify({\n        \"buffer_infos\": buffer_infos,\n        \"state\": state,\n    });\n\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n    var total_size = buffer_block_start + total_buffer_size;\n\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\n\n    var result = new ArrayBuffer(total_size);\n\n    var header_block = new Int32Array(\n        result,\n        0,\n        STATE_INFO_BLOCK_START / 4\n    );\n    var info_block = new Uint16Array(\n        result,\n        STATE_INFO_BLOCK_START,\n        info_object.length\n    );\n    var buffer_block = new Uint8Array(\n        result,\n        buffer_block_start\n    );\n\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\n\n    for(var i = 0; i < info_object.length; i++)\n    {\n        info_block[i] = info_object.charCodeAt(i);\n    }\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var buffer = saved_buffers[i];\n        dbg_assert(buffer.constructor === Uint8Array);\n        buffer_block.set(buffer, buffer_infos[i].offset);\n    }\n\n    return result;\n};\n\nCPU.prototype.restore_state = function(state)\n{\n    var len = state.byteLength;\n\n    if(len < STATE_INFO_BLOCK_START)\n    {\n        throw new StateLoadError(\"Invalid length: \" + len);\n    }\n\n    var header_block = new Int32Array(state, 0, 4);\n\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\n    {\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\n    }\n\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\n    {\n        throw new StateLoadError(\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\n                \" we=\" + STATE_VERSION);\n    }\n\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\n    {\n        throw new StateLoadError(\n                \"Length doesn't match header: \" +\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\n    }\n\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\n\n    if(info_block_len < 0 ||\n       info_block_len + 12 >= len ||\n       info_block_len % 2)\n    {\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\n    }\n\n    var info_block_str_len = info_block_len / 2;\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\n    var info_block = \"\";\n\n    for(var i = 0; i < info_block_str_len - 8; )\n    {\n        info_block += String.fromCharCode(\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++]\n        );\n    }\n\n    for(; i < info_block_str_len; )\n    {\n        info_block += String.fromCharCode(info_block_buffer[i++]);\n    }\n\n    var info_block_obj = JSON.parse(info_block);\n    var state_object = info_block_obj[\"state\"];\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n\n    for(var i = 0; i < buffer_infos.length; i++)\n    {\n        buffer_infos[i].offset += buffer_block_start;\n    }\n\n    var buffers = {\n        full: state,\n        infos: buffer_infos,\n    };\n\n    restore_object(this, state_object, buffers);\n};\n","\"use strict\";\n\n\n/** @const */ var E8390_CMD = 0x00 /* The command register (for all pages) */\n\n/* Page 0 register offsets. */\n/** @const */ var EN0_CLDALO = 0x01 /* Low byte of current local dma addr RD */\n/** @const */ var EN0_STARTPG = 0x01 /* Starting page of ring bfr WR */\n/** @const */ var EN0_CLDAHI = 0x02 /* High byte of current local dma addr RD */\n/** @const */ var EN0_STOPPG = 0x02 /* Ending page +1 of ring bfr WR */\n/** @const */ var EN0_BOUNDARY = 0x03 /* Boundary page of ring bfr RD WR */\n/** @const */ var EN0_TSR = 0x04 /* Transmit status reg RD */\n/** @const */ var EN0_TPSR = 0x04 /* Transmit starting page WR */\n/** @const */ var EN0_NCR = 0x05 /* Number of collision reg RD */\n/** @const */ var EN0_TCNTLO = 0x05 /* Low byte of tx byte count WR */\n/** @const */ var EN0_FIFO = 0x06 /* FIFO RD */\n/** @const */ var EN0_TCNTHI = 0x06 /* High byte of tx byte count WR */\n/** @const */ var EN0_ISR = 0x07 /* Interrupt status reg RD WR */\n/** @const */ var EN0_CRDALO = 0x08 /* low byte of current remote dma address RD */\n/** @const */ var EN0_RSARLO = 0x08 /* Remote start address reg 0 */\n/** @const */ var EN0_CRDAHI = 0x09 /* high byte, current remote dma address RD */\n/** @const */ var EN0_RSARHI = 0x09 /* Remote start address reg 1 */\n/** @const */ var EN0_RCNTLO = 0x0a /* Remote byte count reg WR */\n/** @const */ var EN0_RCNTHI = 0x0b /* Remote byte count reg WR */\n/** @const */ var EN0_RSR = 0x0c /* rx status reg RD */\n/** @const */ var EN0_RXCR = 0x0c /* RX configuration reg WR */\n/** @const */ var EN0_TXCR = 0x0d /* TX configuration reg WR */\n/** @const */ var EN0_COUNTER0 = 0x0d /* Rcv alignment error counter RD */\n/** @const */ var EN0_DCFG = 0x0e /* Data configuration reg WR */\n/** @const */ var EN0_COUNTER1 = 0x0e /* Rcv CRC error counter RD */\n/** @const */ var EN0_IMR = 0x0f /* Interrupt mask reg WR */\n/** @const */ var EN0_COUNTER2 = 0x0f /* Rcv missed frame error counter RD */\n\n/** @const */ var NE_DATAPORT = 0x10 /* NatSemi-defined port window offset. */\n/** @const */ var NE_RESET = 0x1f /* Issue a read to reset, a write to clear. */\n\n/* Bits in EN0_ISR - Interrupt status register */\n/** @const */ var ENISR_RX = 0x01 /* Receiver, no error */\n/** @const */ var ENISR_TX = 0x02 /* Transmitter, no error */\n/** @const */ var ENISR_RX_ERR = 0x04 /* Receiver, with error */\n/** @const */ var ENISR_TX_ERR = 0x08 /* Transmitter, with error */\n/** @const */ var ENISR_OVER = 0x10 /* Receiver overwrote the ring */\n/** @const */ var ENISR_COUNTERS = 0x20 /* Counters need emptying */\n/** @const */ var ENISR_RDC = 0x40 /* remote dma complete */\n/** @const */ var ENISR_RESET = 0x80 /* Reset completed */\n/** @const */ var ENISR_ALL = 0x3f /* Interrupts we will enable */\n\n/** @const */ var ENRSR_RXOK = 0x01 /* Received a good packet */\n\n/** @const */ var START_PAGE = 0x40;\n/** @const */ var START_RX_PAGE = 0x40 + 12;\n/** @const */ var STOP_PAGE = 0x80;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction Ne2k(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n    this.bus.register(\"net0-receive\", function(data)\n    {\n        this.receive(data);\n    }, this);\n\n    this.port = 0x300;\n\n    this.name = \"ne2k\";\n\n    /** @const */\n    var use_pci = true;\n\n    if(use_pci)\n    {\n        this.pci_space = [\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n        ];\n        this.pci_id = 0x05 << 3;\n        this.pci_bars = [\n            {\n                size: 32,\n            },\n        ];\n    }\n\n    this.isr = 0;\n    this.imr = 0; // interrupt mask register\n\n    this.cr = 1;\n\n    this.dcfg = 0;\n\n    this.rcnt = 0;\n\n    this.tcnt = 0;\n    this.tpsr = 0;\n    this.memory = new Uint8Array(256 * 0x80);\n\n    this.rxcr = 0;\n    this.txcr = 0;\n    this.tsr = 1;\n\n    // mac address\n    var mac = [\n        0x00, 0x22, 0x15,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n    ];\n\n    for(var i = 0; i < 6; i++)\n    {\n        this.memory[i << 1] = this.memory[i << 1 | 1] = mac[i];\n    }\n\n    this.memory[14] = this.memory[15] = 0x57;\n\n    dbg_log(\"Mac: \" + h(mac[0], 2) + \":\" +\n                      h(mac[1], 2) + \":\" +\n                      h(mac[2], 2) + \":\" +\n                      h(mac[3], 2) + \":\" +\n                      h(mac[4], 2) + \":\" +\n                      h(mac[5], 2), LOG_NET);\n\n    this.rsar = 0;\n\n    this.pstart = START_PAGE;\n    this.pstop = STOP_PAGE;\n\n    this.curpg = START_RX_PAGE;\n    this.boundary = START_RX_PAGE;\n\n    var io = cpu.io;\n\n    io.register_read(this.port | E8390_CMD, this, function()\n    {\n        dbg_log(\"Read cmd\", LOG_NET);\n        return this.cr;\n    });\n\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\n    {\n        this.cr = data_byte & ~4;\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\n\n        if(this.cr & 1)\n        {\n            return;\n        }\n\n        if((data_byte | 0x18) && this.rcnt === 0)\n        {\n            this.do_interrupt(ENISR_RDC);\n        }\n\n        if(data_byte & 4)\n        {\n            var start = this.tpsr << 8;\n            var data = this.memory.subarray(start, start + this.tcnt);\n            this.bus.send(\"net0-send\", data);\n            this.bus.send(\"eth-transmit-end\", [data.length]);\n            this.do_interrupt(ENISR_TX);\n\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_COUNTER0, this, function()\n    {\n        dbg_log(\"Read counter0\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER1, this, function()\n    {\n        dbg_log(\"Read counter1\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER2, this, function()\n    {\n        dbg_log(\"Read counter2\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | NE_RESET, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read reset\", LOG_NET);\n            this.do_interrupt(ENISR_RESET);\n        }\n        else\n        {\n            dbg_log(\"Read pg1/1f\", LOG_NET);\n        }\n        return 0;\n    });\n\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\n            //this.isr &= ~ENISR_RESET;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/1f: \" + h(data_byte), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\n            this.pstart = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/1: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\n            this.pstop = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/2: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_ISR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\n            return this.isr;\n        }\n        else\n        {\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\n            return this.curpg;\n        }\n    });\n\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            // acknoledge interrupts where bit is set\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\n            this.isr &= ~data_byte\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\n            this.curpg = data_byte\n        }\n    });\n\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            this.txcr = data_byte;\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0d \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\n            this.dcfg = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0e \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0a \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0b \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x08 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write start addresse count high: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x09 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\n            this.imr = data_byte;\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0f \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\n            return this.boundary;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x03\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\n            this.boundary = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x03 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_TSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return this.tsr;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x04\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\n            this.tpsr = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x04 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x05 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x06 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_RSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return 1 | 1 << 3; // receive status ok\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x0c\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\n    {\n        dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\n        this.rxcr = data_byte;\n    });\n\n    io.register_read(this.port | NE_DATAPORT | 0, this,\n            this.data_port_read8,\n            this.data_port_read16,\n            this.data_port_read32);\n    io.register_write(this.port | NE_DATAPORT | 0, this,\n            this.data_port_write16,\n            this.data_port_write16,\n            this.data_port_write32);\n\n    if(use_pci)\n    {\n        cpu.devices.pci.register_device(this);\n    }\n}\n\nNe2k.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.isr;\n    state[1] = this.imr;\n    state[2] = this.cr;\n    state[3] = this.dcfg;\n    state[4] = this.rcnt;\n    state[5] = this.tcnt;\n    state[6] = this.tpsr;\n    state[7] = this.rsar;\n    state[8] = this.pstart;\n    state[9] = this.curpg;\n    state[10] = this.boundary;\n\n    return state;\n};\n\nNe2k.prototype.set_state = function(state)\n{\n    this.isr = state[0];\n    this.imr = state[1];\n    this.cr = state[2];\n    this.dcfg = state[3];\n    this.rcnt = state[4];\n    this.tcnt = state[5];\n    this.tpsr = state[6];\n    this.rsar = state[7];\n    this.pstart = state[8];\n    this.curpg = state[9];\n    this.boundary = state[10];\n};\n\nNe2k.prototype.do_interrupt = function(ir_mask)\n{\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\n    this.isr |= ir_mask;\n    this.update_irq();\n};\n\nNe2k.prototype.update_irq = function()\n{\n    if(this.imr & this.isr)\n    {\n        this.pci.raise_irq(this.pci_id);\n    }\n    else\n    {\n        this.pci.lower_irq(this.pci_id);\n    }\n};\n\nNe2k.prototype.data_port_write = function(data_byte)\n{\n    dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\n                            \" rsar=\" + h(this.rsar, 4) +\n                            \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n\n    if(this.rsar > 0x10 && this.rsar < (START_PAGE << 8))\n    {\n        // unmapped\n        return;\n    }\n\n    this.rcnt--;\n    this.memory[this.rsar++] = data_byte;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n};\n\nNe2k.prototype.data_port_write16 = function(data)\n{\n    this.data_port_write(data);\n\n    if(this.dcfg & 1)\n    {\n        this.data_port_write(data >> 8);\n    }\n};\n\nNe2k.prototype.data_port_write32 = function(data)\n{\n    this.data_port_write(data);\n    this.data_port_write(data >> 8);\n    this.data_port_write(data >> 16);\n    this.data_port_write(data >> 24);\n};\n\nNe2k.prototype.data_port_read = function()\n{\n    var data = this.memory[this.rsar++];\n\n    dbg_log(\"Read data port: data=\" + h(data, 2) +\n                           \" rsar=\" + h(this.rsar - 1, 4) +\n                           \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n    this.rcnt--;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n\n    return data;\n};\n\nNe2k.prototype.data_port_read8 = function()\n{\n    return this.data_port_read16() & 0xFF;\n};\n\nNe2k.prototype.data_port_read16 = function()\n{\n    if(this.dcfg & 1)\n    {\n        return this.data_port_read() | this.data_port_read() << 8;\n    }\n    else\n    {\n        return this.data_port_read();\n    }\n};\n\nNe2k.prototype.data_port_read32 = function()\n{\n    return this.data_port_read() | this.data_port_read() << 8 |\n            this.data_port_read() << 16 | this.data_port_read() << 24;\n};\n\nNe2k.prototype.receive = function(data)\n{\n    // called from the adapter when data is received over the network\n\n    if(this.cr & 1)\n    {\n        // stop bit set\n        return;\n    }\n\n    this.bus.send(\"eth-receive-end\", [data.length]);\n\n    if(this.rxcr & 0x10)\n    {\n        // promiscuous\n    }\n    else if((this.rxcr & 4) &&\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\n    {\n        // broadcast\n    }\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\n    {\n        // multicast\n        // XXX\n        return;\n    }\n    else if(data[0] === this.memory[0] && data[1] === this.memory[2] &&\n            data[2] === this.memory[4] && data[3] === this.memory[6] &&\n            data[4] === this.memory[8] && data[5] === this.memory[10])\n    {\n    }\n    else\n    {\n        return;\n    }\n\n    var packet_length = Math.max(60, data.length);\n\n    var offset = this.curpg << 8;\n    var total_length = packet_length + 4;\n    var data_start = offset + 4;\n    var next = this.curpg + 1 + (total_length >> 8);\n\n    var end = offset + total_length;\n\n    if(end > this.memory.length)\n    {\n        // shouldn't happen because at this size it can't cross a page\n        dbg_assert(data.length >= 60);\n\n        var cut = this.memory.length - data_start;\n        this.memory.set(data.subarray(0, cut), data_start);\n        this.memory.set(data.subarray(cut), START_RX_PAGE);\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\n    }\n    else\n    {\n        this.memory.set(data, data_start);\n\n        if(data.length < 60)\n        {\n            for(var i = data.length; i < 60; i++)\n            {\n                this.memory[data_start + i] = 0;\n            }\n        }\n    }\n\n    if(next >= this.pstop)\n    {\n        next += this.pstart - this.pstop;\n    }\n\n    // write packet header\n    this.memory[offset] = ENRSR_RXOK; // status\n    this.memory[offset + 1] = next;\n    this.memory[offset + 2] = total_length;\n    this.memory[offset + 3] = total_length >> 8;\n\n    this.curpg = next;\n\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\n\n    this.do_interrupt(ENISR_RX);\n};\n\nNe2k.prototype.get_page = function()\n{\n    return this.cr & 0xC0;\n};\n","\"use strict\";\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {FS} filesystem\n */\nfunction VirtIO(cpu, bus, filesystem)\n{\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\n\n    this.pci_space = [\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x06 << 3;\n    this.pci_bars = [\n        {\n            size: 256,\n        },\n    ];\n    this.name = \"virtio\";\n\n    var io = cpu.io;\n\n    io.register_read(0xA800, this,\n        function() {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        },\n        undefined,\n        function()\n        {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        }\n    );\n\n    io.register_write(0xA804, this, undefined, undefined, function(data)\n    {\n        // write guest features\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\n    });\n\n    io.register_write(0xA80E, this, undefined, function(data)\n    {\n        // rw queue select\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\n        this.queue_select = data;\n    }, undefined);\n\n    io.register_read(0xA80C, this, undefined, function()\n    {\n        // read queue size\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\n        return this.queue_size;\n    }, undefined);\n\n    io.register_read(0xA808, this, undefined, undefined, function()\n    {\n        // rw queue address\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\n\n        if(this.queue_select === 0)\n        {\n            return this.queue_address;\n        }\n        else\n        {\n            // queue does not exist\n            return 0;\n        }\n    });\n\n    io.register_write(0xA808, this, undefined, undefined, function(data)\n    {\n        // rw queue address\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\n        this.queue_address = data;\n    });\n\n    io.register_write(0xA812, this, function(data)\n    {\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\n\n        if(data === 0)\n        {\n            dbg_log(\"Reset\", LOG_VIRTIO);\n            this.reset();\n        }\n        else if(data & 0x80)\n        {\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\n        }\n        else\n        {\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\n                    ((data & 2) ? \"DRIVER \" : \"\") +\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\n                    LOG_VIRTIO);\n\n        }\n\n        this.device_status = data;\n    });\n\n    io.register_read(0xA812, this, function()\n    {\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\n        return this.device_status;\n    });\n\n    io.register_read(0xA813, this, function()\n    {\n        dbg_log(\"Read isr\", LOG_VIRTIO);\n\n        // reading resets the isr\n        var isr = this.isr;\n        this.isr = 0;\n        this.pci.lower_irq(this.pci_id);\n        return isr;\n    });\n\n    io.register_write(0xA810, this, undefined, function(data)\n    {\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\n\n        // only queue 0 supported\n        dbg_assert(data === 0);\n\n        var queue_start = this.queue_address << 12;\n        var ring_start = queue_start + 16 * this.queue_size;\n        var ring_desc_start = ring_start + 4;\n\n        var //flags = this.cpu.read16(ring_start),\n            // index of the next free ring\n            idx = this.cpu.read16(ring_start + 2);\n\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\n        //dbg_assert(idx < this.queue_size);\n\n        var mask = this.queue_size - 1;\n        idx &= mask;\n\n        while(this.last_idx !== idx)\n        {\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\n            this.handle_descriptor(desc_idx);\n\n            this.last_idx = this.last_idx + 1 & mask;\n        }\n    });\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    // these should be stored per queue if there is more than one queue\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n\n    for(var i = 0; i < 128; i++)\n    {\n        io.register_read(0xA814 + i, this, function(port)\n        {\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\n\n            if(port < this.device.configspace.length)\n            {\n                return this.device.configspace[port];\n            }\n            else\n            {\n                return 0;\n            }\n        }.bind(this, i), undefined, undefined);\n\n        io.register_write(0xA814 + i, this, function(port, data)\n        {\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\n        }.bind(this, i), undefined, undefined);\n    }\n\n    // should be generalized to support more devices than just the filesystem\n    this.device = new Virtio9p(filesystem, bus);\n    this.device.SendReply = this.device_reply.bind(this);\n\n    cpu.devices.pci.register_device(this);\n}\n\nVirtIO.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = 0; // unused\n    state[1] = this.queue_select;\n    state[2] = this.device_status;\n    state[3] = this.isr;\n    state[4] = this.last_idx;\n    state[5] = this.queue_size;\n    state[6] = this.queue_address;\n    state[7] = this.device;\n\n    return state;\n};\n\nVirtIO.prototype.set_state = function(state)\n{\n    this.queue_select = state[1];\n    this.device_status = state[2];\n    this.isr = state[3];\n    this.last_idx = state[4];\n    this.queue_size = state[5];\n    this.queue_address = state[6];\n\n    this.device = state[7];\n    this.device.SendReply = this.device_reply.bind(this);\n};\n\nVirtIO.prototype.reset = function()\n{\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n};\n\nVirtIO.prototype.handle_descriptor = function(idx)\n{\n    var next = idx;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if(flags & VRING_DESC_F_WRITE)\n        {\n            break;\n        }\n\n        if(flags & VRING_DESC_F_INDIRECT) {\n            dbg_assert(false, \"unsupported\");\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            next = -1;\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    var infos = {\n        start: idx,\n        next: next,\n    };\n\n    this.device.ReceiveRequest(infos, function()\n    {\n        // return one byte\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        return this.cpu.read8(addr_low + pointer++);\n    }.bind(this));\n};\n\nVirtIO.prototype.device_reply = function(queueidx, infos)\n{\n    if(infos.next === -1)\n    {\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\n        return;\n    }\n\n    var mask = this.queue_size - 1;\n    var result_length = this.device.replybuffersize;\n\n    var next = infos.next;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if((flags & VRING_DESC_F_WRITE) === 0)\n        {\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\n            break;\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    for(var i = 0; i < result_length; i++)\n    {\n        var data = this.device.replybuffer[i];\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        this.cpu.write8(addr_low + pointer++, data);\n    }\n\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\n    used_desc_start = used_desc_start + 4095 & ~4095;\n\n    var flags = this.cpu.read16(used_desc_start);\n    var used_idx = this.cpu.read16(used_desc_start + 2);\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\n\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\n\n    used_idx &= mask;\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\n    this.cpu.write32(used_desc_offset, infos.start);\n    this.cpu.write32(used_desc_offset + 4, result_length);\n\n    this.isr |= 1;\n    this.pci.raise_irq(this.pci_id);\n};\n","\"use strict\";\n\n// jor1k compatibility\n\nvar VIRTIO_MAGIC_REG = 0x0;\nvar VIRTIO_VERSION_REG = 0x4;\nvar VIRTIO_DEVICE_REG = 0x8;\nvar VIRTIO_VENDOR_REG = 0xc;\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\nvar VIRTIO_QUEUESEL_REG = 0x30;\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\nvar VIRTIO_QUEUENUM_REG = 0x38;\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\nvar VIRTIO_QUEUEPFN_REG = 0x40;\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\nvar VIRTIO_STATUS_REG = 0x70;\n\n/** @const */\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\n/** @const */\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\n/** @const */\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\n\n\nfunction hex8(n)\n{\n    return h(n);\n}\n\nvar message = {};\n\n/** @param {...string} log */\nmessage.Debug = function(log)\n{\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\n}\n\nmessage.Abort = function()\n{ \n    if(DEBUG)\n    {\n        throw \"abort\"; \n    }\n}\n\n\n// XXX: Should go through emulator interface\nvar LoadBinaryResource;\n\nif(typeof XMLHttpRequest !== \"undefined\")\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.responseType = \"arraybuffer\";\n        req.onreadystatechange = function () {\n            if (req.readyState != 4) {\n                return;\n            }\n            if ((req.status != 200) && (req.status != 0)) {\n                OnError(\"Error: Could not load file \" + url);\n                return;\n            }\n            var arrayBuffer = req.response;\n            if (arrayBuffer) {\n                OnSuccess(arrayBuffer);\n            } else {\n                OnError(\"Error: No data received from: \" + url);\n            }\n        };\n        /*\n            req.onload = function(e)\n            {\n                    var arrayBuffer = req.response;\n                    if (arrayBuffer) {\n                        OnLoadFunction(arrayBuffer);\n                    }\n            };\n        */\n        req.send(null);\n    }\n}\nelse\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError)\n    {\n        //console.log(url);\n        require(\"fs\")[\"readFile\"](url, function(err, data)\n        {\n            if(err)\n            {\n                OnError(err);\n            }\n            else\n            {\n                OnSuccess(new Uint8Array(data).buffer);\n            }\n        });\n    }\n}\n","\"use strict\";\n\nvar Bus = {};\n\n/** @constructor */\nfunction BusConnector()\n{\n    this.listeners = {};\n    this.pair = undefined;\n}\n\n/**\n * @param {string} name\n * @param {function(?)} fn\n * @param {Object} this_value\n */\nBusConnector.prototype.register = function(name, fn, this_value)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        listeners = this.listeners[name] = [];\n    }\n\n    listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\n/**\n * Unregister one message with the given name and callback\n *\n * @param {string} name\n * @param {function()} fn\n */\nBusConnector.prototype.unregister = function(name, fn)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    this.listeners[name] = listeners.filter(function(l)\n    {\n        return l.fn !== fn;\n    });\n};\n\n/**\n * Send (\"emit\") a message\n *\n * @param {string} name\n * @param {*=} value\n * @param {*=} unused_transfer\n */\nBusConnector.prototype.send = function(name, value, unused_transfer)\n{\n    if(!this.pair)\n    {\n        return;\n    }\n\n    var listeners = this.pair.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    for(var i = 0; i < listeners.length; i++)\n    {\n        var listener = listeners[i];\n        listener.fn.call(listener.this_value, value);\n    }\n};\n\n/**\n * Send a message, guaranteeing that it is received asynchronously\n *\n * @param {string} name\n * @param {Object=} value\n */\nBusConnector.prototype.send_async = function(name, value)\n{\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\n\n    setTimeout(this.send.bind(this, name, value), 0);\n};\n\nBus.create = function()\n{\n    var c0 = new BusConnector();\n    var c1 = new BusConnector();\n\n    c0.pair = c1;\n    c1.pair = c0;\n\n    return [c0, c1];\n};\n\n","/**\n * This file contains functions to decode the modrm and sib bytes\n *\n * These functions return a virtual address\n *\n * @fileoverview .\n * @suppress {newCheckTypes}\n */\n\"use strict\";\n(function()\n{\n    CPU.prototype.modrm_table16 = Array(0xC0);\n    CPU.prototype.modrm_table32 = Array(0xC0);\n    CPU.prototype.sib_table = Array(0x100);\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\n    };;\n    // special cases\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\n    }\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(false) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\n    };\n    for(var low = 0; low < 8; low++)\n    {\n        for(var high = 0; high < 3; high++)\n        {\n            var x = low | high << 6;\n            for(var i = 1; i < 8; i++)\n            {\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\n            }\n        }\n    }\n\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n})();\n","\"use strict\";\n\n/*\n * string operations\n *\n *       cmp  si  di\n * movs   0    1   1/w    A4\n * cmps   1    1   1/r    A6\n * stos   0    0   1/w    AA\n * lods   0    1   0      AC\n * scas   1    0   1/r    AE\n * ins    0    0   1/w\n * outs   0    1   0\n */\n\n/** @const */\nvar MAX_COUNT_PER_CYCLE = 0x1000;\n\n\nfunction string_get_cycle_count(size, address)\n{\n    dbg_assert(size && size <= 4 && size >= -4);\n\n    if(size < 0)\n    {\n        return (address & 0xFFF) >> (-size >> 1);\n    }\n    else\n    {\n        return (~address & 0xFFF) >> size;\n    }\n}\n\nfunction string_get_cycle_count2(size, addr1, addr2)\n{\n    dbg_assert(arguments.length === 3);\n\n    return Math.min(\n            string_get_cycle_count(size, addr1),\n            string_get_cycle_count(size, addr2));\n}\n\n\nCPU.prototype.movsb = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.read8(phys_src));\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsw = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.safe_read16(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsd = function()\n{\n    var cpu = this;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        // often used by memcpy, well worth optimizing\n        //   using cpu.mem32s.set\n        var ds = cpu.get_seg_prefix(reg_ds),\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\n            es = cpu.get_seg(reg_es),\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\n\n        if(!count)\n        {\n            return;\n        }\n\n        // must be page-aligned if cpu.paging is enabled\n        // and dword-aligned in general\n        var align_mask = cpu.paging ? 0xFFF : 3;\n\n        if((dest & align_mask) === 0 &&\n           (src & align_mask) === 0 &&\n           // If df is set, alignment works a different\n           // This should be unlikely\n           (cpu.flags & flag_direction) === 0)\n        {\n            var cont = false;\n            if(cpu.paging)\n            {\n                src = cpu.translate_address_read(src);\n                dest = cpu.translate_address_write(dest);\n\n                if(count > 0x400)\n                {\n                    count = 0x400;\n                    cont = true;\n                }\n            }\n\n            if(!cpu.io.in_mmap_range(src, count) &&\n                !cpu.io.in_mmap_range(dest, count))\n            {\n                var diff = count << 2;\n                cpu.add_reg_asize(reg_ecx, -count);\n                cpu.add_reg_asize(reg_edi, diff);\n                cpu.add_reg_asize(reg_esi, diff);\n\n                dest >>>= 2;\n                src >>>= 2;\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\n\n                if(cont)\n                {\n                    cpu.instruction_pointer = cpu.previous_ip;\n                }\n\n                return;\n            }\n        }\n    }\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            this.instruction_pointer = this.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nfunction cmpsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            data_src = cpu.read8(phys_src);\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_src = cpu.safe_read8(src);\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                data_src = cpu.read_aligned16(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                data_src = cpu.safe_read16(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        data_src = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                data_src = cpu.read_aligned32(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                data_src = cpu.safe_read32s(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        data_src = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction stosb(cpu)\n{\n    var data = cpu.reg8[reg_al];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, data);\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosw(cpu)\n{\n    var data = cpu.reg16[reg_ax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosd(cpu)\n{\n    var data = cpu.reg32s[reg_eax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction scasb(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n    var data_dest;\n    var data_src = cpu.reg8[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            phys_dest += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasw(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n    var data_dest;\n    var data_src = cpu.reg16[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasd(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n    var data_dest;\n    var data_src = cpu.reg32s[reg_eax];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction insb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 1);\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 2);\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 4);\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.io.port_write8(port, cpu.read8(phys_src));\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write8(port, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write16(port, cpu.safe_read16(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write16(port, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n","/*\n * Arithmatic functions\n * This file contains:\n *\n * add, adc, sub, sbc, cmp\n * inc, dec\n * neg, not\n * imul, mul, idiv, div\n * xadd\n *\n * das, daa, aad, aam\n *\n * and, or, xor, test\n * shl, shr, sar, ror, rol, rcr, rcl\n * shld, shrd\n *\n * bts, btr, btc, bt\n * bsf, bsr\n *\n * popcnt\n*/\n\"use strict\";\n\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\n\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\n\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\n\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\n{\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\n\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\n{\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\n/*\n * inc and dec\n */\n\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\n\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\n\nCPU.prototype.inc = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = 1;\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\nCPU.prototype.dec = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = 1;\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\n\n/*\n * neg\n */\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\n\nCPU.prototype.neg = function(dest_operand, op_size)\n{\n    this.last_op1 = this.last_result = -dest_operand | 0;\n\n    this.flags_changed = flags_all;\n    this.last_add_result = 0;\n    this.last_op2 = dest_operand;\n    this.last_op_size = op_size;\n\n    return this.last_result;\n}\n\n\n/*\n * mul, imul, div, idiv\n *\n * Note: imul has some extra opcodes\n *       while other functions only allow\n *       ax * modrm\n */\n\nCPU.prototype.mul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result < 0x100)\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.imul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8s[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result > 0x7F || result < -0x80)\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.mul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16[reg_ax],\n        high_result = result >>> 16;\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = high_result;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(high_result === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 1 argument\n * ax = ax * r/m\n */\nCPU.prototype.imul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16s[reg_ax];\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = result >> 16;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg16 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\n\n    var result = operand1 * operand2;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.mul32 = function(source_operand)\n{\n    var dest_operand = this.reg32s[reg_eax];\n\n    var lo = v86util.mul_low(dest_operand, source_operand);\n    var hi = v86util.mul_high(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = lo;\n    this.reg32s[reg_edx] = hi;\n\n    this.last_result = lo;\n    this.last_op_size = OPSIZE_32;\n\n    if(hi === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\n}\n\nCPU.prototype.imul32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand = this.reg32s[reg_eax];\n\n    var lo = v86util.imul_low(dest_operand, source_operand);\n    var hi = v86util.imul_high(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = lo;\n    this.reg32s[reg_edx] = hi;\n\n    this.last_result = lo;\n    this.last_op_size = OPSIZE_32;\n\n    if(hi === (lo >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(target_operand + \" * \" + source_operand);\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg32 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\n\n    var lo = v86util.imul_low(operand1, operand2);\n    var hi = v86util.imul_high(operand1, operand2);\n\n    this.last_result = lo;\n    this.last_op_size = OPSIZE_32;\n\n    if(hi === (lo >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return lo;\n\n    //console.log(operand + \" * \" + source_operand);\n    //console.log(\"= \" + this.reg32[reg]);\n}\n\nCPU.prototype.div8 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x100)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv8 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16s[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x80 || result <= -0x81)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.div16 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x10000 || result < 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv16 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x8000 || result <= -0x8001)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\n// If the dividend is too large, the division cannot be done precisely using\n// JavaScript's double floating point numbers. Run simple long divsion until\n// the dividend is small enough\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\n{\n    if(div_high >= quot || quot === 0)\n    {\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\n        this.trigger_de();\n    }\n\n    var result = 0;\n\n    if(div_high > 0x100000)\n    {\n        var m = 0;\n        var i = 32;\n        var q = quot;\n        while(q > div_high)\n        {\n            q >>>= 1;\n            i--;\n        }\n        while(div_high > 0x100000)\n        {\n            if(div_high >= q)\n            {\n                div_high -= q;\n                var sub = quot << i >>> 0;\n                if(sub > div_low)\n                {\n                    div_high--;\n                }\n                div_low = div_low - sub >>> 0;\n                result |= 1 << i\n            }\n            i--;\n            q >>= 1;\n        }\n        result >>>= 0;\n    }\n\n    var div = div_low + div_high * 0x100000000;\n    var mod = div % quot;\n    result += div / quot | 0;\n\n    this.div32_result[0] = result;\n    this.div32_result[1] = mod;\n    return this.div32_result;\n}\n\n\nCPU.prototype.div32 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32[reg_edx];\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    // XXX\n    dbg_assert(source_operand);\n    if(result >= 0x100000000)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\nCPU.prototype.idiv32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32s[reg_edx],\n        div_is_neg = false,\n        is_neg = false;\n\n    if(source_operand < 0)\n    {\n        is_neg = true;\n        source_operand = -source_operand;\n    }\n\n    if(dest_operand_high < 0)\n    {\n        div_is_neg = true;\n        is_neg = !is_neg;\n        dest_operand_low = -dest_operand_low >>> 0;\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\n    }\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    if(is_neg)\n    {\n        result = -result | 0;\n    }\n\n    if(div_is_neg)\n    {\n        mod = -mod | 0;\n    }\n\n    dbg_assert(source_operand);\n    if(result >= 0x80000000 || result <= -0x80000001)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\n\nCPU.prototype.xadd8 = function(source_operand, reg)\n{\n    var tmp = this.reg8[reg];\n\n    this.reg8[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_8);\n}\n\n\nCPU.prototype.xadd16 = function(source_operand, reg)\n{\n    var tmp = this.reg16[reg];\n\n    this.reg16[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_16);\n}\n\n\nCPU.prototype.xadd32 = function(source_operand, reg)\n{\n    var tmp = this.reg32s[reg];\n\n    this.reg32s[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_32);\n}\n\n\nCPU.prototype.bcd_daa = function()\n{\n    //dbg_log(\"daa\");\n    // decimal adjust after addition\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf(),\n        old_af = this.getaf();\n\n    this.flags &= ~1 & ~flag_adjust\n\n    if((old_al & 0xF) > 9 || old_af)\n    {\n        this.reg8[reg_al] += 6;\n        this.flags |= flag_adjust;\n    }\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] += 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_das = function()\n{\n    //dbg_log(\"das\");\n    // decimal adjust after subtraction\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf();\n\n    this.flags &= ~1;\n\n    if((old_al & 0xF) > 9 || this.getaf())\n    {\n        this.reg8[reg_al] -= 6;\n        this.flags |= flag_adjust;\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\n    }\n    else\n    {\n        this.flags &= ~flag_adjust;\n    }\n\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] -= 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_aam = function(imm8)\n{\n    //dbg_log(\"aam\");\n    // ascii adjust after multiplication\n\n    if(imm8 === 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        var temp = this.reg8[reg_al];\n        this.reg8[reg_ah] = temp / imm8;\n        this.reg8[reg_al] = temp % imm8;\n\n        this.last_result = this.reg8[reg_al];\n\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n    }\n}\n\nCPU.prototype.bcd_aad = function(imm8)\n{\n    //dbg_log(\"aad\");\n    // ascii adjust before division\n\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\n    this.last_result = result & 0xFF;\n    this.reg16[reg_ax] = this.last_result;\n    this.last_op_size = OPSIZE_8;\n\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n\n    if(result > 0xFFFF)\n    {\n        this.flags |= 1;\n    }\n}\n\nCPU.prototype.bcd_aaa = function()\n{\n    //dbg_log(\"aaa\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] += 6;\n        this.reg8[reg_ah] += 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n};\n\n\nCPU.prototype.bcd_aas = function()\n{\n    //dbg_log(\"aas\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] -= 6;\n        this.reg8[reg_ah] -= 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n}\n\n\n/*                     \\O\n * bitwise functions    |\\\n *                     / \\\n *\n * and, or, xor, test\n * shl, shr, sar, rol, ror, rcl, ror\n * shrd, shld\n *\n * bt, bts, btr, btc\n * bsf, bsr\n */\n\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\n\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\n\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand & source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand | source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand ^ source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\n\n/*\n * rotates and shifts\n */\n\nCPU.prototype.rol8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 7;\n\n    var result = dest_operand << count | dest_operand >> (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 15;\n\n    var result = dest_operand << count | dest_operand >> (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | dest_operand >>> (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 3 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 5 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1);\n\n    if(count > 1)\n    {\n        result |= dest_operand >>> (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 7;\n    var result = dest_operand >> count | dest_operand << (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 7 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 15;\n    var result = dest_operand >> count | dest_operand << (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 15 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | dest_operand << (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 31 & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\n\n    if(count > 1)\n    {\n        result |= dest_operand << (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.shl8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 8 & 1)\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 16 & 1)\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    // test this\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 4)  & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >>> (count - 1) & 1)\n                | (dest_operand >> 20) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 8)\n    {\n        this.last_result = dest_operand << 24 >> count + 24;\n        // of is zero\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 24 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 16)\n    {\n        this.last_result = dest_operand << 16 >> count + 16;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 16 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\n\n    return this.last_result;\n}\n\n\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\n\n    return this.last_result;\n}\n\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\n\n    if(count === 1)\n    {\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\n    }\n    else\n    {\n        this.flags &= ~flag_overflow;\n    }\n\n    return this.last_result;\n}\n\n\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base ^ 1 << bit_offset;\n}\n\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base | 1 << bit_offset;\n}\n\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base & ~(1 << bit_offset);\n}\n\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\n{\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\n}\n\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\n}\n\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\n}\n\nCPU.prototype.bsf16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n\n        // not defined in the docs, but value doesn't change on my intel machine\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        // http://jsperf.com/lowest-bit-index\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\n    }\n}\n\nCPU.prototype.bsf32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\n    }\n}\n\nCPU.prototype.bsr16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2(bit_base);\n    }\n}\n\nCPU.prototype.bsr32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\n    }\n}\n\nCPU.prototype.popcnt = function(v)\n{\n    this.flags_changed = 0;\n    this.flags &= ~flags_all;\n\n    if(v)\n    {\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\n        v = v - ((v >> 1) & 0x55555555);\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return 0;\n    }\n};\n\nCPU.prototype.saturate_sw_to_ub = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v >>> 0;\n    if (ret >= 0x8000) {\n        ret = 0;\n    }\n    else if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sw_to_sb = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v;\n\n    if (ret > 0xFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sw = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFF8000) {\n        ret = ret & 0xFFFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x8000;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x7FFF;\n    }\n\n    dbg_assert((ret & 0xFFFF0000) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sb = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFFFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_ub = function(v)\n{\n    let ret = v | 0;\n\n    if (ret < 0) {\n        ret = 0;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\n\nCPU.prototype.saturate_ud_to_ub = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_uw = function(v)\n{\n    dbg_assert(v >= 0);\n    return v > 0xFFFF ? 0xFFFF : v;\n};\n\nCPU.prototype.integer_round = function(f, rc)\n{\n    if(rc === 0)\n    {\n        // Round to nearest, or even if equidistant\n        var rounded = Math.round(f);\n\n        if(rounded - f === 0.5 && (rounded % 2))\n        {\n            // Special case: Math.round rounds to positive infinity\n            // if equidistant\n            rounded--;\n        }\n\n        return rounded;\n    }\n    // rc=3 is truncate -> floor for positive numbers\n    else if(rc === 1 || (rc === 3 && f > 0))\n    {\n        return Math.floor(f);\n    }\n    else\n    {\n        return Math.ceil(f);\n    }\n}\n","/*\n * Some miscellaneous instructions:\n *\n * jmpcc16, jmpcc32, jmp16\n * loop, loope, loopne, jcxz\n * test_cc\n *\n * mov, push, pop\n * pusha, popa\n * xchg, lss\n * lea\n * enter\n * bswap\n * fxsave, fxrstor\n */\n\"use strict\";\n\nCPU.prototype.jmpcc8 = function(condition)\n{\n    var imm8 = this.read_op8s();\n    if(condition)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.jmp_rel16 = function(rel16)\n{\n    var current_cs = this.get_seg(reg_cs);\n\n    // limit ip to 16 bit\n    // ugly\n    this.instruction_pointer -= current_cs;\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\n};\n\nCPU.prototype.jmpcc16 = function(condition)\n{\n    var imm16 = this.read_op16();\n    if(condition)\n    {\n        this.jmp_rel16(imm16);\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\n\nCPU.prototype.jmpcc32 = function(condition)\n{\n    var imm32s = this.read_op32s();\n    if(condition)\n    {\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\n        //   since read_op32s modifies instruction_pointer\n\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.cmovcc16 = function(condition)\n{\n    var data = this.read_e16();\n    if(condition)\n    {\n        this.write_g16(data);\n    }\n};\n\nCPU.prototype.cmovcc32 = function(condition)\n{\n    var data = this.read_e32s();\n    if(condition)\n    {\n        this.write_g32(data);\n    }\n};\n\nCPU.prototype.setcc = function(condition)\n{\n    this.set_e8(condition ? 1 : 0)\n};\n\nCPU.prototype.loopne = function(imm8s)\n{\n    if(this.decr_ecx_asize() && !this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loope = function(imm8s)\n{\n    if(this.decr_ecx_asize() && this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loop = function(imm8s)\n{\n    if(this.decr_ecx_asize())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.jcxz = function(imm8s)\n{\n    if(this.get_reg_asize(reg_ecx) === 0)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\n/**\n * @return {number}\n * @const\n */\nCPU.prototype.getcf = function()\n{\n    if(this.flags_changed & 1)\n    {\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & 1;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getpf = function()\n{\n    if(this.flags_changed & flag_parity)\n    {\n        // inverted lookup table\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\n    }\n    else\n    {\n        return this.flags & flag_parity;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getaf = function()\n{\n    if(this.flags_changed & flag_adjust)\n    {\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\n    }\n    else\n    {\n        return this.flags & flag_adjust;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getzf = function()\n{\n    if(this.flags_changed & flag_zero)\n    {\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_zero;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getsf = function()\n{\n    if(this.flags_changed & flag_sign)\n    {\n        return this.last_result >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_sign;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getof = function()\n{\n    if(this.flags_changed & flag_overflow)\n    {\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_overflow;\n    }\n};\n\nCPU.prototype.test_o = CPU.prototype.getof;\nCPU.prototype.test_b = CPU.prototype.getcf;\nCPU.prototype.test_z = CPU.prototype.getzf;\nCPU.prototype.test_s = CPU.prototype.getsf;\nCPU.prototype.test_p = CPU.prototype.getpf;\n\nCPU.prototype.test_be = function()\n{\n    // Idea:\n    //    return this.last_op1 <= this.last_op2;\n    return this.getcf() || this.getzf();\n}\n\nCPU.prototype.test_l = function()\n{\n    // Idea:\n    //    return this.last_add_result < this.last_op2;\n    return !this.getsf() !== !this.getof();\n}\n\nCPU.prototype.test_le = function()\n{\n    // Idea:\n    //    return this.last_add_result <= this.last_op2;\n    return this.getzf() || !this.getsf() !== !this.getof();\n}\n\n\n\nCPU.prototype.push16 = function(imm16)\n{\n    var sp = this.get_stack_pointer(-2);\n\n    this.safe_write16(sp, imm16);\n    this.adjust_stack_reg(-2);\n}\n\nCPU.prototype.push32 = function(imm32)\n{\n    var sp = this.get_stack_pointer(-4);\n\n    this.safe_write32(sp, imm32);\n    this.adjust_stack_reg(-4);\n}\n\nCPU.prototype.pop16 = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read16(sp);\n\n    this.adjust_stack_reg(2);\n    return result;\n}\n\nCPU.prototype.pop32s = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read32s(sp);\n\n    this.adjust_stack_reg(4);\n    return result;\n}\n\nCPU.prototype.pusha16 = function()\n{\n    var temp = this.reg16[reg_sp];\n\n    // make sure we don't get a pagefault after having\n    // pushed several registers already\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\n\n    this.push16(this.reg16[reg_ax]);\n    this.push16(this.reg16[reg_cx]);\n    this.push16(this.reg16[reg_dx]);\n    this.push16(this.reg16[reg_bx]);\n    this.push16(temp);\n    this.push16(this.reg16[reg_bp]);\n    this.push16(this.reg16[reg_si]);\n    this.push16(this.reg16[reg_di]);\n}\n\nCPU.prototype.pusha32 = function()\n{\n    var temp = this.reg32s[reg_esp];\n\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\n\n    this.push32(this.reg32s[reg_eax]);\n    this.push32(this.reg32s[reg_ecx]);\n    this.push32(this.reg32s[reg_edx]);\n    this.push32(this.reg32s[reg_ebx]);\n    this.push32(temp);\n    this.push32(this.reg32s[reg_ebp]);\n    this.push32(this.reg32s[reg_esi]);\n    this.push32(this.reg32s[reg_edi]);\n}\n\nCPU.prototype.popa16 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(15));\n\n    this.reg16[reg_di] = this.pop16();\n    this.reg16[reg_si] = this.pop16();\n    this.reg16[reg_bp] = this.pop16();\n    this.adjust_stack_reg(2);\n    this.reg16[reg_bx] = this.pop16();\n    this.reg16[reg_dx] = this.pop16();\n    this.reg16[reg_cx] = this.pop16();\n    this.reg16[reg_ax] = this.pop16();\n}\n\nCPU.prototype.popa32 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(31));\n\n    this.reg32s[reg_edi] = this.pop32s();\n    this.reg32s[reg_esi] = this.pop32s();\n    this.reg32s[reg_ebp] = this.pop32s();\n    this.adjust_stack_reg(4);\n    this.reg32s[reg_ebx] = this.pop32s();\n    this.reg32s[reg_edx] = this.pop32s();\n    this.reg32s[reg_ecx] = this.pop32s();\n    this.reg32s[reg_eax] = this.pop32s();\n}\n\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\n        tmp = this.reg8[mod];\n\n    this.reg8[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 2 & 14,\n        tmp = this.reg16[mod];\n\n    this.reg16[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16r = function(operand)\n{\n    var temp = this.reg16[reg_ax];\n    this.reg16[reg_ax] = this.reg16[operand];\n    this.reg16[operand] = temp;\n}\n\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 3 & 7,\n        tmp = this.reg32s[mod];\n\n    this.reg32s[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg32r = function(operand)\n{\n    var temp = this.reg32s[reg_eax];\n    this.reg32s[reg_eax] = this.reg32s[operand];\n    this.reg32s[operand] = temp;\n}\n\nCPU.prototype.lss16 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read16(addr),\n        new_seg = this.safe_read16(addr + 2 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\n}\n\nCPU.prototype.lss32 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read32s(addr),\n        new_seg = this.safe_read16(addr + 4 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\n}\n\nCPU.prototype.enter16 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push16(this.reg16[reg_bp]);\n    var frame_temp = this.reg16[reg_sp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg16[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 2;\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push16(frame_temp);\n    }\n    this.reg16[reg_bp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.enter32 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push32(this.reg32s[reg_ebp]);\n    var frame_temp = this.reg32s[reg_esp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg32s[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 4;\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push32(frame_temp);\n    }\n    this.reg32s[reg_ebp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.bswap = function(reg)\n{\n    var temp = this.reg32s[reg];\n\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\n}\n\nCPU.prototype.fxsave = function(addr)\n{\n    this.writable_or_pagefault(addr, 512);\n\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\n\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\n    }\n\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\n    // instruction may not save these registers. This behavior is\n    // implementation dependent.\n    for(let i = 0; i < 8; i++)\n    {\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\n    }\n};\n\nCPU.prototype.fxrstor = function(addr)\n{\n    this.translate_address_read(addr | 0);\n    this.translate_address_read(addr + 511 | 0);\n\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\n\n    if(new_mxcsr & ~MXCSR_MASK)\n    {\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n        this.trigger_gp(0);\n    }\n\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\n\n    this.mxcsr = new_mxcsr;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\n    }\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\n    }\n};\n","\"use strict\";\n\nvar t = [];\nvar t16 = [];\nvar t32 = [];\n\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\n\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\nt16[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\nt16[0x0F] = cpu => {\n    cpu.table0F_16[cpu.read_op0F()](cpu);\n};\nt32[0x0F] = cpu => {\n    cpu.table0F_32[cpu.read_op0F()](cpu);\n};\n\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\nt16[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\nt32[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\n\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\nt16[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\nt[0x27] = cpu => { cpu.bcd_daa(); };\n\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\nt[0x2F] = cpu => { cpu.bcd_das(); };\n\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\nt[0x37] = cpu => { cpu.bcd_aaa(); };\n\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\nt[0x3F] = cpu => { cpu.bcd_aas(); };\n\n\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\n\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\n\n\nt16[0x60] = cpu => { cpu.pusha16(); };\nt32[0x60] = cpu => { cpu.pusha32(); };\nt16[0x61] = cpu => { cpu.popa16(); };\nt32[0x61] = cpu => { cpu.popa32(); };\n\nt[0x62] = cpu => {\n    // bound\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\n    dbg_assert(false);\n};\nt[0x63] = cpu => { cpu.read_modrm_byte();\n    // arpl\n    //dbg_log(\"arpl\", LOG_CPU);\n    if(cpu.protected_mode && !cpu.vm86_mode())\n    {\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\n    }\n    else\n    {\n        dbg_log(\"arpl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n};\n\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\n\nt[0x66] = cpu => {\n    // Operand-size override prefix\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0x67] = cpu => {\n    // Address-size override prefix\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\n\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\n\nt16[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\n};\nt32[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\n};\n\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\n\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\n};\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\n};\n\nt[0x6C] = cpu => { insb(cpu); };\nt16[0x6D] = cpu => { insw(cpu); };\nt32[0x6D] = cpu => { insd(cpu); };\nt[0x6E] = cpu => { outsb(cpu); };\nt16[0x6F] = cpu => { outsw(cpu); };\nt32[0x6F] = cpu => { outsd(cpu); };\n\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\n\nt[0x80] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\n    }\n};\nt16[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\n    }\n};\nt32[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\n    }\n};\nt[0x82] = t[0x80]; // alias\nt16[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\n    }\n};\nt32[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\n    }\n};\n\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\n\n\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\nt16[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\n};\nt32[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\n};\n\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\n\nt[0x8A] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g8(data);\n};\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(data);\n};\n\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\n\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\n    // lea\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    // override prefix, so modrm_resolve does not return the segment part\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\n\nt[0x8E] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n    var data = cpu.read_e16();\n    cpu.switch_seg(mod, data);\n\n    if(mod === reg_ss)\n    {\n        // run next instruction, so no interrupts are handled\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n    }\n};\n\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\n    // pop\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\n\n    cpu.adjust_stack_reg(2);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.adjust_stack_reg(-2);\n        cpu.safe_write16(addr, sp);\n        cpu.adjust_stack_reg(2);\n    } else {\n        cpu.write_reg_e16(sp);\n    }\n};\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\n\n    // change esp first, then resolve modrm address\n    cpu.adjust_stack_reg(4);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n        // Before attempting a write that might cause a page fault,\n        // we must set esp to the old value. Fuck Intel.\n        cpu.adjust_stack_reg(-4);\n        cpu.safe_write32(addr, sp);\n        cpu.adjust_stack_reg(4);\n    } else {\n        cpu.write_reg_e32(sp);\n    }\n};\n\nt[0x90] = cpu => { };\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\n\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\n\nt16[0x9A] = cpu => {\n    // callf\n    var new_ip = cpu.read_op16();\n    var new_cs = cpu.read_disp16();\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0x9A] = cpu => {\n    var new_ip = cpu.read_op32s();\n    var new_cs = cpu.read_disp16();\n\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        if(new_ip & 0xFFFF0000)\n        {\n            throw cpu.debug.unimpl(\"#GP handler\");\n        }\n    }\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0x9B] = cpu => {\n    // fwait: check for pending fpu exceptions\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\n    {\n        // task switched and MP bit is set\n        cpu.trigger_nm();\n    }\n    else\n    {\n        if(cpu.fpu)\n        {\n            cpu.fpu.fwait();\n        }\n        else\n        {\n            // EM bit isn't checked\n            // If there's no FPU, do nothing\n        }\n    }\n};\nt16[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        cpu.push16(cpu.get_eflags());\n    }\n};\nt32[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        // trap to virtual 8086 monitor\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        // vm and rf flag are cleared in image stored on the stack\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\n    }\n};\nt16[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\n\n    if(cpu.flags & flag_trap)\n    {\n        // XXX: Problems with fdgame\n        //cpu.clear_prefixes();\n        //cpu.cycle_internal();\n        cpu.flags &= ~flag_trap;\n        //cpu.instruction_pointer = cpu.previous_ip;\n        //cpu.raise_exception(1);\n    }\n    else\n    {\n        cpu.handle_irqs();\n    }\n};\nt32[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags(cpu.pop32s());\n    cpu.handle_irqs();\n};\nt[0x9E] = cpu => {\n    // sahf\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\n    cpu.flags_changed = 0;\n};\nt[0x9F] = cpu => {\n    // lahf\n    cpu.reg8[reg_ah] = cpu.get_eflags();\n};\n\nt[0xA0] = cpu => {\n    // mov\n    var data = cpu.safe_read8(cpu.read_moffs());\n    cpu.reg8[reg_al] = data;\n};\nt16[0xA1] = cpu => {\n    // mov\n    var data = cpu.safe_read16(cpu.read_moffs());\n    cpu.reg16[reg_ax] = data;\n};\nt32[0xA1] = cpu => {\n    var data = cpu.safe_read32s(cpu.read_moffs());\n    cpu.reg32s[reg_eax] = data;\n};\nt[0xA2] = cpu => {\n    // mov\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\n};\nt16[0xA3] = cpu => {\n    // mov\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\n};\nt32[0xA3] = cpu => {\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\n};\n\nt[0xA4] = cpu => { cpu.movsb(); };\nt16[0xA5] = cpu => { cpu.movsw(); };\nt32[0xA5] = cpu => { cpu.movsd(); };\nt[0xA6] = cpu => { cmpsb(cpu); };\nt16[0xA7] = cpu => { cmpsw(cpu); };\nt32[0xA7] = cpu => { cmpsd(cpu); };\n\nt[0xA8] = cpu => {\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\n};\nt16[0xA9] = cpu => {\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\n};\nt32[0xA9] = cpu => {\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\n};\n\nt[0xAA] = cpu => { stosb(cpu); };\nt16[0xAB] = cpu => { stosw(cpu); };\nt32[0xAB] = cpu => { stosd(cpu); };\nt[0xAC] = cpu => { lodsb(cpu); };\nt16[0xAD] = cpu => { lodsw(cpu); };\nt32[0xAD] = cpu => { lodsd(cpu); };\nt[0xAE] = cpu => { scasb(cpu); };\nt16[0xAF] = cpu => { scasw(cpu); };\nt32[0xAF] = cpu => { scasd(cpu); };\n\n\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\n\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\n\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt16[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt32[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n    var ip = cpu.pop32s();\n\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt16[0xC3] = cpu => {\n    // retn\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    cpu.diverged();\n};\nt32[0xC3] = cpu => {\n    // retn\n    var ip = cpu.pop32s();\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.diverged();\n};\n\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_es);\n};\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_es);\n};\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ds);\n};\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ds);\n};\n\nt[0xC6] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\n    } else {\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\n    }\n}\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\n    } else {\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\n    }\n};\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\n    } else {\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\n    }\n}\n\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\nt16[0xC9] = cpu => {\n    // leave\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 2 | 0);\n    cpu.reg16[reg_bp] = new_bp;\n};\nt32[0xC9] = cpu => {\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 4 | 0);\n    cpu.reg32s[reg_ebp] = new_ebp;\n};\nt16[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, imm16);\n    cpu.diverged();\n};\nt32[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, imm16);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xCC] = cpu => {\n    // INT3\n    // TODO: inhibit iopl checks\n    dbg_log(\"INT3\", LOG_CPU);\n    cpu.call_interrupt_vector(3, true, false);\n    cpu.diverged();\n};\nt[0xCD] = cpu => {\n    // INT\n    var imm8 = cpu.read_op8();\n    cpu.call_interrupt_vector(imm8, true, false);\n    cpu.diverged();\n};\nt[0xCE] = cpu => {\n    // INTO\n    dbg_log(\"INTO\", LOG_CPU);\n    if(cpu.getof())\n    {\n        // TODO: inhibit iopl checks\n        cpu.call_interrupt_vector(4, true, false);\n    }\n    cpu.diverged();\n};\n\nt16[0xCF] = cpu => {\n    // iret\n    cpu.iret16();\n    cpu.diverged();\n};\nt32[0xCF] = cpu => {\n    cpu.iret32();\n    cpu.diverged();\n};\n\nt[0xD0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, 1); break;\n        case 1: result = cpu.ror8(op1, 1); break;\n        case 2: result = cpu.rcl8(op1, 1); break;\n        case 3: result = cpu.rcr8(op1, 1); break;\n        case 4: result = cpu.shl8(op1, 1); break;\n        case 5: result = cpu.shr8(op1, 1); break;\n        case 6: result = cpu.shl8(op1, 1); break;\n        case 7: result = cpu.sar8(op1, 1); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, 1); break;\n        case 1: result = cpu.ror16(op1, 1); break;\n        case 2: result = cpu.rcl16(op1, 1); break;\n        case 3: result = cpu.rcr16(op1, 1); break;\n        case 4: result = cpu.shl16(op1, 1); break;\n        case 5: result = cpu.shr16(op1, 1); break;\n        case 6: result = cpu.shl16(op1, 1); break;\n        case 7: result = cpu.sar16(op1, 1); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, 1); break;\n        case 1: result = cpu.ror32(op1, 1); break;\n        case 2: result = cpu.rcl32(op1, 1); break;\n        case 3: result = cpu.rcr32(op1, 1); break;\n        case 4: result = cpu.shl32(op1, 1); break;\n        case 5: result = cpu.shr32(op1, 1); break;\n        case 6: result = cpu.shl32(op1, 1); break;\n        case 7: result = cpu.sar32(op1, 1); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD2] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD4] = cpu => {\n    cpu.bcd_aam(cpu.read_op8());\n};\nt[0xD5] = cpu => {\n    cpu.bcd_aad(cpu.read_op8());\n};\n\nt[0xD6] = cpu => {\n    // salc\n    cpu.reg8[reg_al] = -cpu.getcf();\n};\nt[0xD7] = cpu => {\n    // xlat\n    if(cpu.is_asize_32())\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\n    }\n};\n\nt[0xD8] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\n};\nt[0xD9] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\n};\nt[0xDA] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\n};\nt[0xDB] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\n};\nt[0xDC] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\n};\nt[0xDD] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\n};\nt[0xDE] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\n};\nt[0xDF] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\n};\n\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\n\nt[0xE4] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xE6] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt16[0xE8] = cpu => {\n    // call\n    var imm16 = cpu.read_op16();\n    cpu.push16(cpu.get_real_eip());\n\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE8] = cpu => {\n    // call\n    var imm32s = cpu.read_op32s();\n    cpu.push32(cpu.get_real_eip());\n\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xE9] = cpu => {\n    // jmp\n    var imm16 = cpu.read_op16();\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE9] = cpu => {\n    // jmp\n    var imm32s = cpu.read_op32s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xEA] = cpu => {\n    // jmpf\n    var ip = cpu.read_op16();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xEA] = cpu => {\n    // jmpf\n    var new_ip = cpu.read_op32s();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(new_ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt[0xEB] = cpu => {\n    // jmp near\n    var imm8 = cpu.read_op8s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xEC] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xEE] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt[0xF0] = cpu => {\n    // lock\n    //dbg_log(\"lock\", LOG_CPU);\n\n    // TODO\n    // This triggers UD when used with\n    // some instructions that don't write to memory\n    cpu.run_prefix_instruction();\n};\nt[0xF1] = cpu => {\n    // INT1\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\n    throw cpu.debug.unimpl(\"int1 instruction\");\n};\n\nt[0xF2] = cpu => {\n    // repnz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPNZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\nt[0xF3] = cpu => {\n    // repz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0xF4] = cpu => {\n    cpu.hlt_op();\n};\n\nt[0xF5] = cpu => {\n    // cmc\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\n    cpu.flags_changed &= ~1;\n};\n\nt[0xF6] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 1:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 2:\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\n            break;\n        case 4:\n            var data = cpu.read_e8(); cpu.mul8(data);\n            break;\n        case 5:\n            var data = cpu.read_e8s(); cpu.imul8(data);\n            break;\n        case 6:\n            var data = cpu.read_e8(); cpu.div8(data);\n            break;\n        case 7:\n            var data = cpu.read_e8s(); cpu.idiv8(data);\n            break;\n    }\n};\n\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 1:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 2:\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\n            break;\n        case 4:\n            var data = cpu.read_e16(); cpu.mul16(data);\n            break;\n        case 5:\n            var data = cpu.read_e16s(); cpu.imul16(data);\n            break;\n        case 6:\n            var data = cpu.read_e16(); cpu.div16(data);\n            break;\n        case 7:\n            var data = cpu.read_e16s(); cpu.idiv16(data);\n            break;\n    }\n};\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 1:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 2:\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\n            break;\n        case 4:\n            var data = cpu.read_e32(); cpu.mul32(data);\n            break;\n        case 5:\n            var data = cpu.read_e32s(); cpu.imul32(data);\n            break;\n        case 6:\n            var data = cpu.read_e32(); cpu.div32(data);\n            break;\n        case 7:\n            var data = cpu.read_e32s(); cpu.idiv32(data);\n            break;\n    }\n};\n\nt[0xF8] = cpu => {\n    // clc\n    cpu.flags &= ~flag_carry;\n    cpu.flags_changed &= ~1;\n};\nt[0xF9] = cpu => {\n    // stc\n    cpu.flags |= flag_carry;\n    cpu.flags_changed &= ~1;\n};\n\nt[0xFA] = cpu => {\n    // cli\n    //dbg_log(\"interrupts off\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags &= ~flag_interrupt;\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags &= ~flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"cli #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n};\nt[0xFB] = cpu => {\n    // sti\n    //dbg_log(\"interrupts on\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags |= flag_interrupt;\n\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n\n        cpu.handle_irqs();\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags |= flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"sti #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n\n};\n\nt[0xFC] = cpu => {\n    // cld\n    cpu.flags &= ~flag_direction;\n};\nt[0xFD] = cpu => {\n    // std\n    cpu.flags |= flag_direction;\n};\n\nt[0xFE] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte & 56;\n\n    if(mod === 0)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\n    }\n    else if(mod === 8)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\n    }\n    else\n    {\n        cpu.todo();\n    }\n};\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e16();\n            cpu.push16(cpu.get_real_eip());\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e16();\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // 6, push\n            var data = cpu.read_e16();\n            cpu.push16(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e32s();\n            cpu.push32(cpu.get_real_eip());\n\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e32s();\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // push\n            var data = cpu.read_e32s();\n            cpu.push32(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\n\nvar table16 = [];\nvar table32 = [];\nCPU.prototype.table16 = table16;\nCPU.prototype.table32 = table32;\n\nfor(var i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table16[i] = table32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table16[i] = t16[i];\n        table32[i] = t32[i];\n    }\n}\n\nt = [];\nt16 = [];\nt32 = [];\n\n// 0F ops start here\n\nt[0x00] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        // No GP, UD is correct here\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            // sldt\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 1:\n            // str\n            cpu.set_e16(cpu.sreg[reg_tr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 2:\n            // lldt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_ldt(data);\n            break;\n        case 3:\n            // ltr\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_tr(data);\n            break;\n        case 4:\n            cpu.verr(cpu.read_e16());\n            break;\n        case 5:\n            cpu.verw(cpu.read_e16());\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0x01] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    if(mod === 4)\n    {\n        // smsw\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\n        {\n            cpu.set_e32(cpu.cr[0]);\n        }\n        else\n        {\n            cpu.set_e16(cpu.cr[0]);\n        }\n        return;\n    }\n    else if(mod === 6)\n    {\n        // lmsw\n        if(cpu.cpl)\n        {\n            cpu.trigger_gp(0);\n        }\n\n        var cr0 = cpu.read_e16();\n\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\n\n        if(cpu.protected_mode)\n        {\n            // lmsw cannot be used to switch back\n            cr0 |= CR0_PE;\n        }\n\n        cpu.set_cr0(cr0);\n        return;\n    }\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        // only memory\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n    switch(mod)\n    {\n        case 0:\n            // sgdt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.gdtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\n            break;\n        case 1:\n            // sidt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.idtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\n            break;\n        case 2:\n            // lgdt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.gdtr_size = size;\n            cpu.gdtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.gdtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\n            //cpu.debug.dump_state();\n            //cpu.debug.dump_regs_short();\n            //cpu.debug.dump_gdt_ldt();\n            break;\n        case 3:\n            // lidt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.idtr_size = size;\n            cpu.idtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.idtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\n            break;\n        case 7:\n            // flush translation lookaside buffer\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            cpu.invlpg(addr);\n            break;\n        default:\n            dbg_log(mod);\n            cpu.todo();\n    }\n};\n\nt16[0x02] = cpu => { cpu.read_modrm_byte();\n    // lar\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\n};\nt32[0x02] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\n};\n\nt16[0x03] = cpu => { cpu.read_modrm_byte();\n    // lsl\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\n};\nt32[0x03] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\n};\n\nt[0x04] = cpu => { cpu.undefined_instruction(); };\nt[0x05] = cpu => { cpu.undefined_instruction(); };\n\nt[0x06] = cpu => {\n    // clts\n    if(cpu.cpl)\n    {\n        dbg_log(\"clts #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        //dbg_log(\"clts\", LOG_CPU);\n        cpu.cr[0] &= ~CR0_TS;\n    }\n};\n\nt[0x07] = cpu => { cpu.undefined_instruction(); };\nt[0x08] = cpu => {\n    // invd\n    cpu.todo();\n};\n\nt[0x09] = cpu => {\n    if(cpu.cpl)\n    {\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    // wbinvd\n};\n\n\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\nt[0x0B] = cpu => {\n    // UD2\n    cpu.trigger_ud();\n};\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\n\nt[0x0D] = cpu => {\n    // nop\n    cpu.todo();\n};\n\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\n\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\nt[0x12] = cpu => {\n    // movlpd xmm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem64s();\n    cpu.write_xmm64(data[0], data[1]);\n};\nt[0x13] = cpu => {\n    // movlpd xmm/m64, xmm\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x18] = cpu => { cpu.read_modrm_byte();\n    // prefetch\n    // nop for us\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\nt[0x1E] = cpu => { cpu.unimplemented_sse(); };\nt[0x1F] = cpu => { cpu.read_modrm_byte()\n    // multi-byte nop\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\n\nt[0x20] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\n\n    // mov addr, cr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.write_reg_e32(cpu.cr[0]);\n            break;\n        case 2:\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\n            cpu.write_reg_e32(cpu.cr[2]);\n            break;\n        case 3:\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\n            cpu.write_reg_e32(cpu.cr[3]);\n            break;\n        case 4:\n            cpu.write_reg_e32(cpu.cr[4]);\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\n\nt[0x21] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\n\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x22] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var data = cpu.read_reg_e32s();\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\n\n    // mov cr, addr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.set_cr0(data);\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 2:\n            cpu.cr[2] = data;\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 3:\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\n            data &= ~0b111111100111;\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\n            cpu.cr[3] = data;\n            cpu.clear_tlb();\n\n            //dump_page_directory();\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\n            break;\n\n        case 4:\n            cpu.set_cr4(data);\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\nt[0x23] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\n\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x24] = cpu => { cpu.undefined_instruction(); };\nt[0x25] = cpu => { cpu.undefined_instruction(); };\nt[0x26] = cpu => { cpu.undefined_instruction(); };\nt[0x27] = cpu => { cpu.undefined_instruction(); };\n\nt[0x28] = cpu => {\n    // movaps xmm, xmm/m128\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem128s();\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n};\nt[0x29] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movapd xmm/m128, xmm\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movaps xmm/m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n};\nt[0x2A] = cpu => {\n    // cvtpi2ps xmm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_mmx_mem64s();\n    let float32 = new Float32Array(2);\n    let res32 = new Uint32Array(float32.buffer);\n    float32[0] = data[0];\n    float32[1] = data[1];\n    cpu.write_xmm64(res32[0], res32[1]);\n };\nt[0x2B] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movntpd m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movntps m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n };\nt[0x2C] = cpu => {\n    // cvttps2pi mm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let data = cpu.read_xmm_mem64s();\n    let float32 = new Float32Array(data.buffer);\n    let low = 0;\n    let high = 0;\n\n    var res0 = Math.trunc(float32[0]);\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\n    {\n        low = res0;\n    }\n    else\n    {\n        low = 0x80000000|0;\n    }\n\n    var res1 = Math.trunc(float32[1]);\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\n    {\n        high = res1;\n    }\n    else\n    {\n        high = 0x80000000|0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x2D] = cpu => {\n    // cvtps2pi mm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let data = cpu.read_xmm_mem64s();\n    let float32 = new Float32Array(data.buffer);\n    let low = 0;\n    let high = 0;\n    var rc = cpu.mxcsr >> 13 & 3;\n\n    var res0 = cpu.integer_round(float32[0], rc);\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\n    {\n        low = res0;\n    }\n    else\n    {\n        low = 0x80000000|0;\n    }\n\n    var res1 = cpu.integer_round(float32[1], rc);\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\n    {\n        high = res1;\n    }\n    else\n    {\n        high = 0x80000000|0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x2E] = cpu => {\n    // ucomiss xmm1, xmm2/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source1 = cpu.read_xmm128s();\n    let source2 = cpu.read_xmm_mem128s();\n\n    let x = (new Float32Array(source1.buffer))[0];\n    let y = (new Float32Array(source2.buffer))[0];\n\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        cpu.flags |= flag_zero;\n    }\n    else\n    {\n        cpu.flags |= 1 | flag_parity | flag_zero;\n\n        if (cpu.is_SNaN32(source1[0]) || cpu.is_SNaN32(source2[0])) {\n            cpu.invalid_arithmatic();\n        }\n    }\n};\n\nt[0x2F] = cpu => {\n    // comiss xmm1, xmm2/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source1 = cpu.read_xmm128s();\n    let source2 = cpu.read_xmm_mem128s();\n\n    let x = (new Float32Array(source1.buffer))[0];\n    let y = (new Float32Array(source2.buffer))[0];\n\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        cpu.flags |= flag_zero;\n    }\n    else\n    {\n        cpu.flags |= 1 | flag_parity | flag_zero;\n        cpu.invalid_arithmatic();\n    }\n};\n\n// wrmsr\nt[0x30] = cpu => {\n    // wrmsr - write maschine specific register\n\n    if(cpu.cpl)\n    {\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n    var low = cpu.reg32s[reg_eax];\n    var high = cpu.reg32s[reg_edx];\n\n    if(index !== IA32_SYSENTER_ESP)\n    {\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\n    }\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            cpu.sysenter_cs = low & 0xFFFF;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            cpu.sysenter_eip = low;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            cpu.sysenter_esp = low;\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case IA32_KERNEL_GS_BASE:\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\n            dbg_log(\"GS Base written\", LOG_CPU);\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n};\n\nt[0x31] = cpu => {\n    // rdtsc - read timestamp counter\n\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\n    {\n        var n = v86.microtick() - cpu.tsc_offset;\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\n\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\n\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\n    }\n    else\n    {\n        cpu.trigger_gp(0);\n    }\n};\n\nt[0x32] = cpu => {\n    // rdmsr - read maschine specific register\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\n\n    var low = 0;\n    var high = 0;\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            low = cpu.sysenter_cs;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            low = cpu.sysenter_eip;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            low = cpu.sysenter_esp;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var n = v86.microtick() - cpu.tsc_offset;\n            low = n * TSC_RATE;\n            high = n * (TSC_RATE / 0x100000000);\n            break;\n\n        case IA32_PLATFORM_ID:\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            if(ENABLE_ACPI)\n            {\n                low = APIC_ADDRESS;\n\n                if(cpu.apic_enabled)\n                {\n                    low |= IA32_APIC_BASE_EN;\n                }\n            }\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            break;\n\n        case IA32_RTIT_CTL:\n            // linux4\n            break;\n\n        case MSR_SMI_COUNT:\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case MSR_PKG_C2_RESIDENCY:\n            break;\n\n        case MSR_EBC_FREQUENCY_ID:\n            low = 1 << 24;\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n\n    cpu.reg32s[reg_eax] = low;\n    cpu.reg32s[reg_edx] = high;\n};\n\nt[0x33] = cpu => {\n    // rdpmc\n    cpu.todo();\n};\n\nt[0x34] = cpu => {\n    // sysenter\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\n\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\n\n    cpu.instruction_pointer = cpu.sysenter_eip;\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\n\n    cpu.sreg[reg_cs] = seg;\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 0;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 8;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x35] = cpu => {\n    // sysexit\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\n\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\n\n    cpu.sreg[reg_cs] = seg + 16 | 3;\n\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 3;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 24 | 3;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x36] = cpu => { cpu.undefined_instruction(); };\n\nt[0x37] = cpu => {\n    // getsec\n    cpu.todo();\n};\n\n// sse3+\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\n\n// cmov\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\n\n\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\nt[0x57] = cpu => {\n    // xorps xmm, xmm/mem128\n    // xorpd xmm, xmm/mem128\n    // Note: Same code as pxor\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_xmm_mem128s();\n    let destination = cpu.read_xmm128s();\n\n    cpu.write_xmm128s(\n        source[0] ^ destination[0],\n        source[1] ^ destination[1],\n        source[2] ^ destination[2],\n        source[3] ^ destination[3]\n    );\n};\n\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x60] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\n        );\n    }\n    else\n    {\n        // punpcklbw mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let byte0 = destination_low & 0xFF;\n        let byte1 = source & 0xFF;\n        let byte2 = (destination_low >> 8) & 0xFF;\n        let byte3 = (source >> 8) & 0xFF;\n        let byte4 = (destination_low >> 16) & 0xFF;\n        let byte5 = (source >> 16) & 0xFF;\n        let byte6 = destination_low >>> 24;\n        let byte7 = source >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x61] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklwd xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination16[0] | source16[0] << 16,\n            destination16[1] | source16[1] << 16,\n            destination16[2] | source16[2] << 16,\n            destination16[3] | source16[3] << 16\n        );\n    }\n    else\n    {\n        // punpcklwd mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let word0 = destination_low & 0xFFFF;\n        let word1 = source & 0xFFFF;\n        let word2 = destination_low >>> 16;\n        let word3 = source >>> 16;\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x62] = cpu => {\n    // punpckldq mm, mm/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem32s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n    let low = destination_low;\n    let high = source;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x63] = cpu => {\n    // packsswb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\n\n    let high = 0;\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x64] = cpu => {\n    // pcmpgtb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x65] = cpu => {\n    // pcmpgtw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x66] = cpu => {\n    // pcmpgtd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low > source[0] ? -1 : 0;\n    let high = destination_high > source[1] ? -1 : 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x67] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 8; i++)\n        {\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\n    }\n    else\n    {\n        // packuswb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = 0;\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\n\n        let high = 0;\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x68] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpckhbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\n        );\n    }\n    else\n    {\n        // punpckhbw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let byte0 = destination_high & 0xFF;\n        let byte1 = source[1] & 0xFF;\n        let byte2 = (destination_high >> 8) & 0xFF;\n        let byte3 = (source[1] >> 8) & 0xFF;\n        let byte4 = (destination_high >> 16) & 0xFF;\n        let byte5 = (source[1] >> 16) & 0xFF;\n        let byte6 = destination_high >>> 24;\n        let byte7 = source[1] >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x69] = cpu => {\n    // punpckhwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = destination_high & 0xFFFF;\n    let word1 = source[1] & 0xFFFF;\n    let word2 = destination_high >>> 16;\n    let word3 = source[1] >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6A] = cpu => {\n    // punpckhdq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_high;\n    let high = source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6B] = cpu => {\n    // packssdw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= cpu.saturate_sd_to_sw(destination_low);\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\n\n    let high = 0;\n    high |= cpu.saturate_sd_to_sw(source[0]);\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\nt[0x6E] = cpu => {\n    // movd mm, r/m32\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        let data = cpu.read_e32s();\n        cpu.write_xmm128s(data, 0, 0, 0);\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_e32s();\n        cpu.write_mmx64s(data, 0);\n    }\n};\nt[0x6F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm, xmm/mem128\n        let data = cpu.read_xmm_mem128s();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm, xmm/m128\n        let data = cpu.read_xmm_mem128s_unaligned();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx_mem64s();\n        cpu.write_mmx64s(data[0], data[1]);\n    }\n};\n\nt[0x70] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // pshufd xmm, xmm/mem128\n        let source = cpu.read_xmm_mem128s();\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[order & 3],\n            source[order >> 2 & 3],\n            source[order >> 4 & 3],\n            source[order >> 6 & 3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\n    {\n        // pshuflw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\n            source[2],\n            source[3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // pshufhw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[0],\n            source[1],\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\n        );\n    }\n    else\n    {\n        // pshufw mm1, mm2/m64, imm8\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let order = cpu.read_op8();\n\n        let word0_shift = order & 0b11;\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\n        let word1_shift = (order >> 2) & 0b11;\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\n        let low = word0 | word1 << 16;\n\n        let word2_shift = (order >> 4) & 0b11;\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\n        let word3_shift = (order >>> 6);\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0x71] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlw, psraw, psllw\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = (destination_low & 0xFFFF) >>> shift;\n                var word1 = (destination_low >>> 16) >>> shift;\n                low = word0 | word1 << 16;\n\n                var word2 = (destination_high & 0xFFFF) >>> shift;\n                var word3 = (destination_high >>> 16) >>> shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psraw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 15) {\n                shift = 16;\n            }\n\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n            var low = word0 | word1 << 16;\n\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n            var high = word2 | word3 << 16;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n                var word1 = (destination_low >>> 16) << shift;\n                low = word0 | word1 << 16;\n\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n                var word3 = (destination_high >>> 16) << shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x72] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrld, psrad, pslld\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift;\n                high = destination_high >>> shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psrad mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 31) {\n                shift = 31;\n            }\n\n            var low = destination_low >> shift;\n            var high = destination_high >> shift;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // pslld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x73] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlq, psllq\n    //     2,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift | (destination_high << (32 - shift));\n                high = destination_high >>> shift;\n            }\n            else if (shift <= 63) {\n                low = destination_high >>> (shift & 0x1F);\n                high = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift | (destination_low >>> (32 - shift));\n            }\n            else if (shift <= 63) {\n                high = destination_low << (shift & 0x1F);\n                low = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x74] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqb xmm, xmm/m128\n        let source64s = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let destination128 = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination128.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // pcmpeqb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source64s = cpu.read_mmx_mem64s();\n        let source8s = new Int8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8s = cpu.reg_mmx8s;\n\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x75] = cpu => {\n    // pcmpeqw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x76] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqd xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] === destination[0] ? -1 : 0,\n            source[1] === destination[1] ? -1 : 0,\n            source[2] === destination[2] ? -1 : 0,\n            source[3] === destination[3] ? -1 : 0\n        );\n    }\n    else\n    {\n        // pcmpeqd mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = destination_low === source[0] ? -1 : 0;\n        let high = destination_high === source[1] ? -1 : 0;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x77] = cpu => {\n    // emms\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.fpu.stack_empty = 0xFF;\n};\n\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\nt[0x7E] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // movq xmm, xmm/mem64\n        let data = cpu.read_xmm_mem64s();\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movd r/m32, xmm\n        let data = cpu.read_xmm64s();\n        cpu.set_e32(data[0]);\n    }\n    else\n    {\n        // movd r/m32, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx64s();\n        cpu.set_e32(data[0]);\n    }\n};\nt[0x7F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm/m64, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let data = cpu.read_mmx64s();\n        cpu.set_mmx_mem64s(data[0], data[1]);\n    }\n};\n\n// jmpcc\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\n\n// setcc\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\n\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\nt16[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0xA2] = cpu => { cpu.cpuid(); };\n\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\n    }\n};\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\n    }\n};\n\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xA6] = cpu => {\n    // obsolete cmpxchg (os/2)\n    cpu.trigger_ud();\n};\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\n\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\nt16[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\n\nt[0xAA] = cpu => {\n    // rsm\n    cpu.todo();\n};\n\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xAE] = cpu => { cpu.read_modrm_byte();\n    // xsave, xrstor, ...\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: // fxsave\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxsave(addr);\n            break;\n\n        case 1: // fxrstor\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxrstor(addr);\n            break;\n\n        case 2: // ldmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            let new_mxcsr = cpu.safe_read32s(addr);\n            if(new_mxcsr & ~MXCSR_MASK)\n            {\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n                cpu.trigger_gp(0);\n            }\n            cpu.mxcsr = new_mxcsr;\n            break;\n\n        case 3: // stmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.safe_write32(addr, cpu.mxcsr);\n            break;\n\n        case 5:\n            // lfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 6:\n            // mfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 7:\n            // sfence or clflush\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        default:\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\n};\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\n};\n\nt[0xB0] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg8\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 1);\n\n        var data = cpu.safe_read8(virt_addr);\n    }\n    else\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\n\n\n    cpu.cmp8(cpu.reg8[reg_al], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, cpu.read_g8());\n        else\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, data);\n\n        cpu.reg8[reg_al] = data;\n    }\n};\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg16/32\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 2);\n\n        var data = cpu.safe_read16(virt_addr);\n    }\n    else\n        data = cpu.read_reg_e16();\n\n    cpu.cmp16(cpu.reg16[reg_ax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, cpu.read_g16());\n        else\n            cpu.write_reg_e16(cpu.read_g16());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, data);\n\n        cpu.reg16[reg_ax] = data;\n    }\n};\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 4);\n\n        var data = cpu.safe_read32s(virt_addr);\n    }\n    else\n    {\n        data = cpu.read_reg_e32s();\n    }\n\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\n        else\n            cpu.write_reg_e32(cpu.read_g32s());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, data);\n\n        cpu.reg32s[reg_eax] = data;\n    }\n};\n\n// lss\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ss);\n};\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ss);\n};\n\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n// lfs, lgs\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_fs);\n};\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_fs);\n};\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_gs);\n};\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_gs);\n};\n\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    var data = cpu.read_e8();\n    cpu.write_g16(data);\n};\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g32(data);\n};\n\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g32(data);\n};\n\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\n    // popcnt\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.popcnt(data));\n};\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.popcnt(data));\n};\n\nt[0xB9] = cpu => {\n    // UD\n    cpu.todo();\n};\n\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\n\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\n};\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\n};\n\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\n};\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\n};\n\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    var data = cpu.read_e8s();\n    cpu.write_g16(data);\n};\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8s();\n    cpu.write_g32(data);\n};\n\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\n\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g32(data);\n};\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\n};\n\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16();\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32();\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\n};\n\n\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\nt[0xC3] = cpu => {\n    // movnti\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n    cpu.set_e32(cpu.read_g32s());\n};\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xC7] = cpu => {\n    cpu.read_modrm_byte();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 1:\n            // cmpxchg8b\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                cpu.trigger_ud();\n            }\n\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.writable_or_pagefault(addr, 8);\n\n            var m64_low = cpu.safe_read32s(addr);\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\n\n            if(cpu.reg32s[reg_eax] === m64_low &&\n               cpu.reg32s[reg_edx] === m64_high)\n            {\n                cpu.flags |= flag_zero;\n\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\n            }\n            else\n            {\n                cpu.flags &= ~flag_zero;\n\n                cpu.reg32s[reg_eax] = m64_low;\n                cpu.reg32s[reg_edx] = m64_high;\n\n                cpu.safe_write32(addr, m64_low);\n                cpu.safe_write32(addr + 4 | 0, m64_high);\n            }\n\n            cpu.flags_changed &= ~flag_zero;\n            break;\n\n        case 6:\n            var has_rand = v86util.has_rand_int();\n\n            if(has_rand)\n            {\n                var rand = v86util.get_rand_int();\n            }\n            else\n            {\n                var rand = 0;\n            }\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\n\n            if(cpu.is_osize_32())\n            {\n                cpu.set_e32(rand);\n            }\n            else\n            {\n                cpu.set_e16(rand);\n            }\n\n            cpu.flags &= ~flags_all;\n            cpu.flags |= has_rand;\n            cpu.flags_changed = 0;\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\n\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xD1] = cpu => {\n    // psrlw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = (destination_low & 0xFFFF) >>> shift;\n        let word1 = (destination_low >>> 16) >>> shift;\n        low = word0 | word1 << 16;\n\n        let word2 = (destination_high & 0xFFFF) >>> shift;\n        let word3 = (destination_high >>> 16) >>> shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD2] = cpu => {\n    // psrld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift;\n        high = destination_high >>> shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD3] = cpu => {\n    // psrlq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift | (destination_high << (32 - shift));\n        high = destination_high >>> shift;\n    }\n    else if (shift <= 63) {\n        low = destination_high >>> (shift & 0x1F);\n        high = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\nt[0xD5] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmullw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\n        );\n    }\n    else\n    {\n        // pmullw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\n        let low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0xD6] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // movq xmm/m64, xmm\n    var data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0xD7] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n\n    // pmovmskb reg, xmm\n    let data = cpu.read_xmm_mem128s();\n    let data8 = new Uint8Array(data.buffer);\n    let result =\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\n    cpu.write_g32(result);\n};\n\nt[0xD8] = cpu => {\n    // psubusb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8 = new Uint8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8 = cpu.reg_mmx8;\n\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD9] = cpu => {\n    // psubusw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\n    if (word0 < 0) {\n        word0 = 0;\n    }\n    if (word1 < 0) {\n        word1 = 0;\n    }\n\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\n    if (word2 < 0) {\n        word2 = 0;\n    }\n    if (word3 < 0) {\n        word3 = 0;\n    }\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDA] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pminub xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source8 = new Uint8Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination8 = new Uint8Array(destination.buffer);\n\n    let result = cpu.create_atom128s(0, 0, 0, 0);\n    let result8 = new Uint8Array(result.buffer);\n\n    for(let i = 0; i < 16; i++)\n    {\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\n    }\n\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n};\nt[0xDB] = cpu => {\n    // pand mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & destination_low;\n    let high = source[1] & destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDC] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusb xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // paddusb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source64s = cpu.read_mmx_mem64s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8 = cpu.reg_mmx8;\n\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDD] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusw mm, mm/m64\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\n        );\n    }\n    else\n    {\n        // paddusw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDE] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmaxub xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\nt[0xDF] = cpu => {\n    // pandn mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & ~destination_low;\n    let high = source[1] & ~destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xE1] = cpu => {\n    // psraw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 15) {\n        shift = 16;\n    }\n\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE2] = cpu => {\n    // psrad mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 31) {\n        shift = 31;\n    }\n\n    let low = destination_low >> shift;\n    let high = destination_high >> shift;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\nt[0xE4] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pmulhuw xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source16 = new Uint16Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination16 = new Uint16Array(destination.buffer);\n\n    cpu.write_xmm128s(\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\n    );\n};\n\nt[0xE5] = cpu => {\n    // pmulhw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\nt[0xE7] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let data = cpu.read_xmm128s();\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\n\nt[0xE8] = cpu => {\n    // psubsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE9] = cpu => {\n    // psubsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xEB] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // por xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] | destination[0],\n            source[1] | destination[1],\n            source[2] | destination[2],\n            source[3] | destination[3]\n        );\n    }\n    else\n    {\n        // por mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] | destination_low;\n        let high = source[1] | destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xEC] = cpu => {\n    // paddsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xED] = cpu => {\n    // paddsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\nt[0xEF] = cpu => {\n    // pxor mm, mm/m64\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] ^ destination[0],\n            source[1] ^ destination[1],\n            source[2] ^ destination[2],\n            source[3] ^ destination[3]\n        );\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] ^ destination_low;\n        let high = source[1] ^ destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF1] = cpu => {\n    // psllw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n        let word1 = (destination_low >>> 16) << shift;\n        low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n        let word3 = (destination_high >>> 16) << shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF2] = cpu => {\n    // pslld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF3] = cpu => {\n    // psllq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift | (destination_low >>> (32 - shift));\n    }\n    else if (shift <= 63) {\n        high = destination_low << (shift & 0x1F);\n        low = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF4] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmuludq xmm1, xmm2/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        let i = (cpu.modrm_byte >> 3 & 7) << 2;\n\n        cpu.reg_xmm32s[i] = v86util.mul_low(destination[0], source[0]);\n        cpu.reg_xmm32s[i + 1] = v86util.mul_high(destination[0], source[0]);\n        cpu.reg_xmm32s[i + 2] = v86util.mul_low(destination[2], source[2]);\n        cpu.reg_xmm32s[i + 3] = v86util.mul_high(destination[2], source[2]);\n    }\n    else\n    {\n        // pmuludq mm1, mm2/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let s = cpu.read_mmx_mem64s()[0];\n        let d = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        cpu.write_mmx64s(v86util.mul_low(d, s), v86util.mul_high(d, s));\n    }\n};\n\nt[0xF5] = cpu => {\n    // pmaddwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\n\n    let low = mul0 + mul1 | 0;\n    let high = mul2 + mul3 | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF8] = cpu => {\n    // psubb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF9] = cpu => {\n    // psubw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low - source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high - source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFA] = cpu => {\n    // psubd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low - source[0];\n    let high = destination_high - source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xFC] = cpu => {\n    // paddb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFD] = cpu => {\n    // paddw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low + source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high + source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFE] = cpu => {\n    // paddd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low + source[0] | 0;\n    let high = destination_high + source[1] | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFF] = cpu => {\n    // Windows 98\n    dbg_log(\"#ud: 0F FF\");\n    cpu.trigger_ud();\n};\n\n\nvar table0F_16 = [];\nvar table0F_32 = [];\nCPU.prototype.table0F_16 = table0F_16;\nCPU.prototype.table0F_32 = table0F_32;\n\nfor(i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table0F_16[i] = table0F_32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table0F_16[i] = t16[i];\n        table0F_32[i] = t32[i];\n    }\n}\n","\"use strict\";\n\nCPU.prototype.debug_init = function()\n{\n    var cpu = this;\n    var debug = {};\n    this.debug = debug;\n\n    /**\n     * wheter or not in step mode\n     * used for debugging\n     * @type {boolean}\n     */\n    debug.step_mode = false;\n    debug.ops = undefined;\n    debug.all_ops = [];\n\n    debug.trace_all = false;\n\n    // \"log\" some information visually to the user.\n    // Also in non-DEBUG modes\n    debug.show = function(x)\n    {\n        if(typeof document !== \"undefined\")\n        {\n            var el = document.getElementById(\"log\");\n\n            if(el)\n            {\n                el.textContent += x + \"\\n\";\n                el.style.display = \"block\";\n                el.scrollTop = 1e9;\n                return;\n            }\n        }\n\n        console.log(x);\n    };\n\n    debug.init = function()\n    {\n        if(!DEBUG) return;\n\n        // used for debugging\n        debug.ops = new CircularQueue(200000);\n\n        if(cpu.io)\n        {\n            // write seabios debug output to console\n            var seabios_debug = \"\";\n\n            cpu.io.register_write(0x402, this, handle); // seabios\n            cpu.io.register_write(0x500, this, handle); // vgabios\n        }\n\n        function handle(out_byte)\n        {\n            if(out_byte === 10)\n            {\n                dbg_log(seabios_debug, LOG_BIOS);\n                seabios_debug = \"\";\n            }\n            else\n            {\n                seabios_debug += String.fromCharCode(out_byte);\n            }\n        }\n    };\n\n    debug.get_regs_short = get_regs_short;\n    debug.dump_regs = dump_regs_short;\n    debug.dump_instructions = dump_instructions;\n    debug.get_instructions = get_instructions;\n    debug.get_state = get_state;\n    debug.dump_state = dump_state;\n    debug.dump_stack = dump_stack;\n\n    debug.dump_page_directory = dump_page_directory;\n    debug.dump_gdt_ldt = dump_gdt_ldt;\n    debug.dump_idt = dump_idt;\n\n    debug.get_memory_dump = get_memory_dump;\n    debug.memory_hex_dump = memory_hex_dump;\n    debug.used_memory_dump = used_memory_dump;\n\n    debug.step = step;\n    debug.run_until = run_until;\n\n    /**\n     * @param {string=} msg\n     */\n    debug.unimpl = function(msg)\n    {\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\n\n        debug.show(s);\n\n        if(DEBUG)\n        {\n            console.trace();\n            return s;\n        }\n        else\n        {\n            debug.show(\"Execution stopped\");\n            return s;\n        }\n        //this.name = \"Unimplemented\";\n    };\n\n    function step()\n    {\n        if(!DEBUG) return;\n\n        if(!cpu.running)\n        {\n            cpu.cycle();\n        }\n\n        dump_regs_short();\n        var now = Date.now();\n\n        cpu.running = false;\n        dump_instructions();\n    }\n\n    function run_until()\n    {\n        if(!DEBUG) return;\n\n        cpu.running = false;\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\n        if(a) while(cpu.instruction_pointer != a) step();\n    }\n\n    // http://ref.x86asm.net/x86reference.xml\n    // for debuggin\" purposes\n    var opcode_map = [\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\n    ];\n\n    debug.logop = function(_ip, op)\n    {\n        if(!DEBUG || !debug.step_mode)\n        {\n            return;\n        }\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            debug.all_ops.push(_ip, op);\n        }\n        else if(debug.ops)\n        {\n            debug.ops.add(_ip);\n            debug.ops.add(op);\n        }\n    };\n\n    function dump_stack(start, end)\n    {\n        if(!DEBUG) return;\n\n        var esp = cpu.reg32[reg_esp];\n        dbg_log(\"========= STACK ==========\");\n\n        if(end >= start || end === undefined)\n        {\n            start = 5;\n            end = -5;\n        }\n\n        for(var i = start; i > end; i--)\n        {\n            var line = \"    \";\n\n            if(!i) line = \"=>  \";\n\n            line += h(i, 2) + \" | \";\n\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\n        }\n    }\n\n    function get_state(where)\n    {\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\n        var flags = cpu.get_eflags();\n        var iopl = cpu.getiopl();\n        var cpl = cpu.cpl;\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\n\n        var flag_names = {\n            [flag_carry]: \"c\",\n            [flag_parity]: \"p\",\n            [flag_adjust]: \"a\",\n            [flag_zero]: \"z\",\n            [flag_sign]: \"s\",\n            [flag_trap]: \"t\",\n            [flag_interrupt]: \"i\",\n            [flag_direction]: \"d\",\n            [flag_overflow]: \"o\",\n        };\n        var flag_string = \"\";\n\n        for(var i = 0; i < 16; i++)\n        {\n            if(flag_names[1 << i])\n            {\n                if(flags & 1 << i)\n                {\n                    flag_string += flag_names[1 << i];\n                }\n                else\n                {\n                    flag_string += \" \";\n                }\n            }\n        }\n\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\n                \" ss:esp=\" + ss_esp +\n                \" ssize=\" + (+cpu.stack_size_32) +\n                (where ? \" in \" + where : \"\"));\n    }\n\n    function dump_state(where)\n    {\n        if(!DEBUG) return;\n\n        dbg_log(get_state(where), LOG_CPU);\n    }\n\n    function get_regs_short()\n    {\n        var\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\n            line1 = \"\",\n            line2 = \"\";\n\n\n\n        for(var i = 0; i < 4; i++)\n        {\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\n        }\n\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\n\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\n\n        return [line1, line2];\n    }\n\n    function dump_regs_short()\n    {\n        if(!DEBUG) return;\n\n        var lines = get_regs_short();\n\n        dbg_log(lines[0], LOG_CPU);\n        dbg_log(lines[1], LOG_CPU);\n    }\n\n    function get_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.step_mode = true;\n\n        function add(ip, op)\n        {\n            out += h(ip, 8)  + \":        \" +\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\n        }\n\n        var opcodes;\n        var out = \"\";\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            opcodes = debug.all_ops;\n        }\n        else if(debug.ops)\n        {\n            opcodes = debug.ops.toArray();\n        }\n\n        if(!opcodes)\n        {\n            return \"\";\n        }\n\n        for(var i = 0; i < opcodes.length; i += 2)\n        {\n            add(opcodes[i], opcodes[i + 1]);\n        }\n\n        debug.ops.clear();\n        debug.all_ops = [];\n\n        return out;\n    }\n\n    function dump_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.show(get_instructions());\n    }\n\n    function dump_gdt_ldt()\n    {\n        if(!DEBUG) return;\n\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\n\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\n\n        function dump_table(addr, size)\n        {\n            for(var i = 0; i < size; i += 8, addr += 8)\n            {\n                var base = cpu.read16(addr + 2) |\n                        cpu.read8(addr + 4) << 16 |\n                        cpu.read8(addr + 7) << 24,\n\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\n                    access = cpu.read8(addr + 5),\n                    flags = cpu.read8(addr + 6) >> 4,\n                    flags_str = \"\",\n                    dpl = access >> 5 & 3;\n\n                if(!(access & 128))\n                {\n                    // present bit not set\n                    //continue;\n                    flags_str += \"NP \";\n                }\n                else\n                {\n                    flags_str += \" P \";\n                }\n\n                if(access & 16)\n                {\n                    if(flags & 4)\n                    {\n                        flags_str += \"32b \";\n                    }\n                    else\n                    {\n                        flags_str += \"16b \";\n                    }\n\n                    if(access & 8)\n                    {\n                        // executable\n                        flags_str += \"X \";\n\n                        if(access & 4)\n                        {\n                            flags_str += \"C \";\n                        }\n                    }\n                    else\n                    {\n                        // data\n                        flags_str += \"R \";\n                    }\n\n                    flags_str += \"RW \";\n                }\n                else\n                {\n                    // system\n                    flags_str += \"sys: \" + h(access & 15);\n                }\n\n                if(flags & 8)\n                {\n                    limit = limit << 12 | 0xFFF;\n                }\n\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\n                        \", f = \" + flags.toString(2));\n            }\n        }\n    }\n\n    function dump_idt()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < cpu.idtr_size; i += 8)\n        {\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\n                selector = cpu.read16(addr + 2),\n                type = cpu.read8(addr + 5),\n                line,\n                dpl = type >> 5 & 3;\n\n            if((type & 31) === 5)\n            {\n                line = \"task gate \";\n            }\n            else if((type & 31) === 14)\n            {\n                line = \"intr gate \";\n            }\n            else if((type & 31) === 15)\n            {\n                line = \"trap gate \";\n            }\n            else\n            {\n                line = \"invalid   \";\n            }\n\n\n            if(type & 128)\n            {\n                line += \" P\";\n            }\n            else\n            {\n                // present bit not set\n                //continue;\n                line += \"NP\";\n            }\n\n\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\n        }\n    }\n\n    function load_page_entry(dword_entry, is_directory)\n    {\n        if(!DEBUG) return;\n\n        if(!(dword_entry & 1))\n        {\n            // present bit not set\n            return false;\n        }\n\n        var size = (dword_entry & 128) === 128,\n            address;\n\n        if(size && !is_directory)\n        {\n            address = dword_entry & 0xFFC00000;\n        }\n        else\n        {\n            address = dword_entry & 0xFFFFF000;\n        }\n\n        return {\n            size: size,\n            global: (dword_entry & 256) === 256,\n            accessed: (dword_entry & 0x20) === 0x20,\n            dirty: (dword_entry & 0x40) === 0x40,\n            cache_disable : (dword_entry & 16) === 16,\n            user : (dword_entry & 4) === 4,\n            read_write : (dword_entry & 2) === 2,\n            address : address >>> 0\n        };\n    }\n\n    function dump_page_directory()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < 1024; i++)\n        {\n            var addr = cpu.cr[3] + 4 * i;\n            var dword = cpu.read32s(addr),\n                entry = load_page_entry(dword, true);\n\n            if(!entry)\n            {\n                continue;\n            }\n\n            var flags = \"\";\n\n            flags += entry.size ? \"S \" : \"  \";\n            flags += entry.accessed ? \"A \" : \"  \";\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\n            flags += entry.user ? \"U \" : \"  \";\n            flags += entry.read_write ? \"Rw \" : \"   \";\n\n            if(entry.size)\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\n                continue;\n            }\n            else\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\n            }\n\n            for(var j = 0; j < 1024; j++)\n            {\n                var sub_addr = entry.address + 4 * j;\n                dword = cpu.read32s(sub_addr);\n\n                var subentry = load_page_entry(dword, false);\n\n                if(subentry)\n                {\n                    flags = \"\";\n\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\n                    flags += subentry.user ? \"U \" : \"  \";\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\n                    flags += subentry.global ? \"G \" : \"  \";\n                    flags += subentry.accessed ? \"A \" : \"  \";\n                    flags += subentry.dirty ? \"Di \" : \"   \";\n\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\n                }\n            }\n        }\n    }\n\n\n    function get_memory_dump(start, count)\n    {\n        if(!DEBUG) return;\n\n        if(start === undefined)\n        {\n            start = 0;\n            count = cpu.memory_size;\n        }\n        else if(count === undefined)\n        {\n            count = start;\n            start = 0;\n        }\n\n        return cpu.mem8.slice(start, start + count).buffer;\n    }\n\n\n    function memory_hex_dump(addr, length)\n    {\n        if(!DEBUG) return;\n\n        length = length || 4 * 0x10;\n        var line, byt;\n\n        for(var i = 0; i < length >> 4; i++)\n        {\n            line = h(addr + (i << 4), 5) + \"   \";\n\n            for(var j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += h(byt, 2) + \" \";\n            }\n\n            line += \"  \";\n\n            for(j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n            }\n\n            dbg_log(line);\n        }\n    }\n\n    function used_memory_dump()\n    {\n        if(!DEBUG) return;\n\n        var width = 0x80,\n            height = 0x10,\n            block_size = cpu.memory_size / width / height | 0,\n            row;\n\n        for(var i = 0; i < height; i++)\n        {\n            row = h(i * width * block_size, 8) + \" | \";\n\n            for(var j = 0; j < width; j++)\n            {\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\n\n                row += used ? \"X\" : \" \";\n            }\n\n            dbg_log(row);\n        }\n    }\n\n\n    debug.debug_interrupt = function(interrupt_nr)\n    {\n        //if(interrupt_nr === 0x20)\n        //{\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\n        //    //var service = \"\";\n        //    //if(vxd_device === 1)\n        //    //{\n        //    //    service = vxd_table1[vxd_sub];\n        //    //}\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\n        //}\n\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\n        //{\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\n        //}\n\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\n        //{\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\n        //}\n\n        //if(interrupt_nr == 0x10)\n        //{\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\n        //    this.debug.dump_regs_short();\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\n        //}\n\n        //if(interrupt_nr === 0x13)\n        //{\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 6)\n        //{\n        //    this.instruction_pointer += 2;\n        //    dbg_log(\"BUG()\", LOG_CPU);\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\n        //    this.instruction_pointer -= 8;\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x80)\n        //{\n        //    dbg_log(\"linux syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x40)\n        //{\n        //    dbg_log(\"kolibri syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n    };\n};\n","\"use strict\";\n\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\n\nconst ELF_MAGIC = 0x464C457F;\n\nlet types = DataView.prototype;\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\nlet pad = function(size)\n{\n    return {\n        size,\n        get: offset => -1,\n    };\n};\n\nlet Header = create_struct([\n    { magic: U32, },\n\n    { class: U8, },\n    { data: U8, },\n    { version0: U8, },\n    { osabi: U8, },\n\n    { abiversion: U8, },\n    { pad0: pad(7) },\n\n    { type: U16, },\n    { machine: U16, },\n\n    { version1: U32, },\n    { entry: U32, },\n    { phoff: U32, },\n    { shoff: U32, },\n    { flags: U32, },\n\n    { ehsize: U16, },\n    { phentsize: U16, },\n    { phnum: U16, },\n    { shentsize: U16, },\n    { shnum: U16, },\n    { shstrndx: U16, },\n]);\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\n\nlet ProgramHeader = create_struct([\n    { type: U32, },\n    { offset: U32, },\n    { vaddr: U32, },\n    { paddr: U32, },\n    { filesz: U32, },\n    { memsz: U32, },\n    { flags: U32, },\n    { align: U32, },\n]);\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\n\nlet SectionHeader = create_struct([\n    { name: U32, },\n    { type: U32, },\n    { flags: U32, },\n    { addr: U32, },\n    { offset: U32, },\n    { size: U32, },\n    { link: U32, },\n    { info: U32, },\n    { addralign: U32, },\n    { entsize: U32, },\n]);\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\n\n\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\nfunction create_struct(struct)\n{\n    return struct.map(function(entry)\n    {\n        let keys = Object.keys(entry);\n        console.assert(keys.length === 1);\n        let name = keys[0];\n        let type = entry[name];\n\n        console.assert(type.size > 0);\n\n        return {\n            name,\n            type,\n            size: type.size,\n            get: type.get,\n            set: type.set,\n        };\n    });\n}\n\n/** @param {ArrayBuffer} buffer */\nfunction read_elf(buffer)\n{\n    let view = new DataView(buffer);\n\n    let [header, offset] = read_struct(view, Header);\n    console.assert(offset === 52);\n\n    if(DEBUG)\n    {\n        for(let key in header)\n        {\n            console.log(key + \": 0x\" + header[key].toString(16));\n        }\n        console.log(header);\n    }\n\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\n    console.assert(header.version0 === 1, \"Bad version0\");\n\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\n    // shared, or core, respectively.\n    console.assert(header.type === 2, \"Unimplemented type\");\n\n    console.assert(header.version1 === 1, \"Bad version1\");\n\n    // these are different in 64 bit\n    console.assert(header.ehsize === 52, \"Bad header size\");\n    console.assert(header.phentsize === 32, \"Bad program header size\");\n    console.assert(header.shentsize === 40, \"Bad section header size\");\n\n    let [program_headers, ph_offset] = read_structs(\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\n        ProgramHeader,\n        header.phnum);\n\n    let [sections_headers, sh_offset] = read_structs(\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\n        SectionHeader,\n        header.shnum);\n\n    if(DEBUG)\n    {\n        console.log(\"%d program headers:\", program_headers.length);\n        for(let program of program_headers)\n        {\n            console.log(\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\n                \"filesz=%s memsz=%s flags=%s align=%s\",\n                program.type.toString(16),\n                program.offset.toString(16),\n                program.vaddr.toString(16),\n                program.paddr.toString(16),\n                program.filesz.toString(16),\n                program.memsz.toString(16),\n                program.flags.toString(16),\n                program.align.toString(16)\n            );\n        }\n\n        console.log(\"%d program headers:\", sections_headers.length);\n        for(let section of sections_headers)\n        {\n            console.log(\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\n                section.name.toString(16),\n                section.type.toString(16),\n                section.flags.toString(16),\n                section.addr.toString(16),\n                section.offset.toString(16),\n                section.size.toString(16),\n                section.link.toString(16),\n                section.info.toString(16),\n                section.addralign.toString(16),\n                section.entsize.toString(16)\n            );\n        }\n    }\n\n    return {\n        header,\n        program_headers,\n        sections_headers,\n    };\n}\n\nfunction read_struct(view, Struct)\n{\n    let result = {};\n    let offset = 0;\n    const LITTLE_ENDIAN = true; // big endian not supported yet\n\n    for(let entry of Struct)\n    {\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\n        console.assert(result[entry.name] === undefined);\n        result[entry.name] = value;\n        offset += entry.size;\n    }\n\n    return [result, offset];\n}\n\nfunction read_structs(view, Struct, count)\n{\n    let result = [];\n    let offset = 0;\n\n    for(var i = 0; i < count; i++)\n    {\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\n        result.push(s);\n        offset += size;\n    }\n\n    return [result, offset];\n}\n\n/** @param {number=} length */\nfunction view_slice(view, offset, length)\n{\n    return new DataView(view.buffer, view.byteOffset + offset, length);\n}\n","// -------------------------------------------------\n// ------------------ Marshall ---------------------\n// -------------------------------------------------\n// helper functions for virtio and 9p.\n\nvar marshall = {};\n\n\n// Inserts data from an array to a byte aligned struct in memory\nmarshall.Marshall = function(typelist, input, struct, offset) {\n    var item;\n    var size = 0;\n    for (var i=0; i < typelist.length; i++) {\n        item = input[i];\n        switch (typelist[i]) {\n            case \"w\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                size += 4;\n                break;\n            case \"d\": // double word\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                size += 8;\n                break;\n            case \"h\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = item >> 8;\n                size += 2;\n                break;\n            case \"b\":\n                struct[offset++] = item;\n                size += 1;\n                break;\n            case \"s\":\n                var lengthoffset = offset;\n                var length = 0;\n                struct[offset++] = 0; // set the length later\n                struct[offset++] = 0;\n                size += 2;\n                for (var j in item) {\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\n                    utf8.forEach( function(c) {\n                        struct[offset++] = c;\n                        size += 1;\n                        length++;\n                    });\n                }\n                struct[lengthoffset+0] = length & 0xFF;\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\n                break;\n            case \"Q\":\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\n                offset += 13;\n                size += 13;\n                break;\n            default:\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return size;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall = function(typelist, struct, offset) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                offset += 4;\n                output.push(val);\n                break;\n            case \"h\":\n                var val = struct[offset++];\n                output.push(val + (struct[offset++] << 8));\n                break;\n            case \"b\":\n                output.push(struct[offset++]);\n                break;\n            case \"s\":\n                var len = struct[offset++];\n                len += struct[offset++] << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(struct[offset++])\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall2 = function(typelist, GetByte) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                GetByte();GetByte();GetByte();GetByte();\n                output.push(val);\n                break;\n            case \"h\":\n                var val = GetByte();\n                output.push(val + (GetByte() << 8));\n                break;\n            case \"b\":\n                output.push(GetByte());\n                break;\n            case \"s\":\n                var len = GetByte();\n                len += GetByte() << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(GetByte())\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n","// -------------------------------------------------\n// ------------------ UTF8 Helpers -----------------\n// -------------------------------------------------\n\n\"use strict\";\n\nvar UTF8 = {}\n\n/** @constructor */\nfunction UTF8StreamToUnicode() {\n\n    this.stream = new Uint8Array(5);\n    this.ofs = 0;\n\n    this.Put = function(key) {\n        this.stream[this.ofs] = key;\n        this.ofs++;\n        switch(this.ofs) {\n            case 1:\n                if (this.stream[0] < 128) {\n                    this.ofs = 0;\n                    return this.stream[0];\n                }\n                break;\n\n            case 2:\n                if ((this.stream[0]&0xE0) == 0xC0)\n                if ((this.stream[1]&0xC0) == 0x80) {\n                    this.ofs = 0;\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\n                }\n                break;\n\n            case 3:\n                break;\n\n            case 4:\n                break;\n\n            default:\n                return -1;\n                //this.ofs = 0;\n                //break;\n        }\n        return -1;\n    }\n}\n\nfunction UnicodeToUTF8Stream(key)\n{\n        if (key < 0x80)  return [key];\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\n}\n\nUTF8.UTF8Length = function(s)\n{\n    var length = 0;\n    for(var i=0; i<s.length; i++) {\n        var c = s.charCodeAt(i);\n        length += c<128?1:2;\n    }\n    return length;\n}\n","\"use strict\";\n\n/** @const */\nvar SHIFT_SCAN_CODE = 0x2A;\n\n/** @const */\nvar SCAN_CODE_RELEASE = 0x80;\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction KeyboardAdapter(bus)\n{\n    var\n        /**\n         * @type {!Object.<boolean>}\n         */\n        keys_pressed = {},\n\n        keyboard = this;\n\n    /**\n     * Set by emulator\n     * @type {boolean}\n     */\n    this.emu_enabled = true;\n\n    /**\n     * Format:\n     * Javascript event.keyCode -> make code\n     * @const\n     */\n    var charmap = new Uint16Array([\n        0, 0, 0, 0,  0, 0, 0, 0,\n        // 0x08: backspace, tab, enter\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\n\n        // 0x10: shift, ctrl, alt, pause, caps lock\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\n\n        // 0x18: escape\n        0, 0, 0, 0x01,  0, 0, 0, 0,\n\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\n\n        // 0x30: numbers\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\n        0x09, 0x0A,\n\n        // 0x3B: ;= (firefox only)\n        0, 0x27, 0, 0x0D, 0, 0,\n\n        // 0x40\n        0,\n\n        // 0x41: letters\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\n\n        // 0x5B: Left Win, Right Win, Menu\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\n\n        // 0x60: keypad\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\n\n        // 0x70: F1 to F12\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\n\n        0, 0, 0, 0,\n\n        // 0x80\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0, 0, 0,\n\n        // 0x90: Numlock\n        0x45, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xA0: - (firefox only)\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\n\n        // 0xB0\n        // ,\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\n\n        // 0xC0\n        // `\n        0x29, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xD0\n        // [']\\\n        0, 0, 0, 0,     0, 0, 0, 0,\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\n\n        // 0xE0\n        // Apple key on Gecko, Right alt\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,            0, 0, 0, 0,\n    ]);\n\n\n    /**\n     * ascii -> javascript event code (US layout)\n     * @const\n     */\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192};\n\n    // From:\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\n    // http://stanislavs.org/helppc/make_codes.html\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\n    //\n    // Mapping from event.code to scancode\n    var codemap = {\n        \"Escape\": 0x0001,\n        \"Digit1\": 0x0002,\n        \"Digit2\": 0x0003,\n        \"Digit3\": 0x0004,\n        \"Digit4\": 0x0005,\n        \"Digit5\": 0x0006,\n        \"Digit6\": 0x0007,\n        \"Digit7\": 0x0008,\n        \"Digit8\": 0x0009,\n        \"Digit9\": 0x000a,\n        \"Digit0\": 0x000b,\n        \"Minus\": 0x000c,\n        \"Equal\": 0x000d,\n        \"Backspace\": 0x000e,\n        \"Tab\": 0x000f,\n        \"KeyQ\": 0x0010,\n        \"KeyW\": 0x0011,\n        \"KeyE\": 0x0012,\n        \"KeyR\": 0x0013,\n        \"KeyT\": 0x0014,\n        \"KeyY\": 0x0015,\n        \"KeyU\": 0x0016,\n        \"KeyI\": 0x0017,\n        \"KeyO\": 0x0018,\n        \"KeyP\": 0x0019,\n        \"BracketLeft\": 0x001a,\n        \"BracketRight\": 0x001b,\n        \"Enter\": 0x001c,\n        \"ControlLeft\": 0x001d,\n        \"KeyA\": 0x001e,\n        \"KeyS\": 0x001f,\n        \"KeyD\": 0x0020,\n        \"KeyF\": 0x0021,\n        \"KeyG\": 0x0022,\n        \"KeyH\": 0x0023,\n        \"KeyJ\": 0x0024,\n        \"KeyK\": 0x0025,\n        \"KeyL\": 0x0026,\n        \"Semicolon\": 0x0027,\n        \"Quote\": 0x0028,\n        \"Backquote\": 0x0029,\n        \"ShiftLeft\": 0x002a,\n        \"Backslash\": 0x002b,\n        \"KeyZ\": 0x002c,\n        \"KeyX\": 0x002d,\n        \"KeyC\": 0x002e,\n        \"KeyV\": 0x002f,\n        \"KeyB\": 0x0030,\n        \"KeyN\": 0x0031,\n        \"KeyM\": 0x0032,\n        \"Comma\": 0x0033,\n        \"Period\": 0x0034,\n        \"Slash\": 0x0035,\n        \"ShiftRight\": 0x0036,\n        \"NumpadMultiply\": 0x0037,\n        \"AltLeft\": 0x0038,\n        \"Space\": 0x0039,\n        \"CapsLock\": 0x003a,\n        \"F1\": 0x003b,\n        \"F2\": 0x003c,\n        \"F3\": 0x003d,\n        \"F4\": 0x003e,\n        \"F5\": 0x003f,\n        \"F6\": 0x0040,\n        \"F7\": 0x0041,\n        \"F8\": 0x0042,\n        \"F9\": 0x0043,\n        \"F10\": 0x0044,\n        \"NumLock\": 0x0045,\n        \"ScrollLock\": 0x0046,\n        \"Numpad7\": 0x0047,\n        \"Numpad8\": 0x0048,\n        \"Numpad9\": 0x0049,\n        \"NumpadSubtract\": 0x004a,\n        \"Numpad4\": 0x004b,\n        \"Numpad5\": 0x004c,\n        \"Numpad6\": 0x004d,\n        \"NumpadAdd\": 0x004e,\n        \"Numpad1\": 0x004f,\n        \"Numpad2\": 0x0050,\n        \"Numpad3\": 0x0051,\n        \"Numpad0\": 0x0052,\n        \"NumpadDecimal\": 0x0053,\n        \"IntlBackslash\": 0x0056,\n        \"F11\": 0x0057,\n        \"F12\": 0x0058,\n\n        \"NumpadEnter\": 0xe01c,\n        \"ControlRight\": 0xe01d,\n        \"NumpadDivide\": 0xe035,\n        //\"PrintScreen\": 0x0063,\n        \"AltRight\": 0xe038,\n        \"Home\": 0xe04f,\n        \"ArrowUp\": 0xe048,\n        \"PageUp\": 0xe049,\n        \"ArrowLeft\": 0xe04b,\n        \"ArrowRight\": 0xe04d,\n        \"End\": 0xe04f,\n        \"ArrowDown\": 0xe050,\n        \"PageDown\": 0xe051,\n        \"Insert\": 0xe052,\n        \"Delete\": 0xe053,\n\n        \"OSLeft\": 0xe05b,\n        \"OSRight\": 0xe05c,\n        \"ContextMenu\": 0xe05d,\n    };\n\n    this.bus = bus;\n\n    this.destroy = function()\n    {\n        if(typeof window !== \"undefined\")\n        {\n            window.removeEventListener(\"keyup\", keyup_handler, false);\n            window.removeEventListener(\"keydown\", keydown_handler, false);\n            window.removeEventListener(\"blur\", blur_handler, false);\n        }\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"keyup\", keyup_handler, false);\n        window.addEventListener(\"keydown\", keydown_handler, false);\n        window.addEventListener(\"blur\", blur_handler, false);\n    };\n    this.init();\n\n    this.simulate_press = function(code)\n    {\n        var ev = { keyCode: code };\n        handler(ev, true);\n        handler(ev, false);\n    };\n\n    this.simulate_char = function(chr)\n    {\n        var code = chr.charCodeAt(0);\n\n        if(code in asciimap)\n        {\n            this.simulate_press(asciimap[code]);\n        }\n        else if(code in asciimap_shift)\n        {\n            send_to_controller(SHIFT_SCAN_CODE);\n            this.simulate_press(asciimap_shift[code]);\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\n        }\n        else\n        {\n            console.log(\"ascii -> keyCode not found: \", code, chr);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\n        {\n              // don't prevent opening chromium dev tools\n              // maybe add other important combinations here, too\n              return false;\n        }\n\n        if(!keyboard.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.target)\n        {\n            // className shouldn't be hardcoded here\n            return e.target.classList.contains(\"phone_keyboard\") ||\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    function translate(e)\n    {\n        if(e.code !== undefined)\n        {\n            var code = codemap[e.code];\n\n            if(code !== undefined)\n            {\n                return code;\n            }\n        }\n\n        return charmap[e.keyCode];\n    }\n\n    function keyup_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, false);\n    }\n\n    function keydown_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, true);\n    }\n\n    function blur_handler(e)\n    {\n        // trigger keyup for all pressed keys\n        var keys = Object.keys(keys_pressed),\n            key;\n\n        for(var i = 0; i < keys.length; i++)\n        {\n            key = +keys[i];\n\n            if(keys_pressed[key])\n            {\n                handle_code(key, false);\n            }\n        }\n\n        keys_pressed = {};\n    }\n\n    /**\n     * @param {boolean} keydown\n     */\n    function handler(e, keydown)\n    {\n        if(!keyboard.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var code = translate(e);\n\n        if(!code)\n        {\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\n            return;\n        }\n\n        handle_code(code, keydown);\n\n        e.preventDefault && e.preventDefault();\n\n        return false;\n    }\n\n    /**\n     * @param {number} code\n     * @param {boolean} keydown\n     */\n    function handle_code(code, keydown)\n    {\n        if(keydown)\n        {\n            if(keys_pressed[code])\n            {\n                handle_code(code, false);\n            }\n        }\n        else\n        {\n            if(!keys_pressed[code])\n            {\n                // stray keyup\n                return;\n            }\n        }\n\n        keys_pressed[code] = keydown;\n\n        if(!keydown)\n        {\n            code |= 0x80;\n        }\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\n\n        if(code > 0xFF)\n        {\n            // prefix\n            send_to_controller(code >> 8);\n            send_to_controller(code & 0xFF);\n        }\n        else\n        {\n            send_to_controller(code);\n        }\n    }\n\n    function send_to_controller(code)\n    {\n        keyboard.bus.send(\"keyboard-code\", code);\n    }\n}\n\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction MouseAdapter(bus, screen_container)\n{\n    /** @const */\n    var SPEED_FACTOR = 0.15;\n\n    var left_down = false,\n        right_down = false,\n        middle_down = false,\n\n        last_x = 0,\n        last_y = 0,\n\n        mouse = this;\n\n    // set by controller\n    this.enabled = false;\n\n    // set by emulator\n    this.emu_enabled = true;\n\n    this.bus = bus;\n\n    this.bus.register(\"mouse-enable\", function(enabled)\n    {\n        this.enabled = enabled;\n    }, this);\n\n    this.destroy = function()\n    {\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\n        window.removeEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.removeEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\n        window.addEventListener(\"touchend\", touch_end_handler, false);\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\n        window.addEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.addEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n    this.init();\n\n    function is_child(child, parent)\n    {\n        while(child.parentNode)\n        {\n            if(child === parent)\n            {\n                return true;\n            }\n            child = child.parentNode;\n        }\n\n        return false;\n    }\n\n    function may_handle(e)\n    {\n        if(!mouse.enabled || !mouse.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.type === \"mousemove\" || e.type === \"touchmove\")\n        {\n            return true;\n        }\n\n        if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\n        {\n            var parent = screen_container || document.body;\n            return is_child(e.target, parent);\n        }\n\n        return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\n    }\n\n    function touch_start_handler(e)\n    {\n        if(may_handle(e))\n        {\n            var touches = e[\"changedTouches\"];\n\n            if(touches && touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n            }\n        }\n    }\n\n    function touch_end_handler(e)\n    {\n        if(left_down || middle_down || right_down)\n        {\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\n            left_down = middle_down = right_down = false;\n        }\n    }\n\n    function mousemove_handler(e)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = 0;\n        var delta_y = 0;\n\n        var touches = e[\"changedTouches\"];\n\n        if(touches)\n        {\n            if(touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                delta_x = touch.clientX - last_x;\n                delta_y = touch.clientY - last_y;\n\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n\n                e.preventDefault();\n            }\n        }\n        else\n        {\n            if(typeof e[\"movementX\"] === \"number\")\n            {\n                delta_x = e[\"movementX\"];\n                delta_y = e[\"movementY\"];\n            }\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\n            {\n                delta_x = e[\"webkitMovementX\"];\n                delta_y = e[\"webkitMovementY\"];\n            }\n            else if(typeof e[\"mozMovementX\"] === \"number\")\n            {\n                delta_x = e[\"mozMovementX\"];\n                delta_y = e[\"mozMovementY\"];\n            }\n            else\n            {\n                // Fallback for other browsers?\n                delta_x = e.clientX - last_x;\n                delta_y = e.clientY - last_y;\n\n                last_x = e.clientX;\n                last_y = e.clientY;\n            }\n        }\n\n        if(SPEED_FACTOR !== 1)\n        {\n            delta_x = delta_x * SPEED_FACTOR;\n            delta_y = delta_y * SPEED_FACTOR;\n        }\n\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\n        //{\n        //    // Large mouse delta, drop?\n        //}\n\n        delta_y = -delta_y;\n\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\n\n        let absolute_x = e.pageX - screen_container.offsetLeft;\n        let absolute_y = e.pageY - screen_container.offsetTop;\n        mouse.bus.send(\"mouse-absolute\", [\n            absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\n    }\n\n    function mousedown_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, true);\n        }\n    }\n\n    function mouseup_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, false);\n        }\n    }\n\n    function click_event(e, down)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(e.which === 1)\n        {\n            left_down = down;\n        }\n        else if(e.which === 2)\n        {\n            middle_down = down;\n        }\n        else if(e.which === 3)\n        {\n            right_down = down;\n        }\n        else\n        {\n            console.log(\"Unknown event.which: \" + e.which);\n        }\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\n    }\n\n    function mousewheel_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = e.wheelDelta || -e.detail;\n        var delta_y = 0;\n\n        if(delta_x < 0)\n        {\n            delta_x = -1;\n        }\n        else if(delta_x > 0)\n        {\n            delta_x = 1;\n        }\n\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\n        e.preventDefault();\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar DAC_QUEUE_RESERVE = 0.2;\n\n/** @const */\nvar AUDIOBUFFER_MINIMUM_SAMPLING_RATE = 8000;\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n */\nfunction SpeakerAdapter(bus)\n{\n    if(typeof window === \"undefined\")\n    {\n        return;\n    }\n    if(!window.AudioContext && !window[\"webkitAudioContext\"])\n    {\n        console.warn(\"Web browser doesn't support Web Audio API\");\n        return;\n    }\n\n    var SpeakerDAC = window.AudioWorklet ? SpeakerWorkletDAC : SpeakerBufferSourceDAC;\n\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = new (window.AudioContext || window[\"webkitAudioContext\"])();\n\n    /** @const */\n    this.mixer = new SpeakerMixer(bus, this.audio_context);\n\n    /** @const */\n    this.pcspeaker = new PCSpeaker(bus, this.audio_context, this.mixer);\n\n    /** @const */\n    this.dac = new SpeakerDAC(bus, this.audio_context, this.mixer);\n\n    this.pcspeaker.start();\n\n    bus.register(\"emulator-stopped\", function()\n    {\n        this.audio_context.suspend();\n    }, this);\n\n    bus.register(\"emulator-started\", function()\n    {\n        this.audio_context.resume();\n    }, this);\n\n    bus.register(\"speaker-confirm-initialized\", function()\n    {\n        bus.send(\"speaker-has-initialized\");\n    }, this);\n    bus.send(\"speaker-has-initialized\");\n}\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n */\nfunction SpeakerMixer(bus, audio_context)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    this.sources = new Map();\n\n    // States\n\n    this.volume_both = 1;\n    this.volume_left = 1;\n    this.volume_right = 1;\n    this.gain_left = 1;\n    this.gain_right = 1;\n\n    // Nodes\n    // TODO: Find / calibrate / verify the filter frequencies\n\n    this.node_treble_left = this.audio_context.createBiquadFilter();\n    this.node_treble_right = this.audio_context.createBiquadFilter();\n    this.node_treble_left.type = \"highshelf\";\n    this.node_treble_right.type = \"highshelf\";\n    this.node_treble_left.frequency.setValueAtTime(2000, this.audio_context.currentTime);\n    this.node_treble_right.frequency.setValueAtTime(2000, this.audio_context.currentTime);\n\n    this.node_bass_left = this.audio_context.createBiquadFilter();\n    this.node_bass_right = this.audio_context.createBiquadFilter();\n    this.node_bass_left.type = \"lowshelf\";\n    this.node_bass_right.type = \"lowshelf\";\n    this.node_bass_left.frequency.setValueAtTime(200, this.audio_context.currentTime);\n    this.node_bass_right.frequency.setValueAtTime(200, this.audio_context.currentTime);\n\n    this.node_gain_left = this.audio_context.createGain();\n    this.node_gain_right = this.audio_context.createGain();\n\n    this.node_merger = this.audio_context.createChannelMerger(2);\n\n    // Graph\n\n    this.input_left = this.node_treble_left;\n    this.input_right = this.node_treble_right;\n\n    this.node_treble_left.connect(this.node_bass_left);\n    this.node_bass_left.connect(this.node_gain_left);\n    this.node_gain_left.connect(this.node_merger, 0, 0);\n\n    this.node_treble_right.connect(this.node_bass_right);\n    this.node_bass_right.connect(this.node_gain_right);\n    this.node_gain_right.connect(this.node_merger, 0, 1);\n\n    this.node_merger.connect(this.audio_context.destination);\n\n    // Interface\n\n    bus.register(\"mixer-connect\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        this.connect_source(source_id, channel);\n    }, this);\n\n    bus.register(\"mixer-disconnect\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        this.disconnect_source(source_id, channel);\n    }, this);\n\n    bus.register(\"mixer-volume\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        var decibels = data[2];\n\n        var gain = Math.pow(10, decibels / 20);\n\n        var source = source_id === MIXER_SRC_MASTER ? this : this.sources.get(source_id);\n\n        if(source === undefined)\n        {\n            dbg_assert(false, \"Mixer set volume - cannot set volume for undefined source: \" + source_id);\n            return;\n        }\n\n        source.set_volume(gain, channel);\n    }, this);\n\n    bus.register(\"mixer-gain-left\", function(/** number */ decibels)\n    {\n        this.gain_left = Math.pow(10, decibels / 20);\n        this.update();\n    }, this);\n\n    bus.register(\"mixer-gain-right\", function(/** number */ decibels)\n    {\n        this.gain_right = Math.pow(10, decibels / 20);\n        this.update();\n    }, this);\n\n    function create_gain_handler(audio_node)\n    {\n        return function(decibels)\n        {\n            audio_node.gain.setValueAtTime(decibels, this.audio_context.currentTime);\n        };\n    }\n    bus.register(\"mixer-treble-left\", create_gain_handler(this.node_treble_left), this);\n    bus.register(\"mixer-treble-right\", create_gain_handler(this.node_treble_right), this);\n    bus.register(\"mixer-bass-left\", create_gain_handler(this.node_bass_left), this);\n    bus.register(\"mixer-bass-right\", create_gain_handler(this.node_bass_right), this);\n}\n\n/**\n * @param {!AudioNode} source_node\n * @param {number} source_id\n * @return {SpeakerMixerSource}\n */\nSpeakerMixer.prototype.add_source = function(source_node, source_id)\n{\n    var source = new SpeakerMixerSource(\n        this.audio_context,\n        source_node,\n        this.input_left,\n        this.input_right\n    );\n\n    dbg_assert(!this.sources.has(source_id), \"Mixer add source - overwritting source: \" + source_id);\n\n    this.sources.set(source_id, source);\n    return source;\n};\n\n/**\n * @param {number} source_id\n * @param {number=} channel\n */\nSpeakerMixer.prototype.connect_source = function(source_id, channel)\n{\n    var source = this.sources.get(source_id);\n\n    if(source === undefined)\n    {\n        dbg_assert(false, \"Mixer connect - cannot connect undefined source: \" + source_id);\n        return;\n    }\n\n    source.connect(channel);\n};\n\n/**\n * @param {number} source_id\n * @param {number=} channel\n */\nSpeakerMixer.prototype.disconnect_source = function(source_id, channel)\n{\n    var source = this.sources.get(source_id);\n\n    if(source === undefined)\n    {\n        dbg_assert(false, \"Mixer disconnect - cannot disconnect undefined source: \" + source_id);\n        return;\n    }\n\n    source.disconnect(channel);\n};\n\n/**\n * @param {number} value\n * @param {number=} channel\n */\nSpeakerMixer.prototype.set_volume = function(value, channel)\n{\n    if(channel === undefined)\n    {\n        channel = MIXER_CHANNEL_BOTH;\n    }\n\n    switch(channel)\n    {\n        case MIXER_CHANNEL_LEFT:\n            this.volume_left = value;\n            break;\n        case MIXER_CHANNEL_RIGHT:\n            this.volume_right = value;\n            break;\n        case MIXER_CHANNEL_BOTH:\n            this.volume_both = value;\n            break;\n        default:\n            dbg_assert(false, \"Mixer set master volume - unknown channel: \" + channel);\n            return;\n    }\n\n    this.update();\n};\n\nSpeakerMixer.prototype.update = function()\n{\n    var net_gain_left = this.volume_both * this.volume_left * this.gain_left;\n    var net_gain_right = this.volume_both * this.volume_right * this.gain_right;\n\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\n};\n\n/**\n * @constructor\n * @param {!AudioContext} audio_context\n * @param {!AudioNode} source_node\n * @param {!AudioNode} destination_left\n * @param {!AudioNode} destination_right\n */\nfunction SpeakerMixerSource(audio_context, source_node, destination_left, destination_right)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    // States\n\n    this.connected_left = true;\n    this.connected_right = true;\n    this.gain_hidden = 1;\n    this.volume_both = 1;\n    this.volume_left = 1;\n    this.volume_right = 1;\n\n    // Nodes\n\n    this.node_splitter = audio_context.createChannelSplitter(2);\n    this.node_gain_left = audio_context.createGain();\n    this.node_gain_right = audio_context.createGain();\n\n    // Graph\n\n    source_node.connect(this.node_splitter);\n\n    this.node_splitter.connect(this.node_gain_left, 0);\n    this.node_gain_left.connect(destination_left);\n\n    this.node_splitter.connect(this.node_gain_right, 1);\n    this.node_gain_right.connect(destination_right);\n}\n\nSpeakerMixerSource.prototype.update = function()\n{\n    var net_gain_left = this.connected_left * this.gain_hidden * this.volume_both * this.volume_left;\n    var net_gain_right = this.connected_right * this.gain_hidden * this.volume_both * this.volume_right;\n\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\n};\n\n/** @param {number=} channel */\nSpeakerMixerSource.prototype.connect = function(channel)\n{\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\n    if(both || channel === MIXER_CHANNEL_LEFT)\n    {\n        this.connected_left = true;\n    }\n    if(both || channel === MIXER_CHANNEL_RIGHT)\n    {\n        this.connected_right = true;\n    }\n    this.update();\n};\n\n/** @param {number=} channel */\nSpeakerMixerSource.prototype.disconnect = function(channel)\n{\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\n    if(both || channel === MIXER_CHANNEL_LEFT)\n    {\n        this.connected_left = false;\n    }\n    if(both || channel === MIXER_CHANNEL_RIGHT)\n    {\n        this.connected_right = false;\n    }\n    this.update();\n};\n\n/**\n * @param {number} value\n * @param {number=} channel\n */\nSpeakerMixerSource.prototype.set_volume = function(value, channel)\n{\n    if(channel === undefined)\n    {\n        channel = MIXER_CHANNEL_BOTH;\n    }\n\n    switch(channel)\n    {\n        case MIXER_CHANNEL_LEFT:\n            this.volume_left = value;\n            break;\n        case MIXER_CHANNEL_RIGHT:\n            this.volume_right = value;\n            break;\n        case MIXER_CHANNEL_BOTH:\n            this.volume_both = value;\n            break;\n        default:\n            dbg_assert(false, \"Mixer set volume - unknown channel: \" + channel);\n            return;\n    }\n\n    this.update();\n};\n\nSpeakerMixerSource.prototype.set_gain_hidden = function(value)\n{\n    this.gain_hidden = value;\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction PCSpeaker(bus, audio_context, mixer)\n{\n    // Nodes\n\n    this.node_oscillator = audio_context.createOscillator();\n    this.node_oscillator.type = \"square\";\n    this.node_oscillator.frequency.setValueAtTime(440, audio_context.currentTime);\n\n    // Interface\n\n    this.mixer_connection = mixer.add_source(this.node_oscillator, MIXER_SRC_PCSPEAKER);\n    this.mixer_connection.disconnect();\n\n    bus.register(\"pcspeaker-enable\", function()\n    {\n        mixer.connect_source(MIXER_SRC_PCSPEAKER);\n    }, this);\n\n    bus.register(\"pcspeaker-disable\", function()\n    {\n        mixer.disconnect_source(MIXER_SRC_PCSPEAKER);\n    }, this);\n\n    bus.register(\"pcspeaker-update\", function(data)\n    {\n        var counter_mode = data[0];\n        var counter_reload = data[1];\n\n        var frequency = 0;\n        var beep_enabled = counter_mode === 3;\n\n        if(beep_enabled)\n        {\n            frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\n            frequency = Math.min(frequency, this.node_oscillator.frequency.maxValue);\n            frequency = Math.max(frequency, 0);\n        }\n\n        this.node_oscillator.frequency.setValueAtTime(frequency, audio_context.currentTime);\n    }, this);\n}\n\nPCSpeaker.prototype.start = function()\n{\n    this.node_oscillator.start();\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction SpeakerWorkletDAC(bus, audio_context, mixer)\n{\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = audio_context;\n\n    // State\n\n    this.enabled = false;\n    this.sampling_rate = 48000;\n\n    // Worklet\n\n    function worklet()\n    {\n        /** @const */\n        var RENDER_QUANTUM = 128;\n\n        /** @const */\n        var MINIMUM_BUFFER_SIZE = 2 * RENDER_QUANTUM;\n\n        /** @const */\n        var QUEUE_RESERVE = 1024;\n\n        function sinc(x)\n        {\n            if(x === 0) return 1;\n            x *= Math.PI;\n            return Math.sin(x) / x;\n        }\n\n        var EMPTY_BUFFER =\n        [\n            new Float32Array(MINIMUM_BUFFER_SIZE),\n            new Float32Array(MINIMUM_BUFFER_SIZE),\n        ];\n\n        /**\n         * @constructor\n         * @extends AudioWorkletProcessor\n         */\n        function DACProcessor()\n        {\n            var self = Reflect.construct(AudioWorkletProcessor, [], DACProcessor);\n\n            // Params\n\n            self.kernel_size = 3;\n\n            // States\n\n            // Buffers waiting for their turn to be consumed\n            self.queue_data = new Array(1024);\n            self.queue_start = 0;\n            self.queue_end = 0;\n            self.queue_length = 0;\n            self.queue_size = self.queue_data.length;\n            self.queued_samples = 0;\n\n            // Buffers being actively consumed\n            /** @type{Array<Float32Array>} */\n            self.source_buffer_previous = EMPTY_BUFFER;\n            /** @type{Array<Float32Array>} */\n            self.source_buffer_current = EMPTY_BUFFER;\n\n            // Ratio of alienland sample rate to homeland sample rate.\n            self.source_samples_per_destination = 1.0;\n\n            // Integer representing the position of the first destination sample\n            // for the current block, relative to source_buffer_current.\n            self.source_block_start = 0;\n\n            // Real number representing the position of the current destination\n            // sample relative to source_buffer_current, since source_block_start.\n            self.source_time = 0.0;\n\n            // Same as source_time but rounded down to an index.\n            self.source_offset = 0;\n\n            // Interface\n\n            self.port.onmessage = (event) =>\n            {\n                switch(event.data.type)\n                {\n                    case \"queue\":\n                        self.queue_push(event.data.value);\n                        break;\n                    case \"sampling-rate\":\n                        self.source_samples_per_destination = event.data.value / sampleRate;\n                        break;\n                }\n            };\n\n            return self;\n        }\n\n        Reflect.setPrototypeOf(DACProcessor.prototype, AudioWorkletProcessor.prototype);\n        Reflect.setPrototypeOf(DACProcessor, AudioWorkletProcessor);\n\n        DACProcessor.prototype[\"process\"] =\n        DACProcessor.prototype.process = function(inputs, outputs, parameters)\n        {\n            for(var i = 0; i < outputs[0][0].length; i++)\n            {\n                // Lanczos resampling\n                var sum0 = 0;\n                var sum1 = 0;\n\n                var start = this.source_offset - this.kernel_size + 1;\n                var end = this.source_offset + this.kernel_size;\n\n                for(var j = start; j <= end; j++)\n                {\n                    var convolute_index = this.source_block_start + j;\n                    sum0 += this.get_sample(convolute_index, 0) * this.kernel(this.source_time - j);\n                    sum1 += this.get_sample(convolute_index, 1) * this.kernel(this.source_time - j);\n                }\n\n                if(isNaN(sum0) || isNaN(sum1))\n                {\n                    // NaN values cause entire audio graph to cease functioning.\n                    sum0 = sum1 = 0;\n                    this.dbg_log(\"ERROR: NaN values! Ignoring for now.\");\n                }\n\n                outputs[0][0][i] = sum0;\n                outputs[0][1][i] = sum1;\n\n                this.source_time += this.source_samples_per_destination;\n                this.source_offset = Math.floor(this.source_time);\n            }\n\n            // +2 to safeguard against rounding variations\n            var samples_needed_per_block = this.source_offset;\n            samples_needed_per_block += this.kernel_size + 2;\n\n            this.source_time -= this.source_offset;\n            this.source_block_start += this.source_offset;\n            this.source_offset = 0;\n\n            // Note: This needs to be done after source_block_start is updated.\n            this.ensure_enough_data(samples_needed_per_block);\n\n            return true;\n        };\n\n        DACProcessor.prototype.kernel = function(x)\n        {\n            return sinc(x) * sinc(x / this.kernel_size);\n        };\n\n        DACProcessor.prototype.get_sample = function(index, channel)\n        {\n            if(index < 0)\n            {\n                // -ve index represents previous buffer\n                //          <-------|\n                // [Previous buffer][Current buffer]\n                index += this.source_buffer_previous[0].length;\n                return this.source_buffer_previous[channel][index];\n            }\n            else\n            {\n                return this.source_buffer_current[channel][index];\n            }\n        };\n\n        DACProcessor.prototype.ensure_enough_data = function(needed)\n        {\n            var current_length = this.source_buffer_current[0].length;\n            var remaining = current_length - this.source_block_start;\n\n            if(remaining < needed)\n            {\n                this.prepare_next_buffer();\n                this.source_block_start -= current_length;\n            }\n        };\n\n        DACProcessor.prototype.prepare_next_buffer = function()\n        {\n            if(this.queued_samples < MINIMUM_BUFFER_SIZE && this.queue_length)\n            {\n                this.dbg_log(\"Not enough samples - should not happen during midway of playback\");\n            }\n\n            this.source_buffer_previous = this.source_buffer_current;\n            this.source_buffer_current = this.queue_shift();\n\n            var sample_count = this.source_buffer_current[0].length;\n\n            if(sample_count < MINIMUM_BUFFER_SIZE)\n            {\n                // Unfortunately, this single buffer is too small :(\n\n                var queue_pos = this.queue_start;\n                var buffer_count = 0;\n\n                // Figure out how many small buffers to combine.\n                while(sample_count < MINIMUM_BUFFER_SIZE && buffer_count < this.queue_length)\n                {\n                    sample_count += this.queue_data[queue_pos][0].length;\n\n                    queue_pos = queue_pos + 1 & this.queue_size - 1;\n                    buffer_count++;\n                }\n\n                // Note: if not enough buffers, this will be end-padded with zeros:\n                var new_big_buffer_size = Math.max(sample_count, MINIMUM_BUFFER_SIZE);\n                var new_big_buffer =\n                [\n                    new Float32Array(new_big_buffer_size),\n                    new Float32Array(new_big_buffer_size),\n                ];\n\n                // Copy the first, already-shifted, small buffer into the new buffer.\n                new_big_buffer[0].set(this.source_buffer_current[0]);\n                new_big_buffer[1].set(this.source_buffer_current[1]);\n                var new_big_buffer_pos = this.source_buffer_current[0].length;\n\n                // Copy the rest.\n                for(var i = 0; i < buffer_count; i++)\n                {\n                    var small_buffer = this.queue_shift();\n                    new_big_buffer[0].set(small_buffer[0], new_big_buffer_pos);\n                    new_big_buffer[1].set(small_buffer[1], new_big_buffer_pos);\n                    new_big_buffer_pos += small_buffer[0].length;\n                }\n\n                // Pretend that everything's just fine.\n                this.source_buffer_current = new_big_buffer;\n            }\n\n            this.pump();\n        };\n\n        DACProcessor.prototype.pump = function()\n        {\n            if(this.queued_samples / this.source_samples_per_destination < QUEUE_RESERVE)\n            {\n                this.port.postMessage(\n                {\n                    type: \"pump\",\n                });\n            }\n        };\n\n        DACProcessor.prototype.queue_push = function(item)\n        {\n            if(this.queue_length < this.queue_size)\n            {\n                this.queue_data[this.queue_end] = item;\n                this.queue_end = this.queue_end + 1 & this.queue_size - 1;\n                this.queue_length++;\n\n                this.queued_samples += item[0].length;\n\n                this.pump();\n            }\n        };\n\n        DACProcessor.prototype.queue_shift = function()\n        {\n            if(!this.queue_length)\n            {\n                return EMPTY_BUFFER;\n            }\n\n            var item = this.queue_data[this.queue_start];\n\n            this.queue_data[this.queue_start] = null;\n            this.queue_start = this.queue_start + 1 & this.queue_size - 1;\n            this.queue_length--;\n\n            this.queued_samples -= item[0].length;\n\n            return item;\n        };\n\n        DACProcessor.prototype.dbg_log = function(message)\n        {\n            if(DEBUG)\n            {\n                this.port.postMessage(\n                {\n                    type: \"debug-log\",\n                    value: message,\n                });\n            }\n        };\n\n        registerProcessor(\"dac-processor\", DACProcessor);\n    }\n\n    var worklet_string = worklet.toString();\n\n    var worklet_code_start = worklet_string.indexOf(\"{\") + 1;\n    var worklet_code_end = worklet_string.lastIndexOf(\"}\");\n    var worklet_code = worklet_string.substring(worklet_code_start, worklet_code_end);\n\n    if(DEBUG)\n    {\n        worklet_code = \"var DEBUG = true;\\n\" + worklet_code;\n    }\n\n    var worklet_blob = new Blob([worklet_code], { type: \"application/javascript\" });\n    var worklet_url = URL.createObjectURL(worklet_blob);\n\n    /** @type {AudioWorkletNode} */\n    this.node_processor = null;\n\n    // Placeholder pass-through node to connect to, when worklet node is not ready yet.\n    this.node_output = this.audio_context.createGain();\n\n    this.audio_context\n        .audioWorklet\n        .addModule(worklet_url)\n        .then(() =>\n    {\n        URL.revokeObjectURL(worklet_url);\n\n        this.node_processor = new AudioWorkletNode(this.audio_context, \"dac-processor\",\n        {\n            \"numberOfInputs\": 0,\n            \"numberOfOutputs\": 1,\n            \"outputChannelCount\": [2],\n        });\n\n        this.node_processor.port.postMessage(\n        {\n            type: \"sampling-rate\",\n            value: this.sampling_rate,\n        });\n\n        this.node_processor.port.onmessage = (event) =>\n        {\n            switch(event.data.type)\n            {\n                case \"pump\":\n                    this.pump();\n                    break;\n                case \"debug-log\":\n                    dbg_log(\"SpeakerWorkletDAC - Worklet: \" + event.data.value);\n                    break;\n            }\n        };\n\n        // Graph\n\n        this.node_processor.connect(this.node_output);\n    });\n\n    // Interface\n\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\n    this.mixer_connection.set_gain_hidden(3);\n\n    bus.register(\"dac-send-data\", function(data)\n    {\n        this.queue(data);\n    }, this);\n\n    bus.register(\"dac-enable\", function(enabled)\n    {\n        this.enabled = true;\n    }, this);\n\n    bus.register(\"dac-disable\", function()\n    {\n        this.enabled = false;\n    }, this);\n\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\n    {\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\n        this.sampling_rate = rate;\n\n        if(!this.node_processor)\n        {\n            return;\n        }\n\n        this.node_processor.port.postMessage(\n        {\n            type: \"sampling-rate\",\n            value: rate,\n        });\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\n    }\n}\n\nSpeakerWorkletDAC.prototype.queue = function(data)\n{\n    if(!this.node_processor)\n    {\n        return;\n    }\n\n    if(DEBUG)\n    {\n        this.debugger.push_queued_data(data);\n    }\n\n    this.node_processor.port.postMessage(\n    {\n        type: \"queue\",\n        value: data,\n    }, [data[0].buffer, data[1].buffer]);\n};\n\nSpeakerWorkletDAC.prototype.pump = function()\n{\n    if(!this.enabled)\n    {\n        return;\n    }\n    this.bus.send(\"dac-request-data\");\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction SpeakerBufferSourceDAC(bus, audio_context, mixer)\n{\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = audio_context;\n\n    // States\n\n    this.enabled = false;\n    this.sampling_rate = 22050;\n    this.buffered_time = 0;\n    this.rate_ratio = 1;\n\n    // Nodes\n\n    this.node_lowpass = this.audio_context.createBiquadFilter();\n    this.node_lowpass.type = \"lowpass\";\n\n    // Interface\n\n    this.node_output = this.node_lowpass;\n\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\n    this.mixer_connection.set_gain_hidden(3);\n\n    bus.register(\"dac-send-data\", function(data)\n    {\n        this.queue(data);\n    }, this);\n\n    bus.register(\"dac-enable\", function(enabled)\n    {\n        this.enabled = true;\n        this.pump();\n    }, this);\n\n    bus.register(\"dac-disable\", function()\n    {\n        this.enabled = false;\n    }, this);\n\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\n    {\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\n        this.sampling_rate = rate;\n        this.rate_ratio = Math.ceil(AUDIOBUFFER_MINIMUM_SAMPLING_RATE / rate);\n        this.node_lowpass.frequency.setValueAtTime(rate / 2, this.audio_context.currentTime);\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\n    }\n}\n\nSpeakerBufferSourceDAC.prototype.queue = function(data)\n{\n    if(DEBUG)\n    {\n        this.debugger.push_queued_data(data);\n    }\n\n    var sample_count = data[0].length;\n    var block_duration = sample_count / this.sampling_rate;\n\n    var buffer;\n    if(this.rate_ratio > 1)\n    {\n        var new_sample_count = sample_count * this.rate_ratio;\n        var new_sampling_rate = this.sampling_rate * this.rate_ratio;\n        buffer = this.audio_context.createBuffer(2, new_sample_count, new_sampling_rate);\n        var buffer_data0 = buffer.getChannelData(0);\n        var buffer_data1 = buffer.getChannelData(1);\n\n        var buffer_index = 0;\n        for(var i = 0; i < sample_count; i++)\n        {\n            for(var j = 0; j < this.rate_ratio; j++, buffer_index++)\n            {\n                buffer_data0[buffer_index] = data[0][i];\n                buffer_data1[buffer_index] = data[1][i];\n            }\n        }\n    }\n    else\n    {\n        // Allocating new AudioBuffer every block\n        // - Memory profiles show insignificant improvements if recycling old buffers.\n        buffer = this.audio_context.createBuffer(2, sample_count, this.sampling_rate);\n        if(buffer.copyToChannel)\n        {\n            buffer.copyToChannel(data[0], 0);\n            buffer.copyToChannel(data[1], 1);\n        }\n        else\n        {\n            // Safari doesn't support copyToChannel yet. See #286\n            buffer.getChannelData(0).set(data[0]);\n            buffer.getChannelData(1).set(data[1]);\n        }\n    }\n\n    var source = this.audio_context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(this.node_lowpass);\n    source.addEventListener(\"ended\", this.pump.bind(this));\n\n    var current_time = this.audio_context.currentTime;\n\n    if(this.buffered_time < current_time)\n    {\n        dbg_log(\"Speaker DAC - Creating/Recreating reserve - shouldn't occur frequently during playback\");\n\n        // Schedule pump() to queue evenly, starting from current time\n        this.buffered_time = current_time;\n        var target_silence_duration = DAC_QUEUE_RESERVE - block_duration;\n        var current_silence_duration = 0;\n        while(current_silence_duration <= target_silence_duration)\n        {\n            current_silence_duration += block_duration;\n            this.buffered_time += block_duration;\n            setTimeout(() => this.pump(), current_silence_duration * 1000);\n        }\n    }\n\n    source.start(this.buffered_time);\n    this.buffered_time += block_duration;\n\n    // Chase the schedule - ensure reserve is full\n    setTimeout(() => this.pump(), 0);\n};\n\nSpeakerBufferSourceDAC.prototype.pump = function()\n{\n    if(!this.enabled)\n    {\n        return;\n    }\n    if(this.buffered_time - this.audio_context.currentTime > DAC_QUEUE_RESERVE)\n    {\n        return;\n    }\n    this.bus.send(\"dac-request-data\");\n};\n\n/**\n * @constructor\n */\nfunction SpeakerDACDebugger(audio_context, source_node)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    /** @const */\n    this.node_source = source_node;\n\n    this.node_processor = null;\n\n    this.node_gain = this.audio_context.createGain();\n    this.node_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\n\n    this.node_gain.connect(this.audio_context.destination);\n\n    this.is_active = false;\n    this.queued_history = [];\n    this.output_history = [];\n    this.queued = [[], []];\n    this.output = [[], []];\n}\n\n/** @suppress {deprecated} */\nSpeakerDACDebugger.prototype.start = function(duration_ms)\n{\n    this.is_active = true;\n    this.queued = [[], []];\n    this.output = [[], []];\n    this.queued_history.push(this.queued);\n    this.output_history.push(this.output);\n\n    this.node_processor = this.audio_context.createScriptProcessor(1024, 2, 2);\n    this.node_processor.onaudioprocess = (event) =>\n    {\n        this.output[0].push(event.inputBuffer.getChannelData(0).slice());\n        this.output[1].push(event.inputBuffer.getChannelData(1).slice());\n    };\n\n    this.node_source.connect(this.node_processor);\n    this.node_processor.connect(this.node_gain);\n\n    setTimeout(() =>\n    {\n        this.stop();\n    }, duration_ms);\n};\n\nSpeakerDACDebugger.prototype.stop = function()\n{\n    this.is_active = false;\n    this.node_source.disconnect(this.node_processor);\n    this.node_processor.disconnect();\n    this.node_processor = null;\n};\n\nSpeakerDACDebugger.prototype.push_queued_data = function(data)\n{\n    if(this.is_active)\n    {\n        this.queued[0].push(data[0].slice());\n        this.queued[1].push(data[1].slice());\n    }\n};\n\n// Useful for Audacity imports\nSpeakerDACDebugger.prototype.download_txt = function(history_id, channel)\n{\n    var txt = this.output_history[history_id][channel]\n        .map((v) => v.join(\" \"))\n        .join(\" \");\n\n    dump_file(txt, \"dacdata.txt\");\n};\n\n// Useful for general plotting\nSpeakerDACDebugger.prototype.download_csv = function(history_id)\n{\n    var buffers = this.output_history[history_id];\n    var csv_rows = [];\n    for(var buffer_id = 0; buffer_id < buffers[0].length; buffer_id++)\n    {\n        for(var i = 0; i < buffers[0][buffer_id].length; i++)\n        {\n            csv_rows.push(`${buffers[0][buffer_id][i]},${buffers[1][buffer_id][i]}`);\n        }\n    }\n    dump_file(csv_rows.join(\"\\n\"), \"dacdata.csv\");\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction SerialAdapter(element, bus)\n{\n    var serial = this;\n\n    this.enabled = true;\n    this.bus = bus;\n    this.text = \"\";\n    this.text_new_line = false;\n\n    this.last_update = 0;\n\n\n    this.bus.register(\"serial0-output-char\", function(chr)\n    {\n        this.show_char(chr);\n    }, this);\n\n\n    this.destroy = function()\n    {\n        element.removeEventListener(\"keypress\", keypress_handler, false);\n        element.removeEventListener(\"keydown\", keydown_handler, false);\n        element.removeEventListener(\"paste\", paste_handler, false);\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\n    };\n\n    this.init = function()\n    {\n        this.destroy();\n\n        element.addEventListener(\"keypress\", keypress_handler, false);\n        element.addEventListener(\"keydown\", keydown_handler, false);\n        element.addEventListener(\"paste\", paste_handler, false);\n        window.addEventListener(\"mousedown\", window_click_handler, false);\n    };\n    this.init();\n\n\n    this.show_char = function(chr)\n    {\n        if(chr === \"\\x08\")\n        {\n            this.text = this.text.slice(0, -1);\n            this.update();\n        }\n        else if(chr === \"\\r\")\n        {\n            // do nothing\n        }\n        else\n        {\n            this.text += chr;\n\n            if(chr === \"\\n\")\n            {\n                this.text_new_line = true;\n            }\n\n            this.update();\n        }\n    };\n\n    this.update = function()\n    {\n        var now = Date.now();\n        var delta = now - this.last_update;\n\n        if(delta < 16)\n        {\n            if(this.update_timer === undefined)\n            {\n                this.update_timer = setTimeout(() => {\n                    this.update_timer = undefined;\n                    var now = Date.now();\n                    dbg_assert(now - this.last_update >= 16);\n                    this.last_update = now;\n                    this.render();\n                }, 16 - delta);\n            }\n        }\n        else\n        {\n            if(this.update_timer !== undefined)\n            {\n                clearTimeout(this.update_timer);\n                this.update_timer = undefined;\n            }\n\n            this.last_update = now;\n            this.render();\n        }\n    };\n\n    this.render = function()\n    {\n        element.value = this.text;\n\n        if(this.text_new_line)\n        {\n            this.text_new_line = false;\n            element.scrollTop = 1e9;\n        }\n    }\n\n    /**\n     * @param {number} chr_code\n     */\n    this.send_char = function(chr_code)\n    {\n        if(serial.bus)\n        {\n            serial.bus.send(\"serial0-input\", chr_code);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(!serial.enabled)\n        {\n            return false;\n        }\n\n        // Something here?\n\n        return true;\n    }\n\n    function keypress_handler(e)\n    {\n        if(!serial.bus)\n        {\n            return;\n        }\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var chr = e.which;\n\n        serial.send_char(chr);\n        e.preventDefault();\n    }\n\n    function keydown_handler(e)\n    {\n        var chr = e.which;\n\n        if(chr === 8)\n        {\n            // supress backspace\n            serial.send_char(127);\n            e.preventDefault();\n        }\n        else if(chr === 9)\n        {\n            // tab\n            serial.send_char(9);\n            e.preventDefault();\n        }\n    }\n\n    function paste_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var data = e.clipboardData.getData(\"text/plain\");\n\n        for(var i = 0; i < data.length; i++)\n        {\n            serial.send_char(data.charCodeAt(i));\n        }\n\n        e.preventDefault();\n    }\n\n    function window_click_handler(e)\n    {\n        if(e.target !== element)\n        {\n            element.blur();\n        }\n    }\n}\n","\"use strict\";\n\n/**\n * An ethernet-through-websocket adapter, to be used with\n *     https://github.com/benjamincburns/websockproxy\n *\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\n *\n * @constructor\n *\n * @param {string} url\n * @param {BusConnector} bus\n */\nfunction NetworkAdapter(url, bus)\n{\n    this.send_data = function(x) {};\n\n    this.bus = bus;\n    this.socket = undefined;\n\n    // TODO: circular buffer?\n    this.send_queue = [];\n    this.url = url;\n\n    this.reconnect_interval = 10000;\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\n    this.send_queue_limit = 64;\n\n    this.bus.register(\"net0-send\", function(data)\n    {\n        this.send(data);\n    }, this);\n}\n\nNetworkAdapter.prototype.handle_message = function(e)\n{\n    if(this.bus)\n    {\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\n    }\n};\n\nNetworkAdapter.prototype.handle_close = function(e)\n{\n    //console.log(\"onclose\", e);\n\n    this.connect();\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\n};\n\nNetworkAdapter.prototype.handle_open = function(e)\n{\n    //console.log(\"open\", e);\n\n    for(var i = 0; i < this.send_queue.length; i++)\n    {\n        this.send(this.send_queue[i]);\n    }\n\n    this.send_queue = [];\n};\n\nNetworkAdapter.prototype.handle_error = function(e)\n{\n    //console.log(\"onerror\", e);\n};\n\nNetworkAdapter.prototype.destroy = function()\n{\n    if(this.socket)\n    {\n        this.socket.close();\n    }\n};\n\nNetworkAdapter.prototype.connect = function()\n{\n    if(this.socket)\n    {\n        var state = this.socket.readyState;\n\n        if(state === 0 || state === 1)\n        {\n            // already or almost there\n            return;\n        }\n    }\n\n    var now = Date.now();\n\n    if(this.last_connect_attempt + this.reconnect_interval > now)\n    {\n        return;\n    }\n\n    this.last_connect_attempt = Date.now();\n\n    try\n    {\n        this.socket = new WebSocket(this.url);\n    }\n    catch(e)\n    {\n        this.handle_close(undefined);\n        return;\n    }\n\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = this.handle_open.bind(this);;\n    this.socket.onmessage = this.handle_message.bind(this);\n    this.socket.onclose = this.handle_close.bind(this);\n    this.socket.onerror = this.handle_error.bind(this);\n};\n\nNetworkAdapter.prototype.send = function(data)\n{\n    //console.log(\"send\", data);\n\n    if(!this.socket || this.socket.readyState !== 1)\n    {\n        this.send_queue.push(data);\n\n        if(this.send_queue.length > 2 * this.send_queue_limit)\n        {\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\n        }\n\n        this.connect();\n    }\n    else\n    {\n        this.socket.send(data);\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar ASYNC_SAFE = false;\n\n(function()\n{\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        v86util.load_file = load_file_nodejs;\n    }\n    else\n    {\n        v86util.load_file = load_file;\n    }\n\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\n    v86util.SyncFileBuffer = SyncFileBuffer;\n\n    /**\n     * @param {string} filename\n     * @param {Object} options\n     */\n    function load_file(filename, options)\n    {\n        var http = new XMLHttpRequest();\n\n        http.open(options.method || \"get\", filename, true);\n\n        if(!options.as_text)\n        {\n            http.responseType = \"arraybuffer\";\n        }\n\n        if(options.headers)\n        {\n            var header_names = Object.keys(options.headers);\n\n            for(var i = 0; i < header_names.length; i++)\n            {\n                var name = header_names[i];\n                http.setRequestHeader(name, options.headers[name]);\n            }\n        }\n\n        if(options.range)\n        {\n            let start = options.range.start;\n            let end = start + options.range.length - 1;\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\n        }\n\n        http.onload = function(e)\n        {\n            if(http.readyState === 4)\n            {\n                if(http.status !== 200 && http.status !== 206)\n                {\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\n                }\n                else if(http.response)\n                {\n                    options.done && options.done(http.response, http);\n                }\n            }\n        };\n\n        if(options.progress)\n        {\n            http.onprogress = function(e)\n            {\n                options.progress(e);\n            };\n        }\n\n        http.send(null);\n    }\n\n    function load_file_nodejs(filename, options)\n    {\n        let fs = require(\"fs\");\n\n        if(options.range)\n        {\n            dbg_assert(!options.as_text);\n\n            fs[\"open\"](filename, \"r\", (err, fd) =>\n            {\n                if(err) throw err;\n\n                let length = options.range.length;\n                var buffer = new global[\"Buffer\"](length);\n\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\n                {\n                    if(err) throw err;\n\n                    dbg_assert(bytes_read === length);\n                    options.done && options.done(new Uint8Array(buffer));\n\n                    fs[\"close\"](fd, (err) => {\n                        if(err) throw err;\n                    });\n                });\n            });\n        }\n        else\n        {\n            var o = {\n                encoding: options.as_text ? \"utf-8\" : null,\n            };\n\n            fs[\"readFile\"](filename, o, function(err, data)\n            {\n                if(err)\n                {\n                    console.log(\"Could not read file:\", filename, err);\n                }\n                else\n                {\n                    var result = data;\n\n                    if(!options.as_text)\n                    {\n                        result = new Uint8Array(result).buffer;\n                    }\n\n                    options.done(result);\n                }\n            });\n        }\n    }\n\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        var determine_size = function(path, cb)\n        {\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\n            {\n                if(err)\n                {\n                    cb(err);\n                }\n                else\n                {\n                    cb(null, stats.size);\n                }\n            });\n        };\n    }\n    else\n    {\n        var determine_size = function(url, cb)\n        {\n            v86util.load_file(url, {\n                done: (buffer, http) =>\n                {\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\n                    var match = header.match(/\\/(\\d+)\\s*$/);\n\n                    if(match)\n                    {\n                        cb(null, +match[1]);\n                    }\n                    else\n                    {\n                        cb({ header });\n                    }\n                },\n                headers: {\n                    Range: \"bytes=0-0\",\n\n                    //\"Accept-Encoding\": \"\",\n\n                    // Added by Chromium, but can cause the whole file to be sent\n                    // Settings this to empty also causes problems and Chromium\n                    // doesn't seem to create this header any more\n                    //\"If-Range\": \"\",\n                }\n            });\n        };\n    }\n\n    /**\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\n     * using the `Range: bytes=...` header\n     *\n     * @constructor\n     * @param {string} filename Name of the file to download\n     * @param {number|undefined} size\n     */\n    function AsyncXHRBuffer(filename, size)\n    {\n        this.filename = filename;\n\n        /** @const */\n        this.block_size = 256;\n        this.byteLength = size;\n\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncXHRBuffer.prototype.load = function()\n    {\n        if(this.byteLength !== undefined)\n        {\n            this.onload && this.onload({});\n            return;\n        }\n\n        // Determine the size using a request\n\n        determine_size(this.filename, (error, size) =>\n        {\n            if(error)\n            {\n                console.assert(false,\n                    \"Cannot use: \" + this.filename + \". \" +\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\n            }\n            else\n            {\n                dbg_assert(size >= 0);\n                this.byteLength = size;\n                this.onload && this.onload({});\n            }\n        });\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\n    {\n        var number_of_blocks = len / this.block_size;\n        var block_index = offset / this.block_size;\n\n        for(var i = 0; i < number_of_blocks; i++)\n        {\n            var block = this.loaded_blocks[block_index + i];\n\n            if(!block)\n            {\n                return;\n            }\n        }\n\n        if(number_of_blocks === 1)\n        {\n            return this.loaded_blocks[block_index];\n        }\n        else\n        {\n            var result = new Uint8Array(len);\n            for(var i = 0; i < number_of_blocks; i++)\n            {\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset + len <= this.byteLength);\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            if(ASYNC_SAFE)\n            {\n                setTimeout(fn.bind(this, block), 0);\n            }\n            else\n            {\n                fn(block);\n            }\n            return;\n        }\n\n        v86util.load_file(this.filename, {\n            done: function done(buffer)\n            {\n                var block = new Uint8Array(buffer);\n                this.handle_read(offset, len, block);\n                fn(block);\n            }.bind(this),\n            range: { start: offset, length: len },\n        });\n    };\n\n    /**\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\n     *\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     *\n     * @param {number} start\n     * @param {!Uint8Array} data\n     * @param {function()} fn\n     */\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\n    {\n        console.assert(start + data.byteLength <= this.byteLength);\n\n        var len = data.length;\n\n        console.assert(start % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var start_block = start / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var block = this.loaded_blocks[start_block + i];\n\n            if(block === undefined)\n            {\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            }\n\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\n            block.set(data_slice);\n\n            console.assert(block.byteLength === data_slice.length);\n        }\n\n        fn();\n    };\n\n    /**\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     * @param {number} offset\n     * @param {number} len\n     * @param {!Uint8Array} block\n     */\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\n    {\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\n        // Overwrites blocks from the original source that have been written since\n\n        var start_block = offset / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var written_block = this.loaded_blocks[start_block + i];\n\n            if(written_block)\n            {\n                block.set(written_block, i * this.block_size);\n            }\n            //else\n            //{\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\n            //}\n        }\n    };\n\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must download all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\n    {\n        var count = 0;\n        for(var _ in this.loaded_blocks)\n        {\n            count++;\n        }\n\n        var buffer = new Uint8Array(count * this.block_size);\n        var indices = [];\n\n        var i = 0;\n        for(var index in this.loaded_blocks)\n        {\n            var block = this.loaded_blocks[index];\n            dbg_assert(block.length === this.block_size);\n            index = +index;\n            indices.push(index);\n            buffer.set(\n                block,\n                i * this.block_size\n            );\n            i++;\n        }\n\n        return {\n            buffer,\n            indices,\n            block_size: this.block_size,\n        };\n    };\n\n    /**\n     * Synchronous access to File, loading blocks from the input type=file\n     * The whole file is loaded into memory during initialisation\n     *\n     * @constructor\n     */\n    function SyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        if(file.size > (1 << 30))\n        {\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\n        }\n\n        this.buffer = new ArrayBuffer(file.size);\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    SyncFileBuffer.prototype.load = function()\n    {\n        this.load_next(0);\n    };\n\n    /**\n     * @param {number} start\n     */\n    SyncFileBuffer.prototype.load_next = function(start)\n    {\n        /** @const */\n        var PART_SIZE = 4 << 20;\n\n        var filereader = new FileReader();\n\n        filereader.onload = function(e)\n        {\n            var buffer = new Uint8Array(e.target.result);\n            new Uint8Array(this.buffer, start).set(buffer);\n            this.load_next(start + PART_SIZE);\n        }.bind(this);\n\n        if(this.onprogress)\n        {\n            this.onprogress({\n                loaded: start,\n                total: this.byteLength,\n                lengthComputable: true,\n            });\n        }\n\n        if(start < this.byteLength)\n        {\n            var end = Math.min(start + PART_SIZE, this.byteLength);\n            var slice = this.file.slice(start, end);\n            filereader.readAsArrayBuffer(slice);\n        }\n        else\n        {\n            this.file = undefined;\n            this.onload && this.onload({ buffer: this.buffer });\n        }\n    };\n\n    /**\n     * @param {number} start\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    SyncFileBuffer.prototype.get = function(start, len, fn)\n    {\n        console.assert(start + len <= this.byteLength);\n        fn(new Uint8Array(this.buffer, start, len));\n    };\n\n    /**\n     * @param {number} offset\n     * @param {!Uint8Array} slice\n     * @param {function()} fn\n     */\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\n    {\n        console.assert(offset + slice.byteLength <= this.byteLength);\n\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\n        fn();\n    };\n\n    SyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        fn(this.buffer);\n    };\n\n    /**\n     * Asynchronous access to File, loading blocks from the input type=file\n     *\n     * @constructor\n     */\n    function AsyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        /** @const */\n        this.block_size = 256;\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncFileBuffer.prototype.load = function()\n    {\n        this.onload && this.onload({});\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            fn(block);\n            return;\n        }\n\n        var fr = new FileReader();\n\n        fr.onload = function(e)\n        {\n            var buffer = e.target.result;\n            var block = new Uint8Array(buffer);\n\n            this.handle_read(offset, len, block);\n            fn(block);\n        }.bind(this);\n\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\n    };\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\n\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must load all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncFileBuffer.prototype.get_as_file = function(name)\n    {\n        var parts = [];\n        var existing_blocks = Object.keys(this.loaded_blocks)\n                                .map(Number)\n                                .sort(function(x, y) { return x - y; });\n\n        var current_offset = 0;\n\n        for(var i = 0; i < existing_blocks.length; i++)\n        {\n            var block_index = existing_blocks[i];\n            var block = this.loaded_blocks[block_index];\n            var start = block_index * this.block_size;\n            console.assert(start >= current_offset);\n\n            if(start !== current_offset)\n            {\n                parts.push(this.file.slice(current_offset, start));\n                current_offset = start;\n            }\n\n            parts.push(block);\n            current_offset += block.length;\n        }\n\n        if(current_offset !== this.file.size)\n        {\n            parts.push(this.file.slice(current_offset));\n        }\n\n        var file = new File(parts, name);\n        console.assert(file.size === this.file.size);\n\n        return file;\n    };\n\n})();\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction DummyScreenAdapter(bus)\n{\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        var min = data[0];\n        var max = data[1];\n\n        this.update_buffer(min, max);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-text-scroll\", function(rows)\n    {\n        console.log(\"scroll\", rows);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1]);\n    }, this);\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n        }\n    };\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n    };\n\n    this.clear_screen = function()\n    {\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n    };\n\n    this.set_size_graphical = function(width, height)\n    {\n        graphic_buffer = new Uint8Array(4 * width * height);\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n    };\n\n    this.update_cursor_scanline = function(start, end)\n    {\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.update_buffer = function(min, max)\n    {\n        if(max < min)\n        {\n            return;\n        }\n\n        var min_y = min / graphical_mode_width | 0;\n        var max_y = max / graphical_mode_width | 0;\n    };\n\n    this.get_text_screen = function()\n    {\n        var screen = [];\n\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            screen.push(this.get_text_row(i));\n        }\n\n        return screen;\n    };\n\n    this.get_text_row = function(i)\n    {\n        var row = \"\";\n        var offset = 3 * i * text_mode_width;\n\n        for(var j = 0; j < text_mode_width; j++)\n        {\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\n        }\n\n        return row;\n    };\n}\n"],
"names":["$jscomp.arrayIteratorImpl","$jscomp.defineProperty","$jscomp.global","$jscomp.polyfill","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SymbolClass","$jscomp.SYMBOL_PREFIX","$jscomp.iteratorPrototype","$jscomp.initSymbolIterator","$jscomp.iteratorFromArray","$jscomp.makeIterator","$jscomp.owns","$jscomp.objectCreate","$jscomp.construct","$jscomp.setPrototypeOf","Virtio9p","filesystem","bus","fs","SendReply","this.SendReply","deviceid","hostfeature","configspace","Uint8Array","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","prototype","get_state","Virtio9p.prototype.get_state","state","map","f","inodeid","type","uid","set_state","Virtio9p.prototype.set_state","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall.Marshall","Virtio9p.prototype.SendError","errorcode","size","BuildReply","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","marshall.Unmarshall2","used_size","req","Math","floor","total_size","inodes","length","fid","mode","idx","inode","GetInode","ret","OpenInode","AddEvent","qid","bind","dfid","name","CreateInode","inodetarget","targetdata","inodedata","symlink","data","i","parentid","PushInode","gid","CreateSymlink","symgt","major","minor","CreateNode","CreateDirectory","S_IFDIR","CreateFile","FID_INODE","status","STATUS_UNLINKED","SendError","ENOENT","nlinks","atime","mtime","ctime","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_ATIME","getTime","Date","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_SETATTR_SIZE","ChangeSize","offset","count","FID_XATTR","caps","file","send","Write","Rename","olddirfid","oldname","newdirfid","newname","dirfd","Search","Unlink","ENOTEMPTY","version","nwfid","nwname","wnames","push","walk","nwidx","CloseInode","FID_NONE","newfid","PrepareCAPs","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","number_as_color","n","toString","Array","join","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","webkitTransform","MozTransform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","console","assert","getElementsByTagName","graphic_context","getContext","text_screen","cursor_element","document","createElement","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","stopped","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","String","fromCharCode","position","backgroundColor","display","register","set_mode","update_buffer","put_char","update_cursor","update_cursor_scanline","clear_screen","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","open","toDataURL","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","destroy","this.destroy","this.set_mode","graphical","this.clear_screen","fillStyle","fillRect","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","removeChild","firstChild","appendChild","this.set_size_graphical","buffer_width","buffer_height","createImageData","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","min","marginTop","this.update_cursor","this.text_update_row","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","layers","forEach","layer","putImageData","screen_x","buffer_x","screen_y","buffer_y","get_query_arguments","query","location","search","substr","split","parameters","param","decodeURIComponent","chr_repeat","result","$","getElementById","el","onload","start_profile","infos","title","settings","initial_state","fda","cdrom","hda","multiboot","memory_size","vga_memory_size","undefined","boot_order","description","innerHTML","start_emulation","done","emulator","query_args","setTimeout","keyboard_send_text","XMLHttpRequest","onclick","set_profile","floppy_file","files","last_file","cd_file","hd_file","multiboot_file","oses","HOST","ON_LOCALHOST","ON_HTTPS","OTHER_HOST","profile","use_bochs_bios","element","blur","parseInt","alert","MB","value","biosfile","vgabiosfile","bios","BIOSPATH","vga_bios","V86Starter","add_listener","init_ui","file_index","file_count","loaded","total","line","per100","max","per50","progress_ticks","file_name","update_info","now","instruction_counter","get_instruction_counter","last_ips","last_instr_counter","delta_time","last_tick","running_time","time","v86util.pad0","add_image_download_button","obj","elem.onclick","disk_images","filename","get_as_file","download","get_buffer","b","dump_file","ctrl_w_rescue","ctrlKey","onbeforeunload","window.onbeforeunload","init_filesystem_panel","cpu_is_running","stop","run","href","pathname","mouse_is_enabled","lock_mouse","mouse_adapter","emu_enabled","interval","os_uses_mouse","setInterval","clearInterval","args","read","write","read_sectors","write_sectors","bytes_received","bytes_transmitted","is_enabled","restart","hdb","fdb","v86","cpu","mem8","save_state","error","log","stack","click","onchange","was_running","filereader","FileReader","filereader.onload","restore_state","target","err","readAsArrayBuffer","keyboard_send_scancodes","parseFloat","screen_set_scale","screen_go_fullscreen","getSelection","isCollapsed","phone_keyboard","getElementsByClassName","top","body","scrollTop","left","scrollLeft","focus","setAttribute","tabIndex","addEventListener","screen_make_screenshot","call","loader","v86util.SyncFileBuffer","loader.onload","create_file","load","onkeypress","which","disabled","read_file","uint8array","replace","onpopstate","reload","prof","history","pushState","hostname","endsWith","protocol","readyState","IO","ports","create_empty_entry","MMAP_BLOCK_BITS","memory_map_read8","memory_map_write8","memory_map_read32","memory_map_write32","mmap_register","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","IO.prototype.register_read","port_addr","r8","r16","r32","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","r16_2","register_read","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","register_write","IO.prototype.in_mmap_range","in_mapped_range","MMAP_BLOCK_SIZE","mmap_read32_shim","IO.prototype.mmap_read32_shim","addr","fn","mmap_write32_shim","IO.prototype.mmap_write32_shim","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","IO.prototype.port_write8","entry","IO.prototype.port_write16","IO.prototype.port_write32","IO.prototype.port_read8","IO.prototype.port_read16","IO.prototype.port_read32","running","CPU","register_tick","v86.prototype","v86.prototype.run","fast_next_tick","v86.prototype.do_tick","in_hlt","v86.microtick","hlt_loop","devices","pit","rtc","handle_irqs","t","TIME_PER_FRAME","run_hardware_timers","do_run","do_many_cycles","do_many_cycles_unsafe","k","LOOP_COUNTER","cycle_internal","exception_cleanup","dt","next_tick","v86.prototype.stop","v86.prototype.destroy","unregister_tick","v86.prototype.restart","reset","load_bios","v86.prototype.init","setImmediate","do_tick","postMessage","MAGIC_POST_MESSAGE","tick","source","removeEventListener","hidden","v86.prototype.save_state","v86.prototype.restore_state","performance","str","len","h","toUpperCase","crypto","getRandomValues","rand_data","v86util.has_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","SyncBuffer.prototype.load","get","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","slice","SyncBuffer.prototype.get_buffer","clz32","v86util.int_log2_byte","x","v86util.int_log2","int_log2_table","tt","v86util.imul_low","v86util.mul_low","imul","a","v86util.mul_high","ByteQueue","this.push","item","shift","this.shift","clear","this.clear","FloatQueue","DSP_DACSIZE","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","FloatQueue.prototype.shift_block","slice_end","partial","subarray","FloatQueue.prototype.clear","ab","blob","Blob","file_or_blob","URL","createObjectURL","dataset","createEvent","ev","initMouseEvent","dispatchEvent","revokeObjectURL","FPU","st","Float64Array","float32","float32_int","float64","float64_byte","float64_int","st8","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","LN2","LOG2E","PI","LN10","FPU.prototype","FPU.prototype.get_state","FPU.prototype.set_state","FPU.prototype.fpu_unimpl","trigger_ud","invalid_arithmatic","FPU.prototype.invalid_arithmatic","FPU_EX_I","FPU.prototype.fcom","y","get_st0","FPU_C0","FPU_C3","FPU.prototype.fcomi","flags_changed","flags","flag_zero","FPU.prototype.finit","FPU.prototype.load_status_word","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","load_status_word","tag_word","load_tag_word","isFinite","safe_write32","fpu_unimpl","FPU.prototype.fldenv","safe_read16","set_status_word","sw","set_tag_word","safe_read32s","integer_round","FPU.prototype.integer_round","FPU.prototype.truncate","ceil","FPU.prototype.push","FPU_C1","stack_fault","pop","FPU.prototype.pop","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","exponent","low","high","sign","mantissa","pow","FPU.prototype.store_m80","FPU.prototype.load_m64","FPU.prototype.store_m64","get_sti","FPU.prototype.load_m32","FPU.prototype.sign","IDEDevice","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port","lba_count","is_lba","head","dma_command","dma_status","prdt_addr","current_command","data_pointer","data_end","data_length","device_reset","push_irq","last_sector","sector_count","ata_read_sectors","is_lba48","get_count","ata_write_sectors","lba","get_lba","is_single","byte_count","sector_size","data_allocate_noclear","sectors_per_drq","write_dest","is_atapi","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","register_device","pci","IDEDevice.prototype","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","cylinder_count","sectors_per_track","head_count","cmos_data","CMOS_BIOS_DISKTRANSFLAG","CMOS_DISK_DATA","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","data16","data32","current_atapi_command","Object","seal","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","cmd","req_length","report_read_start","data_set","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","IDEInterface.prototype.read_data","read_end","IDEInterface.prototype.write_data_port","write_end","atapi_read_dma","atapi_read","format","page_code","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","IDEInterface.prototype.do_ata_read_sectors_dma","prd_addr","prd_count","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_response32","pci_status32","device_spaces","PCI_CONFIG_DATA","pci_write8","pci_write16","bdf","address","space","pci_write32","bar","space_addr","written","original_bar","set_io_bars","pci_rom_size","pci_rom_address","PCI_CONFIG_ADDRESS","out_byte","pci_query","host_bridge","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","PCI.prototype.pci_write8","PCI.prototype.pci_write16","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","j","port","PCI.prototype.set_io_bars","from","to","raise_irq","PCI.prototype.raise_irq","lower_irq","PCI.prototype.lower_irq","FloppyController","fda_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","number_of_cylinders","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController_prototype$seek","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","CPU.prototype.mmap_read16","CPU.prototype.mmap_write16","CPU.prototype.in_mapped_range","CPU.prototype","CPU.prototype.read8","mmap_read8","CPU.prototype.read16","mmap_read16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","mmap_read32","CPU.prototype.read_aligned32","CPU.prototype.write8","mmap_write8","CPU.prototype.write16","mmap_write16","CPU.prototype.write_aligned16","CPU.prototype.write32","mmap_write32","CPU.prototype.write_aligned32","mem32s","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","DMA.prototype.update_mask","this_value","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","PIT.prototype.get_counter_value","diff_in_ticks","OSCILLATOR_FREQ","PIT.prototype.did_rollover","diff","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","read_mode","VGA_HOST_MEMORY_SPACE_START","Uint32Array","VGA_HOST_MEMORY_SPACE_SIZE","VGAScreen","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","virtual_height","virtual_width","screen_height","screen_width","start_address_latched","start_address","crtc","line_compare","offset_register","preset_row_scan","underline_location_register","vertical_blank_start","vertical_display_enable_end","horizontal_blank_start","horizontal_display_enable_end","crtc_mode","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch_dword","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_state","dac_color_index_read","dac_color_index_write","index_crtc","dac_map","attribute_controller_index","palette_source","color_select","horizontal_panning","color_plane_enable","attribute_mode","sequencer_index","plane_write_bm","clocking_mode","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","color_dont_care","color_compare","miscellaneous_graphics_register","planar_setreset_enable","planar_setreset","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C7_write","port3C7_read","port3C8_write","port3C8_read","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D4_read","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","VGA_MIN_MEMORY_SIZE","svga_memory","diff_addr_min","diff_addr_max","diff_plot_min","diff_plot_max","dest_buffer","screen_fill_buffer","start_pixel","end_pixel","svga_memory32","red","green","blue","word","svga_memory16","min_y","addr_shift","vga_addr_shift_count","addr_substitution","shift_mode","pel_width","pixel_addr","byte0","plane0","byte1","plane1","byte2","plane2","byte3","plane3","shift_loads","pixel_buffer","mask","colorset","color256","update_vertical_retrace","vga_memory","VGA_BANK_SIZE","VGA_PIXEL_BUFFER_START","VGA_PIXEL_BUFFER_SIZE","me","vga_memory_read","memory_space_select","bitmask","apply_feed","setreset_dword","apply_expand","setreset_enable_dword","plane_dword","apply_logical","plane_select","vga_addr_to_pixel","memory_start","VGA_LFB_ADDRESS","VGAScreen.prototype","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","update_layers","update_vga_size","complete_replot","complete_redraw","VGAScreen.prototype.vga_memory_read","reading","plane","VGAScreen.prototype.apply_feed","VGAScreen.prototype.apply_expand","VGAScreen.prototype.apply_logical","data_dword","VGAScreen.prototype.text_mode_redraw","VGAScreen.prototype.update_cursor","VGAScreen.prototype.complete_redraw","text_mode_redraw","VGAScreen.prototype.complete_replot","VGAScreen.prototype.destroy","VGAScreen.prototype.vga_addr_shift_count","shift_count","VGAScreen.prototype.vga_addr_to_pixel","VGAScreen.prototype.scan_line_to_screen_row","scan_line","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_vga_size","horizontal_characters","vertical_scans","bytes_per_line","vga_bytes_per_line","scan_line_to_screen_row","available_bytes","VGAScreen.prototype.update_layers","start_addr","pixel_panning","byte_panning","pixel_addr_start","start_buffer_row","start_buffer_col","split_screen_row","split_buffer_height","start_split_col","VGAScreen.prototype.update_vertical_retrace","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.port3C0_write","previous_mode","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","previous_clocking_mode","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C7_read","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C8_read","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","previous_planar_mode","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D4_read","VGAScreen.prototype.port3D5_write","previous_vertical_display_enable_end","previous_vertical_blank_start","previous_underline","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","MAX_XRES","MAX_YRES","svga_bytes_per_line","bits","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","MAX_BPP","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","resolution","scaling2","mouse_buffer","next_byte_is_aux","next_byte_is_ready","code","kbd_send_code","mouse_send_click","right","middle","send_mouse_packet","mouse_send_delta","factor","delta_x","delta_y","change_x","change_y","command_register","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.raise_irq","kbd_irq","mouse_irq","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.send_mouse_packet","dx","dy","PS2.prototype.port60_read","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","MAGIC_CPU_EXCEPTION","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","PIC.prototype","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","RTC","cmos_index","last_update","rtc_time","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","RTC.prototype.encode_time","digit","RTC.prototype.cmos_port_read","CMOS_RTC_SECONDS","encode_time","getUTCSeconds","CMOS_RTC_MINUTES","getUTCMinutes","CMOS_RTC_HOURS","getUTCHours","CMOS_RTC_DAY_MONTH","getUTCDate","CMOS_RTC_MONTH","getUTCMonth","CMOS_RTC_YEAR","getUTCFullYear","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_CENTURY","RTC.prototype.cmos_port_write","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","UART_IIR_NO_INT","scratch_register","modem_status","modem_control","input","current_line","com","data_received","UART_LSR_DATA_READY","CheckInterrupt","write_data","out_word","DLAB","ClearInterrupt","UART_IIR_THRI","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","UART_IER_RDI","UART_IIR_CTI","UART_IER_THRI","UART_IER_MSI","UART_IIR_MSI","UART.prototype.write_data","ThrowInterrupt","char","apply","StateLoadError","msg","message","Error","save_object","saved_buffers","BYTES_PER_ELEMENT","byteOffset","constructor","restore_object","base","buffers","current","table","Int16Array","info","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","JSON","stringify","buffer_block_start","STATE_INFO_BLOCK_START","ArrayBuffer","header_block","info_block","buffer_block","STATE_INDEX_MAGIC","STATE_MAGIC","STATE_INDEX_VERSION","STATE_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","Ne2k","receive","cr","rxcr","memory","curpg","total_length","packet_length","data_start","next","cut","START_RX_PAGE","pstop","pstart","ENRSR_RXOK","do_interrupt","ENISR_RX","imr","tpsr","tcnt","rcnt","dcfg","tsr","mac","random","rsar","START_PAGE","STOP_PAGE","boundary","E8390_CMD","ENISR_RDC","ENISR_TX","EN0_COUNTER0","EN0_COUNTER1","EN0_COUNTER2","NE_RESET","get_page","ENISR_RESET","EN0_STARTPG","EN0_STOPPG","EN0_ISR","update_irq","EN0_TXCR","EN0_DCFG","EN0_RCNTLO","EN0_RCNTHI","EN0_RSARLO","EN0_RSARHI","EN0_IMR","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_TCNTLO","EN0_TCNTHI","EN0_RSR","EN0_RXCR","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","data_port_write","Ne2k.prototype.data_port_write32","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","data_port_read","Ne2k.prototype.data_port_read32","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","MIXER_REGISTER_IS_LEGACY","FM_HANDLERS","SB16","write_buffer","DSP_BUFSIZE","read_buffer","mixer_current_address","command_size","command","read_buffer_lastvalue","mixer_registers","mixer_reset","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","SB_DMA1","dma_channel_16bit","SB_DMA5","dma_autoinit","dma_buffer","SB_DMA_BUFSIZE","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","SB_IRQ5","irq_triggered","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","dac_handle_request","dac_send","dma_transfer_next","dsp_reset","SB16.prototype.dsp_reset","DSP_NO_COMMAND","fill","SB_IRQ_8BIT","SB16.prototype","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","mixer_full_update","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","handler","mixer_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB_IRQ_16BIT","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","dsp_default_handler","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_clip","amplitude","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","DSP_COPYRIGHT","SB_F9","SB16.prototype.mixer_write","mixer_default_read","SB16.prototype.mixer_default_read","mixer_default_write","SB16.prototype.mixer_default_write","SB16.prototype.mixer_reset","SB16.prototype.mixer_full_update","register_mixer_read","register_mixer_write","register_mixer_legacy","address_old","address_new_left","address_new_right","prev_right","prev_left","register_mixer_volume","mixer_source","MIXER_SRC_MASTER","MIXER_CHANNEL_LEFT","MIXER_CHANNEL_RIGHT","MIXER_SRC_DAC","MIXER_SRC_PCSPEAKER","MIXER_CHANNEL_BOTH","SB_IRQ2","SB_IRQ7","SB_IRQ10","SB_DMA0","SB_DMA3","SB_DMA6","SB_DMA7","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB_FM_OPERATORS_BY_OFFSET","SB16.prototype.sampling_rate_change","rate","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","SB_DMA_BLOCK_SAMPLES","max_bytes_block","SB16.prototype.dma_on_unmask","SB16.prototype.dma_transfer_next","samples","dma_to_dac","repeats","sample","SB16.prototype.dac_send","out0","shift_block","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","ReceiveRequest","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","l","BusConnector.prototype.send","listener","Bus.create","c0","c1","a20_enabled","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","instruction_pointer","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg16","reg8s","reg8","reg_mmxs","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","main","vga","fw_value","fpu","update_operand_size","debug_init","CPU.prototype.get_state","virtio","apic","acpi","hpet","ps2","uart0","fdc","net","pic","sb16","ioapic","uart1","uart2","uart3","CPU.prototype.set_state","full_clear_tlb","CPU.prototype.exception_cleanup","clear_prefixes","CPU.prototype.reset","flags_default","switch_cs_real_mode","switch_seg","reg_ss","reg_sp","create_memory","CPU.prototype.create_memory","goog.exportProperty","CPU.prototype.init","device_bus","a20_byte","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","load_devices","fill_cmos","ide_device_count","enable_ne2k","fs9p","load_multiboot","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","checksum","reg_eax","reg_ebx","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","load_addr","load_end_addr","entry_addr","header_addr","write_blob","get_seg","reg_cs","ELF_MAGIC","elf","read_elf","program_headers","program","filesz","paddr","CPU.prototype.fill_cmos","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","memory_above_1m","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","memory_above_16m","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_EQUIPMENT_INFO","CMOS_BIOS_SMP_COUNT","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.cycle_internal","opcode","read_imm8","cycle","CPU.prototype.cycle","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","table32","table16","CPU.prototype.set_cr0","cr0","CR0_PG","debug","unimpl","CR0_EM","CR0_ET","new_paging","CR0_PE","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","CPU.prototype.create_atom64s","CPU.prototype.create_atom128s","d0","d1","d2","d3","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","CPU.prototype.sib_resolve","mod","sib_table","CPU.prototype.virt_boundary_write32","CPU.prototype.safe_read8","CPU.prototype.safe_read16","safe_read8","CPU.prototype.safe_read32s","CPU.prototype.safe_read64s","create_atom64s","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","virt_boundary_write16","CPU.prototype.safe_write32","virt_boundary_write32","CPU.prototype.safe_write64","CPU.prototype.safe_write128","CPU.prototype.read_moffs","get_seg_prefix","reg_ds","CPU.prototype.getiopl","CPU.prototype.vm86_mode","flag_vm","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","CPU.prototype.update_eflags","new_flags","dont_update","flag_iopl","getiopl","flag_interrupt","CPU.prototype.get_stack_reg","reg_esp","CPU.prototype.set_stack_reg","CPU.prototype.adjust_stack_reg","CPU.prototype.get_stack_pointer","CPU.prototype.get_real_eip","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","vm86_mode","CR4_VME","trigger_gp","translate_address_system_read","selector","access","dpl","descriptor","lookup_segment_selector","do_task_switch","tss_is_16","tss_is_busy","is_valid","is_null","from_gdt","is_present","effective_limit","tsr_offset","reg_tr","old_eflags","get_eflags","TSR_EIP","get_real_eip","TSR_EFLAGS","TSR_EAX","TSR_ECX","reg_ecx","TSR_EDX","reg_edx","TSR_EBX","TSR_ESP","TSR_EBP","reg_ebp","TSR_ESI","reg_esi","TSR_EDI","reg_edi","TSR_ES","reg_es","TSR_CS","TSR_SS","TSR_DS","TSR_FS","reg_fs","TSR_GS","reg_gs","table_offset","new_tsr_offset","TSR_BACKLINK","new_cr3","TSR_CR3","new_eip","new_cs","is_system","is_executable","dc_bit","rpl","cpl_changed","new_eflags","flag_nt","update_eflags","new_ldt","TSR_LDT","load_ldt","clear_tlb","CR0_TS","push16","push32","is_trap","is_16","trigger_np","old_flags","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","set_stack_reg","get_stack_pointer","new_ip","CPU.prototype.iret","adjust_stack_reg","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","is_writable","trigger_ss","call_interrupt_vector","CPU.prototype.switch_cs_real_mode","CPU.prototype.far_return","eip","stack_adjust","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.trigger_de","raise_exception","CPU.prototype.trigger_ud","CPU.prototype.trigger_nm","CPU.prototype.trigger_gp","raise_exception_with_code","CPU.prototype.trigger_np","CPU.prototype.task_switch_test","trigger_nm","CPU.prototype.task_switch_test_mmx","CPU.prototype.get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ss","CPU.prototype.get_seg_prefix","default_segment","prefix","PREFIX_MASK_SEGMENT","SEG_PREFIX_ZERO","CPU.prototype.get_seg","segment","CPU.prototype.read_e8","modrm_resolve","CPU.prototype.read_e16","CPU.prototype.read_e32s","CPU.prototype.read_mmx_mem32s","CPU.prototype.read_mmx_mem64s","safe_read64s","CPU.prototype.read_xmm_mem64s","CPU.prototype.read_xmm_mem128s","phys","safe_read128s_aligned","create_atom128s","CPU.prototype.set_e8","safe_write8","CPU.prototype.set_e16","CPU.prototype.set_e32","CPU.prototype.read_write_e8","virt_addr","CPU.prototype.write_e8","CPU.prototype.read_write_e16","virt_boundary_read16","CPU.prototype.write_e16","CPU.prototype.read_write_e32","virt_boundary_read32s","mid","CPU.prototype.write_e32","CPU.prototype.read_reg_e16","CPU.prototype.write_reg_e16","CPU.prototype.read_reg_e32s","CPU.prototype.write_reg_e32","CPU.prototype.read_g8","CPU.prototype.write_g8","CPU.prototype.read_g16","CPU.prototype.read_g16s","CPU.prototype.write_g16","CPU.prototype.read_g32s","CPU.prototype.write_g32","CPU.prototype.read_xmm64s","CPU.prototype.read_xmm128s","CPU.prototype.read_mmx64s","CPU.prototype.write_mmx64s","CPU.prototype.write_xmm64","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","reg_ldtr","limit","CPU.prototype.switch_seg","reg","CPU.prototype.load_ldt","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","CPU.prototype.lsl","LSL_INVALID_TYPE","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","CPU.prototype.translate_address_read","TLB_USER_READ","do_page_translation","CPU.prototype.translate_address_write","TLB_USER_WRITE","CPU.prototype.translate_address_system_write","TLB_SYSTEM_WRITE","CPU.prototype.translate_address_system_read","TLB_SYSTEM_READ","CPU.prototype.do_page_translation","for_writing","user","page","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","CR0_WP","page_table_addr","page_table_entry","write_aligned32","global","allowed_flag","CR4_PGE","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","present","CPU.prototype.is_osize_32","PREFIX_MASK_OPSIZE","CPU.prototype.is_asize_32","PREFIX_MASK_ADDRSIZE","CPU.prototype.get_reg_asize","r","CPU.prototype.set_ecx_asize","reg_cx","CPU.prototype.add_reg_asize","CPU.prototype.decr_ecx_asize","CPU.prototype.invalid_arithmatic","CPU_EX_I","CPU.prototype.is_SNaN32","module","exports","importScripts","self","get_seg_prefix_ds","reg_bx","reg_si","reg_di","get_seg_prefix_ss","reg_bp","sib_resolve","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","CPU.prototype.add8","dest","src","add","OPSIZE_8","CPU.prototype.add16","OPSIZE_16","CPU.prototype.add32","OPSIZE_32","CPU.prototype.adc8","adc","CPU.prototype.adc16","CPU.prototype.adc32","CPU.prototype.sub8","sub","CPU.prototype.sub16","CPU.prototype.sub32","CPU.prototype.sbb8","sbb","CPU.prototype.sbb16","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","flags_all","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","CPU.prototype.inc","CPU.prototype.dec","CPU.prototype.neg","CPU.prototype.imul_reg16","operand1","operand2","CPU.prototype.imul_reg32","lo","hi","CPU.prototype.do_div32","div_low","div_high","quot","trigger_de","q","div","CPU.prototype.and8","and","CPU.prototype.and16","CPU.prototype.and32","CPU.prototype.or8","or","CPU.prototype.or16","CPU.prototype.or32","CPU.prototype.xor8","xor","CPU.prototype.xor16","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","CPU.prototype.rol8","flag_overflow","CPU.prototype.rol16","CPU.prototype.rol32","CPU.prototype.rcl8","CPU.prototype.rcl16","CPU.prototype.rcl32","CPU.prototype.ror8","CPU.prototype.ror16","CPU.prototype.ror32","CPU.prototype.rcr8","CPU.prototype.rcr16","CPU.prototype.rcr32","CPU.prototype.shl8","CPU.prototype.shl16","CPU.prototype.shl32","CPU.prototype.shr8","CPU.prototype.shr16","CPU.prototype.shr32","CPU.prototype.sar8","CPU.prototype.sar16","CPU.prototype.sar32","CPU.prototype.shrd16","CPU.prototype.shrd32","CPU.prototype.shld16","CPU.prototype.shld32","CPU.prototype.bt_reg","bit_base","bit_offset","CPU.prototype.btc_reg","CPU.prototype.bts_reg","CPU.prototype.btr_reg","CPU.prototype.bt_mem","CPU.prototype.btc_mem","CPU.prototype.btr_mem","CPU.prototype.bts_mem","CPU.prototype.popcnt","v","CPU.prototype.saturate_sw_to_ub","CPU.prototype.saturate_sw_to_sb","CPU.prototype.saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sb","CPU.prototype.saturate_sd_to_ub","CPU.prototype.saturate_ud_to_ub","CPU.prototype.saturate_uw","CPU.prototype.integer_round","rc","rounded","round","CPU.prototype.jmpcc8","condition","imm8","CPU.prototype.jmp_rel16","rel16","current_cs","CPU.prototype.jmpcc16","imm16","jmp_rel16","CPU.prototype.jmpcc32","imm32s","CPU.prototype.cmovcc16","read_e16","write_g16","CPU.prototype.cmovcc32","read_e32s","write_g32","CPU.prototype.setcc","set_e8","loop","CPU.prototype.loop","imm8s","decr_ecx_asize","CPU.prototype.getcf","CPU.prototype.getpf","flag_parity","CPU.prototype.getaf","flag_adjust","CPU.prototype.getzf","CPU.prototype.getsf","flag_sign","CPU.prototype.getof","test_o","test_b","test_z","test_s","test_p","CPU.prototype.test_be","CPU.prototype.test_l","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","CPU.prototype.pop16","get_stack_reg","CPU.prototype.pop32s","CPU.prototype.xchg16r","operand","temp","reg_ax","CPU.prototype.xchg32r","CPU.prototype.lss16","seg","new_reg","new_seg","CPU.prototype.lss32","CPU.prototype.bswap","t16","t32","read_modrm_byte","write_e8","add8","read_write_e8","read_g8","write_e16","add16","read_write_e16","read_g16","write_e32","add32","read_write_e32","read_g32s","write_g8","read_e8","reg_al","or8","or16","or32","table0F_16","table0F_32","adc8","adc16","adc32","sbb8","sbb16","sbb32","and8","and16","and32","segment_prefix_op","old_al","old_cf","old_af","sub8","sub16","sub32","xor8","xor16","xor32","reg_ah","inc","reg_dx","dec","pop16","pop32s","imul_reg16","imul_reg32","test_privileges_for_io","get_reg_asize","flag_direction","PREFIX_MASK_REP","start_count","cycle_counter","MAX_COUNT_PER_CYCLE","phys_dest","port_read8","cont","add_reg_asize","set_ecx_asize","port_read16","single_size","write_aligned16","port_read32","phys_src","port_write8","port_write16","read_aligned16","port_write32","read_aligned32","jmpcc8","test_be","test_l","test_le","tmp","set_e16","set_e32","write_reg_e16","write_reg_e32","xchg16r","xchg32r","far_jump","flag_trap","flags_mask","read_moffs","ds","es","align_mask","in_mmap_range","is_repz","PREFIX_REPZ","data_dest","data_src","reg_cl","reg_dl","reg_bl","reg_ch","reg_dh","reg_bh","op1","op2","rol8","ror8","rcl8","rcr8","shl8","shr8","sar8","rol16","ror16","rcl16","rcr16","shl16","shr16","sar16","rol32","ror32","rcl32","rcr32","shl32","shr32","sar32","ip","lss16","lss32","nesting_level","frame_temp","tmp_ebp","old_vbp","new_bp","new_ebp","cs","far_return","iret","task_switch_test","m32","load_m32","st0","fcom","sti","store_m32","fldenv","fstenv","abs","ftst","isNaN","fxam","Infinity","FPU_C2","tan","atan2","fxtract","st1","fprem_quotient","trunc","sqrt","sin","cos","truncate","fucom","int32","load_m80","store_m80","finit","fcomi","fucomi","m64","load_m64","low_ptr","store_m64","frstor","fsave","m16","TWO_POW_63","st0_low","st0_high","PREFIX_REPNZ","show","neg","target_operand","high_result","result_mod","do_div32","dest_operand_low","dest_operand_high","is_neg","div_is_neg","flag_carry","set_cr0","lar","lsl","task_switch_test_mmx","read_xmm_mem64s","write_xmm64","read_xmm64s","safe_write64","CR4_DE","read_reg_e32s","cr4","CR4_PSE","PSE_ENABLED","CR4_PAE","read_xmm_mem128s","write_xmm128s","PREFIX_66","read_xmm128s","safe_write128","read_mmx_mem64s","res32","res0","res1","write_mmx64s","source1","source2","is_SNaN32","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","IA32_APIC_BASE_MSR","IA32_APIC_BASE_EN","IA32_TIME_STAMP_COUNTER","TSC_RATE","CR4_TSD","MSR_EBC_FREQUENCY_ID","cmovcc16","cmovcc32","destination","source8","destination8","read_mmx_mem32s","destination_low","source16","destination16","destination_high","saturate_sw_to_sb","source64s","source8s","reg_offset","destination8s","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","saturate_sw_to_ub","saturate_sd_to_sw","PREFIX_F3","order","PREFIX_F2","word0_shift","word1_shift","word2_shift","word3_shift","destination128","read_mmx64s","jmpcc16","jmpcc32","setcc","eax","ecx","edx","ebx","bt_mem","read_g16s","bt_reg","read_reg_e16","shld16","shld32","bts_mem","bts_reg","shrd16","shrd32","MXCSR_MASK","new_mxcsr","btr_mem","btr_reg","popcnt","btc_mem","btc_reg","old","m64_low","m64_high","rand","has_rand","bswap","saturate_sd_to_ub","saturate_ud_to_ub","saturate_uw","saturate_sd_to_sb","s","d","CPU.prototype.debug_init","step_mode","ops","all_ops","trace_all","debug.show","debug.init","get_regs_short","r32_names","line1","line2","dump_regs","dump_regs_short","dump_instructions","get_instructions","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","dump_state","dump_stack","dump_page_directory","dump_gdt_ldt","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","step","run_until","debug.unimpl","logop","debug.logop","debug_interrupt","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","Header","create_struct","magic","class","version0","osabi","abiversion","pad0","pad","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","reduce","ProgramHeader","vaddr","memsz","align","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","sections_headers","Struct","LITTLE_ENDIAN","FS","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","FS.prototype.AddEvent","OnEvent","STATUS_OK","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","JSONFS_VERSION","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","ifmt","S_IFMT","JSONFS_IDX_TARGET","updatedir","LoadDir","children","S_IFREG","STATUS_ON_SERVER","S_IFLNK","FS.prototype.LoadFile","STATUS_LOADING","LoadBinaryResource","GetFullPath","HandleEvent","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","path","FS.prototype.CreateInode","FS.prototype.CreateDirectory","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","UTF8.UTF8Length","LoadFile","FS.prototype.CloseInode","STATUS_INVALID","FS.prototype.Rename","olddirid","newdirid","oldid","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetFullPath","substring","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","FS.prototype.PrepareCAPs","url","OnSuccess","OnError","responseType","onreadystatechange","req.onreadystatechange","arrayBuffer","response","require","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","output","val","utf8converter","UTF8StreamToUnicode","Put","stream","ofs","this.Put","key","KeyboardAdapter","keyup_handler","altKey","keys_pressed","handle_code","keydown_handler","blur_handler","keydown","keyboard","shiftKey","keyCode","classList","contains","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","simulate_press","this.simulate_press","simulate_char","this.simulate_char","SHIFT_SCAN_CODE","MouseAdapter","may_handle","mouse","enabled","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","mousewheel_handler","wheelDelta","detail","SpeakerAdapter","AudioContext","SpeakerDAC","AudioWorklet","SpeakerWorkletDAC","SpeakerBufferSourceDAC","audio_context","mixer","SpeakerMixer","pcspeaker","PCSpeaker","suspend","resume","warn","create_gain_handler","audio_node","decibels","gain","setValueAtTime","currentTime","sources","Map","gain_right","gain_left","volume_right","volume_left","volume_both","node_treble_left","createBiquadFilter","node_treble_right","frequency","node_bass_left","node_bass_right","node_gain_left","createGain","node_gain_right","node_merger","createChannelMerger","input_left","input_right","connect","connect_source","source_id","disconnect_source","disconnect","set_volume","update","SpeakerMixer.prototype.add_source","source_node","SpeakerMixerSource","has","SpeakerMixer.prototype.set_volume","SpeakerMixer.prototype.update","net_gain_right","destination_left","destination_right","connected_right","connected_left","gain_hidden","node_splitter","createChannelSplitter","SpeakerMixerSource.prototype.update","SpeakerMixerSource.prototype.connect","both","SpeakerMixerSource.prototype.disconnect","SpeakerMixerSource.prototype.set_volume","node_oscillator","createOscillator","mixer_connection","add_source","maxValue","PCSpeaker.prototype.start","worklet_string","worklet","sinc","DACProcessor","Reflect","construct","AudioWorkletProcessor","kernel_size","queue_data","queue_start","queue_end","queue_length","queued_samples","source_buffer_previous","EMPTY_BUFFER","source_buffer_current","source_samples_per_destination","source_block_start","source_time","source_offset","onmessage","self.port.onmessage","event","queue_push","sampleRate","MINIMUM_BUFFER_SIZE","setPrototypeOf","DACProcessor.prototype.process","inputs","outputs","sum0","sum1","convolute_index","get_sample","kernel","samples_needed_per_block","ensure_enough_data","DACProcessor.prototype.kernel","DACProcessor.prototype.get_sample","DACProcessor.prototype.ensure_enough_data","needed","current_length","prepare_next_buffer","DACProcessor.prototype.prepare_next_buffer","queue_shift","sample_count","queue_pos","buffer_count","new_big_buffer_size","new_big_buffer","new_big_buffer_pos","small_buffer","pump","DACProcessor.prototype.pump","QUEUE_RESERVE","DACProcessor.prototype.queue_push","DACProcessor.prototype.queue_shift","registerProcessor","worklet_url","worklet_blob","worklet_code","indexOf","lastIndexOf","worklet_code_end","node_processor","node_output","audioWorklet","addModule","then","AudioWorkletNode","this.node_processor.port.onmessage","queue","SpeakerWorkletDAC.prototype.queue","SpeakerWorkletDAC.prototype.pump","buffered_time","rate_ratio","node_lowpass","AUDIOBUFFER_MINIMUM_SAMPLING_RATE","SpeakerBufferSourceDAC.prototype.queue","block_duration","createBuffer","buffer_data0","getChannelData","buffer_data1","buffer_index","copyToChannel","createBufferSource","current_time","current_silence_duration","target_silence_duration","DAC_QUEUE_RESERVE","SpeakerBufferSourceDAC.prototype.pump","SerialAdapter","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","text_new_line","show_char","this.show_char","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","socket","send_queue","last_connect_attempt","reconnect_interval","NetworkAdapter.prototype","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","WebSocket","binaryType","onopen","onclose","onerror","NetworkAdapter.prototype.send","load_file","options","http","method","as_text","headers","header_names","setRequestHeader","range","http.onload","progress","onprogress","http.onprogress","load_file_nodejs","fd","o","encoding","AsyncXHRBuffer","block_size","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","v86util.load_file","v86util.AsyncXHRBuffer","v86util.AsyncFileBuffer","determine_size","cb","getResponseHeader","match","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","AsyncXHRBuffer.prototype.get_buffer","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","PART_SIZE","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","SyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","AsyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.get_as_file","parts","existing_blocks","Number","sort","current_offset","File","put_on_settings","fs9p_json","add_file","files_to_load","loadable","async","OnJSONLoaded","adapter_bus","emulator_bus","network_adapter","keyboard_adapter","screen_adapter","DummyScreenAdapter","serial_adapter","image_names","fs_url","base_url","starter","lengthComputable","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","V86Starter.prototype.keyboard_send_text","string","V86Starter.prototype.screen_make_screenshot","V86Starter.prototype.screen_set_scale","sx","sy","V86Starter.prototype.screen_go_fullscreen","focus_element","V86Starter.prototype.lock_mouse","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","serial_send_bytes","V86Starter.prototype.serial_send_bytes","V86Starter.prototype.create_file","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","V86Starter.prototype.read_file","graphic_buffer"]
}
